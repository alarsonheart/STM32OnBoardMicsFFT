
OnBoardMics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce50  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013160  0800d010  0800d010  0001d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020170  08020170  00040108  2**0
                  CONTENTS
  4 .ARM          00000000  08020170  08020170  00040108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08020170  08020170  00040108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020170  08020170  00030170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020178  08020178  00030178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08020180  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001994  20000108  08020288  00040108  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20001a9c  08020288  00041a9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00040136  2**0
                  CONTENTS, READONLY
 13 .debug_line   0002aaac  00000000  00000000  000401ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000164  00000000  00000000  0006ac9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000250e4  00000000  00000000  0006adfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000054bd  00000000  00000000  0008fee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001930  00000000  00000000  000953a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ccdb  00000000  00000000  00096cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000011ff  00000000  00000000  002139ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00040dfa  00000000  00000000  00214baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006bd4  00000000  00000000  002559a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004120  00000000  00000000  0025c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000170  00000000  00000000  00260698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000108 	.word	0x20000108
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cff8 	.word	0x0800cff8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	0800cff8 	.word	0x0800cff8

08000200 <__aeabi_frsub>:
 8000200:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__addsf3>
 8000206:	bf00      	nop

08000208 <__aeabi_fsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800020c <__addsf3>:
 800020c:	0042      	lsls	r2, r0, #1
 800020e:	bf1f      	itttt	ne
 8000210:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000214:	ea92 0f03 	teqne	r2, r3
 8000218:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800021c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000220:	d06a      	beq.n	80002f8 <__addsf3+0xec>
 8000222:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000226:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022a:	bfc1      	itttt	gt
 800022c:	18d2      	addgt	r2, r2, r3
 800022e:	4041      	eorgt	r1, r0
 8000230:	4048      	eorgt	r0, r1
 8000232:	4041      	eorgt	r1, r0
 8000234:	bfb8      	it	lt
 8000236:	425b      	neglt	r3, r3
 8000238:	2b19      	cmp	r3, #25
 800023a:	bf88      	it	hi
 800023c:	4770      	bxhi	lr
 800023e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000246:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800024a:	bf18      	it	ne
 800024c:	4240      	negne	r0, r0
 800024e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000252:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000256:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4249      	negne	r1, r1
 800025e:	ea92 0f03 	teq	r2, r3
 8000262:	d03f      	beq.n	80002e4 <__addsf3+0xd8>
 8000264:	f1a2 0201 	sub.w	r2, r2, #1
 8000268:	fa41 fc03 	asr.w	ip, r1, r3
 800026c:	eb10 000c 	adds.w	r0, r0, ip
 8000270:	f1c3 0320 	rsb	r3, r3, #32
 8000274:	fa01 f103 	lsl.w	r1, r1, r3
 8000278:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800027c:	d502      	bpl.n	8000284 <__addsf3+0x78>
 800027e:	4249      	negs	r1, r1
 8000280:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000288:	d313      	bcc.n	80002b2 <__addsf3+0xa6>
 800028a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028e:	d306      	bcc.n	800029e <__addsf3+0x92>
 8000290:	0840      	lsrs	r0, r0, #1
 8000292:	ea4f 0131 	mov.w	r1, r1, rrx
 8000296:	f102 0201 	add.w	r2, r2, #1
 800029a:	2afe      	cmp	r2, #254	; 0xfe
 800029c:	d251      	bcs.n	8000342 <__addsf3+0x136>
 800029e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	ea40 0003 	orr.w	r0, r0, r3
 80002b0:	4770      	bx	lr
 80002b2:	0049      	lsls	r1, r1, #1
 80002b4:	eb40 0000 	adc.w	r0, r0, r0
 80002b8:	3a01      	subs	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c0:	d2ed      	bcs.n	800029e <__addsf3+0x92>
 80002c2:	fab0 fc80 	clz	ip, r0
 80002c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ca:	ebb2 020c 	subs.w	r2, r2, ip
 80002ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d2:	bfaa      	itet	ge
 80002d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002d8:	4252      	neglt	r2, r2
 80002da:	4318      	orrge	r0, r3
 80002dc:	bfbc      	itt	lt
 80002de:	40d0      	lsrlt	r0, r2
 80002e0:	4318      	orrlt	r0, r3
 80002e2:	4770      	bx	lr
 80002e4:	f092 0f00 	teq	r2, #0
 80002e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002ec:	bf06      	itte	eq
 80002ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002f2:	3201      	addeq	r2, #1
 80002f4:	3b01      	subne	r3, #1
 80002f6:	e7b5      	b.n	8000264 <__addsf3+0x58>
 80002f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000300:	bf18      	it	ne
 8000302:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000306:	d021      	beq.n	800034c <__addsf3+0x140>
 8000308:	ea92 0f03 	teq	r2, r3
 800030c:	d004      	beq.n	8000318 <__addsf3+0x10c>
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	bf08      	it	eq
 8000314:	4608      	moveq	r0, r1
 8000316:	4770      	bx	lr
 8000318:	ea90 0f01 	teq	r0, r1
 800031c:	bf1c      	itt	ne
 800031e:	2000      	movne	r0, #0
 8000320:	4770      	bxne	lr
 8000322:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000326:	d104      	bne.n	8000332 <__addsf3+0x126>
 8000328:	0040      	lsls	r0, r0, #1
 800032a:	bf28      	it	cs
 800032c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000330:	4770      	bx	lr
 8000332:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000336:	bf3c      	itt	cc
 8000338:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800033c:	4770      	bxcc	lr
 800033e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000342:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000346:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034a:	4770      	bx	lr
 800034c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000350:	bf16      	itet	ne
 8000352:	4608      	movne	r0, r1
 8000354:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000358:	4601      	movne	r1, r0
 800035a:	0242      	lsls	r2, r0, #9
 800035c:	bf06      	itte	eq
 800035e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000362:	ea90 0f01 	teqeq	r0, r1
 8000366:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800036a:	4770      	bx	lr

0800036c <__aeabi_ui2f>:
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e004      	b.n	800037c <__aeabi_i2f+0x8>
 8000372:	bf00      	nop

08000374 <__aeabi_i2f>:
 8000374:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000378:	bf48      	it	mi
 800037a:	4240      	negmi	r0, r0
 800037c:	ea5f 0c00 	movs.w	ip, r0
 8000380:	bf08      	it	eq
 8000382:	4770      	bxeq	lr
 8000384:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000388:	4601      	mov	r1, r0
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	e01c      	b.n	80003ca <__aeabi_l2f+0x2a>

08000390 <__aeabi_ul2f>:
 8000390:	ea50 0201 	orrs.w	r2, r0, r1
 8000394:	bf08      	it	eq
 8000396:	4770      	bxeq	lr
 8000398:	f04f 0300 	mov.w	r3, #0
 800039c:	e00a      	b.n	80003b4 <__aeabi_l2f+0x14>
 800039e:	bf00      	nop

080003a0 <__aeabi_l2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003ac:	d502      	bpl.n	80003b4 <__aeabi_l2f+0x14>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	ea5f 0c01 	movs.w	ip, r1
 80003b8:	bf02      	ittt	eq
 80003ba:	4684      	moveq	ip, r0
 80003bc:	4601      	moveq	r1, r0
 80003be:	2000      	moveq	r0, #0
 80003c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003c4:	bf08      	it	eq
 80003c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ce:	fabc f28c 	clz	r2, ip
 80003d2:	3a08      	subs	r2, #8
 80003d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003d8:	db10      	blt.n	80003fc <__aeabi_l2f+0x5c>
 80003da:	fa01 fc02 	lsl.w	ip, r1, r2
 80003de:	4463      	add	r3, ip
 80003e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	fa20 f202 	lsr.w	r2, r0, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	f020 0001 	biceq.w	r0, r0, #1
 80003fa:	4770      	bx	lr
 80003fc:	f102 0220 	add.w	r2, r2, #32
 8000400:	fa01 fc02 	lsl.w	ip, r1, r2
 8000404:	f1c2 0220 	rsb	r2, r2, #32
 8000408:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800040c:	fa21 f202 	lsr.w	r2, r1, r2
 8000410:	eb43 0002 	adc.w	r0, r3, r2
 8000414:	bf08      	it	eq
 8000416:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041a:	4770      	bx	lr

0800041c <__aeabi_fmul>:
 800041c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000424:	bf1e      	ittt	ne
 8000426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800042a:	ea92 0f0c 	teqne	r2, ip
 800042e:	ea93 0f0c 	teqne	r3, ip
 8000432:	d06f      	beq.n	8000514 <__aeabi_fmul+0xf8>
 8000434:	441a      	add	r2, r3
 8000436:	ea80 0c01 	eor.w	ip, r0, r1
 800043a:	0240      	lsls	r0, r0, #9
 800043c:	bf18      	it	ne
 800043e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000442:	d01e      	beq.n	8000482 <__aeabi_fmul+0x66>
 8000444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000448:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800044c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000450:	fba0 3101 	umull	r3, r1, r0, r1
 8000454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000458:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800045c:	bf3e      	ittt	cc
 800045e:	0049      	lslcc	r1, r1, #1
 8000460:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000464:	005b      	lslcc	r3, r3, #1
 8000466:	ea40 0001 	orr.w	r0, r0, r1
 800046a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800046e:	2afd      	cmp	r2, #253	; 0xfd
 8000470:	d81d      	bhi.n	80004ae <__aeabi_fmul+0x92>
 8000472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000476:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800047a:	bf08      	it	eq
 800047c:	f020 0001 	biceq.w	r0, r0, #1
 8000480:	4770      	bx	lr
 8000482:	f090 0f00 	teq	r0, #0
 8000486:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800048a:	bf08      	it	eq
 800048c:	0249      	lsleq	r1, r1, #9
 800048e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000492:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000496:	3a7f      	subs	r2, #127	; 0x7f
 8000498:	bfc2      	ittt	gt
 800049a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800049e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004a2:	4770      	bxgt	lr
 80004a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	3a01      	subs	r2, #1
 80004ae:	dc5d      	bgt.n	800056c <__aeabi_fmul+0x150>
 80004b0:	f112 0f19 	cmn.w	r2, #25
 80004b4:	bfdc      	itt	le
 80004b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ba:	4770      	bxle	lr
 80004bc:	f1c2 0200 	rsb	r2, r2, #0
 80004c0:	0041      	lsls	r1, r0, #1
 80004c2:	fa21 f102 	lsr.w	r1, r1, r2
 80004c6:	f1c2 0220 	rsb	r2, r2, #32
 80004ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80004d2:	f140 0000 	adc.w	r0, r0, #0
 80004d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004da:	bf08      	it	eq
 80004dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e0:	4770      	bx	lr
 80004e2:	f092 0f00 	teq	r2, #0
 80004e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ea:	bf02      	ittt	eq
 80004ec:	0040      	lsleq	r0, r0, #1
 80004ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004f2:	3a01      	subeq	r2, #1
 80004f4:	d0f9      	beq.n	80004ea <__aeabi_fmul+0xce>
 80004f6:	ea40 000c 	orr.w	r0, r0, ip
 80004fa:	f093 0f00 	teq	r3, #0
 80004fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000502:	bf02      	ittt	eq
 8000504:	0049      	lsleq	r1, r1, #1
 8000506:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800050a:	3b01      	subeq	r3, #1
 800050c:	d0f9      	beq.n	8000502 <__aeabi_fmul+0xe6>
 800050e:	ea41 010c 	orr.w	r1, r1, ip
 8000512:	e78f      	b.n	8000434 <__aeabi_fmul+0x18>
 8000514:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000518:	ea92 0f0c 	teq	r2, ip
 800051c:	bf18      	it	ne
 800051e:	ea93 0f0c 	teqne	r3, ip
 8000522:	d00a      	beq.n	800053a <__aeabi_fmul+0x11e>
 8000524:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000528:	bf18      	it	ne
 800052a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800052e:	d1d8      	bne.n	80004e2 <__aeabi_fmul+0xc6>
 8000530:	ea80 0001 	eor.w	r0, r0, r1
 8000534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f090 0f00 	teq	r0, #0
 800053e:	bf17      	itett	ne
 8000540:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000544:	4608      	moveq	r0, r1
 8000546:	f091 0f00 	teqne	r1, #0
 800054a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800054e:	d014      	beq.n	800057a <__aeabi_fmul+0x15e>
 8000550:	ea92 0f0c 	teq	r2, ip
 8000554:	d101      	bne.n	800055a <__aeabi_fmul+0x13e>
 8000556:	0242      	lsls	r2, r0, #9
 8000558:	d10f      	bne.n	800057a <__aeabi_fmul+0x15e>
 800055a:	ea93 0f0c 	teq	r3, ip
 800055e:	d103      	bne.n	8000568 <__aeabi_fmul+0x14c>
 8000560:	024b      	lsls	r3, r1, #9
 8000562:	bf18      	it	ne
 8000564:	4608      	movne	r0, r1
 8000566:	d108      	bne.n	800057a <__aeabi_fmul+0x15e>
 8000568:	ea80 0001 	eor.w	r0, r0, r1
 800056c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000578:	4770      	bx	lr
 800057a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800057e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000582:	4770      	bx	lr

08000584 <__aeabi_fdiv>:
 8000584:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000588:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800058c:	bf1e      	ittt	ne
 800058e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000592:	ea92 0f0c 	teqne	r2, ip
 8000596:	ea93 0f0c 	teqne	r3, ip
 800059a:	d069      	beq.n	8000670 <__aeabi_fdiv+0xec>
 800059c:	eba2 0203 	sub.w	r2, r2, r3
 80005a0:	ea80 0c01 	eor.w	ip, r0, r1
 80005a4:	0249      	lsls	r1, r1, #9
 80005a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005aa:	d037      	beq.n	800061c <__aeabi_fdiv+0x98>
 80005ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005bc:	428b      	cmp	r3, r1
 80005be:	bf38      	it	cc
 80005c0:	005b      	lslcc	r3, r3, #1
 80005c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ca:	428b      	cmp	r3, r1
 80005cc:	bf24      	itt	cs
 80005ce:	1a5b      	subcs	r3, r3, r1
 80005d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005d8:	bf24      	itt	cs
 80005da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005e6:	bf24      	itt	cs
 80005e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005f4:	bf24      	itt	cs
 80005f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	bf18      	it	ne
 8000602:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000606:	d1e0      	bne.n	80005ca <__aeabi_fdiv+0x46>
 8000608:	2afd      	cmp	r2, #253	; 0xfd
 800060a:	f63f af50 	bhi.w	80004ae <__aeabi_fmul+0x92>
 800060e:	428b      	cmp	r3, r1
 8000610:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000614:	bf08      	it	eq
 8000616:	f020 0001 	biceq.w	r0, r0, #1
 800061a:	4770      	bx	lr
 800061c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000620:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000624:	327f      	adds	r2, #127	; 0x7f
 8000626:	bfc2      	ittt	gt
 8000628:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800062c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000630:	4770      	bxgt	lr
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	3a01      	subs	r2, #1
 800063c:	e737      	b.n	80004ae <__aeabi_fmul+0x92>
 800063e:	f092 0f00 	teq	r2, #0
 8000642:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000646:	bf02      	ittt	eq
 8000648:	0040      	lsleq	r0, r0, #1
 800064a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800064e:	3a01      	subeq	r2, #1
 8000650:	d0f9      	beq.n	8000646 <__aeabi_fdiv+0xc2>
 8000652:	ea40 000c 	orr.w	r0, r0, ip
 8000656:	f093 0f00 	teq	r3, #0
 800065a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800065e:	bf02      	ittt	eq
 8000660:	0049      	lsleq	r1, r1, #1
 8000662:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000666:	3b01      	subeq	r3, #1
 8000668:	d0f9      	beq.n	800065e <__aeabi_fdiv+0xda>
 800066a:	ea41 010c 	orr.w	r1, r1, ip
 800066e:	e795      	b.n	800059c <__aeabi_fdiv+0x18>
 8000670:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000674:	ea92 0f0c 	teq	r2, ip
 8000678:	d108      	bne.n	800068c <__aeabi_fdiv+0x108>
 800067a:	0242      	lsls	r2, r0, #9
 800067c:	f47f af7d 	bne.w	800057a <__aeabi_fmul+0x15e>
 8000680:	ea93 0f0c 	teq	r3, ip
 8000684:	f47f af70 	bne.w	8000568 <__aeabi_fmul+0x14c>
 8000688:	4608      	mov	r0, r1
 800068a:	e776      	b.n	800057a <__aeabi_fmul+0x15e>
 800068c:	ea93 0f0c 	teq	r3, ip
 8000690:	d104      	bne.n	800069c <__aeabi_fdiv+0x118>
 8000692:	024b      	lsls	r3, r1, #9
 8000694:	f43f af4c 	beq.w	8000530 <__aeabi_fmul+0x114>
 8000698:	4608      	mov	r0, r1
 800069a:	e76e      	b.n	800057a <__aeabi_fmul+0x15e>
 800069c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006a0:	bf18      	it	ne
 80006a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006a6:	d1ca      	bne.n	800063e <__aeabi_fdiv+0xba>
 80006a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006ac:	f47f af5c 	bne.w	8000568 <__aeabi_fmul+0x14c>
 80006b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006b4:	f47f af3c 	bne.w	8000530 <__aeabi_fmul+0x114>
 80006b8:	e75f      	b.n	800057a <__aeabi_fmul+0x15e>
 80006ba:	bf00      	nop

080006bc <__gesf2>:
 80006bc:	f04f 3cff 	mov.w	ip, #4294967295
 80006c0:	e006      	b.n	80006d0 <__cmpsf2+0x4>
 80006c2:	bf00      	nop

080006c4 <__lesf2>:
 80006c4:	f04f 0c01 	mov.w	ip, #1
 80006c8:	e002      	b.n	80006d0 <__cmpsf2+0x4>
 80006ca:	bf00      	nop

080006cc <__cmpsf2>:
 80006cc:	f04f 0c01 	mov.w	ip, #1
 80006d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e0:	bf18      	it	ne
 80006e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006e6:	d011      	beq.n	800070c <__cmpsf2+0x40>
 80006e8:	b001      	add	sp, #4
 80006ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006ee:	bf18      	it	ne
 80006f0:	ea90 0f01 	teqne	r0, r1
 80006f4:	bf58      	it	pl
 80006f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80006fa:	bf88      	it	hi
 80006fc:	17c8      	asrhi	r0, r1, #31
 80006fe:	bf38      	it	cc
 8000700:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000704:	bf18      	it	ne
 8000706:	f040 0001 	orrne.w	r0, r0, #1
 800070a:	4770      	bx	lr
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	d102      	bne.n	8000718 <__cmpsf2+0x4c>
 8000712:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000716:	d105      	bne.n	8000724 <__cmpsf2+0x58>
 8000718:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800071c:	d1e4      	bne.n	80006e8 <__cmpsf2+0x1c>
 800071e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000722:	d0e1      	beq.n	80006e8 <__cmpsf2+0x1c>
 8000724:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <__aeabi_cfrcmple>:
 800072c:	4684      	mov	ip, r0
 800072e:	4608      	mov	r0, r1
 8000730:	4661      	mov	r1, ip
 8000732:	e7ff      	b.n	8000734 <__aeabi_cfcmpeq>

08000734 <__aeabi_cfcmpeq>:
 8000734:	b50f      	push	{r0, r1, r2, r3, lr}
 8000736:	f7ff ffc9 	bl	80006cc <__cmpsf2>
 800073a:	2800      	cmp	r0, #0
 800073c:	bf48      	it	mi
 800073e:	f110 0f00 	cmnmi.w	r0, #0
 8000742:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000744 <__aeabi_fcmpeq>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff fff4 	bl	8000734 <__aeabi_cfcmpeq>
 800074c:	bf0c      	ite	eq
 800074e:	2001      	moveq	r0, #1
 8000750:	2000      	movne	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_fcmplt>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff ffea 	bl	8000734 <__aeabi_cfcmpeq>
 8000760:	bf34      	ite	cc
 8000762:	2001      	movcc	r0, #1
 8000764:	2000      	movcs	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_fcmple>:
 800076c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000770:	f7ff ffe0 	bl	8000734 <__aeabi_cfcmpeq>
 8000774:	bf94      	ite	ls
 8000776:	2001      	movls	r0, #1
 8000778:	2000      	movhi	r0, #0
 800077a:	f85d fb08 	ldr.w	pc, [sp], #8
 800077e:	bf00      	nop

08000780 <__aeabi_fcmpge>:
 8000780:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000784:	f7ff ffd2 	bl	800072c <__aeabi_cfrcmple>
 8000788:	bf94      	ite	ls
 800078a:	2001      	movls	r0, #1
 800078c:	2000      	movhi	r0, #0
 800078e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000792:	bf00      	nop

08000794 <__aeabi_fcmpgt>:
 8000794:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000798:	f7ff ffc8 	bl	800072c <__aeabi_cfrcmple>
 800079c:	bf34      	ite	cc
 800079e:	2001      	movcc	r0, #1
 80007a0:	2000      	movcs	r0, #0
 80007a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a6:	bf00      	nop

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ae:	e003      	b.n	80007b8 <LoopCopyDataInit>

080007b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007b6:	3104      	adds	r1, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80007bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007c0:	d3f6      	bcc.n	80007b0 <CopyDataInit>
	ldr	r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c4:	e002      	b.n	80007cc <LoopFillZerobss>

080007c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c8:	f842 3b04 	str.w	r3, [r2], #4

080007cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <LoopForever+0x16>)
	cmp	r2, r3
 80007ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007d0:	d3f9      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f001 fec7 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f00c fb65 	bl	800cea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f000 f973 	bl	8000ac4 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80007e4:	08020180 	.word	0x08020180
	ldr	r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007ec:	20000108 	.word	0x20000108
	ldr	r2, =_sbss
 80007f0:	20000108 	.word	0x20000108
	ldr	r3, = _ebss
 80007f4:	20001a9c 	.word	0x20001a9c

080007f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_IRQHandler>
	...

080007fc <_sbrk>:
  }
  return len;
}

caddr_t _sbrk(int incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x50>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x16>
  {
    heap_end = &end;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <_sbrk+0x50>)
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <_sbrk+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  prev_heap_end = heap_end;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <_sbrk+0x50>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	60fb      	str	r3, [r7, #12]
  if (heap_end + incr > stack_ptr)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <_sbrk+0x50>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	466a      	mov	r2, sp
 8000822:	4293      	cmp	r3, r2
 8000824:	d907      	bls.n	8000836 <_sbrk+0x3a>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8000826:	f00c fb37 	bl	800ce98 <__errno>
 800082a:	4603      	mov	r3, r0
 800082c:	220c      	movs	r2, #12
 800082e:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	e006      	b.n	8000844 <_sbrk+0x48>
  }

  heap_end += incr;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <_sbrk+0x50>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <_sbrk+0x50>)
 8000840:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000128 	.word	0x20000128
 8000850:	20001aa0 	.word	0x20001aa0

08000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  */



void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  AudioProcess();
 800085c:	f000 f814 	bl	8000888 <AudioProcess>
  BSP_LED_Off(LED1);
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fe7b 	bl	800155c <BSP_LED_Off>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Transfer Complete user callback, called by BSP functions.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  AudioProcess();
 8000876:	f000 f807 	bl	8000888 <AudioProcess>
  BSP_LED_On(LED1);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fe54 	bl	8001528 <BSP_LED_On>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <AudioProcess>:
  * @param  none
  * @retval None
  */

void AudioProcess(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

	// Copy the required samples from PCM_Buffer to fftInput (size 64)
	  for (int i = 0; i < FFT_SIZE; i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
 8000892:	e01b      	b.n	80008cc <AudioProcess+0x44>
	    if (i < 64) {
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b3f      	cmp	r3, #63	; 0x3f
 8000898:	dc0e      	bgt.n	80008b8 <AudioProcess+0x30>
	      fftInput[i] = (float32_t)PCM_Buffer[i]; // Convert the PCM_Buffer data to float for the FFT
 800089a:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <AudioProcess+0x88>)
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <AudioProcess+0x8c>)
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	edc3 7a00 	vstr	s15, [r3]
 80008b6:	e006      	b.n	80008c6 <AudioProcess+0x3e>
	    } else {
	      fftInput[i] = 0.0f; // Zero-pad the remaining elements of fftInput
 80008b8:	4a16      	ldr	r2, [pc, #88]	; (8000914 <AudioProcess+0x8c>)
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < FFT_SIZE; i++) {
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	2b3f      	cmp	r3, #63	; 0x3f
 80008d0:	dde0      	ble.n	8000894 <AudioProcess+0xc>
	    }
	  }

	  // Perform the FFT on the fftInput buffer
	  arm_rfft_fast_instance_f32 fft;
	  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00a fd8e 	bl	800b3f8 <arm_rfft_fast_init_f32>
	  arm_rfft_fast_f32(&fft, fftInput, fftOutput, 0);
 80008dc:	1d38      	adds	r0, r7, #4
 80008de:	2300      	movs	r3, #0
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <AudioProcess+0x90>)
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <AudioProcess+0x8c>)
 80008e4:	f00a fede 	bl	800b6a4 <arm_rfft_fast_f32>
	  arm_cmplx_mag_f32(fftOutput, fftMagnitude, FFT_SIZE / 2);
 80008e8:	2220      	movs	r2, #32
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <AudioProcess+0x94>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <AudioProcess+0x90>)
 80008ee:	f00b fc83 	bl	800c1f8 <arm_cmplx_mag_f32>

	  USBD_LL_Transmit(&fftOut, 0x80U, (uint8_t*)fftOutput, 64);
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	4a08      	ldr	r2, [pc, #32]	; (8000918 <AudioProcess+0x90>)
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <AudioProcess+0x98>)
 80008fa:	f000 fc65 	bl	80011c8 <USBD_LL_Transmit>
	  // Send the processed FFT data to USB
//	  Send_Audio_to_USB((int16_t *)fftOutput, FFT_SIZE); //I do not know why this messes up my recording in Audacity
  Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY / 1000)*AUDIO_IN_CHANNELS * N_MS_PER_INTERRUPT);
 80008fe:	2160      	movs	r1, #96	; 0x60
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <AudioProcess+0x88>)
 8000902:	f000 fa21 	bl	8000d48 <Send_Audio_to_USB>
}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200003c0 	.word	0x200003c0
 8000914:	2000012c 	.word	0x2000012c
 8000918:	2000022c 	.word	0x2000022c
 800091c:	2000032c 	.word	0x2000032c
 8000920:	2000075c 	.word	0x2000075c

08000924 <Init_Acquisition_Peripherals>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Init_Acquisition_Peripherals(uint32_t AudioFreq, uint32_t Device, uint32_t ChnlNbr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  MicParams.BitsPerSample = 16;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <Init_Acquisition_Peripherals+0x44>)
 8000932:	2210      	movs	r2, #16
 8000934:	609a      	str	r2, [r3, #8]
  MicParams.ChannelsNbr = ChnlNbr;
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <Init_Acquisition_Peripherals+0x44>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60d3      	str	r3, [r2, #12]
  MicParams.Device = Device;
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <Init_Acquisition_Peripherals+0x44>)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	6013      	str	r3, [r2, #0]
  MicParams.SampleRate = AudioFreq;
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <Init_Acquisition_Peripherals+0x44>)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6053      	str	r3, [r2, #4]
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <Init_Acquisition_Peripherals+0x44>)
 800094a:	2240      	movs	r2, #64	; 0x40
 800094c:	611a      	str	r2, [r3, #16]

  if (BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 800094e:	4906      	ldr	r1, [pc, #24]	; (8000968 <Init_Acquisition_Peripherals+0x44>)
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fe1d 	bl	8001590 <BSP_AUDIO_IN_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <Init_Acquisition_Peripherals+0x3c>
  {
    Error_Handler();
 800095c:	f000 f816 	bl	800098c <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200003ac 	.word	0x200003ac

0800096c <Start_Acquisition>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Start_Acquisition(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  if (BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE) != BSP_ERROR_NONE)
 8000970:	2260      	movs	r2, #96	; 0x60
 8000972:	4905      	ldr	r1, [pc, #20]	; (8000988 <Start_Acquisition+0x1c>)
 8000974:	2001      	movs	r0, #1
 8000976:	f001 f847 	bl	8001a08 <BSP_AUDIO_IN_Record>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <Start_Acquisition+0x18>
  {
    Error_Handler();
 8000980:	f000 f804 	bl	800098c <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200003c0 	.word	0x200003c0

0800098c <Error_Handler>:



void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  while (1);
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x4>
	...

08000994 <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0be      	sub	sp, #248	; 0xf8
 8000998:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f005 fb28 	bl	8005ff0 <HAL_PWREx_ControlVoltageScaling>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }
  /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 80009a0:	f005 faf6 	bl	8005f90 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009a4:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <SystemClock_Config+0x124>)
 80009a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009aa:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <SystemClock_Config+0x124>)
 80009ac:	f023 0318 	bic.w	r3, r3, #24
 80009b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 80009b4:	2335      	movs	r3, #53	; 0x35
 80009b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                                     | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009c2:	2301      	movs	r3, #1
 80009c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009d4:	23b0      	movs	r3, #176	; 0xb0
 80009d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e0:	2303      	movs	r3, #3
 80009e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009f2:	233c      	movs	r3, #60	; 0x3c
 80009f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 fba2 	bl	8006158 <HAL_RCC_OscConfig>
//    _Error_Handler(__FILE__, __LINE__);
  }

  /**Initializes the CPU, AHB and APB buses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a36:	2105      	movs	r1, #5
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 ffb7 	bl	80069ac <HAL_RCC_ClockConfig>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_DFSDM1
 8000a3e:	f44f 33b4 	mov.w	r3, #92160	; 0x16800
 8000a42:	607b      	str	r3, [r7, #4]
                                       | RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a56:	2300      	movs	r3, #0
 8000a58:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000a62:	2360      	movs	r3, #96	; 0x60
 8000a64:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8000a66:	2319      	movs	r3, #25
 8000a68:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK | RCC_PLLSAI1_SAI1CLK;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <SystemClock_Config+0x128>)
 8000a74:	623b      	str	r3, [r7, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f006 fa4d 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a84:	2000      	movs	r0, #0
 8000a86:	f006 f8bd 	bl	8006c04 <HAL_RCC_MCOConfig>

  /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000a8a:	f006 f979 	bl	8006d80 <HAL_RCC_GetHCLKFreq>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <SystemClock_Config+0x12c>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	099b      	lsrs	r3, r3, #6
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 f808 	bl	8003aae <HAL_SYSTICK_Config>

  /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a9e:	2004      	movs	r0, #4
 8000aa0:	f003 f812 	bl	8003ac8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f002 ffd5 	bl	8003a5a <HAL_NVIC_SetPriority>
}
 8000ab0:	bf00      	nop
 8000ab2:	37f8      	adds	r7, #248	; 0xf8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	01010000 	.word	0x01010000
 8000ac0:	10624dd3 	.word	0x10624dd3

08000ac4 <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000aca:	f001 fd5d 	bl	8002588 <HAL_Init>

  USBD_LL_Init(&fftOut);
 8000ace:	4823      	ldr	r0, [pc, #140]	; (8000b5c <main+0x98>)
 8000ad0:	f000 fa7e 	bl	8000fd0 <USBD_LL_Init>
  USBD_LL_Start(&fftOut);
 8000ad4:	4821      	ldr	r0, [pc, #132]	; (8000b5c <main+0x98>)
 8000ad6:	f000 fac3 	bl	8001060 <USBD_LL_Start>
  USBD_LL_OpenEP(&fftOut, 0x80U, USBD_EP_TYPE_BULK, 64);
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	2202      	movs	r2, #2
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <main+0x98>)
 8000ae2:	f000 facc 	bl	800107e <USBD_LL_OpenEP>


  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <main+0x9c>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <main+0x9c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <main+0x9c>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  /* enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 8000afe:	f005 fb1b 	bl	8006138 <HAL_PWREx_EnableVddUSB>

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f7ff ff47 	bl	8000994 <SystemClock_Config>

  BSP_LED_Init(LED2);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 fccc 	bl	80014a4 <BSP_LED_Init>
  BSP_LED_Off(LED2);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fd25 	bl	800155c <BSP_LED_Off>
  BSP_LED_Init(LED1);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 fcc6 	bl	80014a4 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 fd1f 	bl	800155c <BSP_LED_Off>

  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 8000b1e:	2202      	movs	r2, #2
 8000b20:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <main+0xa0>)
 8000b26:	f008 fddf 	bl	80096e8 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	490e      	ldr	r1, [pc, #56]	; (8000b68 <main+0xa4>)
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <main+0xa0>)
 8000b30:	f009 f8fe 	bl	8009d30 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 8000b34:	490d      	ldr	r1, [pc, #52]	; (8000b6c <main+0xa8>)
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <main+0xa0>)
 8000b38:	f009 f92a 	bl	8009d90 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <main+0xac>)
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <main+0xa0>)
 8000b40:	f008 fdbe 	bl	80096c0 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <main+0xa0>)
 8000b46:	f009 f959 	bl	8009dfc <USBD_Start>

  /* Start audio acquisition and streaming */

#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, ACTIVE_MICROPHONES_MASK, AUDIO_IN_CHANNELS);
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000b52:	f7ff fee7 	bl	8000924 <Init_Acquisition_Peripherals>
  Start_Acquisition();
 8000b56:	f7ff ff09 	bl	800096c <Start_Acquisition>
//  HAL_Delay(5000);
#endif

  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <main+0x96>
 8000b5c:	2000075c 	.word	0x2000075c
 8000b60:	40021000 	.word	0x40021000
 8000b64:	20000480 	.word	0x20000480
 8000b68:	20000024 	.word	0x20000024
 8000b6c:	20000074 	.word	0x20000074
 8000b70:	20000000 	.word	0x20000000

08000b74 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000bb6:	f001 fd4b 	bl	8002650 <HAL_IncTick>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <OTG_FS_IRQHandler+0x10>)
 8000bc6:	f004 fa80 	bl	80050ca <HAL_PCD_IRQHandler>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000b2c 	.word	0x20000b2c

08000bd4 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(ADC1_Handle.DMA_Handle);
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <DMA1_Channel1_IRQHandler+0x14>)
 8000bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 fe28 	bl	8004832 <HAL_DMA_IRQHandler>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000108c 	.word	0x2000108c

08000bec <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AMic_OnBoard_DfsdmFilter.hdmaReg);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <DMA1_Channel4_IRQHandler+0x14>)
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fe1c 	bl	8004832 <HAL_DMA_IRQHandler>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20001190 	.word	0x20001190

08000c04 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&DMic_OnBoard_Dma);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DMA1_Channel7_IRQHandler+0x10>)
 8000c0a:	f003 fe12 	bl	8004832 <HAL_DMA_IRQHandler>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20001488 	.word	0x20001488

08000c18 <DFSDM1_FLT0_IRQHandler>:

void DFSDM1_FLT0_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  HAL_DFSDM_IRQHandler(&DMic_OnBoard_DfsdmFilter);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DFSDM1_FLT0_IRQHandler+0x10>)
 8000c1e:	f003 f9f9 	bl	8004014 <HAL_DFSDM_IRQHandler>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200013fc 	.word	0x200013fc

08000c2c <DFSDM1_FLT1_IRQHandler>:

void DFSDM1_FLT1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  HAL_DFSDM_IRQHandler(&AMic_OnBoard_DfsdmFilter);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <DFSDM1_FLT1_IRQHandler+0x10>)
 8000c32:	f003 f9ef 	bl	8004014 <HAL_DFSDM_IRQHandler>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20001190 	.word	0x20001190

08000c40 <Audio_Init>:
  * @param  BitRes: desired bit resolution
  * @param  ChnlNbr: number of channel to be configured
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  MicParams.SampleRate = AudioFreq;
  MicParams.Volume = AUDIO_VOLUME_INPUT;

  return BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
 8000c4c:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <Audio_DeInit>:
  * @brief  De-Initializes the AUDIO media low layer.
  * @param  options: Reserved for future use
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_DeInit(uint32_t options)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_DeInit(BSP_AUDIO_IN_INSTANCE);
#else
  return BSP_ERROR_NONE;
 8000c62:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <Audio_Record>:
/**
  * @brief  Start audio recording engine
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Record(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE);
#else
  return BSP_ERROR_NONE;
 8000c74:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <Audio_VolumeCtl>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: Volume level
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_VolumeCtl(int16_t Volume)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
  /* Call low layer volume setting function */
  uint32_t j = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  uint32_t mic_instance;

  /* Find the setting nearest to the desired setting */
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000c8e:	e002      	b.n	8000c96 <Audio_VolumeCtl+0x16>
  {
    j++;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b3f      	cmp	r3, #63	; 0x3f
 8000c9a:	d817      	bhi.n	8000ccc <Audio_VolumeCtl+0x4c>
 8000c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca0:	4910      	ldr	r1, [pc, #64]	; (8000ce4 <Audio_VolumeCtl+0x64>)
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000cae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb6:	68f9      	ldr	r1, [r7, #12]
 8000cb8:	3101      	adds	r1, #1
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <Audio_VolumeCtl+0x64>)
 8000cbc:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dce1      	bgt.n	8000c90 <Audio_VolumeCtl+0x10>
  }
  mic_instance = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  /* Now do the volume adjustment */
  return BSP_AUDIO_IN_SetVolume(mic_instance, j);
 8000cd0:	68f9      	ldr	r1, [r7, #12]
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f000 ff00 	bl	8001ad8 <BSP_AUDIO_IN_SetVolume>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b25b      	sxtb	r3, r3


}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	0800d010 	.word	0x0800d010

08000ce8 <Audio_MuteCtl>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: Command opcode
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_MuteCtl(uint8_t cmd)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <Audio_Stop>:
  * @brief  Stops audio acquisition
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Stop(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_Stop(1U);
#else
  return BSP_ERROR_NONE;
 8000d04:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <Audio_Pause>:
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */

static int8_t Audio_Pause(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <Audio_Resume>:
  * @brief  Resumes audio acquisition
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Resume(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return BSP_ERROR_NONE;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <Audio_CommandMgr>:
  * @param  None
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */

static int8_t Audio_CommandMgr(uint8_t cmd)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <Send_Audio_to_USB>:
  *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
  *       you can pass 16 PCM samples if the function is called each millisecond,
  *       32 samples if called every 2 milliseconds and so on.
  */
void Send_Audio_to_USB(int16_t *audioData, uint16_t PCMSamples)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	461a      	mov	r2, r3
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <Send_Audio_to_USB+0x20>)
 8000d5c:	f008 fbdc 	bl	8009518 <USBD_AUDIO_Data_Transfer>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000480 	.word	0x20000480

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;

  if (hpcd->Instance == USB_OTG_FS)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd0:	d131      	bne.n	8000e36 <HAL_PCD_MspInit+0x76>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000dea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f003 fe61 	bl	8004ad0 <HAL_GPIO_Init>

    /* Enable USB FS Clocks */
    __USB_OTG_FS_CLK_ENABLE();
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2104      	movs	r1, #4
 8000e2a:	2043      	movs	r0, #67	; 0x43
 8000e2c:	f002 fe15 	bl	8003a5a <HAL_NVIC_SetPriority>

    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000e30:	2043      	movs	r0, #67	; 0x43
 8000e32:	f002 fe2e 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_PCD_SetupStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	f009 f81b 	bl	8009e96 <USBD_LL_SetupStage>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_PCD_DataOutStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8000e7a:	78fa      	ldrb	r2, [r7, #3]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f009 f855 	bl	8009f40 <USBD_LL_DataOutStage>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_PCD_DataInStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8000eb0:	78fa      	ldrb	r2, [r7, #3]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3348      	adds	r3, #72	; 0x48
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f009 f8ee 	bl	800a0a6 <USBD_LL_DataInStage>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f009 fa22 	bl	800a32a <USBD_LL_SOF>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_PCD_ResetCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000efc:	4618      	mov	r0, r3
 8000efe:	f009 f984 	bl	800a20a <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f009 f9cf 	bl	800a2ae <USBD_LL_SetSpeed>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_PCD_SuspendCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f26:	4618      	mov	r0, r3
 8000f28:	f009 f9d1 	bl	800a2ce <USBD_LL_Suspend>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_PCD_ResumeCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f42:	4618      	mov	r0, r3
 8000f44:	f009 f9d9 	bl	800a2fa <USBD_LL_Resume>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f009 fa31 	bl	800a3ce <USBD_LL_IsoOUTIncomplete>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_PCD_ISOINIncompleteCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 f9ed 	bl	800a36a <USBD_LL_IsoINIncomplete>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_PCD_ConnectCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f009 fa43 	bl	800a432 <USBD_LL_DevConnected>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_PCD_DisconnectCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 fa40 	bl	800a448 <USBD_LL_DevDisconnected>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <USBD_LL_Init>:
  *         Initialize the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Change Systick prioity */
  NVIC_SetPriority(SysTick_IRQn, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	f7ff fec5 	bl	8000d6c <__NVIC_SetPriority>

  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <USBD_LL_Init+0x8c>)
 8000fe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe8:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 8;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <USBD_LL_Init+0x8c>)
 8000fec:	2208      	movs	r2, #8
 8000fee:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <USBD_LL_Init+0x8c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <USBD_LL_Init+0x8c>)
 8000ff8:	2240      	movs	r2, #64	; 0x40
 8000ffa:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <USBD_LL_Init+0x8c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <USBD_LL_Init+0x8c>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <USBD_LL_Init+0x8c>)
 800100a:	2202      	movs	r2, #2
 800100c:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <USBD_LL_Init+0x8c>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <USBD_LL_Init+0x8c>)
 8001016:	2202      	movs	r2, #2
 8001018:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <USBD_LL_Init+0x8c>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <USBD_LL_Init+0x8c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <USBD_LL_Init+0x8c>)
 800102c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <USBD_LL_Init+0x8c>)
 8001032:	f003 fef7 	bl	8004e24 <HAL_PCD_Init>

  HAL_PCD_SetRxFiFo(&hpcd, 0x36);
 8001036:	2136      	movs	r1, #54	; 0x36
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <USBD_LL_Init+0x8c>)
 800103a:	f004 ff68 	bl	8005f0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x32);
 800103e:	2232      	movs	r2, #50	; 0x32
 8001040:	2100      	movs	r1, #0
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <USBD_LL_Init+0x8c>)
 8001044:	f004 ff1c 	bl	8005e80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0xC8);
 8001048:	22c8      	movs	r2, #200	; 0xc8
 800104a:	2101      	movs	r1, #1
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <USBD_LL_Init+0x8c>)
 800104e:	f004 ff17 	bl	8005e80 <HAL_PCDEx_SetTxFiFo>


  return USBD_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000b2c 	.word	0x20000b2c

08001060 <USBD_LL_Start>:
  *         Start the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fffc 	bl	800506c <HAL_PCD_Start>
  return USBD_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint Type
  * @param  ep_mps: Endpoint Max Packet Size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	4608      	mov	r0, r1
 8001088:	4611      	mov	r1, r2
 800108a:	461a      	mov	r2, r3
 800108c:	4603      	mov	r3, r0
 800108e:	70fb      	strb	r3, [r7, #3]
 8001090:	460b      	mov	r3, r1
 8001092:	70bb      	strb	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800109e:	78bb      	ldrb	r3, [r7, #2]
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	78f9      	ldrb	r1, [r7, #3]
 80010a4:	f004 fbcf 	bl	8005846 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);

  return USBD_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <USBD_LL_CloseEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 fc24 	bl	8005916 <HAL_PCD_EP_Close>
  return USBD_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <USBD_LL_FlushEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80010ea:	78fa      	ldrb	r2, [r7, #3]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fd8e 	bl	8005c10 <HAL_PCD_EP_Flush>
  return USBD_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <USBD_LL_StallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fcc3 	bl	8005aa0 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <USBD_LL_ClearStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001136:	78fa      	ldrb	r2, [r7, #3]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fd12 	bl	8005b64 <HAL_PCD_EP_ClrStall>
  return USBD_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <USBD_LL_IsStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800115c:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800115e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001162:	2b00      	cmp	r3, #0
 8001164:	da0b      	bge.n	800117e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	333e      	adds	r3, #62	; 0x3e
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	e00b      	b.n	8001196 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001184:	68f9      	ldr	r1, [r7, #12]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001194:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80011b4:	78fa      	ldrb	r2, [r7, #3]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fb1f 	bl	80057fc <HAL_PCD_SetAddress>
  return USBD_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <USBD_LL_Transmit>:
  * @param  pbuf:pointer to data to be sent
  * @param  size: data size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80011de:	7af9      	ldrb	r1, [r7, #11]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	f004 fc1f 	bl	8005a26 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf:pointer to data to be received
  * @param  size: data size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	460b      	mov	r3, r1
 8001200:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001208:	7af9      	ldrb	r1, [r7, #11]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	f004 fbcc 	bl	80059aa <HAL_PCD_EP_Receive>
  return USBD_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <USBD_AUDIO_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(hUSBDDeviceDesc);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2212      	movs	r2, #18
 800122c:	801a      	strh	r2, [r3, #0]
  return hUSBDDeviceDesc;
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <USBD_AUDIO_DeviceDescriptor+0x20>)
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000040 	.word	0x20000040

08001240 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2204      	movs	r2, #4
 8001250:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <USBD_AUDIO_LangIDStrDescriptor+0x20>)
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000054 	.word	0x20000054

08001264 <USBD_AUDIO_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if (speed == 0)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <USBD_AUDIO_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <USBD_AUDIO_ProductStrDescriptor+0x38>)
 800127c:	f009 ff14 	bl	800b0a8 <USBD_GetString>
 8001280:	e004      	b.n	800128c <USBD_AUDIO_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <USBD_AUDIO_ProductStrDescriptor+0x3c>)
 8001288:	f009 ff0e 	bl	800b0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <USBD_AUDIO_ProductStrDescriptor+0x34>)
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000f34 	.word	0x20000f34
 800129c:	0800d094 	.word	0x0800d094
 80012a0:	0800d0b8 	.word	0x0800d0b8

080012a4 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4904      	ldr	r1, [pc, #16]	; (80012c4 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <USBD_AUDIO_ManufacturerStrDescriptor+0x24>)
 80012b6:	f009 fef7 	bl	800b0a8 <USBD_GetString>
  return USBD_StrDesc;
 80012ba:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000f34 	.word	0x20000f34
 80012c8:	0800d0dc 	.word	0x0800d0dc

080012cc <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d105      	bne.n	80012ea <USBD_AUDIO_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <USBD_AUDIO_SerialStrDescriptor+0x38>)
 80012e4:	f009 fee0 	bl	800b0a8 <USBD_GetString>
 80012e8:	e004      	b.n	80012f4 <USBD_AUDIO_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4904      	ldr	r1, [pc, #16]	; (8001300 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 80012f0:	f009 feda 	bl	800b0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <USBD_AUDIO_SerialStrDescriptor+0x34>)
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000f34 	.word	0x20000f34
 8001304:	0800d0f0 	.word	0x0800d0f0
 8001308:	0800d100 	.word	0x0800d100

0800130c <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <USBD_AUDIO_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 8001324:	f009 fec0 	bl	800b0a8 <USBD_GetString>
 8001328:	e004      	b.n	8001334 <USBD_AUDIO_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4904      	ldr	r1, [pc, #16]	; (8001340 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 8001330:	f009 feba 	bl	800b0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000f34 	.word	0x20000f34
 8001344:	0800d110 	.word	0x0800d110

08001348 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if (speed == 0)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <USBD_AUDIO_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 8001360:	f009 fea2 	bl	800b0a8 <USBD_GetString>
 8001364:	e004      	b.n	8001370 <USBD_AUDIO_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4904      	ldr	r1, [pc, #16]	; (800137c <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 800136c:	f009 fe9c 	bl	800b0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000f34 	.word	0x20000f34
 8001380:	0800d120 	.word	0x0800d120

08001384 <BSP_ADC1_Initialization>:
  * @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
  * @retval BSP_ERROR_NONE in case of success
  * @retval BSP_ERROR_PERIPH_FAILURE in case of failures
  */
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if (ADC_UsedFor == ADC1_NOT_USED)
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <BSP_ADC1_Initialization+0xd0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d152      	bne.n	800143c <BSP_ADC1_Initialization+0xb8>
  {

    /**Common config */
    ADC1_Handle.Instance = ADC1;
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 8001398:	4a30      	ldr	r2, [pc, #192]	; (800145c <BSP_ADC1_Initialization+0xd8>)
 800139a:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1;
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 8001406:	2200      	movs	r2, #0
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 800140c:	2201      	movs	r2, #1
 800140e:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 8001412:	2204      	movs	r2, #4
 8001414:	64da      	str	r2, [r3, #76]	; 0x4c

    if (HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 8001418:	f001 fb4c 	bl	8002ab4 <HAL_ADC_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001422:	f06f 0303 	mvn.w	r3, #3
 8001426:	e011      	b.n	800144c <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8001428:	217f      	movs	r1, #127	; 0x7f
 800142a:	480b      	ldr	r0, [pc, #44]	; (8001458 <BSP_ADC1_Initialization+0xd4>)
 800142c:	f002 f9da 	bl	80037e4 <HAL_ADCEx_Calibration_Start>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001436:	f06f 0303 	mvn.w	r3, #3
 800143a:	e007      	b.n	800144c <BSP_ADC1_Initialization+0xc8>
    }
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <BSP_ADC1_Initialization+0xd0>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4313      	orrs	r3, r2
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <BSP_ADC1_Initialization+0xd0>)
 8001448:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200010f4 	.word	0x200010f4
 8001458:	2000108c 	.word	0x2000108c
 800145c:	50040000 	.word	0x50040000

08001460 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hDfsdmFilter ADC handle
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_ADC_MspInit+0x40>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <HAL_ADC_MspInit+0x40>)
 800146e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_ADC_MspInit+0x40>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_ADC_MspInit+0x40>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_ADC_MspInit+0x40>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000

080014a4 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <BSP_LED_Init+0x2a>
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <BSP_LED_Init+0x78>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <BSP_LED_Init+0x78>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <BSP_LED_Init+0x78>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	e00b      	b.n	80014e6 <BSP_LED_Init+0x42>
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <BSP_LED_Init+0x78>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <BSP_LED_Init+0x78>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <BSP_LED_Init+0x78>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <BSP_LED_Init+0x7c>)
 80014ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <BSP_LED_Init+0x80>)
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	f107 0214 	add.w	r2, r7, #20
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fae0 	bl	8004ad0 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	0800d138 	.word	0x0800d138
 8001524:	2000005c 	.word	0x2000005c

08001528 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <BSP_LED_On+0x2c>)
 8001536:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <BSP_LED_On+0x30>)
 800153e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001542:	2201      	movs	r2, #1
 8001544:	4619      	mov	r1, r3
 8001546:	f003 fc55 	bl	8004df4 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000005c 	.word	0x2000005c
 8001558:	0800d138 	.word	0x0800d138

0800155c <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <BSP_LED_Off+0x2c>)
 800156a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <BSP_LED_Off+0x30>)
 8001572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	f003 fc3b 	bl	8004df4 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000005c 	.word	0x2000005c
 800158c:	0800d138 	.word	0x0800d138

08001590 <BSP_AUDIO_IN_Init>:
/** @defgroup STWIN_AUDIO_IN_Exported_Functions
  * @{
  */

__weak int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	; 0x40
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d902      	bls.n	80015a6 <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 80015a0:	f06f 0301 	mvn.w	r3, #1
 80015a4:	e21e      	b.n	80019e4 <BSP_AUDIO_IN_Init+0x454>
  }
  else
  {
    /* Store the audio record context */
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	49a7      	ldr	r1, [pc, #668]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	204c      	movs	r0, #76	; 0x4c
 80015b0:	fb00 f303 	mul.w	r3, r0, r3
 80015b4:	440b      	add	r3, r1
 80015b6:	3304      	adds	r3, #4
 80015b8:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	49a2      	ldr	r1, [pc, #648]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	204c      	movs	r0, #76	; 0x4c
 80015c4:	fb00 f303 	mul.w	r3, r0, r3
 80015c8:	440b      	add	r3, r1
 80015ca:	3310      	adds	r3, #16
 80015cc:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	499d      	ldr	r1, [pc, #628]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	204c      	movs	r0, #76	; 0x4c
 80015d8:	fb00 f303 	mul.w	r3, r0, r3
 80015dc:	440b      	add	r3, r1
 80015de:	3308      	adds	r3, #8
 80015e0:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	4998      	ldr	r1, [pc, #608]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	204c      	movs	r0, #76	; 0x4c
 80015ec:	fb00 f303 	mul.w	r3, r0, r3
 80015f0:	440b      	add	r3, r1
 80015f2:	330c      	adds	r3, #12
 80015f4:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	4993      	ldr	r1, [pc, #588]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	204c      	movs	r0, #76	; 0x4c
 8001600:	fb00 f303 	mul.w	r3, r0, r3
 8001604:	440b      	add	r3, r1
 8001606:	3320      	adds	r3, #32
 8001608:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 800160a:	4a8f      	ldr	r2, [pc, #572]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	214c      	movs	r1, #76	; 0x4c
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	3324      	adds	r3, #36	; 0x24
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

    if (Instance == 0U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <BSP_AUDIO_IN_Init+0x98>
    {
      return BSP_ERROR_WRONG_PARAM;
 8001622:	f06f 0301 	mvn.w	r3, #1
 8001626:	e1dd      	b.n	80019e4 <BSP_AUDIO_IN_Init+0x454>
    }
    else
    {
      if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001628:	4a87      	ldr	r2, [pc, #540]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	214c      	movs	r1, #76	; 0x4c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8181 	beq.w	8001944 <BSP_AUDIO_IN_Init+0x3b4>
      {
        MX_DFSDM_Config dfsdm_config;

        DMic_OnBoard_DfsdmChannel.Instance = DMIC_ONBOARD_CHANNEL;
 8001642:	4b82      	ldr	r3, [pc, #520]	; (800184c <BSP_AUDIO_IN_Init+0x2bc>)
 8001644:	4a82      	ldr	r2, [pc, #520]	; (8001850 <BSP_AUDIO_IN_Init+0x2c0>)
 8001646:	601a      	str	r2, [r3, #0]
        DMic_OnBoard_DfsdmFilter.Instance  = DMIC_ONBOARD_FILTER;
 8001648:	4b82      	ldr	r3, [pc, #520]	; (8001854 <BSP_AUDIO_IN_Init+0x2c4>)
 800164a:	4a83      	ldr	r2, [pc, #524]	; (8001858 <BSP_AUDIO_IN_Init+0x2c8>)
 800164c:	601a      	str	r2, [r3, #0]

        DFSDM_FilterMspInit(&DMic_OnBoard_DfsdmFilter);
 800164e:	4881      	ldr	r0, [pc, #516]	; (8001854 <BSP_AUDIO_IN_Init+0x2c4>)
 8001650:	f000 fe7e 	bl	8002350 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&DMic_OnBoard_DfsdmChannel);
 8001654:	487d      	ldr	r0, [pc, #500]	; (800184c <BSP_AUDIO_IN_Init+0x2bc>)
 8001656:	f000 fe1f 	bl	8002298 <DFSDM_ChannelMspInit>

        dfsdm_config.FilterInstance  = DMIC_ONBOARD_FILTER;
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <BSP_AUDIO_IN_Init+0x2c8>)
 800165c:	60fb      	str	r3, [r7, #12]
        dfsdm_config.ChannelInstance = DMIC_ONBOARD_CHANNEL;
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <BSP_AUDIO_IN_Init+0x2c0>)
 8001660:	61fb      	str	r3, [r7, #28]
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_5;
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <BSP_AUDIO_IN_Init+0x2cc>)
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
        dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
        dfsdm_config.DmaMode         = DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        dfsdm_config.Activation      = ENABLE;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800167e:	2300      	movs	r3, #0
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 8001682:	4a71      	ldr	r2, [pc, #452]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	214c      	movs	r1, #76	; 0x4c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	3308      	adds	r3, #8
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001696:	d02e      	beq.n	80016f6 <BSP_AUDIO_IN_Init+0x166>
 8001698:	4a6b      	ldr	r2, [pc, #428]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	214c      	movs	r1, #76	; 0x4c
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	3308      	adds	r3, #8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d01f      	beq.n	80016f0 <BSP_AUDIO_IN_Init+0x160>
 80016b0:	4a65      	ldr	r2, [pc, #404]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	214c      	movs	r1, #76	; 0x4c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	3308      	adds	r3, #8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80016c4:	d011      	beq.n	80016ea <BSP_AUDIO_IN_Init+0x15a>
 80016c6:	4a60      	ldr	r2, [pc, #384]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	214c      	movs	r1, #76	; 0x4c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	3308      	adds	r3, #8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f245 6222 	movw	r2, #22050	; 0x5622
 80016da:	4293      	cmp	r3, r2
 80016dc:	d102      	bne.n	80016e4 <BSP_AUDIO_IN_Init+0x154>
 80016de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016e2:	e00a      	b.n	80016fa <BSP_AUDIO_IN_Init+0x16a>
 80016e4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80016e8:	e007      	b.n	80016fa <BSP_AUDIO_IN_Init+0x16a>
 80016ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016ee:	e004      	b.n	80016fa <BSP_AUDIO_IN_Init+0x16a>
 80016f0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80016f4:	e001      	b.n	80016fa <BSP_AUDIO_IN_Init+0x16a>
 80016f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016fa:	617b      	str	r3, [r7, #20]
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	214c      	movs	r1, #76	; 0x4c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3308      	adds	r3, #8
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001710:	d054      	beq.n	80017bc <BSP_AUDIO_IN_Init+0x22c>
 8001712:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	214c      	movs	r1, #76	; 0x4c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3308      	adds	r3, #8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001726:	4293      	cmp	r3, r2
 8001728:	d045      	beq.n	80017b6 <BSP_AUDIO_IN_Init+0x226>
 800172a:	4a47      	ldr	r2, [pc, #284]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	214c      	movs	r1, #76	; 0x4c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	3308      	adds	r3, #8
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800173e:	d038      	beq.n	80017b2 <BSP_AUDIO_IN_Init+0x222>
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	214c      	movs	r1, #76	; 0x4c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3308      	adds	r3, #8
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f245 6222 	movw	r2, #22050	; 0x5622
 8001754:	4293      	cmp	r3, r2
 8001756:	d02a      	beq.n	80017ae <BSP_AUDIO_IN_Init+0x21e>
 8001758:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	214c      	movs	r1, #76	; 0x4c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3308      	adds	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800176c:	d01d      	beq.n	80017aa <BSP_AUDIO_IN_Init+0x21a>
 800176e:	4a36      	ldr	r2, [pc, #216]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	214c      	movs	r1, #76	; 0x4c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3308      	adds	r3, #8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001782:	4293      	cmp	r3, r2
 8001784:	d00f      	beq.n	80017a6 <BSP_AUDIO_IN_Init+0x216>
 8001786:	4a30      	ldr	r2, [pc, #192]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	214c      	movs	r1, #76	; 0x4c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	3308      	adds	r3, #8
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <BSP_AUDIO_IN_Init+0x212>
 800179e:	2340      	movs	r3, #64	; 0x40
 80017a0:	e00e      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017a2:	2320      	movs	r3, #32
 80017a4:	e00c      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	e00a      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	e008      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	e006      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	e004      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	e001      	b.n	80017c0 <BSP_AUDIO_IN_Init+0x230>
 80017bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c0:	61bb      	str	r3, [r7, #24]
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	214c      	movs	r1, #76	; 0x4c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80017d6:	d045      	beq.n	8001864 <BSP_AUDIO_IN_Init+0x2d4>
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	214c      	movs	r1, #76	; 0x4c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3308      	adds	r3, #8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80017ec:	d029      	beq.n	8001842 <BSP_AUDIO_IN_Init+0x2b2>
 80017ee:	4a16      	ldr	r2, [pc, #88]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	214c      	movs	r1, #76	; 0x4c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3308      	adds	r3, #8
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001802:	d01c      	beq.n	800183e <BSP_AUDIO_IN_Init+0x2ae>
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	214c      	movs	r1, #76	; 0x4c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3308      	adds	r3, #8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001818:	4293      	cmp	r3, r2
 800181a:	d00e      	beq.n	800183a <BSP_AUDIO_IN_Init+0x2aa>
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <BSP_AUDIO_IN_Init+0x2b8>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	214c      	movs	r1, #76	; 0x4c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3308      	adds	r3, #8
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <BSP_AUDIO_IN_Init+0x2d0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <BSP_AUDIO_IN_Init+0x2a6>
 8001832:	2304      	movs	r3, #4
 8001834:	e017      	b.n	8001866 <BSP_AUDIO_IN_Init+0x2d6>
 8001836:	2302      	movs	r3, #2
 8001838:	e015      	b.n	8001866 <BSP_AUDIO_IN_Init+0x2d6>
 800183a:	2304      	movs	r3, #4
 800183c:	e013      	b.n	8001866 <BSP_AUDIO_IN_Init+0x2d6>
 800183e:	2306      	movs	r3, #6
 8001840:	e011      	b.n	8001866 <BSP_AUDIO_IN_Init+0x2d6>
 8001842:	2306      	movs	r3, #6
 8001844:	e00f      	b.n	8001866 <BSP_AUDIO_IN_Init+0x2d6>
 8001846:	bf00      	nop
 8001848:	200010f8 	.word	0x200010f8
 800184c:	20001450 	.word	0x20001450
 8001850:	400160a0 	.word	0x400160a0
 8001854:	200013fc 	.word	0x200013fc
 8001858:	40016100 	.word	0x40016100
 800185c:	00050020 	.word	0x00050020
 8001860:	00017700 	.word	0x00017700
 8001864:	2306      	movs	r3, #6
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	214c      	movs	r1, #76	; 0x4c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3308      	adds	r3, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800187c:	d053      	beq.n	8001926 <BSP_AUDIO_IN_Init+0x396>
 800187e:	4a5b      	ldr	r2, [pc, #364]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	214c      	movs	r1, #76	; 0x4c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3308      	adds	r3, #8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001892:	4293      	cmp	r3, r2
 8001894:	d045      	beq.n	8001922 <BSP_AUDIO_IN_Init+0x392>
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	214c      	movs	r1, #76	; 0x4c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3308      	adds	r3, #8
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80018aa:	d038      	beq.n	800191e <BSP_AUDIO_IN_Init+0x38e>
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	214c      	movs	r1, #76	; 0x4c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3308      	adds	r3, #8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f245 6222 	movw	r2, #22050	; 0x5622
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d02a      	beq.n	800191a <BSP_AUDIO_IN_Init+0x38a>
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	214c      	movs	r1, #76	; 0x4c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3308      	adds	r3, #8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80018d8:	d01d      	beq.n	8001916 <BSP_AUDIO_IN_Init+0x386>
 80018da:	4a44      	ldr	r2, [pc, #272]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	214c      	movs	r1, #76	; 0x4c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3308      	adds	r3, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f64a 4244 	movw	r2, #44100	; 0xac44
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00f      	beq.n	8001912 <BSP_AUDIO_IN_Init+0x382>
 80018f2:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	214c      	movs	r1, #76	; 0x4c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3308      	adds	r3, #8
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <BSP_AUDIO_IN_Init+0x37e>
 800190a:	230a      	movs	r3, #10
 800190c:	e00c      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 800190e:	2305      	movs	r3, #5
 8001910:	e00a      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 8001912:	230a      	movs	r3, #10
 8001914:	e008      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 8001916:	230a      	movs	r3, #10
 8001918:	e006      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 800191a:	2308      	movs	r3, #8
 800191c:	e004      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 800191e:	2308      	movs	r3, #8
 8001920:	e002      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 8001922:	2305      	movs	r3, #5
 8001924:	e000      	b.n	8001928 <BSP_AUDIO_IN_Init+0x398>
 8001926:	230c      	movs	r3, #12
 8001928:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default configuration of DFSDM filters and channels */
        if (MX_DFSDM_Init(&DMic_OnBoard_DfsdmFilter, &DMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	461a      	mov	r2, r3
 8001930:	492f      	ldr	r1, [pc, #188]	; (80019f0 <BSP_AUDIO_IN_Init+0x460>)
 8001932:	4830      	ldr	r0, [pc, #192]	; (80019f4 <BSP_AUDIO_IN_Init+0x464>)
 8001934:	f000 fb8c 	bl	8002050 <MX_DFSDM_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <BSP_AUDIO_IN_Init+0x3b4>
        {
          /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
          return BSP_ERROR_PERIPH_FAILURE;
 800193e:	f06f 0303 	mvn.w	r3, #3
 8001942:	e04f      	b.n	80019e4 <BSP_AUDIO_IN_Init+0x454>
        }

      }
      if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	214c      	movs	r1, #76	; 0x4c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3304      	adds	r3, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d039      	beq.n	80019d0 <BSP_AUDIO_IN_Init+0x440>
      {
        MX_DFSDM_Config dfsdm_config;

        dfsdm_config.FilterInstance  = AMIC_ONBOARD_FILTER;
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <BSP_AUDIO_IN_Init+0x468>)
 800195e:	60fb      	str	r3, [r7, #12]
        dfsdm_config.ChannelInstance = AMIC_ONBOARD_CHANNEL;
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <BSP_AUDIO_IN_Init+0x46c>)
 8001962:	61fb      	str	r3, [r7, #28]
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS; /*NU*/
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;/*NU*/
 8001968:	2301      	movs	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_0;
 800196c:	2301      	movs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (AudioInCtx[Instance].ChannelsNbr == 1U)
 8001970:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	214c      	movs	r1, #76	; 0x4c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3310      	adds	r3, #16
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <BSP_AUDIO_IN_Init+0x3fa>
        {
          dfsdm_config.RegularTrigger = DFSDM_FILTER_SW_TRIGGER;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e001      	b.n	800198e <BSP_AUDIO_IN_Init+0x3fe>
        }
        else
        {
          dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 800198a:	2301      	movs	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
        }
        dfsdm_config.DmaMode       = DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        dfsdm_config.Activation      = DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_ADC_OUTPUT;
 800199a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
        dfsdm_config.SincOrder       = SINC_ORDER;
 80019a0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80019a4:	617b      	str	r3, [r7, #20]
        dfsdm_config.Oversampling    = DECIMATION_RATIO_DFSDM;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	61bb      	str	r3, [r7, #24]
        dfsdm_config.ClockDivider    = 1;/*NU*/
 80019aa:	2301      	movs	r3, #1
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        dfsdm_config.RightBitShift   = RBITSHIFT;
 80019ae:	230a      	movs	r3, #10
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default configuration of DFSDM filters and channels */
        if (MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	461a      	mov	r2, r3
 80019b8:	4911      	ldr	r1, [pc, #68]	; (8001a00 <BSP_AUDIO_IN_Init+0x470>)
 80019ba:	4812      	ldr	r0, [pc, #72]	; (8001a04 <BSP_AUDIO_IN_Init+0x474>)
 80019bc:	f000 fb48 	bl	8002050 <MX_DFSDM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <BSP_AUDIO_IN_Init+0x43c>
        {
          /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
          return BSP_ERROR_PERIPH_FAILURE;
 80019c6:	f06f 0303 	mvn.w	r3, #3
 80019ca:	e00b      	b.n	80019e4 <BSP_AUDIO_IN_Init+0x454>
        }

        /*adc init*/
        MX_ADC1_Init();
 80019cc:	f000 fc38 	bl	8002240 <MX_ADC1_Init>
      }
    }
  }

  /* Update BSP AUDIO IN state */
  AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <BSP_AUDIO_IN_Init+0x45c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	214c      	movs	r1, #76	; 0x4c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3324      	adds	r3, #36	; 0x24
 80019de:	2202      	movs	r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
  /* Return BSP status */
  return BSP_ERROR_NONE;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3740      	adds	r7, #64	; 0x40
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200010f8 	.word	0x200010f8
 80019f0:	20001450 	.word	0x20001450
 80019f4:	200013fc 	.word	0x200013fc
 80019f8:	40016180 	.word	0x40016180
 80019fc:	40016000 	.word	0x40016000
 8001a00:	200011e4 	.word	0x200011e4
 8001a04:	20001190 	.word	0x20001190

08001a08 <BSP_AUDIO_IN_Record>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t *pBuf, uint32_t NbrOfBytes)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  AudioInCtx[Instance].pBuff = (uint16_t *)pBuf;
 8001a18:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <BSP_AUDIO_IN_Record+0xb8>)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	214c      	movs	r1, #76	; 0x4c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3314      	adds	r3, #20
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	601a      	str	r2, [r3, #0]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d902      	bls.n	8001a36 <BSP_AUDIO_IN_Record+0x2e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001a30:	f06f 0301 	mvn.w	r3, #1
 8001a34:	e040      	b.n	8001ab8 <BSP_AUDIO_IN_Record+0xb0>
  }
  else if (Instance == 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <BSP_AUDIO_IN_Record+0x3a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001a3c:	f06f 0301 	mvn.w	r3, #1
 8001a40:	e03a      	b.n	8001ab8 <BSP_AUDIO_IN_Record+0xb0>
  }
  else
  {
    if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <BSP_AUDIO_IN_Record+0xb8>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	214c      	movs	r1, #76	; 0x4c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3304      	adds	r3, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <BSP_AUDIO_IN_Record+0x6e>
    {
      if (HAL_ADC_Start(&ADC1_Handle) != HAL_OK)
 8001a5a:	481a      	ldr	r0, [pc, #104]	; (8001ac4 <BSP_AUDIO_IN_Record+0xbc>)
 8001a5c:	f001 f976 	bl	8002d4c <HAL_ADC_Start>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <BSP_AUDIO_IN_Record+0x64>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a66:	f06f 0303 	mvn.w	r3, #3
 8001a6a:	617b      	str	r3, [r7, #20]
      }
      (void)HAL_DFSDM_FilterRegularStart_DMA(&AMic_OnBoard_DfsdmFilter, DFSDM_OUT, NbrOfBytes);
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <BSP_AUDIO_IN_Record+0xc0>)
 8001a70:	4816      	ldr	r0, [pc, #88]	; (8001acc <BSP_AUDIO_IN_Record+0xc4>)
 8001a72:	f002 fa4d 	bl	8003f10 <HAL_DFSDM_FilterRegularStart_DMA>
    }

    if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <BSP_AUDIO_IN_Record+0xb8>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	214c      	movs	r1, #76	; 0x4c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3304      	adds	r3, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <BSP_AUDIO_IN_Record+0x9c>
    {
      if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DMic_OnBoard_DfsdmFilter,
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	490f      	ldr	r1, [pc, #60]	; (8001ad0 <BSP_AUDIO_IN_Record+0xc8>)
 8001a92:	4810      	ldr	r0, [pc, #64]	; (8001ad4 <BSP_AUDIO_IN_Record+0xcc>)
 8001a94:	f002 fa3c 	bl	8003f10 <HAL_DFSDM_FilterRegularStart_DMA>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <BSP_AUDIO_IN_Record+0x9c>
                                                     (int32_t *) RecBuff,
                                                     NbrOfBytes))
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a9e:	f06f 0303 	mvn.w	r3, #3
 8001aa2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Update BSP AUDIO IN state */
  AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <BSP_AUDIO_IN_Record+0xb8>)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	214c      	movs	r1, #76	; 0x4c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3324      	adds	r3, #36	; 0x24
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
  return ret;
 8001ab6:	697b      	ldr	r3, [r7, #20]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200010f8 	.word	0x200010f8
 8001ac4:	2000108c 	.word	0x2000108c
 8001ac8:	2000127c 	.word	0x2000127c
 8001acc:	20001190 	.word	0x20001190
 8001ad0:	200014e8 	.word	0x200014e8
 8001ad4:	200013fc 	.word	0x200013fc

08001ad8 <BSP_AUDIO_IN_SetVolume>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when I2S / SPI is used or 1 if DFSDM is used
  * @param  Volume    Volume level to be returnd
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_SetVolume(uint32_t Instance, uint32_t Volume)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d902      	bls.n	8001af2 <BSP_AUDIO_IN_SetVolume+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001aec:	f06f 0301 	mvn.w	r3, #1
 8001af0:	e00f      	b.n	8001b12 <BSP_AUDIO_IN_SetVolume+0x3a>
  }
  else if (Instance == 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <BSP_AUDIO_IN_SetVolume+0x26>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001af8:	f06f 0301 	mvn.w	r3, #1
 8001afc:	e009      	b.n	8001b12 <BSP_AUDIO_IN_SetVolume+0x3a>
  }
  else
  {
    /* Update AudioIn Context */
    AudioInCtx[Instance].Volume = Volume;
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <BSP_AUDIO_IN_SetVolume+0x48>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	214c      	movs	r1, #76	; 0x4c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3320      	adds	r3, #32
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return ret;
 8001b10:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200010f8 	.word	0x200010f8

08001b24 <HAL_DFSDM_FilterRegConvCpltCallback>:
using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  uint32_t j;

  if (AudioInCtx[1].IsMultiBuff == 1U)
 8001b2c:	4ba3      	ldr	r3, [pc, #652]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d103      	bne.n	8001b3c <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7fe fe9a 	bl	800086e <BSP_AUDIO_IN_TransferComplete_CallBack>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
      }
    }
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8001b3a:	e13a      	b.n	8001db2 <HAL_DFSDM_FilterRegConvCpltCallback+0x28e>
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001b3c:	4b9f      	ldr	r3, [pc, #636]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80c3 	beq.w	8001cd0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ac>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e0b5      	b.n	8001cbc <HAL_DFSDM_FilterRegConvCpltCallback+0x198>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 128;
 8001b50:	4b9a      	ldr	r3, [pc, #616]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	4a9a      	ldr	r2, [pc, #616]	; (8001dc0 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	099a      	lsrs	r2, r3, #6
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da00      	bge.n	8001b6c <HAL_DFSDM_FilterRegConvCpltCallback+0x48>
 8001b6a:	33ff      	adds	r3, #255	; 0xff
 8001b6c:	121b      	asrs	r3, r3, #8
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da00      	bge.n	8001b7e <HAL_DFSDM_FilterRegConvCpltCallback+0x5a>
 8001b7c:	337f      	adds	r3, #127	; 0x7f
 8001b7e:	11db      	asrs	r3, r3, #7
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b8e      	ldr	r3, [pc, #568]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b84:	67da      	str	r2, [r3, #124]	; 0x7c
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8001b86:	4b8d      	ldr	r3, [pc, #564]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b88:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b8c:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b90:	441a      	add	r2, r3
 8001b92:	4b8a      	ldr	r3, [pc, #552]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b98:	1ad2      	subs	r2, r2, r3
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da00      	bge.n	8001ba8 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
 8001ba6:	33ff      	adds	r3, #255	; 0xff
 8001ba8:	121b      	asrs	r3, r3, #8
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8001bb2:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bb6:	4a81      	ldr	r2, [pc, #516]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8001bbc:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bc2:	4a81      	ldr	r2, [pc, #516]	; (8001dc8 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	db0e      	blt.n	8001be6 <HAL_DFSDM_FilterRegConvCpltCallback+0xc2>
 8001bc8:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bce:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	dc04      	bgt.n	8001be0 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>
 8001bd6:	4b79      	ldr	r3, [pc, #484]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	e004      	b.n	8001bea <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8001be0:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001be4:	e001      	b.n	8001bea <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8001be6:	f248 0308 	movw	r3, #32776	; 0x8008
 8001bea:	4a74      	ldr	r2, [pc, #464]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bec:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001bee:	4a73      	ldr	r2, [pc, #460]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bf0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	fb00 f202 	mul.w	r2, r0, r2
 8001bf8:	0052      	lsls	r2, r2, #1
 8001bfa:	440a      	add	r2, r1
 8001bfc:	8013      	strh	r3, [r2, #0]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	099a      	lsrs	r2, r3, #6
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da00      	bge.n	8001c1a <HAL_DFSDM_FilterRegConvCpltCallback+0xf6>
 8001c18:	33ff      	adds	r3, #255	; 0xff
 8001c1a:	121b      	asrs	r3, r3, #8
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da01      	bge.n	8001c2e <HAL_DFSDM_FilterRegConvCpltCallback+0x10a>
 8001c2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c2e:	125b      	asrs	r3, r3, #9
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001c38:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c3a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c44:	441a      	add	r2, r3
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	1ad2      	subs	r2, r2, r3
 8001c4e:	4613      	mov	r3, r2
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da00      	bge.n	8001c5c <HAL_DFSDM_FilterRegConvCpltCallback+0x138>
 8001c5a:	33ff      	adds	r3, #255	; 0xff
 8001c5c:	121b      	asrs	r3, r3, #8
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001c66:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6c:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr * j) + 1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001c72:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c78:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	db0e      	blt.n	8001c9c <HAL_DFSDM_FilterRegConvCpltCallback+0x178>
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c84:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	dc04      	bgt.n	8001c96 <HAL_DFSDM_FilterRegConvCpltCallback+0x172>
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	e004      	b.n	8001ca0 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
 8001c96:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001c9a:	e001      	b.n	8001ca0 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
 8001c9c:	f248 0308 	movw	r3, #32776	; 0x8008
 8001ca0:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ca2:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001ca4:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ca6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	fb00 f202 	mul.w	r2, r0, r2
 8001cae:	3201      	adds	r2, #1
 8001cb0:	0052      	lsls	r2, r2, #1
 8001cb2:	440a      	add	r2, r1
 8001cb4:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	4a3f      	ldr	r2, [pc, #252]	; (8001dc0 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	f4ff af40 	bcc.w	8001b50 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d169      	bne.n	8001dac <HAL_DFSDM_FilterRegConvCpltCallback+0x288>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e05d      	b.n	8001d9a <HAL_DFSDM_FilterRegConvCpltCallback+0x276>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	4a37      	ldr	r2, [pc, #220]	; (8001dc0 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099a      	lsrs	r2, r3, #6
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a37      	ldr	r2, [pc, #220]	; (8001dcc <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da00      	bge.n	8001cfa <HAL_DFSDM_FilterRegConvCpltCallback+0x1d6>
 8001cf8:	33ff      	adds	r3, #255	; 0xff
 8001cfa:	121b      	asrs	r3, r3, #8
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da01      	bge.n	8001d0e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
 8001d0a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d0e:	125b      	asrs	r3, r3, #9
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d1a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d24:	441a      	add	r2, r3
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da00      	bge.n	8001d3c <HAL_DFSDM_FilterRegConvCpltCallback+0x218>
 8001d3a:	33ff      	adds	r3, #255	; 0xff
 8001d3c:	121b      	asrs	r3, r3, #8
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	db0e      	blt.n	8001d7c <HAL_DFSDM_FilterRegConvCpltCallback+0x258>
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d64:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	dc04      	bgt.n	8001d76 <HAL_DFSDM_FilterRegConvCpltCallback+0x252>
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	e004      	b.n	8001d80 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>
 8001d76:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001d7a:	e001      	b.n	8001d80 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>
 8001d7c:	f248 0308 	movw	r3, #32776	; 0x8008
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d82:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	fb00 f202 	mul.w	r2, r0, r2
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	440a      	add	r2, r1
 8001d92:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d398      	bcc.n	8001cde <HAL_DFSDM_FilterRegConvCpltCallback+0x1ba>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7fe fd5e 	bl	800086e <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200010f8 	.word	0x200010f8
 8001dc0:	10624dd3 	.word	0x10624dd3
 8001dc4:	200014e8 	.word	0x200014e8
 8001dc8:	ffff8008 	.word	0xffff8008
 8001dcc:	2000127c 	.word	0x2000127c

08001dd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  uint32_t j;

  if (AudioInCtx[1].IsMultiBuff == 1U)
 8001dd8:	4b98      	ldr	r3, [pc, #608]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d103      	bne.n	8001de8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7fe fd37 	bl	8000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>
      }
    }
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }

}
 8001de6:	e125      	b.n	8002034 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001de8:	4b94      	ldr	r3, [pc, #592]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80b5 	beq.w	8001f60 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e0a7      	b.n	8001f4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17c>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 128;
 8001dfc:	4a90      	ldr	r2, [pc, #576]	; (8002040 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da00      	bge.n	8001e0a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3a>
 8001e08:	33ff      	adds	r3, #255	; 0xff
 8001e0a:	121b      	asrs	r3, r3, #8
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da00      	bge.n	8001e1c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4c>
 8001e1a:	337f      	adds	r3, #127	; 0x7f
 8001e1c:	11db      	asrs	r3, r3, #7
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b86      	ldr	r3, [pc, #536]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e22:	67da      	str	r2, [r3, #124]	; 0x7c
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8001e24:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e2a:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e2e:	441a      	add	r2, r3
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	4613      	mov	r3, r2
 8001e3a:	019b      	lsls	r3, r3, #6
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da00      	bge.n	8001e46 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x76>
 8001e44:	33ff      	adds	r3, #255	; 0xff
 8001e46:	121b      	asrs	r3, r3, #8
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8001e50:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e54:	4a79      	ldr	r2, [pc, #484]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8001e5a:	4b78      	ldr	r3, [pc, #480]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e60:	4a78      	ldr	r2, [pc, #480]	; (8002044 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	db0e      	blt.n	8001e84 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb4>
 8001e66:	4b75      	ldr	r3, [pc, #468]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e6c:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001e70:	4293      	cmp	r3, r2
 8001e72:	dc04      	bgt.n	8001e7e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xae>
 8001e74:	4b71      	ldr	r3, [pc, #452]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	e004      	b.n	8001e88 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>
 8001e7e:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001e82:	e001      	b.n	8001e88 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>
 8001e84:	f248 0308 	movw	r3, #32776	; 0x8008
 8001e88:	4a6c      	ldr	r2, [pc, #432]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e8a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e8c:	4a6b      	ldr	r2, [pc, #428]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	fb00 f202 	mul.w	r2, r0, r2
 8001e96:	0052      	lsls	r2, r2, #1
 8001e98:	440a      	add	r2, r1
 8001e9a:	8013      	strh	r3, [r2, #0]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001e9c:	4a6a      	ldr	r2, [pc, #424]	; (8002048 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da00      	bge.n	8001eaa <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xda>
 8001ea8:	33ff      	adds	r3, #255	; 0xff
 8001eaa:	121b      	asrs	r3, r3, #8
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da01      	bge.n	8001ebe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xee>
 8001eba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ebe:	125b      	asrs	r3, r3, #9
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001ec8:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001eca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed4:	441a      	add	r2, r3
 8001ed6:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	1ad2      	subs	r2, r2, r3
 8001ede:	4613      	mov	r3, r2
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da00      	bge.n	8001eec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11c>
 8001eea:	33ff      	adds	r3, #255	; 0xff
 8001eec:	121b      	asrs	r3, r3, #8
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b52      	ldr	r3, [pc, #328]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr * j) + 1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001f02:	4b4e      	ldr	r3, [pc, #312]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f08:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	db0e      	blt.n	8001f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15c>
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f14:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	dc04      	bgt.n	8001f26 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x156>
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	e004      	b.n	8001f30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 8001f26:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001f2a:	e001      	b.n	8001f30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 8001f2c:	f248 0308 	movw	r3, #32776	; 0x8008
 8001f30:	4a42      	ldr	r2, [pc, #264]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f32:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001f34:	4a41      	ldr	r2, [pc, #260]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	fb00 f202 	mul.w	r2, r0, r2
 8001f3e:	3201      	adds	r2, #1
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	440a      	add	r2, r1
 8001f44:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	4a3e      	ldr	r2, [pc, #248]	; (800204c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	f4ff af4e 	bcc.w	8001dfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d162      	bne.n	800202e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25e>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e056      	b.n	800201c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24c>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001f6e:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da00      	bge.n	8001f7c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>
 8001f7a:	33ff      	adds	r3, #255	; 0xff
 8001f7c:	121b      	asrs	r3, r3, #8
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da01      	bge.n	8001f90 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 8001f8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f90:	125b      	asrs	r3, r3, #9
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	441a      	add	r2, r3
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	1ad2      	subs	r2, r2, r3
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	019b      	lsls	r3, r3, #6
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da00      	bge.n	8001fbe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ee>
 8001fbc:	33ff      	adds	r3, #255	; 0xff
 8001fbe:	121b      	asrs	r3, r3, #8
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	db0e      	blt.n	8001ffe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x22e>
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe6:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001fea:	4293      	cmp	r3, r2
 8001fec:	dc04      	bgt.n	8001ff8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x228>
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	e004      	b.n	8002002 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x232>
 8001ff8:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001ffc:	e001      	b.n	8002002 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x232>
 8001ffe:	f248 0308 	movw	r3, #32776	; 0x8008
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002004:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002006:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002008:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	fb00 f202 	mul.w	r2, r0, r2
 8002010:	0052      	lsls	r2, r2, #1
 8002012:	440a      	add	r2, r1
 8002014:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	429a      	cmp	r2, r3
 800202c:	d39f      	bcc.n	8001f6e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19e>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe fc10 	bl	8000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200010f8 	.word	0x200010f8
 8002040:	200014e8 	.word	0x200014e8
 8002044:	ffff8008 	.word	0xffff8008
 8002048:	2000127c 	.word	0x2000127c
 800204c:	10624dd3 	.word	0x10624dd3

08002050 <MX_DFSDM_Init>:
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter,
                                       DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800205c:	4b73      	ldr	r3, [pc, #460]	; (800222c <MX_DFSDM_Init+0x1dc>)
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	4a72      	ldr	r2, [pc, #456]	; (800222c <MX_DFSDM_Init+0x1dc>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6493      	str	r3, [r2, #72]	; 0x48
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <MX_DFSDM_Init+0x1dc>)
 800206a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8002074:	4b6d      	ldr	r3, [pc, #436]	; (800222c <MX_DFSDM_Init+0x1dc>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	4a6c      	ldr	r2, [pc, #432]	; (800222c <MX_DFSDM_Init+0x1dc>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	6613      	str	r3, [r2, #96]	; 0x60
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <MX_DFSDM_Init+0x1dc>)
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800208c:	4b67      	ldr	r3, [pc, #412]	; (800222c <MX_DFSDM_Init+0x1dc>)
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	4a66      	ldr	r2, [pc, #408]	; (800222c <MX_DFSDM_Init+0x1dc>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6493      	str	r3, [r2, #72]	; 0x48
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <MX_DFSDM_Init+0x1dc>)
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]

  /* MIC channels initialization */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(hDfsdmChannel);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = MXConfig->Activation;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c4:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = (uint32_t)(MXConfig->ClockDivider);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = MXConfig->Multiplexer;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2204      	movs	r2, #4
 80020e0:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	220a      	movs	r2, #10
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	61da      	str	r2, [r3, #28]

  if (HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 800210c:	68b8      	ldr	r0, [r7, #8]
 800210e:	f001 fcf7 	bl	8003b00 <HAL_DFSDM_ChannelInit>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_DFSDM_Init+0xcc>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e083      	b.n	8002224 <MX_DFSDM_Init+0x1d4>
  }

  /* MIC filters  initialization */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(hDfsdmFilter);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = MXConfig->DmaMode;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002162:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f001 fd9e 	bl	8003cbc <HAL_DFSDM_FilterInit>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_DFSDM_Init+0x13a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e04c      	b.n	8002224 <MX_DFSDM_Init+0x1d4>
  }

  /* Configure injected channel */
  if (HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2201      	movs	r2, #1
 8002190:	4619      	mov	r1, r3
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f001 fe76 	bl	8003e84 <HAL_DFSDM_FilterConfigRegChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_DFSDM_Init+0x152>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e040      	b.n	8002224 <MX_DFSDM_Init+0x1d4>
  }

  /* Configure DMA for AMic_Onboard */
  if (MXConfig->FilterInstance == AMIC_ONBOARD_FILTER)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a22      	ldr	r2, [pc, #136]	; (8002230 <MX_DFSDM_Init+0x1e0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d13a      	bne.n	8002222 <MX_DFSDM_Init+0x1d2>
  {
    AMic_OnBoard_Dma.Init.Request = DMA_REQUEST_ANALOG;
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021ae:	2257      	movs	r2, #87	; 0x57
 80021b0:	605a      	str	r2, [r3, #4]
    AMic_OnBoard_Dma.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    AMic_OnBoard_Dma.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
    AMic_OnBoard_Dma.Init.MemInc = DMA_MINC_ENABLE;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	611a      	str	r2, [r3, #16]
    AMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ca:	615a      	str	r2, [r3, #20]
    AMic_OnBoard_Dma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d2:	619a      	str	r2, [r3, #24]
    AMic_OnBoard_Dma.Init.Mode = DMA_CIRCULAR;
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021d6:	2220      	movs	r2, #32
 80021d8:	61da      	str	r2, [r3, #28]
    AMic_OnBoard_Dma.Init.Priority = DMA_PRIORITY_HIGH;
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e0:	621a      	str	r2, [r3, #32]
    AMic_OnBoard_Dma.Instance = DFSDM_DMA_ANALOG;
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <MX_DFSDM_Init+0x1e8>)
 80021e6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hDfsdmFilter, hdmaReg, AMic_OnBoard_Dma);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6293      	str	r3, [r2, #40]	; 0x28

    if (AudioInCtx[1].ChannelsNbr == 1U)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_DFSDM_Init+0x1ec>)
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d103      	bne.n	8002204 <MX_DFSDM_Init+0x1b4>
    {
      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&AMic_OnBoard_Dma);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&AMic_OnBoard_Dma);
 8002204:	480b      	ldr	r0, [pc, #44]	; (8002234 <MX_DFSDM_Init+0x1e4>)
 8002206:	f002 f95b 	bl	80044c0 <HAL_DMA_Init>

    if (AudioInCtx[1].ChannelsNbr == 1U)
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_DFSDM_Init+0x1ec>)
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <MX_DFSDM_Init+0x1d2>
    {
      HAL_NVIC_SetPriority(DFSDM_DMA_ANALOG_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2106      	movs	r1, #6
 8002216:	200e      	movs	r0, #14
 8002218:	f001 fc1f 	bl	8003a5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_ANALOG_IRQn);
 800221c:	200e      	movs	r0, #14
 800221e:	f001 fc38 	bl	8003a92 <HAL_NVIC_EnableIRQ>
    }
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	40016180 	.word	0x40016180
 8002234:	2000121c 	.word	0x2000121c
 8002238:	40020044 	.word	0x40020044
 800223c:	200010f8 	.word	0x200010f8

08002240 <MX_ADC1_Init>:
  * @param  None
  * @retval None
  */
/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
 8002254:	615a      	str	r2, [r3, #20]

  /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_AUDIO);
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff f894 	bl	8001384 <BSP_ADC1_Initialization>
  HAL_ADC_Audio_MspInit(&ADC1_Handle);
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <MX_ADC1_Init+0x50>)
 800225e:	f000 f8ed 	bl	800243c <HAL_ADC_Audio_MspInit>

  /**Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_2;
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_ADC1_Init+0x54>)
 8002264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002266:	2306      	movs	r3, #6
 8002268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLE_TIME;
 800226a:	2302      	movs	r3, #2
 800226c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800226e:	237f      	movs	r3, #127	; 0x7f
 8002270:	60fb      	str	r3, [r7, #12]

#if (DECIMATION_RATIO_DFSDM != 1)
  sConfig.OffsetNumber = ADC_OFFSET_1;             /* Offset subtraction */
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0x800;                                 /* Parameter discarded because offset correction is disabled */
 8002276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800227a:	617b      	str	r3, [r7, #20]
#endif

  (void)HAL_ADC_ConfigChannel(&ADC1_Handle, &sConfig);
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_ADC1_Init+0x50>)
 8002282:	f000 fdc7 	bl	8002e14 <HAL_ADC_ConfigChannel>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000108c 	.word	0x2000108c
 8002294:	08600004 	.word	0x08600004

08002298 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6613      	str	r3, [r2, #96]	; 0x60
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]

  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <DFSDM_ChannelMspInit+0xa8>)
 80022ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d037      	beq.n	8002334 <DFSDM_ChannelMspInit+0x9c>
  {
    if (hDfsdmChannel->Instance == DMIC_ONBOARD_CHANNEL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <DFSDM_ChannelMspInit+0xac>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d132      	bne.n	8002334 <DFSDM_ChannelMspInit+0x9c>
    {
      /* Enable GPIO clock */
      DMIC_ONBOARD_DATAIN_GPIO_CLK_ENABLE();
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
      DMIC_ONBOARD_CKOUT_GPIO_CLK_ENABLE();
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <DFSDM_ChannelMspInit+0xa4>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]

      /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_CKOUT_PIN;
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002308:	2302      	movs	r3, #2
 800230a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_CKOUT_DATIN_AF;
 8002310:	2306      	movs	r3, #6
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(DMIC_ONBOARD_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <DFSDM_ChannelMspInit+0xb0>)
 800231c:	f002 fbd8 	bl	8004ad0 <HAL_GPIO_Init>

      /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_DATIN_PIN;
 8002320:	2340      	movs	r3, #64	; 0x40
 8002322:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_DATAIN_DATIN_AF ;
 8002324:	2306      	movs	r3, #6
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(DMIC_ONBOARD_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4807      	ldr	r0, [pc, #28]	; (800234c <DFSDM_ChannelMspInit+0xb4>)
 8002330:	f002 fbce 	bl	8004ad0 <HAL_GPIO_Init>
    }
  }
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	200010f8 	.word	0x200010f8
 8002344:	400160a0 	.word	0x400160a0
 8002348:	48001000 	.word	0x48001000
 800234c:	48000400 	.word	0x48000400

08002350 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Enable DFSDM clock */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 800235a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6493      	str	r3, [r2, #72]	; 0x48
 8002364:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 8002366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	6613      	str	r3, [r2, #96]	; 0x60
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 800237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]

  /* Enable the DMA clock */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 800238a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238c:	4a25      	ldr	r2, [pc, #148]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6493      	str	r3, [r2, #72]	; 0x48
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <DFSDM_FilterMspInit+0xd4>)
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <DFSDM_FilterMspInit+0xd8>)
 80023a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d037      	beq.n	800241c <DFSDM_FilterMspInit+0xcc>
  {
    if (hDfsdmFilter->Instance == DMIC_ONBOARD_FILTER)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <DFSDM_FilterMspInit+0xdc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d132      	bne.n	800241c <DFSDM_FilterMspInit+0xcc>
    {
      /*********** Configure DMA stream for DIGITAL microphone *******************/
      DMic_OnBoard_Dma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
      DMic_OnBoard_Dma.Init.PeriphInc           = DMA_PINC_DISABLE;
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
      DMic_OnBoard_Dma.Init.MemInc              = DMA_MINC_ENABLE;
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	611a      	str	r2, [r3, #16]
      DMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ce:	615a      	str	r2, [r3, #20]
      DMic_OnBoard_Dma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d6:	619a      	str	r2, [r3, #24]
      DMic_OnBoard_Dma.Init.Mode                = DMA_CIRCULAR;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023da:	2220      	movs	r2, #32
 80023dc:	61da      	str	r2, [r3, #28]
      DMic_OnBoard_Dma.Init.Priority            = DMA_PRIORITY_HIGH;
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e4:	621a      	str	r2, [r3, #32]
      DMic_OnBoard_Dma.Init.Request             = DMA_REQUEST_DIGITAL;
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023e8:	2256      	movs	r2, #86	; 0x56
 80023ea:	605a      	str	r2, [r3, #4]

      DMic_OnBoard_Dma.Instance                 = DFSDM_DMA_DIGITAL;
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023ee:	4a11      	ldr	r2, [pc, #68]	; (8002434 <DFSDM_FilterMspInit+0xe4>)
 80023f0:	601a      	str	r2, [r3, #0]

      /* Associate the DMA handle */
      __HAL_LINKDMA(&DMic_OnBoard_DfsdmFilter, hdmaReg, DMic_OnBoard_Dma);
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <DFSDM_FilterMspInit+0xe8>)
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <DFSDM_FilterMspInit+0xe8>)
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&DMic_OnBoard_Dma);
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Configure the DMA Channel */
      (void)HAL_DMA_Init(&DMic_OnBoard_Dma);
 8002406:	480a      	ldr	r0, [pc, #40]	; (8002430 <DFSDM_FilterMspInit+0xe0>)
 8002408:	f002 f85a 	bl	80044c0 <HAL_DMA_Init>

      /* DMA IRQ Channel configuration */
      HAL_NVIC_SetPriority(DFSDM_DMA_DIGITAL_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2106      	movs	r1, #6
 8002410:	2011      	movs	r0, #17
 8002412:	f001 fb22 	bl	8003a5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_DIGITAL_IRQn);
 8002416:	2011      	movs	r0, #17
 8002418:	f001 fb3b 	bl	8003a92 <HAL_NVIC_EnableIRQ>
    }
  }
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	200010f8 	.word	0x200010f8
 800242c:	40016100 	.word	0x40016100
 8002430:	20001488 	.word	0x20001488
 8002434:	40020080 	.word	0x40020080
 8002438:	200013fc 	.word	0x200013fc

0800243c <HAL_ADC_Audio_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hDfsdmFilter ADC handle
  * @retval None
  */
void HAL_ADC_Audio_MspInit(ADC_HandleTypeDef *hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	; 0x30
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if (HAL_ADC_Counter == 0)
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_ADC_Audio_MspInit+0x114>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d177      	bne.n	800253c <HAL_ADC_Audio_MspInit+0x100>
    GPIO_InitTypeDef          GPIO_InitStruct;
    static DMA_HandleTypeDef         DmaHandle;

    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO clock ****************************************/
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244c:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	4a40      	ldr	r2, [pc, #256]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002458:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
    /* ADC Periph clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002464:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 800246a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800246e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	697b      	ldr	r3, [r7, #20]
    /* ADC Periph interface clock configuration */
    __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002486:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Enable DMA clock */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6493      	str	r3, [r2, #72]	; 0x48
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6493      	str	r3, [r2, #72]	; 0x48
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_ADC_Audio_MspInit+0x118>)
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

    /*##- 2- Configure peripheral GPIO #########################################*/
    /* ADC Channel GPIO pin configuration */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80024c0:	2303      	movs	r3, #3
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024c4:	230b      	movs	r3, #11
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4821      	ldr	r0, [pc, #132]	; (8002558 <HAL_ADC_Audio_MspInit+0x11c>)
 80024d4:	f002 fafc 	bl	8004ad0 <HAL_GPIO_Init>

    /*##- 3- Configure DMA #####################################################*/

    /*********************** Configure DMA parameters ***************************/
    DmaHandle.Instance                 = DMA1_Channel1;
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_ADC_Audio_MspInit+0x124>)
 80024dc:	601a      	str	r2, [r3, #0]
    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 80024e0:	2205      	movs	r2, #5
 80024e2:	605a      	str	r2, [r3, #4]
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 80024f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fc:	615a      	str	r2, [r3, #20]
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 8002500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002504:	619a      	str	r2, [r3, #24]
    DmaHandle.Init.Mode                = DMA_CIRCULAR;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 8002508:	2220      	movs	r2, #32
 800250a:	61da      	str	r2, [r3, #28]
    DmaHandle.Init.Priority            = DMA_PRIORITY_MEDIUM;
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 800250e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002512:	621a      	str	r2, [r3, #32]
    /* Deinitialize  & Initialize the DMA for new transfer */
    (void)HAL_DMA_DeInit(&DmaHandle);
 8002514:	4811      	ldr	r0, [pc, #68]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 8002516:	f002 f87b 	bl	8004610 <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&DmaHandle);
 800251a:	4810      	ldr	r0, [pc, #64]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 800251c:	f001 ffd0 	bl	80044c0 <HAL_DMA_Init>

    /* Associate the DMA handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 8002524:	651a      	str	r2, [r3, #80]	; 0x50
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <HAL_ADC_Audio_MspInit+0x120>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6293      	str	r3, [r2, #40]	; 0x28

    /* NVIC configuration for DMA Input data interrupt */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2101      	movs	r1, #1
 8002530:	200b      	movs	r0, #11
 8002532:	f001 fa92 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002536:	200b      	movs	r0, #11
 8002538:	f001 faab 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  }

  HAL_ADC_Counter++;
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_ADC_Audio_MspInit+0x114>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_ADC_Audio_MspInit+0x114>)
 8002544:	6013      	str	r3, [r2, #0]
}
 8002546:	bf00      	nop
 8002548:	3730      	adds	r7, #48	; 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20001668 	.word	0x20001668
 8002554:	40021000 	.word	0x40021000
 8002558:	48000800 	.word	0x48000800
 800255c:	2000166c 	.word	0x2000166c
 8002560:	40020008 	.word	0x40020008

08002564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_Init+0x3c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <HAL_Init+0x3c>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259e:	2003      	movs	r0, #3
 80025a0:	f001 fa50 	bl	8003a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a4:	200f      	movs	r0, #15
 80025a6:	f000 f817 	bl	80025d8 <HAL_InitTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	e001      	b.n	80025ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025b6:	f000 f807 	bl	80025c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_InitTick+0x6c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_InitTick+0x70>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_InitTick+0x6c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f001 fa53 	bl	8003aae <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d809      	bhi.n	8002628 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002614:	2200      	movs	r2, #0
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f001 fa1d 	bl	8003a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_InitTick+0x74>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e007      	b.n	8002638 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e004      	b.n	8002638 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e001      	b.n	8002638 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000070 	.word	0x20000070
 8002648:	20000068 	.word	0x20000068
 800264c:	2000006c 	.word	0x2000006c

08002650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000070 	.word	0x20000070
 8002674:	200016cc 	.word	0x200016cc

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200016cc 	.word	0x200016cc

08002690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff ffee 	bl	8002678 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_Delay+0x44>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffde 	bl	8002678 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000070 	.word	0x20000070

080026d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3360      	adds	r3, #96	; 0x60
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <LL_ADC_SetOffset+0x44>)
 8002762:	4013      	ands	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	4313      	orrs	r3, r2
 8002770:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	03fff000 	.word	0x03fff000

08002788 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	461a      	mov	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3360      	adds	r3, #96	; 0x60
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	615a      	str	r2, [r3, #20]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3330      	adds	r3, #48	; 0x30
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	4413      	add	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	211f      	movs	r1, #31
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 011f 	and.w	r1, r3, #31
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	431a      	orrs	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3314      	adds	r3, #20
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0e5b      	lsrs	r3, r3, #25
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	4413      	add	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0d1b      	lsrs	r3, r3, #20
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2107      	movs	r1, #7
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0d1b      	lsrs	r3, r3, #20
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0318 	and.w	r3, r3, #24
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e4:	40d9      	lsrs	r1, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	400b      	ands	r3, r1
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	431a      	orrs	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	0007ffff 	.word	0x0007ffff

08002908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6093      	str	r3, [r2, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800293c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002940:	d101      	bne.n	8002946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002968:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002990:	d101      	bne.n	8002996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <LL_ADC_IsEnabled+0x18>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <LL_ADC_IsEnabled+0x1a>
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d101      	bne.n	8002a32 <LL_ADC_IsDisableOngoing+0x18>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <LL_ADC_IsDisableOngoing+0x1a>
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e12f      	b.n	8002d2e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fe fcbf 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff19 	bl	800292c <LL_ADC_IsDeepPowerDownEnabled>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff feff 	bl	8002908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff34 	bl	800297c <LL_ADC_IsInternalRegulatorEnabled>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d115      	bne.n	8002b46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff18 	bl	8002954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b24:	4b84      	ldr	r3, [pc, #528]	; (8002d38 <HAL_ADC_Init+0x284>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	4a84      	ldr	r2, [pc, #528]	; (8002d3c <HAL_ADC_Init+0x288>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b38:	e002      	b.n	8002b40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f9      	bne.n	8002b3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff16 	bl	800297c <LL_ADC_IsInternalRegulatorEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff76 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002b7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80c8 	bne.w	8002d1c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80c4 	bne.w	8002d1c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff23 	bl	80029f4 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10b      	bne.n	8002bcc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb4:	4862      	ldr	r0, [pc, #392]	; (8002d40 <HAL_ADC_Init+0x28c>)
 8002bb6:	f7ff ff1d 	bl	80029f4 <LL_ADC_IsEnabled>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	485f      	ldr	r0, [pc, #380]	; (8002d44 <HAL_ADC_Init+0x290>)
 8002bc8:	f7ff fd86 	bl	80026d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7e5b      	ldrb	r3, [r3, #25]
 8002bd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002be2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d106      	bne.n	8002c08 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	045b      	lsls	r3, r3, #17
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_ADC_Init+0x294>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff13 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002c42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff20 	bl	8002a8e <LL_ADC_INJ_IsConversionOngoing>
 8002c4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d140      	bne.n	8002cd8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d13d      	bne.n	8002cd8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7e1b      	ldrb	r3, [r3, #24]
 8002c64:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c66:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7e:	f023 0306 	bic.w	r3, r3, #6
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d118      	bne.n	8002cc8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cac:	4311      	orrs	r1, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
 8002cc6:	e007      	b.n	8002cd8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f023 010f 	bic.w	r1, r3, #15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf8:	e007      	b.n	8002d0a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 020f 	bic.w	r2, r2, #15
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	659a      	str	r2, [r3, #88]	; 0x58
 8002d1a:	e007      	b.n	8002d2c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000068 	.word	0x20000068
 8002d3c:	053e2d63 	.word	0x053e2d63
 8002d40:	50040000 	.word	0x50040000
 8002d44:	50040300 	.word	0x50040300
 8002d48:	fff0c007 	.word	0xfff0c007

08002d4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fe85 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d14f      	bne.n	8002e04 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_Start+0x26>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e04b      	b.n	8002e0a <HAL_ADC_Start+0xbe>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fc44 	bl	8003608 <ADC_Enable>
 8002d80:	4603      	mov	r3, r0
 8002d82:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d137      	bne.n	8002dfa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d106      	bne.n	8002dba <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f023 0206 	bic.w	r2, r3, #6
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db8:	e002      	b.n	8002dc0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	221c      	movs	r2, #28
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002de6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe24 	bl	8002a40 <LL_ADC_REG_StartConversion>
 8002df8:	e006      	b.n	8002e08 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002e02:	e001      	b.n	8002e08 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b0b6      	sub	sp, #216	; 0xd8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x22>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e3d3      	b.n	80035de <HAL_ADC_ConfigChannel+0x7ca>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe10 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 83b8 	bne.w	80035c0 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d824      	bhi.n	8002ea2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	3b02      	subs	r3, #2
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d81b      	bhi.n	8002e9a <HAL_ADC_ConfigChannel+0x86>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_ADC_ConfigChannel+0x54>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e89 	.word	0x08002e89
 8002e74:	08002e91 	.word	0x08002e91
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	605a      	str	r2, [r3, #4]
          break;
 8002e7e:	e010      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2212      	movs	r2, #18
 8002e84:	605a      	str	r2, [r3, #4]
          break;
 8002e86:	e00c      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2218      	movs	r2, #24
 8002e8c:	605a      	str	r2, [r3, #4]
          break;
 8002e8e:	e008      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e96:	605a      	str	r2, [r3, #4]
          break;
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2206      	movs	r2, #6
 8002e9e:	605a      	str	r2, [r3, #4]
          break;
 8002ea0:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7ff fcae 	bl	8002810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fdd5 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002ebe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fde1 	bl	8002a8e <LL_ADC_INJ_IsConversionOngoing>
 8002ecc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 81c1 	bne.w	800325c <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 81bc 	bne.w	800325c <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eec:	d10f      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f7ff fcb5 	bl	8002868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fc6f 	bl	80027ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002f0c:	e00e      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f7ff fca4 	bl	8002868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fc5f 	bl	80027ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00a      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f5e:	f7ff fbef 	bl	8002740 <LL_ADC_SetOffset>
 8002f62:	e17b      	b.n	800325c <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fc0c 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x17c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fc01 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	f003 021f 	and.w	r2, r3, #31
 8002f8e:	e01e      	b.n	8002fce <HAL_ADC_ConfigChannel+0x1ba>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fbf6 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e004      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8002fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x1d2>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	e018      	b.n	8003018 <HAL_ADC_ConfigChannel+0x204>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e004      	b.n	8003018 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 800300e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003018:	429a      	cmp	r2, r3
 800301a:	d106      	bne.n	800302a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fbc5 	bl	80027b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fba9 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x242>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fb9e 	bl	8002788 <LL_ADC_GetOffsetChannel>
 800304c:	4603      	mov	r3, r0
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	e01e      	b.n	8003094 <HAL_ADC_ConfigChannel+0x280>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fb93 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800307c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e004      	b.n	8003092 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8003088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x298>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	e018      	b.n	80030de <HAL_ADC_ConfigChannel+0x2ca>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e004      	b.n	80030de <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80030d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030de:	429a      	cmp	r2, r3
 80030e0:	d106      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fb62 	bl	80027b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2102      	movs	r1, #2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fb46 	bl	8002788 <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_ADC_ConfigChannel+0x308>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fb3b 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8003112:	4603      	mov	r3, r0
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	f003 021f 	and.w	r2, r3, #31
 800311a:	e01e      	b.n	800315a <HAL_ADC_ConfigChannel+0x346>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fb30 	bl	8002788 <LL_ADC_GetOffsetChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800313a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800313e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e004      	b.n	8003158 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 800314e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x35e>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	e016      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x38c>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003184:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800318a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8003192:	2320      	movs	r3, #32
 8003194:	e004      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8003196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fb01 	bl	80027b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2103      	movs	r1, #3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fae5 	bl	8002788 <LL_ADC_GetOffsetChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_ADC_ConfigChannel+0x3ca>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2103      	movs	r1, #3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fada 	bl	8002788 <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	e017      	b.n	800320e <HAL_ADC_ConfigChannel+0x3fa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2103      	movs	r1, #3
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff facf 	bl	8002788 <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e003      	b.n	800320c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8003204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x412>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	e011      	b.n	800324a <HAL_ADC_ConfigChannel+0x436>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003236:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800324a:	429a      	cmp	r2, r3
 800324c:	d106      	bne.n	800325c <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	2103      	movs	r1, #3
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff faac 	bl	80027b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fbc7 	bl	80029f4 <LL_ADC_IsEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 813f 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f7ff fb20 	bl	80028c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a8e      	ldr	r2, [pc, #568]	; (80034c0 <HAL_ADC_ConfigChannel+0x6ac>)
 8003286:	4293      	cmp	r3, r2
 8003288:	f040 8130 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x4a0>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e019      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x4d4>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80032d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2b09      	cmp	r3, #9
 80032e0:	bf94      	ite	ls
 80032e2:	2301      	movls	r3, #1
 80032e4:	2300      	movhi	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d079      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x4f4>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	069b      	lsls	r3, r3, #26
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003306:	e015      	b.n	8003334 <HAL_ADC_ConfigChannel+0x520>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e003      	b.n	800332c <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8003324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3301      	adds	r3, #1
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x540>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0e9b      	lsrs	r3, r3, #26
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	e017      	b.n	8003384 <HAL_ADC_ConfigChannel+0x570>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8003370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	ea42 0103 	orr.w	r1, r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x596>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	051b      	lsls	r3, r3, #20
 80033a8:	e018      	b.n	80033dc <HAL_ADC_ConfigChannel+0x5c8>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80033c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033dc:	430b      	orrs	r3, r1
 80033de:	e080      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x5e8>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	069b      	lsls	r3, r3, #26
 80033f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fa:	e015      	b.n	8003428 <HAL_ADC_ConfigChannel+0x614>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8003414:	2320      	movs	r3, #32
 8003416:	e003      	b.n	8003420 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	069b      	lsls	r3, r3, #26
 8003424:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x634>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e9b      	lsrs	r3, r3, #26
 800343a:	3301      	adds	r3, #1
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	e017      	b.n	8003478 <HAL_ADC_ConfigChannel+0x664>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	61fb      	str	r3, [r7, #28]
  return result;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8003460:	2320      	movs	r3, #32
 8003462:	e003      	b.n	800346c <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	ea42 0103 	orr.w	r1, r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x690>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	3301      	adds	r3, #1
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	3b1e      	subs	r3, #30
 800349c:	051b      	lsls	r3, r3, #20
 800349e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a2:	e01d      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x6cc>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	613b      	str	r3, [r7, #16]
  return result;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e005      	b.n	80034cc <HAL_ADC_ConfigChannel+0x6b8>
 80034c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f003 021f 	and.w	r2, r3, #31
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	3b1e      	subs	r3, #30
 80034da:	051b      	lsls	r3, r3, #20
 80034dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e0:	430b      	orrs	r3, r1
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7ff f9be 	bl	8002868 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_ADC_ConfigChannel+0x7d4>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d06c      	beq.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f8:	483c      	ldr	r0, [pc, #240]	; (80035ec <HAL_ADC_ConfigChannel+0x7d8>)
 80034fa:	f7ff f913 	bl	8002724 <LL_ADC_GetCommonPathInternalCh>
 80034fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d127      	bne.n	800355c <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800350c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d121      	bne.n	800355c <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a35      	ldr	r2, [pc, #212]	; (80035f4 <HAL_ADC_ConfigChannel+0x7e0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d157      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003526:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800352a:	4619      	mov	r1, r3
 800352c:	482f      	ldr	r0, [pc, #188]	; (80035ec <HAL_ADC_ConfigChannel+0x7d8>)
 800352e:	f7ff f8e6 	bl	80026fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003532:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <HAL_ADC_ConfigChannel+0x7e8>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800354c:	e002      	b.n	8003554 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355a:	e03a      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_ADC_ConfigChannel+0x7ec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <HAL_ADC_ConfigChannel+0x77a>
 8003566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d12a      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003584:	4619      	mov	r1, r3
 8003586:	4819      	ldr	r0, [pc, #100]	; (80035ec <HAL_ADC_ConfigChannel+0x7d8>)
 8003588:	f7ff f8b9 	bl	80026fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800358c:	e021      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_ADC_ConfigChannel+0x7f0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d11c      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800359c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_ADC_ConfigChannel+0x7e0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d111      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035b6:	4619      	mov	r1, r3
 80035b8:	480c      	ldr	r0, [pc, #48]	; (80035ec <HAL_ADC_ConfigChannel+0x7d8>)
 80035ba:	f7ff f8a0 	bl	80026fe <LL_ADC_SetCommonPathInternalCh>
 80035be:	e008      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80035da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035de:	4618      	mov	r0, r3
 80035e0:	37d8      	adds	r7, #216	; 0xd8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	80080000 	.word	0x80080000
 80035ec:	50040300 	.word	0x50040300
 80035f0:	c7520000 	.word	0xc7520000
 80035f4:	50040000 	.word	0x50040000
 80035f8:	20000068 	.word	0x20000068
 80035fc:	053e2d63 	.word	0x053e2d63
 8003600:	cb840000 	.word	0xcb840000
 8003604:	80000001 	.word	0x80000001

08003608 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f9ed 	bl	80029f4 <LL_ADC_IsEnabled>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d14d      	bne.n	80036bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <ADC_Enable+0xc0>)
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	f043 0210 	orr.w	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e039      	b.n	80036be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f9a8 	bl	80029a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003654:	f7ff f810 	bl	8002678 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365a:	e028      	b.n	80036ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff f9c7 	bl	80029f4 <LL_ADC_IsEnabled>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f997 	bl	80029a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003676:	f7fe ffff 	bl	8002678 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d914      	bls.n	80036ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d00d      	beq.n	80036ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	f043 0210 	orr.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e007      	b.n	80036be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d1cf      	bne.n	800365c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	8000003f 	.word	0x8000003f

080036cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff f99e 	bl	8002a1a <LL_ADC_IsDisableOngoing>
 80036de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f985 	bl	80029f4 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d047      	beq.n	8003780 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d144      	bne.n	8003780 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030d 	and.w	r3, r3, #13
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10c      	bne.n	800371e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f95f 	bl	80029cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2203      	movs	r2, #3
 8003714:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003716:	f7fe ffaf 	bl	8002678 <HAL_GetTick>
 800371a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800371c:	e029      	b.n	8003772 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f043 0210 	orr.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e023      	b.n	8003782 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800373a:	f7fe ff9d 	bl	8002678 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d914      	bls.n	8003772 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1dc      	bne.n	800373a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <LL_ADC_StartCalibration>:
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800379c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_IsCalibrationOnGoing>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_ADCEx_Calibration_Start+0x1c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e04d      	b.n	800389c <HAL_ADCEx_Calibration_Start+0xb8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff5f 	bl	80036cc <ADC_Disable>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d136      	bne.n	8003886 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003820:	f023 0302 	bic.w	r3, r3, #2
 8003824:	f043 0202 	orr.w	r2, r3, #2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ffa9 	bl	800378a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003838:	e014      	b.n	8003864 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003846:	d30d      	bcc.n	8003864 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f023 0312 	bic.w	r3, r3, #18
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01b      	b.n	800389c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ffa7 	bl	80037bc <LL_ADC_IsCalibrationOnGoing>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e2      	bne.n	800383a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f023 0303 	bic.w	r3, r3, #3
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	659a      	str	r2, [r3, #88]	; 0x58
 8003884:	e005      	b.n	8003892 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <__NVIC_SetPriorityGrouping>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d6:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	60d3      	str	r3, [r2, #12]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_GetPriorityGrouping>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <__NVIC_GetPriorityGrouping+0x18>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0307 	and.w	r3, r3, #7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_EnableIRQ>:
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db0b      	blt.n	8003932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	4907      	ldr	r1, [pc, #28]	; (8003940 <__NVIC_EnableIRQ+0x38>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2001      	movs	r0, #1
 800392a:	fa00 f202 	lsl.w	r2, r0, r2
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000e100 	.word	0xe000e100

08003944 <__NVIC_SetPriority>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	; (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	; (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f1c3 0307 	rsb	r3, r3, #7
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	bf28      	it	cs
 80039b6:	2304      	movcs	r3, #4
 80039b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3304      	adds	r3, #4
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d902      	bls.n	80039c8 <NVIC_EncodePriority+0x30>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3b03      	subs	r3, #3
 80039c6:	e000      	b.n	80039ca <NVIC_EncodePriority+0x32>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	401a      	ands	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43d9      	mvns	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	4313      	orrs	r3, r2
         );
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a10:	d301      	bcc.n	8003a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00f      	b.n	8003a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <SysTick_Config+0x40>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1e:	210f      	movs	r1, #15
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	f7ff ff8e 	bl	8003944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <SysTick_Config+0x40>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SysTick_Config+0x40>)
 8003a30:	2207      	movs	r2, #7
 8003a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000e010 	.word	0xe000e010

08003a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff29 	bl	80038a4 <__NVIC_SetPriorityGrouping>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a6c:	f7ff ff3e 	bl	80038ec <__NVIC_GetPriorityGrouping>
 8003a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff ff8e 	bl	8003998 <NVIC_EncodePriority>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff5d 	bl	8003944 <__NVIC_SetPriority>
}
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff31 	bl	8003908 <__NVIC_EnableIRQ>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ffa2 	bl	8003a00 <SysTick_Config>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003ae2:	e005      	b.n	8003af0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003aea:	f023 0304 	bic.w	r3, r3, #4
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0ac      	b.n	8003c6c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fc30 	bl	800437c <DFSDM_GetChannelFromInstance>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4a55      	ldr	r2, [pc, #340]	; (8003c74 <HAL_DFSDM_ChannelInit+0x174>)
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e09f      	b.n	8003c6c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8a7 	bl	8003c80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b32:	4b51      	ldr	r3, [pc, #324]	; (8003c78 <HAL_DFSDM_ChannelInit+0x178>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3301      	adds	r3, #1
 8003b38:	4a4f      	ldr	r2, [pc, #316]	; (8003c78 <HAL_DFSDM_ChannelInit+0x178>)
 8003b3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	; (8003c78 <HAL_DFSDM_ChannelInit+0x178>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d125      	bne.n	8003b90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b44:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b50:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4948      	ldr	r1, [pc, #288]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a46      	ldr	r2, [pc, #280]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b64:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003b68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	791b      	ldrb	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d108      	bne.n	8003b84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b72:	4b42      	ldr	r3, [pc, #264]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	493f      	ldr	r1, [pc, #252]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b84:	4b3d      	ldr	r3, [pc, #244]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3c      	ldr	r2, [pc, #240]	; (8003c7c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 020f 	bic.w	r2, r2, #15
 8003bcc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003bf4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f002 0207 	and.w	r2, r2, #7
 8003c20:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fb8e 	bl	800437c <DFSDM_GetChannelFromInstance>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4904      	ldr	r1, [pc, #16]	; (8003c74 <HAL_DFSDM_ChannelInit+0x174>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	200016d4 	.word	0x200016d4
 8003c78:	200016d0 	.word	0x200016d0
 8003c7c:	40016000 	.word	0x40016000

08003c80 <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0ca      	b.n	8003e64 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a66      	ldr	r2, [pc, #408]	; (8003e6c <HAL_DFSDM_FilterInit+0x1b0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d109      	bne.n	8003cec <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d003      	beq.n	8003ce8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0bb      	b.n	8003e64 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8b3 	bl	8003e70 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003d18:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7a1b      	ldrb	r3, [r3, #8]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d108      	bne.n	8003d34 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e007      	b.n	8003d44 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d42:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7a5b      	ldrb	r3, [r3, #9]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e007      	b.n	8003d6e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d7c:	f023 0308 	bic.w	r3, r3, #8
 8003d80:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d108      	bne.n	8003d9c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7c1b      	ldrb	r3, [r3, #16]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d108      	bne.n	8003db6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0210 	orr.w	r2, r2, #16
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e007      	b.n	8003dc6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0210 	bic.w	r2, r2, #16
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7c5b      	ldrb	r3, [r3, #17]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d108      	bne.n	8003de0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0220 	orr.w	r2, r2, #32
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e007      	b.n	8003df0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0220 	bic.w	r2, r2, #32
 8003dee:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003dfe:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003e02:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6959      	ldr	r1, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003e16:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003e1e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7c1a      	ldrb	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40016100 	.word	0x40016100

08003e70 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02e      	beq.n	8003efc <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003ea4:	2bff      	cmp	r3, #255	; 0xff
 8003ea6:	d029      	beq.n	8003efc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d10d      	bne.n	8003ede <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e00a      	b.n	8003ef4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8003efa:	e001      	b.n	8003f00 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
 8003f30:	e064      	b.n	8003ffc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f40:	d002      	beq.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
 8003f46:	e059      	b.n	8003ffc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10e      	bne.n	8003f6e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d002      	beq.n	8003f6e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
 8003f6c:	e046      	b.n	8003ffc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d102      	bne.n	8003f8e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
 8003f8c:	e036      	b.n	8003ffc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d004      	beq.n	8003fa2 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d12a      	bne.n	8003ff8 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d101      	bne.n	8003fc0 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003fbc:	4a14      	ldr	r2, [pc, #80]	; (8004010 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003fbe:	e000      	b.n	8003fc2 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003fc0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	331c      	adds	r3, #28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f000 fbb0 	bl	800473c <HAL_DMA_Start_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	22ff      	movs	r2, #255	; 0xff
 8003fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003fee:	e005      	b.n	8003ffc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fa0f 	bl	8004414 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003ff6:	e001      	b.n	8003ffc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	0800433d 	.word	0x0800433d
 800400c:	08004359 	.word	0x08004359
 8004010:	08004321 	.word	0x08004321

08004014 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	; 0x30
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00f      	beq.n	8004056 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2208      	movs	r2, #8
 8004046:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f95c 	bl	800430c <HAL_DFSDM_FilterErrorCallback>
 8004054:	e13b      	b.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00f      	beq.n	8004080 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2204      	movs	r2, #4
 8004070:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f947 	bl	800430c <HAL_DFSDM_FilterErrorCallback>
 800407e:	e126      	b.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d025      	beq.n	80040d6 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fd fd45 	bl	8001b24 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 8114 	bne.w	80042cc <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 810f 	bne.w	80042cc <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0202 	bic.w	r2, r2, #2
 80040bc:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d101      	bne.n	80040cc <HAL_DFSDM_IRQHandler+0xb8>
 80040c8:	2201      	movs	r2, #1
 80040ca:	e000      	b.n	80040ce <HAL_DFSDM_IRQHandler+0xba>
 80040cc:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80040d4:	e0fa      	b.n	80042cc <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d034      	beq.n	800414a <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02f      	beq.n	800414a <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8f8 	bl	80042e0 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	1e5a      	subs	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 80e5 	bne.w	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d112      	bne.n	8004132 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8004122:	2b03      	cmp	r3, #3
 8004124:	d101      	bne.n	800412a <HAL_DFSDM_IRQHandler+0x116>
 8004126:	2201      	movs	r2, #1
 8004128:	e000      	b.n	800412c <HAL_DFSDM_IRQHandler+0x118>
 800412a:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004138:	2b01      	cmp	r3, #1
 800413a:	d102      	bne.n	8004142 <HAL_DFSDM_IRQHandler+0x12e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	e000      	b.n	8004144 <HAL_DFSDM_IRQHandler+0x130>
 8004142:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004148:	e0c1      	b.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d03d      	beq.n	80041d0 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800415a:	2b00      	cmp	r3, #0
 800415c:	d038      	beq.n	80041d0 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_DFSDM_IRQHandler+0x162>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_DFSDM_IRQHandler+0x164>
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004186:	e005      	b.n	8004194 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	3301      	adds	r3, #1
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_DFSDM_IRQHandler+0x190>
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d9f1      	bls.n	8004188 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <HAL_DFSDM_IRQHandler+0x1a2>
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	3308      	adds	r3, #8
 80041ae:	2201      	movs	r2, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	e003      	b.n	80041be <HAL_DFSDM_IRQHandler+0x1aa>
 80041b6:	2201      	movs	r2, #1
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f893 	bl	80042f4 <HAL_DFSDM_FilterAwdCallback>
  {
 80041ce:	e07e      	b.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <HAL_DFSDM_IRQHandler+0x2c4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d141      	bne.n	800425e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d03c      	beq.n	800425e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d037      	beq.n	800425e <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80041fe:	e02a      	b.n	8004256 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01f      	beq.n	800424a <HAL_DFSDM_IRQHandler+0x236>
 800420a:	4a34      	ldr	r2, [pc, #208]	; (80042dc <HAL_DFSDM_IRQHandler+0x2c8>)
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d019      	beq.n	800424a <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8004216:	4a31      	ldr	r2, [pc, #196]	; (80042dc <HAL_DFSDM_IRQHandler+0x2c8>)
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00f      	beq.n	800424a <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f103 0210 	add.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 800423c:	4a27      	ldr	r2, [pc, #156]	; (80042dc <HAL_DFSDM_IRQHandler+0x2c8>)
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fd25 	bl	8003c94 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	3301      	adds	r3, #1
 800424e:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	2b07      	cmp	r3, #7
 800425a:	d9d1      	bls.n	8004200 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 800425c:	e037      	b.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d132      	bne.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800426e:	2b00      	cmp	r3, #0
 8004270:	d02d      	beq.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004278:	2b00      	cmp	r3, #0
 800427a:	d028      	beq.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0e1b      	lsrs	r3, r3, #24
 8004288:	b2db      	uxtb	r3, r3
 800428a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800428c:	e005      	b.n	800429a <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	3301      	adds	r3, #1
 8004292:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_DFSDM_IRQHandler+0x296>
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d9f1      	bls.n	800428e <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f103 0218 	add.w	r2, r3, #24
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2101      	movs	r1, #1
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <HAL_DFSDM_IRQHandler+0x2c8>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fcef 	bl	8003ca8 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80042ca:	e000      	b.n	80042ce <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80042cc:	bf00      	nop
}
 80042ce:	bf00      	nop
 80042d0:	3730      	adds	r7, #48	; 0x30
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40016100 	.word	0x40016100
 80042dc:	200016d4 	.word	0x200016d4

080042e0 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7fd fd4e 	bl	8001dd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7fd fbea 	bl	8001b24 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2203      	movs	r2, #3
 800436a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ffcd 	bl	800430c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d102      	bne.n	8004392 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e02b      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <DFSDM_GetChannelFromInstance+0x80>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d102      	bne.n	80043a0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e024      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <DFSDM_GetChannelFromInstance+0x84>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d102      	bne.n	80043ae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80043a8:	2302      	movs	r3, #2
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e01d      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a14      	ldr	r2, [pc, #80]	; (8004404 <DFSDM_GetChannelFromInstance+0x88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d102      	bne.n	80043bc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80043b6:	2304      	movs	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e016      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <DFSDM_GetChannelFromInstance+0x8c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d102      	bne.n	80043ca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80043c4:	2305      	movs	r3, #5
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00f      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a0f      	ldr	r2, [pc, #60]	; (800440c <DFSDM_GetChannelFromInstance+0x90>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d102      	bne.n	80043d8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80043d2:	2306      	movs	r3, #6
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e008      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <DFSDM_GetChannelFromInstance+0x94>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d102      	bne.n	80043e6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80043e0:	2307      	movs	r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e001      	b.n	80043ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80043e6:	2303      	movs	r3, #3
 80043e8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80043ea:	68fb      	ldr	r3, [r7, #12]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40016000 	.word	0x40016000
 80043fc:	40016020 	.word	0x40016020
 8004400:	40016040 	.word	0x40016040
 8004404:	40016080 	.word	0x40016080
 8004408:	400160a0 	.word	0x400160a0
 800440c:	400160c0 	.word	0x400160c0
 8004410:	400160e0 	.word	0x400160e0

08004414 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004420:	2b00      	cmp	r3, #0
 8004422:	d108      	bne.n	8004436 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e033      	b.n	800449e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004454:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800446c:	2b03      	cmp	r3, #3
 800446e:	d116      	bne.n	800449e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0202 	orr.w	r2, r2, #2
 8004486:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <DFSDM_RegConvStart+0x84>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	e000      	b.n	800449a <DFSDM_RegConvStart+0x86>
 8004498:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <DFSDM_RegConvStart+0x98>
 80044a8:	2202      	movs	r2, #2
 80044aa:	e000      	b.n	80044ae <DFSDM_RegConvStart+0x9a>
 80044ac:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e08d      	b.n	80045ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_DMA_Init+0x138>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	d80f      	bhi.n	80044fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b45      	ldr	r3, [pc, #276]	; (80045fc <HAL_DMA_Init+0x13c>)
 80044e6:	4413      	add	r3, r2
 80044e8:	4a45      	ldr	r2, [pc, #276]	; (8004600 <HAL_DMA_Init+0x140>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	009a      	lsls	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <HAL_DMA_Init+0x144>)
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
 80044fc:	e00e      	b.n	800451c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	4b40      	ldr	r3, [pc, #256]	; (8004608 <HAL_DMA_Init+0x148>)
 8004506:	4413      	add	r3, r2
 8004508:	4a3d      	ldr	r2, [pc, #244]	; (8004600 <HAL_DMA_Init+0x140>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	009a      	lsls	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a3c      	ldr	r2, [pc, #240]	; (800460c <HAL_DMA_Init+0x14c>)
 800451a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa4c 	bl	8004a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d102      	bne.n	8004584 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004598:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_DMA_Init+0x104>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d80c      	bhi.n	80045c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa6c 	bl	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e008      	b.n	80045d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40020407 	.word	0x40020407
 80045fc:	bffdfff8 	.word	0xbffdfff8
 8004600:	cccccccd 	.word	0xcccccccd
 8004604:	40020000 	.word	0x40020000
 8004608:	bffdfbf8 	.word	0xbffdfbf8
 800460c:	40020400 	.word	0x40020400

08004610 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07b      	b.n	800471a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <HAL_DMA_DeInit+0x114>)
 800463a:	429a      	cmp	r2, r3
 800463c:	d80f      	bhi.n	800465e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_DMA_DeInit+0x118>)
 8004646:	4413      	add	r3, r2
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_DMA_DeInit+0x11c>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	009a      	lsls	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a35      	ldr	r2, [pc, #212]	; (8004730 <HAL_DMA_DeInit+0x120>)
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
 800465c:	e00e      	b.n	800467c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_DMA_DeInit+0x124>)
 8004666:	4413      	add	r3, r2
 8004668:	4a30      	ldr	r2, [pc, #192]	; (800472c <HAL_DMA_DeInit+0x11c>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <HAL_DMA_DeInit+0x128>)
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	f003 021c 	and.w	r2, r3, #28
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2101      	movs	r1, #1
 8004692:	fa01 f202 	lsl.w	r2, r1, r2
 8004696:	605a      	str	r2, [r3, #4]
#if defined(DMAMUX1)

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9b7 	bl	8004a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046ae:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00f      	beq.n	80046d8 <HAL_DMA_DeInit+0xc8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d80b      	bhi.n	80046d8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f9e1 	bl	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046d6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	65da      	str	r2, [r3, #92]	; 0x5c

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40020407 	.word	0x40020407
 8004728:	bffdfff8 	.word	0xbffdfff8
 800472c:	cccccccd 	.word	0xcccccccd
 8004730:	40020000 	.word	0x40020000
 8004734:	bffdfbf8 	.word	0xbffdfbf8
 8004738:	40020400 	.word	0x40020400

0800473c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_DMA_Start_IT+0x20>
 8004758:	2302      	movs	r3, #2
 800475a:	e066      	b.n	800482a <HAL_DMA_Start_IT+0xee>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d155      	bne.n	800481c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f8fb 	bl	8004990 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 020e 	orr.w	r2, r2, #14
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e00f      	b.n	80047d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 020a 	orr.w	r2, r2, #10
 80047d2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004808:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e005      	b.n	8004828 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004824:	2302      	movs	r3, #2
 8004826:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f003 031c 	and.w	r3, r3, #28
 8004852:	2204      	movs	r2, #4
 8004854:	409a      	lsls	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d026      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7a>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d021      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0204 	bic.w	r2, r2, #4
 8004884:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f003 021c 	and.w	r2, r3, #28
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2104      	movs	r1, #4
 8004894:	fa01 f202 	lsl.w	r2, r1, r2
 8004898:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d071      	beq.n	8004986 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80048aa:	e06c      	b.n	8004986 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	f003 031c 	and.w	r3, r3, #28
 80048b4:	2202      	movs	r2, #2
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <HAL_DMA_IRQHandler+0xec>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d029      	beq.n	800491e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020a 	bic.w	r2, r2, #10
 80048e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f003 021c 	and.w	r2, r3, #28
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2102      	movs	r1, #2
 80048fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004902:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d038      	beq.n	8004986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800491c:	e033      	b.n	8004986 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	f003 031c 	and.w	r3, r3, #28
 8004926:	2208      	movs	r2, #8
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02a      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d025      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020e 	bic.w	r2, r2, #14
 800494a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	f003 021c 	and.w	r2, r3, #28
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f202 	lsl.w	r2, r1, r2
 800495e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004986:	bf00      	nop
 8004988:	bf00      	nop
}
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049a6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049b8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f003 021c 	and.w	r2, r3, #28
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d108      	bne.n	80049f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ee:	e007      	b.n	8004a00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d80a      	bhi.n	8004a36 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a2c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6493      	str	r3, [r2, #72]	; 0x48
 8004a34:	e007      	b.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	009a      	lsls	r2, r3, #2
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a40:	4413      	add	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	3b08      	subs	r3, #8
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40020407 	.word	0x40020407
 8004a7c:	4002081c 	.word	0x4002081c
 8004a80:	cccccccd 	.word	0xcccccccd
 8004a84:	40020880 	.word	0x40020880

08004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aaa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	1000823f 	.word	0x1000823f
 8004acc:	40020940 	.word	0x40020940

08004ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ade:	e166      	b.n	8004dae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8158 	beq.w	8004da8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d005      	beq.n	8004b10 <HAL_GPIO_Init+0x40>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d130      	bne.n	8004b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b46:	2201      	movs	r2, #1
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0201 	and.w	r2, r3, #1
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d017      	beq.n	8004bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d123      	bne.n	8004c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	08da      	lsrs	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	08da      	lsrs	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3208      	adds	r2, #8
 8004bfc:	6939      	ldr	r1, [r7, #16]
 8004bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0203 	and.w	r2, r3, #3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80b2 	beq.w	8004da8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c44:	4b61      	ldr	r3, [pc, #388]	; (8004dcc <HAL_GPIO_Init+0x2fc>)
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	4a60      	ldr	r2, [pc, #384]	; (8004dcc <HAL_GPIO_Init+0x2fc>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8004c50:	4b5e      	ldr	r3, [pc, #376]	; (8004dcc <HAL_GPIO_Init+0x2fc>)
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c5c:	4a5c      	ldr	r2, [pc, #368]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c86:	d02b      	beq.n	8004ce0 <HAL_GPIO_Init+0x210>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a52      	ldr	r2, [pc, #328]	; (8004dd4 <HAL_GPIO_Init+0x304>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d025      	beq.n	8004cdc <HAL_GPIO_Init+0x20c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a51      	ldr	r2, [pc, #324]	; (8004dd8 <HAL_GPIO_Init+0x308>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d01f      	beq.n	8004cd8 <HAL_GPIO_Init+0x208>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a50      	ldr	r2, [pc, #320]	; (8004ddc <HAL_GPIO_Init+0x30c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d019      	beq.n	8004cd4 <HAL_GPIO_Init+0x204>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a4f      	ldr	r2, [pc, #316]	; (8004de0 <HAL_GPIO_Init+0x310>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <HAL_GPIO_Init+0x200>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <HAL_GPIO_Init+0x314>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00d      	beq.n	8004ccc <HAL_GPIO_Init+0x1fc>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a4d      	ldr	r2, [pc, #308]	; (8004de8 <HAL_GPIO_Init+0x318>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <HAL_GPIO_Init+0x1f8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a4c      	ldr	r2, [pc, #304]	; (8004dec <HAL_GPIO_Init+0x31c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_GPIO_Init+0x1f4>
 8004cc0:	2307      	movs	r3, #7
 8004cc2:	e00e      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	e00c      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cc8:	2306      	movs	r3, #6
 8004cca:	e00a      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004ccc:	2305      	movs	r3, #5
 8004cce:	e008      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	e006      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e004      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e002      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	f002 0203 	and.w	r2, r2, #3
 8004ce8:	0092      	lsls	r2, r2, #2
 8004cea:	4093      	lsls	r3, r2
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cf2:	4937      	ldr	r1, [pc, #220]	; (8004dd0 <HAL_GPIO_Init+0x300>)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d24:	4a32      	ldr	r2, [pc, #200]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4013      	ands	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d4e:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d54:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d7e:	4b1c      	ldr	r3, [pc, #112]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004da2:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <HAL_GPIO_Init+0x320>)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3301      	adds	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f47f ae91 	bne.w	8004ae0 <HAL_GPIO_Init+0x10>
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	48000400 	.word	0x48000400
 8004dd8:	48000800 	.word	0x48000800
 8004ddc:	48000c00 	.word	0x48000c00
 8004de0:	48001000 	.word	0x48001000
 8004de4:	48001400 	.word	0x48001400
 8004de8:	48001800 	.word	0x48001800
 8004dec:	48001c00 	.word	0x48001c00
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
 8004e00:	4613      	mov	r3, r2
 8004e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e04:	787b      	ldrb	r3, [r7, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e10:	e002      	b.n	8004e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	b08f      	sub	sp, #60	; 0x3c
 8004e28:	af0a      	add	r7, sp, #40	; 0x28
 8004e2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e116      	b.n	8005064 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fb ffb5 	bl	8000dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f002 fea0 	bl	8007bba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	687e      	ldr	r6, [r7, #4]
 8004e82:	466d      	mov	r5, sp
 8004e84:	f106 0410 	add.w	r4, r6, #16
 8004e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e94:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e98:	1d33      	adds	r3, r6, #4
 8004e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e9c:	6838      	ldr	r0, [r7, #0]
 8004e9e:	f002 fdb3 	bl	8007a08 <USB_CoreInit>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0d7      	b.n	8005064 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f002 fe8e 	bl	8007bdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e04a      	b.n	8004f5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	333d      	adds	r3, #61	; 0x3d
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004eda:	7bfa      	ldrb	r2, [r7, #15]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	333c      	adds	r3, #60	; 0x3c
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3342      	adds	r3, #66	; 0x42
 8004f02:	4602      	mov	r2, r0
 8004f04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	333f      	adds	r3, #63	; 0x3f
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3344      	adds	r3, #68	; 0x44
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3348      	adds	r3, #72	; 0x48
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	3350      	adds	r3, #80	; 0x50
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	7bfa      	ldrb	r2, [r7, #15]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d3af      	bcc.n	8004ec6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	e044      	b.n	8004ff6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fc4:	7bfa      	ldrb	r2, [r7, #15]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d3b5      	bcc.n	8004f6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	687e      	ldr	r6, [r7, #4]
 8005008:	466d      	mov	r5, sp
 800500a:	f106 0410 	add.w	r4, r6, #16
 800500e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800501a:	e885 0003 	stmia.w	r5, {r0, r1}
 800501e:	1d33      	adds	r3, r6, #4
 8005020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005022:	6838      	ldr	r0, [r7, #0]
 8005024:	f002 fe26 	bl	8007c74 <USB_DevInit>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e014      	b.n	8005064 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 ff6c 	bl	8005f30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f003 fdf8 	bl	8008c52 <USB_DevDisconnect>

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800506c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_PCD_Start+0x1c>
 8005084:	2302      	movs	r3, #2
 8005086:	e01c      	b.n	80050c2 <HAL_PCD_Start+0x56>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f002 fd75 	bl	8007b98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f003 fdac 	bl	8008c10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050ca:	b590      	push	{r4, r7, lr}
 80050cc:	b08d      	sub	sp, #52	; 0x34
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f003 fe6a 	bl	8008dba <USB_GetMode>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 8384 	bne.w	80057f6 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f003 fdce 	bl	8008c94 <USB_ReadInterrupts>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 837a 	beq.w	80057f4 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f003 fdc5 	bl	8008c94 <USB_ReadInterrupts>
 800510a:	4603      	mov	r3, r0
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d107      	bne.n	8005124 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f002 0202 	and.w	r2, r2, #2
 8005122:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f003 fdb3 	bl	8008c94 <USB_ReadInterrupts>
 800512e:	4603      	mov	r3, r0
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d161      	bne.n	80051fc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0210 	bic.w	r2, r2, #16
 8005146:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4413      	add	r3, r2
 8005164:	3304      	adds	r3, #4
 8005166:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	0c5b      	lsrs	r3, r3, #17
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	2b02      	cmp	r3, #2
 8005172:	d124      	bne.n	80051be <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d035      	beq.n	80051ec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800518a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	6a38      	ldr	r0, [r7, #32]
 8005194:	f003 fbea 	bl	800896c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a4:	441a      	add	r2, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051b6:	441a      	add	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	619a      	str	r2, [r3, #24]
 80051bc:	e016      	b.n	80051ec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	0c5b      	lsrs	r3, r3, #17
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d110      	bne.n	80051ec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051d0:	2208      	movs	r2, #8
 80051d2:	4619      	mov	r1, r3
 80051d4:	6a38      	ldr	r0, [r7, #32]
 80051d6:	f003 fbc9 	bl	800896c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051e6:	441a      	add	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0210 	orr.w	r2, r2, #16
 80051fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f003 fd47 	bl	8008c94 <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005210:	d16e      	bne.n	80052f0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f003 fd4d 	bl	8008cba <USB_ReadDevAllOutEpInterrupt>
 8005220:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005222:	e062      	b.n	80052ea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d057      	beq.n	80052de <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f003 fd72 	bl	8008d22 <USB_ReadDevOutEPInterrupt>
 800523e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	2301      	movs	r3, #1
 800525a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800525c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fd8c 	bl	8005d7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	461a      	mov	r2, r3
 800527c:	2308      	movs	r3, #8
 800527e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fdc8 	bl	8005e18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	461a      	mov	r2, r3
 80052a0:	2310      	movs	r3, #16
 80052a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	2320      	movs	r3, #32
 80052be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	461a      	mov	r2, r3
 80052d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	3301      	adds	r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d199      	bne.n	8005224 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f003 fccd 	bl	8008c94 <USB_ReadInterrupts>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005304:	f040 808c 	bne.w	8005420 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f003 fcee 	bl	8008cee <USB_ReadDevAllInEpInterrupt>
 8005312:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005318:	e07e      	b.n	8005418 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d073      	beq.n	800540c <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f003 fd15 	bl	8008d5e <USB_ReadDevInEPInterrupt>
 8005334:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	2201      	movs	r2, #1
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	43db      	mvns	r3, r3
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005360:	4013      	ands	r3, r2
 8005362:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	2301      	movs	r3, #1
 8005374:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	b2db      	uxtb	r3, r3
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fb fd8e 	bl	8000e9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	461a      	mov	r2, r3
 800539a:	2308      	movs	r3, #8
 800539c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	2310      	movs	r3, #16
 80053b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2340      	movs	r3, #64	; 0x40
 80053d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e2:	6a38      	ldr	r0, [r7, #32]
 80053e4:	f002 fd92 	bl	8007f0c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	2302      	movs	r3, #2
 80053f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fc2f 	bl	8005c6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	3301      	adds	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f af7d 	bne.w	800531a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f003 fc35 	bl	8008c94 <USB_ReadInterrupts>
 800542a:	4603      	mov	r3, r0
 800542c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005434:	d122      	bne.n	800547c <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800545c:	2100      	movs	r1, #0
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fd8a 	bl	8005f78 <HAL_PCDEx_LPM_Callback>
 8005464:	e002      	b.n	800546c <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fd64 	bl	8000f34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800547a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f003 fc07 	bl	8008c94 <USB_ReadInterrupts>
 8005486:	4603      	mov	r3, r0
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005490:	d112      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fd38 	bl	8000f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f003 fbe9 	bl	8008c94 <USB_ReadInterrupts>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054cc:	d121      	bne.n	8005512 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80054dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d111      	bne.n	800550c <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	f003 020f 	and.w	r2, r3, #15
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005502:	2101      	movs	r1, #1
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fd37 	bl	8005f78 <HAL_PCDEx_LPM_Callback>
 800550a:	e002      	b.n	8005512 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fb fd03 	bl	8000f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f003 fbbc 	bl	8008c94 <USB_ReadInterrupts>
 800551c:	4603      	mov	r3, r0
 800551e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005526:	f040 80b5 	bne.w	8005694 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2110      	movs	r1, #16
 8005544:	4618      	mov	r0, r3
 8005546:	f002 fce1 	bl	8007f0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554e:	e046      	b.n	80055de <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	461a      	mov	r2, r3
 800555e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005562:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005582:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005596:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	3301      	adds	r3, #1
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d3b3      	bcc.n	8005550 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d016      	beq.n	8005632 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005614:	f043 030b 	orr.w	r3, r3, #11
 8005618:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562a:	f043 030b 	orr.w	r3, r3, #11
 800562e:	6453      	str	r3, [r2, #68]	; 0x44
 8005630:	e015      	b.n	800565e <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005644:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005648:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005658:	f043 030b 	orr.w	r3, r3, #11
 800565c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005670:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f003 fbcc 	bl	8008e1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f003 fafb 	bl	8008c94 <USB_ReadInterrupts>
 800569e:	4603      	mov	r3, r0
 80056a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a8:	d124      	bne.n	80056f4 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 fb91 	bl	8008dd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f002 fca0 	bl	8007ffe <USB_GetDevSpeed>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681c      	ldr	r4, [r3, #0]
 80056ca:	f001 fb59 	bl	8006d80 <HAL_RCC_GetHCLKFreq>
 80056ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	4620      	mov	r0, r4
 80056da:	f002 f9c1 	bl	8007a60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fb fc05 	bl	8000eee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f003 facb 	bl	8008c94 <USB_ReadInterrupts>
 80056fe:	4603      	mov	r3, r0
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b08      	cmp	r3, #8
 8005706:	d10a      	bne.n	800571e <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fb fbe2 	bl	8000ed2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 0208 	and.w	r2, r2, #8
 800571c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f003 fab6 	bl	8008c94 <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005732:	d10f      	bne.n	8005754 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	b2db      	uxtb	r3, r3
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb fc18 	bl	8000f74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f003 fa9b 	bl	8008c94 <USB_ReadInterrupts>
 800575e:	4603      	mov	r3, r0
 8005760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005768:	d10f      	bne.n	800578a <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fb fbeb 	bl	8000f50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f003 fa80 	bl	8008c94 <USB_ReadInterrupts>
 8005794:	4603      	mov	r3, r0
 8005796:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d10a      	bne.n	80057b6 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fb fbf9 	bl	8000f98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 fa6a 	bl	8008c94 <USB_ReadInterrupts>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d115      	bne.n	80057f6 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fb fbe9 	bl	8000fb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	e000      	b.n	80057f6 <HAL_PCD_IRQHandler+0x72c>
      return;
 80057f4:	bf00      	nop
    }
  }
}
 80057f6:	3734      	adds	r7, #52	; 0x34
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd90      	pop	{r4, r7, pc}

080057fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_PCD_SetAddress+0x1a>
 8005812:	2302      	movs	r3, #2
 8005814:	e013      	b.n	800583e <HAL_PCD_SetAddress+0x42>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	78fa      	ldrb	r2, [r7, #3]
 8005822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f003 f9c8 	bl	8008bc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	461a      	mov	r2, r3
 8005854:	4603      	mov	r3, r0
 8005856:	70fb      	strb	r3, [r7, #3]
 8005858:	460b      	mov	r3, r1
 800585a:	803b      	strh	r3, [r7, #0]
 800585c:	4613      	mov	r3, r2
 800585e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005868:	2b00      	cmp	r3, #0
 800586a:	da0f      	bge.n	800588c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 020f 	and.w	r2, r3, #15
 8005872:	4613      	mov	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	3338      	adds	r3, #56	; 0x38
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	3304      	adds	r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	705a      	strb	r2, [r3, #1]
 800588a:	e00f      	b.n	80058ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 020f 	and.w	r2, r3, #15
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	3304      	adds	r3, #4
 80058a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058b8:	883a      	ldrh	r2, [r7, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	78ba      	ldrb	r2, [r7, #2]
 80058c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d004      	beq.n	80058d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058d6:	78bb      	ldrb	r3, [r7, #2]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d102      	bne.n	80058e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_PCD_EP_Open+0xaa>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e00e      	b.n	800590e <HAL_PCD_EP_Open+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68f9      	ldr	r1, [r7, #12]
 80058fe:	4618      	mov	r0, r3
 8005900:	f002 fb9c 	bl	800803c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800590c:	7afb      	ldrb	r3, [r7, #11]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005926:	2b00      	cmp	r3, #0
 8005928:	da0f      	bge.n	800594a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	3338      	adds	r3, #56	; 0x38
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	3304      	adds	r3, #4
 8005940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	705a      	strb	r2, [r3, #1]
 8005948:	e00f      	b.n	800596a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	f003 020f 	and.w	r2, r3, #15
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	3304      	adds	r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_PCD_EP_Close+0x6e>
 8005980:	2302      	movs	r3, #2
 8005982:	e00e      	b.n	80059a2 <HAL_PCD_EP_Close+0x8c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68f9      	ldr	r1, [r7, #12]
 8005992:	4618      	mov	r0, r3
 8005994:	f002 fbda 	bl	800814c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	460b      	mov	r3, r1
 80059b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	3304      	adds	r3, #4
 80059d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f002 fe57 	bl	80086bc <USB_EP0StartXfer>
 8005a0e:	e005      	b.n	8005a1c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6979      	ldr	r1, [r7, #20]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f002 fc74 	bl	8008304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b086      	sub	sp, #24
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	460b      	mov	r3, r1
 8005a34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	3338      	adds	r3, #56	; 0x38
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2201      	movs	r2, #1
 8005a64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a66:	7afb      	ldrb	r3, [r7, #11]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fe1a 	bl	80086bc <USB_EP0StartXfer>
 8005a88:	e005      	b.n	8005a96 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6979      	ldr	r1, [r7, #20]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f002 fc37 	bl	8008304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d901      	bls.n	8005abe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e04e      	b.n	8005b5c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da0f      	bge.n	8005ae6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	3338      	adds	r3, #56	; 0x38
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3304      	adds	r3, #4
 8005adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	705a      	strb	r2, [r3, #1]
 8005ae4:	e00d      	b.n	8005b02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	3304      	adds	r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_PCD_EP_SetStall+0x82>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e01c      	b.n	8005b5c <HAL_PCD_EP_SetStall+0xbc>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f002 ff73 	bl	8008a1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d108      	bne.n	8005b52 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f003 f965 	bl	8008e1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d901      	bls.n	8005b82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e042      	b.n	8005c08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da0f      	bge.n	8005baa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	f003 020f 	and.w	r2, r3, #15
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	3338      	adds	r3, #56	; 0x38
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	705a      	strb	r2, [r3, #1]
 8005ba8:	e00f      	b.n	8005bca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_PCD_EP_ClrStall+0x86>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e00e      	b.n	8005c08 <HAL_PCD_EP_ClrStall+0xa4>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 ff7d 	bl	8008af8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_PCD_EP_Flush+0x1a>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e01b      	b.n	8005c62 <HAL_PCD_EP_Flush+0x52>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da09      	bge.n	8005c4e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f002 f960 	bl	8007f0c <USB_FlushTxFifo>
 8005c4c:	e004      	b.n	8005c58 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f002 f98c 	bl	8007f70 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b088      	sub	sp, #32
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	3338      	adds	r3, #56	; 0x38
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3304      	adds	r3, #4
 8005c90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d901      	bls.n	8005ca2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e067      	b.n	8005d72 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d902      	bls.n	8005cbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3303      	adds	r3, #3
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cc6:	e026      	b.n	8005d16 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d902      	bls.n	8005ce4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3303      	adds	r3, #3
 8005ce8:	089b      	lsrs	r3, r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68d9      	ldr	r1, [r3, #12]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	6978      	ldr	r0, [r7, #20]
 8005cfa:	f002 fdfd 	bl	80088f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	441a      	add	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d809      	bhi.n	8005d40 <PCD_WriteEmptyTxFifo+0xd6>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d203      	bcs.n	8005d40 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1c3      	bne.n	8005cc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d811      	bhi.n	8005d70 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	2201      	movs	r2, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	6939      	ldr	r1, [r7, #16]
 8005d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	333c      	adds	r3, #60	; 0x3c
 8005d94:	3304      	adds	r3, #4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <PCD_EP_OutXfrComplete_int+0x98>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d124      	bne.n	8005dfc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	6093      	str	r3, [r2, #8]
 8005dd0:	e01a      	b.n	8005e08 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2320      	movs	r3, #32
 8005dec:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7fb f837 	bl	8000e68 <HAL_PCD_DataOutStageCallback>
 8005dfa:	e005      	b.n	8005e08 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fb f830 	bl	8000e68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	4f54310a 	.word	0x4f54310a

08005e18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	3304      	adds	r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <PCD_EP_OutSetupPacket_int+0x64>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d90e      	bls.n	8005e6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	461a      	mov	r2, r3
 8005e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fa ffe9 	bl	8000e44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	4f54300a 	.word	0x4f54300a

08005e80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d107      	bne.n	8005eae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e9e:	883b      	ldrh	r3, [r7, #0]
 8005ea0:	0419      	lsls	r1, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8005eac:	e028      	b.n	8005f00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4413      	add	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
 8005ec0:	e00d      	b.n	8005ede <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	3340      	adds	r3, #64	; 0x40
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	3301      	adds	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d3ec      	bcc.n	8005ec2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ee8:	883b      	ldrh	r3, [r7, #0]
 8005eea:	0418      	lsls	r0, r3, #16
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	4302      	orrs	r2, r0
 8005ef8:	3340      	adds	r3, #64	; 0x40
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f62:	f043 0303 	orr.w	r3, r3, #3
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9e:	6013      	str	r3, [r2, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40007000 	.word	0x40007000

08005fb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_PWREx_GetVoltageRange+0x3c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc0:	d102      	bne.n	8005fc8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc6:	e00b      	b.n	8005fe0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <HAL_PWREx_GetVoltageRange+0x3c>)
 8005fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd6:	d102      	bne.n	8005fde <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fdc:	e000      	b.n	8005fe0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005fde:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40007000 	.word	0x40007000

08005ff0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d141      	bne.n	8006082 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ffe:	4b4b      	ldr	r3, [pc, #300]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600a:	d131      	bne.n	8006070 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800600c:	4b47      	ldr	r3, [pc, #284]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006012:	4a46      	ldr	r2, [pc, #280]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800601c:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006024:	4a41      	ldr	r2, [pc, #260]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800602a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800602c:	4b40      	ldr	r3, [pc, #256]	; (8006130 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2232      	movs	r2, #50	; 0x32
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	4a3f      	ldr	r2, [pc, #252]	; (8006134 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006038:	fba2 2303 	umull	r2, r3, r2, r3
 800603c:	0c9b      	lsrs	r3, r3, #18
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006042:	e002      	b.n	800604a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3b01      	subs	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800604a:	4b38      	ldr	r3, [pc, #224]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006056:	d102      	bne.n	800605e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f2      	bne.n	8006044 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800605e:	4b33      	ldr	r3, [pc, #204]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606a:	d158      	bne.n	800611e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e057      	b.n	8006120 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006070:	4b2e      	ldr	r3, [pc, #184]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006076:	4a2d      	ldr	r2, [pc, #180]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006080:	e04d      	b.n	800611e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	d141      	bne.n	800610e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800608a:	4b28      	ldr	r3, [pc, #160]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006096:	d131      	bne.n	80060fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609e:	4a23      	ldr	r2, [pc, #140]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060a8:	4b20      	ldr	r3, [pc, #128]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060b0:	4a1e      	ldr	r2, [pc, #120]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80060b8:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2232      	movs	r2, #50	; 0x32
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060c4:	fba2 2303 	umull	r2, r3, r2, r3
 80060c8:	0c9b      	lsrs	r3, r3, #18
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ce:	e002      	b.n	80060d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060d6:	4b15      	ldr	r3, [pc, #84]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e2:	d102      	bne.n	80060ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f2      	bne.n	80060d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f6:	d112      	bne.n	800611e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e011      	b.n	8006120 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060fc:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006102:	4a0a      	ldr	r2, [pc, #40]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800610c:	e007      	b.n	800611e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006116:	4a05      	ldr	r2, [pc, #20]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800611c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40007000 	.word	0x40007000
 8006130:	20000068 	.word	0x20000068
 8006134:	431bde83 	.word	0x431bde83

08006138 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_PWREx_EnableVddUSB+0x1c>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006146:	6053      	str	r3, [r2, #4]
}
 8006148:	bf00      	nop
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40007000 	.word	0x40007000

08006158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f000 bc1a 	b.w	80069a0 <HAL_RCC_OscConfig+0x848>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800616c:	4b96      	ldr	r3, [pc, #600]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 030c 	and.w	r3, r3, #12
 8006174:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006176:	4b94      	ldr	r3, [pc, #592]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80e4 	beq.w	8006356 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <HAL_RCC_OscConfig+0x4c>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	f040 808b 	bne.w	80062b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	f040 8087 	bne.w	80062b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061a4:	4b88      	ldr	r3, [pc, #544]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_OscConfig+0x64>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e3f1      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	4b81      	ldr	r3, [pc, #516]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_RCC_OscConfig+0x7e>
 80061cc:	4b7e      	ldr	r3, [pc, #504]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061d4:	e005      	b.n	80061e2 <HAL_RCC_OscConfig+0x8a>
 80061d6:	4b7c      	ldr	r3, [pc, #496]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80061d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d223      	bcs.n	800622e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fdd4 	bl	8006d98 <RCC_SetFlashLatencyFromMSIRange>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e3d2      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061fa:	4b73      	ldr	r3, [pc, #460]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a72      	ldr	r2, [pc, #456]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006200:	f043 0308 	orr.w	r3, r3, #8
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4b70      	ldr	r3, [pc, #448]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	496d      	ldr	r1, [pc, #436]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006214:	4313      	orrs	r3, r2
 8006216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006218:	4b6b      	ldr	r3, [pc, #428]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	4968      	ldr	r1, [pc, #416]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
 800622c:	e025      	b.n	800627a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800622e:	4b66      	ldr	r3, [pc, #408]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a65      	ldr	r2, [pc, #404]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006234:	f043 0308 	orr.w	r3, r3, #8
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	4960      	ldr	r1, [pc, #384]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006248:	4313      	orrs	r3, r2
 800624a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800624c:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	495b      	ldr	r1, [pc, #364]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800625c:	4313      	orrs	r3, r2
 800625e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fd94 	bl	8006d98 <RCC_SetFlashLatencyFromMSIRange>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e392      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800627a:	f000 fcf7 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 800627e:	4602      	mov	r2, r0
 8006280:	4b51      	ldr	r3, [pc, #324]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	4950      	ldr	r1, [pc, #320]	; (80063cc <HAL_RCC_OscConfig+0x274>)
 800628c:	5ccb      	ldrb	r3, [r1, r3]
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	fa22 f303 	lsr.w	r3, r2, r3
 8006296:	4a4e      	ldr	r2, [pc, #312]	; (80063d0 <HAL_RCC_OscConfig+0x278>)
 8006298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800629a:	4b4e      	ldr	r3, [pc, #312]	; (80063d4 <HAL_RCC_OscConfig+0x27c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fc f99a 	bl	80025d8 <HAL_InitTick>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d052      	beq.n	8006354 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	e376      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d032      	beq.n	8006320 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062ba:	4b43      	ldr	r3, [pc, #268]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a42      	ldr	r2, [pc, #264]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062c6:	f7fc f9d7 	bl	8002678 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062ce:	f7fc f9d3 	bl	8002678 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e35f      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062e0:	4b39      	ldr	r3, [pc, #228]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062ec:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a35      	ldr	r2, [pc, #212]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80062f2:	f043 0308 	orr.w	r3, r3, #8
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	4930      	ldr	r1, [pc, #192]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006306:	4313      	orrs	r3, r2
 8006308:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800630a:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	492b      	ldr	r1, [pc, #172]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800631a:	4313      	orrs	r3, r2
 800631c:	604b      	str	r3, [r1, #4]
 800631e:	e01a      	b.n	8006356 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006320:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800632c:	f7fc f9a4 	bl	8002678 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006334:	f7fc f9a0 	bl	8002678 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e32c      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x1dc>
 8006352:	e000      	b.n	8006356 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d077      	beq.n	8006452 <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d005      	beq.n	8006374 <HAL_RCC_OscConfig+0x21c>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b0c      	cmp	r3, #12
 800636c:	d10e      	bne.n	800638c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b03      	cmp	r3, #3
 8006372:	d10b      	bne.n	800638c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d067      	beq.n	8006450 <HAL_RCC_OscConfig+0x2f8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d163      	bne.n	8006450 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e309      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d106      	bne.n	80063a4 <HAL_RCC_OscConfig+0x24c>
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e025      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ac:	d114      	bne.n	80063d8 <HAL_RCC_OscConfig+0x280>
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a05      	ldr	r2, [pc, #20]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80063b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a02      	ldr	r2, [pc, #8]	; (80063c8 <HAL_RCC_OscConfig+0x270>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e013      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
 80063c8:	40021000 	.word	0x40021000
 80063cc:	0800d13c 	.word	0x0800d13c
 80063d0:	20000068 	.word	0x20000068
 80063d4:	2000006c 	.word	0x2000006c
 80063d8:	4ba2      	ldr	r3, [pc, #648]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4aa1      	ldr	r2, [pc, #644]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80063de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b9f      	ldr	r3, [pc, #636]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a9e      	ldr	r2, [pc, #632]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80063ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fc f93e 	bl	8002678 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006400:	f7fc f93a 	bl	8002678 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	; 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e2c4      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006416:	4b93      	ldr	r3, [pc, #588]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0ee      	beq.n	8006400 <HAL_RCC_OscConfig+0x2a8>
 8006422:	e016      	b.n	8006452 <HAL_RCC_OscConfig+0x2fa>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fc f928 	bl	8002678 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800642a:	e00a      	b.n	8006442 <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800642c:	f7fc f924 	bl	8002678 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	; 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e2ae      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006442:	4b88      	ldr	r3, [pc, #544]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1ee      	bne.n	800642c <HAL_RCC_OscConfig+0x2d4>
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x2fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d060      	beq.n	8006520 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d005      	beq.n	8006470 <HAL_RCC_OscConfig+0x318>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d119      	bne.n	800649e <HAL_RCC_OscConfig+0x346>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d116      	bne.n	800649e <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006470:	4b7c      	ldr	r3, [pc, #496]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_RCC_OscConfig+0x330>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e28b      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006488:	4b76      	ldr	r3, [pc, #472]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	061b      	lsls	r3, r3, #24
 8006496:	4973      	ldr	r1, [pc, #460]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006498:	4313      	orrs	r3, r2
 800649a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649c:	e040      	b.n	8006520 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d023      	beq.n	80064ee <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a6:	4b6f      	ldr	r3, [pc, #444]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a6e      	ldr	r2, [pc, #440]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fc f8e1 	bl	8002678 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ba:	f7fc f8dd 	bl	8002678 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e269      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064cc:	4b65      	ldr	r3, [pc, #404]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d8:	4b62      	ldr	r3, [pc, #392]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	495f      	ldr	r1, [pc, #380]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
 80064ec:	e018      	b.n	8006520 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ee:	4b5d      	ldr	r3, [pc, #372]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a5c      	ldr	r2, [pc, #368]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80064f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fc f8bd 	bl	8002678 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006502:	f7fc f8b9 	bl	8002678 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e245      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006514:	4b53      	ldr	r3, [pc, #332]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f0      	bne.n	8006502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d03c      	beq.n	80065a6 <HAL_RCC_OscConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01c      	beq.n	800656e <HAL_RCC_OscConfig+0x416>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006534:	4b4b      	ldr	r3, [pc, #300]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653a:	4a4a      	ldr	r2, [pc, #296]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fc f898 	bl	8002678 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654c:	f7fc f894 	bl	8002678 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e220      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800655e:	4b41      	ldr	r3, [pc, #260]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ef      	beq.n	800654c <HAL_RCC_OscConfig+0x3f4>
 800656c:	e01b      	b.n	80065a6 <HAL_RCC_OscConfig+0x44e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656e:	4b3d      	ldr	r3, [pc, #244]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006574:	4a3b      	ldr	r2, [pc, #236]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fc f87b 	bl	8002678 <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x440>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006586:	f7fc f877 	bl	8002678 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e203      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006598:	4b32      	ldr	r3, [pc, #200]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ef      	bne.n	8006586 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80a6 	beq.w	8006700 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065b4:	2300      	movs	r3, #0
 80065b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80065ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10d      	bne.n	80065e0 <HAL_RCC_OscConfig+0x488>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ce:	6593      	str	r3, [r2, #88]	; 0x58
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e0:	4b21      	ldr	r3, [pc, #132]	; (8006668 <HAL_RCC_OscConfig+0x510>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d118      	bne.n	800661e <HAL_RCC_OscConfig+0x4c6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ec:	4b1e      	ldr	r3, [pc, #120]	; (8006668 <HAL_RCC_OscConfig+0x510>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <HAL_RCC_OscConfig+0x510>)
 80065f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f8:	f7fc f83e 	bl	8002678 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x4ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006600:	f7fc f83a 	bl	8002678 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e1c6      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <HAL_RCC_OscConfig+0x510>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x4a8>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d108      	bne.n	8006638 <HAL_RCC_OscConfig+0x4e0>
 8006626:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662c:	4a0d      	ldr	r2, [pc, #52]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006636:	e029      	b.n	800668c <HAL_RCC_OscConfig+0x534>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b05      	cmp	r3, #5
 800663e:	d115      	bne.n	800666c <HAL_RCC_OscConfig+0x514>
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	4a07      	ldr	r2, [pc, #28]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	4a03      	ldr	r2, [pc, #12]	; (8006664 <HAL_RCC_OscConfig+0x50c>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006660:	e014      	b.n	800668c <HAL_RCC_OscConfig+0x534>
 8006662:	bf00      	nop
 8006664:	40021000 	.word	0x40021000
 8006668:	40007000 	.word	0x40007000
 800666c:	4b9d      	ldr	r3, [pc, #628]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	4a9c      	ldr	r2, [pc, #624]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800667c:	4b99      	ldr	r3, [pc, #612]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006682:	4a98      	ldr	r2, [pc, #608]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006684:	f023 0304 	bic.w	r3, r3, #4
 8006688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d016      	beq.n	80066c2 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fb fff0 	bl	8002678 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800669a:	e00a      	b.n	80066b2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669c:	f7fb ffec 	bl	8002678 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e176      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066b2:	4b8c      	ldr	r3, [pc, #560]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0ed      	beq.n	800669c <HAL_RCC_OscConfig+0x544>
 80066c0:	e015      	b.n	80066ee <HAL_RCC_OscConfig+0x596>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c2:	f7fb ffd9 	bl	8002678 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066c8:	e00a      	b.n	80066e0 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	f7fb ffd5 	bl	8002678 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	4293      	cmp	r3, r2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e15f      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066e0:	4b80      	ldr	r3, [pc, #512]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1ed      	bne.n	80066ca <HAL_RCC_OscConfig+0x572>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ee:	7ffb      	ldrb	r3, [r7, #31]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d105      	bne.n	8006700 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f4:	4b7b      	ldr	r3, [pc, #492]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	4a7a      	ldr	r2, [pc, #488]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80066fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d03c      	beq.n	8006786 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01c      	beq.n	800674e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006714:	4b73      	ldr	r3, [pc, #460]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800671a:	4a72      	ldr	r2, [pc, #456]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fb ffa8 	bl	8002678 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x5e6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800672c:	f7fb ffa4 	bl	8002678 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e130      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800673e:	4b69      	ldr	r3, [pc, #420]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0ef      	beq.n	800672c <HAL_RCC_OscConfig+0x5d4>
 800674c:	e01b      	b.n	8006786 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800674e:	4b65      	ldr	r3, [pc, #404]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006754:	4a63      	ldr	r2, [pc, #396]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675e:	f7fb ff8b 	bl	8002678 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006766:	f7fb ff87 	bl	8002678 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e113      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006778:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800677a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1ef      	bne.n	8006766 <HAL_RCC_OscConfig+0x60e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8107 	beq.w	800699e <HAL_RCC_OscConfig+0x846>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	2b02      	cmp	r3, #2
 8006796:	f040 80cf 	bne.w	8006938 <HAL_RCC_OscConfig+0x7e0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800679a:	4b52      	ldr	r3, [pc, #328]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f003 0203 	and.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d12c      	bne.n	8006808 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	3b01      	subs	r3, #1
 80067ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067bc:	429a      	cmp	r2, r3
 80067be:	d123      	bne.n	8006808 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d11b      	bne.n	8006808 <HAL_RCC_OscConfig+0x6b0>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067dc:	429a      	cmp	r2, r3
 80067de:	d113      	bne.n	8006808 <HAL_RCC_OscConfig+0x6b0>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	3b01      	subs	r3, #1
 80067ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d109      	bne.n	8006808 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	3b01      	subs	r3, #1
 8006802:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d071      	beq.n	80068ec <HAL_RCC_OscConfig+0x794>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d068      	beq.n	80068e0 <HAL_RCC_OscConfig+0x788>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800680e:	4b35      	ldr	r3, [pc, #212]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <HAL_RCC_OscConfig+0x6ce>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800681a:	4b32      	ldr	r3, [pc, #200]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_RCC_OscConfig+0x6d2>
#endif
            )
          {
            return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e0ba      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800682a:	4b2e      	ldr	r3, [pc, #184]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2d      	ldr	r2, [pc, #180]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006834:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006836:	f7fb ff1f 	bl	8002678 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x6f8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683e:	f7fb ff1b 	bl	8002678 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x6f8>
              {
                return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e0a7      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006850:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f0      	bne.n	800683e <HAL_RCC_OscConfig+0x6e6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800685c:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_RCC_OscConfig+0x790>)
 8006862:	4013      	ands	r3, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800686c:	3a01      	subs	r2, #1
 800686e:	0112      	lsls	r2, r2, #4
 8006870:	4311      	orrs	r1, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006876:	0212      	lsls	r2, r2, #8
 8006878:	4311      	orrs	r1, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800687e:	0852      	lsrs	r2, r2, #1
 8006880:	3a01      	subs	r2, #1
 8006882:	0552      	lsls	r2, r2, #21
 8006884:	4311      	orrs	r1, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800688a:	0852      	lsrs	r2, r2, #1
 800688c:	3a01      	subs	r2, #1
 800688e:	0652      	lsls	r2, r2, #25
 8006890:	4311      	orrs	r1, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006896:	06d2      	lsls	r2, r2, #27
 8006898:	430a      	orrs	r2, r1
 800689a:	4912      	ldr	r1, [pc, #72]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 800689c:	4313      	orrs	r3, r2
 800689e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a0f      	ldr	r2, [pc, #60]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80068a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068ac:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80068b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068b8:	f7fb fede 	bl	8002678 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x77a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fb feda 	bl	8002678 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x77a>
              {
                return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e066      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d2:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x768>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068de:	e05e      	b.n	800699e <HAL_RCC_OscConfig+0x846>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e05d      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
 80068e4:	40021000 	.word	0x40021000
 80068e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ec:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d152      	bne.n	800699e <HAL_RCC_OscConfig+0x846>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a2a      	ldr	r2, [pc, #168]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 80068fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006902:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006904:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4a27      	ldr	r2, [pc, #156]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 800690a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006910:	f7fb feb2 	bl	8002678 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x7d2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006918:	f7fb feae 	bl	8002678 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x7d2>
            {
              return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e03a      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800692a:	4b1f      	ldr	r3, [pc, #124]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x7c0>
 8006936:	e032      	b.n	800699e <HAL_RCC_OscConfig+0x846>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b0c      	cmp	r3, #12
 800693c:	d02d      	beq.n	800699a <HAL_RCC_OscConfig+0x842>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693e:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 8006944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006948:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800694a:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4a10      	ldr	r2, [pc, #64]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 8006968:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800696c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006970:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006972:	f7fb fe81 	bl	8002678 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x834>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800697a:	f7fb fe7d 	bl	8002678 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e009      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_RCC_OscConfig+0x850>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f0      	bne.n	800697a <HAL_RCC_OscConfig+0x822>
 8006998:	e001      	b.n	800699e <HAL_RCC_OscConfig+0x846>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <HAL_RCC_OscConfig+0x848>
      }
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40021000 	.word	0x40021000

080069ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e10f      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c4:	4b89      	ldr	r3, [pc, #548]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d910      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b86      	ldr	r3, [pc, #536]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 020f 	bic.w	r2, r3, #15
 80069da:	4984      	ldr	r1, [pc, #528]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e2:	4b82      	ldr	r3, [pc, #520]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0f7      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8089 	beq.w	8006b14 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d133      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0a:	4b79      	ldr	r3, [pc, #484]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e0e4      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006a1a:	f000 fa17 	bl	8006e4c <RCC_GetSysClockFreqFromPLLSource>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4a74      	ldr	r2, [pc, #464]	; (8006bf4 <HAL_RCC_ClockConfig+0x248>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d955      	bls.n	8006ad2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006a26:	4b72      	ldr	r3, [pc, #456]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a32:	4b6f      	ldr	r3, [pc, #444]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3a:	4a6d      	ldr	r2, [pc, #436]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e044      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03e      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x126>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d13a      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a5c:	4b64      	ldr	r3, [pc, #400]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a64:	4a62      	ldr	r2, [pc, #392]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e02f      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d107      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a7a:	4b5d      	ldr	r3, [pc, #372]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d115      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e0ac      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a92:	4b57      	ldr	r3, [pc, #348]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e0a0      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aa2:	4b53      	ldr	r3, [pc, #332]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e098      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006ab2:	f000 f8db 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4a4e      	ldr	r2, [pc, #312]	; (8006bf4 <HAL_RCC_ClockConfig+0x248>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d909      	bls.n	8006ad2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006abe:	4b4c      	ldr	r3, [pc, #304]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ac6:	4a4a      	ldr	r2, [pc, #296]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006acc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad2:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f023 0203 	bic.w	r2, r3, #3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4944      	ldr	r1, [pc, #272]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae4:	f7fb fdc8 	bl	8002678 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aea:	e00a      	b.n	8006b02 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aec:	f7fb fdc4 	bl	8002678 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e070      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b02:	4b3b      	ldr	r3, [pc, #236]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 020c 	and.w	r2, r3, #12
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d1eb      	bne.n	8006aec <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b20:	4b33      	ldr	r3, [pc, #204]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4930      	ldr	r1, [pc, #192]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b80      	cmp	r3, #128	; 0x80
 8006b38:	d105      	bne.n	8006b46 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b3a:	4b2d      	ldr	r3, [pc, #180]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b44:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d210      	bcs.n	8006b76 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f023 020f 	bic.w	r2, r3, #15
 8006b5c:	4923      	ldr	r1, [pc, #140]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b64:	4b21      	ldr	r3, [pc, #132]	; (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d001      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e036      	b.n	8006be4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d008      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b82:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4918      	ldr	r1, [pc, #96]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ba0:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4910      	ldr	r1, [pc, #64]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bb4:	f000 f85a 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	490c      	ldr	r1, [pc, #48]	; (8006bf8 <HAL_RCC_ClockConfig+0x24c>)
 8006bc6:	5ccb      	ldrb	r3, [r1, r3]
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <HAL_RCC_ClockConfig+0x250>)
 8006bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <HAL_RCC_ClockConfig+0x254>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fb fcfd 	bl	80025d8 <HAL_InitTick>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]

  return status;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40022000 	.word	0x40022000
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	04c4b400 	.word	0x04c4b400
 8006bf8:	0800d13c 	.word	0x0800d13c
 8006bfc:	20000068 	.word	0x20000068
 8006c00:	2000006c 	.word	0x2000006c

08006c04 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	; 0x28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8006c10:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <HAL_RCC_MCOConfig+0x64>)
 8006c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c14:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <HAL_RCC_MCOConfig+0x64>)
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_RCC_MCOConfig+0x64>)
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c32:	2302      	movs	r3, #2
 8006c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006c3e:	f107 0314 	add.w	r3, r7, #20
 8006c42:	4619      	mov	r1, r3
 8006c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c48:	f7fd ff42 	bl	8004ad0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_RCC_MCOConfig+0x64>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	4903      	ldr	r1, [pc, #12]	; (8006c68 <HAL_RCC_MCOConfig+0x64>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]
}
 8006c60:	bf00      	nop
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40021000 	.word	0x40021000

08006c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b089      	sub	sp, #36	; 0x24
 8006c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c7a:	4b3e      	ldr	r3, [pc, #248]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 030c 	and.w	r3, r3, #12
 8006c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c84:	4b3b      	ldr	r3, [pc, #236]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d121      	bne.n	8006cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d11e      	bne.n	8006cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ca0:	4b34      	ldr	r3, [pc, #208]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d107      	bne.n	8006cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cac:	4b31      	ldr	r3, [pc, #196]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e005      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006cc8:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d102      	bne.n	8006cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ce4:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e004      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d101      	bne.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cf0:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0c      	cmp	r3, #12
 8006cf8:	d134      	bne.n	8006d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d003      	beq.n	8006d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d003      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0xac>
 8006d10:	e005      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8006d14:	617b      	str	r3, [r7, #20]
      break;
 8006d16:	e005      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d18:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8006d1a:	617b      	str	r3, [r7, #20]
      break;
 8006d1c:	e002      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	617b      	str	r3, [r7, #20]
      break;
 8006d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	3301      	adds	r3, #1
 8006d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	fb03 f202 	mul.w	r2, r3, r2
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	0e5b      	lsrs	r3, r3, #25
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	3301      	adds	r3, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d64:	69bb      	ldr	r3, [r7, #24]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3724      	adds	r7, #36	; 0x24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000
 8006d78:	0800d154 	.word	0x0800d154
 8006d7c:	00f42400 	.word	0x00f42400

08006d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d86:	681b      	ldr	r3, [r3, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000068 	.word	0x20000068

08006d98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006da4:	4b27      	ldr	r3, [pc, #156]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006db0:	f7ff f8fe 	bl	8005fb0 <HAL_PWREx_GetVoltageRange>
 8006db4:	6178      	str	r0, [r7, #20]
 8006db6:	e014      	b.n	8006de2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006db8:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8006dc4:	4b1f      	ldr	r3, [pc, #124]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006dd0:	f7ff f8ee 	bl	8005fb0 <HAL_PWREx_GetVoltageRange>
 8006dd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dd6:	4b1b      	ldr	r3, [pc, #108]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dda:	4a1a      	ldr	r2, [pc, #104]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d10b      	bne.n	8006e02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d913      	bls.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2ba0      	cmp	r3, #160	; 0xa0
 8006df4:	d902      	bls.n	8006dfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006df6:	2302      	movs	r3, #2
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e00d      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	e00a      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b7f      	cmp	r3, #127	; 0x7f
 8006e06:	d902      	bls.n	8006e0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006e08:	2302      	movs	r3, #2
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e004      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b70      	cmp	r3, #112	; 0x70
 8006e12:	d101      	bne.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e14:	2301      	movs	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 020f 	bic.w	r2, r3, #15
 8006e20:	4909      	ldr	r1, [pc, #36]	; (8006e48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e28:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d001      	beq.n	8006e3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40021000 	.word	0x40021000
 8006e48:	40022000 	.word	0x40022000

08006e4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006e56:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d118      	bne.n	8006e94 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e62:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d107      	bne.n	8006e7e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e6e:	4b27      	ldr	r3, [pc, #156]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e005      	b.n	8006e8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e7e:	4b23      	ldr	r3, [pc, #140]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e8a:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e92:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d003      	beq.n	8006eac <RCC_GetSysClockFreqFromPLLSource+0x60>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d003      	beq.n	8006eb2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8006eaa:	e005      	b.n	8006eb8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006eac:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006eae:	613b      	str	r3, [r7, #16]
    break;
 8006eb0:	e005      	b.n	8006ebe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006eb2:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006eb4:	613b      	str	r3, [r7, #16]
    break;
 8006eb6:	e002      	b.n	8006ebe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	613b      	str	r3, [r7, #16]
    break;
 8006ebc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ebe:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	091b      	lsrs	r3, r3, #4
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	0a1b      	lsrs	r3, r3, #8
 8006ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	fb03 f202 	mul.w	r2, r3, r2
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ee4:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	0e5b      	lsrs	r3, r3, #25
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006efe:	683b      	ldr	r3, [r7, #0]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	0800d154 	.word	0x0800d154
 8006f14:	00f42400 	.word	0x00f42400

08006f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f20:	2300      	movs	r3, #0
 8006f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f24:	2300      	movs	r3, #0
 8006f26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d040      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f38:	2b80      	cmp	r3, #128	; 0x80
 8006f3a:	d02a      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f3c:	2b80      	cmp	r3, #128	; 0x80
 8006f3e:	d825      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006f40:	2b60      	cmp	r3, #96	; 0x60
 8006f42:	d026      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f44:	2b60      	cmp	r3, #96	; 0x60
 8006f46:	d821      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d006      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d81d      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d010      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006f58:	e018      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f5a:	4b89      	ldr	r3, [pc, #548]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4a88      	ldr	r2, [pc, #544]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f64:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f66:	e015      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fb62 	bl	8007638 <RCCEx_PLLSAI1_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f78:	e00c      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3320      	adds	r3, #32
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fc4d 	bl	8007820 <RCCEx_PLLSAI2_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f8a:	e003      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	74fb      	strb	r3, [r7, #19]
      break;
 8006f90:	e000      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f94:	7cfb      	ldrb	r3, [r7, #19]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f9a:	4b79      	ldr	r3, [pc, #484]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fa0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa8:	4975      	ldr	r1, [pc, #468]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006fb0:	e001      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb2:	7cfb      	ldrb	r3, [r7, #19]
 8006fb4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d047      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fca:	d030      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	d82a      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd6:	d02a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fdc:	d824      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe2:	d008      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe8:	d81e      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d010      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ff4:	e018      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ff6:	4b62      	ldr	r3, [pc, #392]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	4a61      	ldr	r2, [pc, #388]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007000:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007002:	e015      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb14 	bl	8007638 <RCCEx_PLLSAI1_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007014:	e00c      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3320      	adds	r3, #32
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fbff 	bl	8007820 <RCCEx_PLLSAI2_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007026:	e003      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	74fb      	strb	r3, [r7, #19]
      break;
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800702e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007030:	7cfb      	ldrb	r3, [r7, #19]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007036:	4b52      	ldr	r3, [pc, #328]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800703c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	494e      	ldr	r1, [pc, #312]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800704c:	e001      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704e:	7cfb      	ldrb	r3, [r7, #19]
 8007050:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 809f 	beq.w	800719e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007060:	2300      	movs	r3, #0
 8007062:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007064:	4b46      	ldr	r3, [pc, #280]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007074:	2300      	movs	r3, #0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800707a:	4b41      	ldr	r3, [pc, #260]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800707c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707e:	4a40      	ldr	r2, [pc, #256]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007084:	6593      	str	r3, [r2, #88]	; 0x58
 8007086:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708e:	60bb      	str	r3, [r7, #8]
 8007090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007092:	2301      	movs	r3, #1
 8007094:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007096:	4b3b      	ldr	r3, [pc, #236]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3a      	ldr	r2, [pc, #232]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800709c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070a2:	f7fb fae9 	bl	8002678 <HAL_GetTick>
 80070a6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070a8:	e009      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070aa:	f7fb fae5 	bl	8002678 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d902      	bls.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	74fb      	strb	r3, [r7, #19]
        break;
 80070bc:	e005      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070be:	4b31      	ldr	r3, [pc, #196]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0ef      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80070ca:	7cfb      	ldrb	r3, [r7, #19]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d15b      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070d0:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070da:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01f      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d019      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070fa:	4b21      	ldr	r3, [pc, #132]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800710a:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007110:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800711a:	4a19      	ldr	r2, [pc, #100]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fb faa4 	bl	8002678 <HAL_GetTick>
 8007130:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007132:	e00b      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007134:	f7fb faa0 	bl	8002678 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007142:	4293      	cmp	r3, r2
 8007144:	d902      	bls.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	74fb      	strb	r3, [r7, #19]
            break;
 800714a:	e006      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800714c:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0ec      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800715a:	7cfb      	ldrb	r3, [r7, #19]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10c      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007170:	4903      	ldr	r1, [pc, #12]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007178:	e008      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800717a:	7cfb      	ldrb	r3, [r7, #19]
 800717c:	74bb      	strb	r3, [r7, #18]
 800717e:	e005      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007180:	40021000 	.word	0x40021000
 8007184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007188:	7cfb      	ldrb	r3, [r7, #19]
 800718a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800718c:	7c7b      	ldrb	r3, [r7, #17]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007192:	4ba0      	ldr	r3, [pc, #640]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	4a9f      	ldr	r2, [pc, #636]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071aa:	4b9a      	ldr	r3, [pc, #616]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b0:	f023 0203 	bic.w	r2, r3, #3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b8:	4996      	ldr	r1, [pc, #600]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071cc:	4b91      	ldr	r3, [pc, #580]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f023 020c 	bic.w	r2, r3, #12
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	498e      	ldr	r1, [pc, #568]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071ee:	4b89      	ldr	r3, [pc, #548]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fc:	4985      	ldr	r1, [pc, #532]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007210:	4b80      	ldr	r3, [pc, #512]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721e:	497d      	ldr	r1, [pc, #500]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007232:	4b78      	ldr	r3, [pc, #480]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007240:	4974      	ldr	r1, [pc, #464]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007254:	4b6f      	ldr	r3, [pc, #444]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	496c      	ldr	r1, [pc, #432]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007276:	4b67      	ldr	r3, [pc, #412]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007284:	4963      	ldr	r1, [pc, #396]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007286:	4313      	orrs	r3, r2
 8007288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007298:	4b5e      	ldr	r3, [pc, #376]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800729a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072a6:	495b      	ldr	r1, [pc, #364]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072ba:	4b56      	ldr	r3, [pc, #344]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c8:	4952      	ldr	r1, [pc, #328]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072dc:	4b4d      	ldr	r3, [pc, #308]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ea:	494a      	ldr	r1, [pc, #296]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072fe:	4b45      	ldr	r3, [pc, #276]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	4941      	ldr	r1, [pc, #260]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007320:	4b3c      	ldr	r3, [pc, #240]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007326:	f023 0203 	bic.w	r2, r3, #3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732e:	4939      	ldr	r1, [pc, #228]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d028      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007342:	4b34      	ldr	r3, [pc, #208]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007350:	4930      	ldr	r1, [pc, #192]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007360:	d106      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007362:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4a2b      	ldr	r2, [pc, #172]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800736c:	60d3      	str	r3, [r2, #12]
 800736e:	e011      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	2101      	movs	r1, #1
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f959 	bl	8007638 <RCCEx_PLLSAI1_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d04d      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a8:	d108      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80073aa:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80073ba:	e012      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80073bc:	4b15      	ldr	r3, [pc, #84]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073c2:	4a14      	ldr	r2, [pc, #80]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073da:	490e      	ldr	r1, [pc, #56]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ea:	d106      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a08      	ldr	r2, [pc, #32]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f6:	60d3      	str	r3, [r2, #12]
 80073f8:	e020      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007402:	d109      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007404:	4b03      	ldr	r3, [pc, #12]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4a02      	ldr	r2, [pc, #8]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800740a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800740e:	60d3      	str	r3, [r2, #12]
 8007410:	e014      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007412:	bf00      	nop
 8007414:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007420:	d10c      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	2101      	movs	r1, #1
 8007428:	4618      	mov	r0, r3
 800742a:	f000 f905 	bl	8007638 <RCCEx_PLLSAI1_Config>
 800742e:	4603      	mov	r3, r0
 8007430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007432:	7cfb      	ldrb	r3, [r7, #19]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d028      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007448:	4b7a      	ldr	r3, [pc, #488]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007456:	4977      	ldr	r1, [pc, #476]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007466:	d106      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007468:	4b72      	ldr	r3, [pc, #456]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a71      	ldr	r2, [pc, #452]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800746e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007472:	60d3      	str	r3, [r2, #12]
 8007474:	e011      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800747e:	d10c      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f8d6 	bl	8007638 <RCCEx_PLLSAI1_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007490:	7cfb      	ldrb	r3, [r7, #19]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007496:	7cfb      	ldrb	r3, [r7, #19]
 8007498:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01e      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a6:	4b63      	ldr	r3, [pc, #396]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b6:	495f      	ldr	r1, [pc, #380]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3304      	adds	r3, #4
 80074ce:	2102      	movs	r1, #2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f8b1 	bl	8007638 <RCCEx_PLLSAI1_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074f0:	4b50      	ldr	r3, [pc, #320]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f6:	f023 0204 	bic.w	r2, r3, #4
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007500:	494c      	ldr	r1, [pc, #304]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007514:	4b47      	ldr	r3, [pc, #284]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800751a:	f023 0218 	bic.w	r2, r3, #24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007524:	4943      	ldr	r1, [pc, #268]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d035      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007538:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a3d      	ldr	r2, [pc, #244]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800753e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007544:	f7fb f898 	bl	8002678 <HAL_GetTick>
 8007548:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800754a:	e009      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800754c:	f7fb f894 	bl	8002678 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d902      	bls.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	74fb      	strb	r3, [r7, #19]
        break;
 800755e:	e005      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007560:	4b34      	ldr	r3, [pc, #208]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ef      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800756c:	7cfb      	ldrb	r3, [r7, #19]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d113      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007572:	4b30      	ldr	r3, [pc, #192]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007582:	492c      	ldr	r1, [pc, #176]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3320      	adds	r3, #32
 800758e:	2102      	movs	r1, #2
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f945 	bl	8007820 <RCCEx_PLLSAI2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800759a:	7cfb      	ldrb	r3, [r7, #19]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01e      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80075b0:	4b20      	ldr	r3, [pc, #128]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c0:	491c      	ldr	r1, [pc, #112]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d2:	d10c      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3320      	adds	r3, #32
 80075d8:	2101      	movs	r1, #1
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f920 	bl	8007820 <RCCEx_PLLSAI2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075e4:	7cfb      	ldrb	r3, [r7, #19]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80075ea:	7cfb      	ldrb	r3, [r7, #19]
 80075ec:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d017      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80075fa:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800760a:	490a      	ldr	r1, [pc, #40]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800761c:	d105      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	4a04      	ldr	r2, [pc, #16]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007628:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800762a:	7cbb      	ldrb	r3, [r7, #18]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40021000 	.word	0x40021000

08007638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007646:	4b72      	ldr	r3, [pc, #456]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007652:	4b6f      	ldr	r3, [pc, #444]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f003 0203 	and.w	r2, r3, #3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d103      	bne.n	800766a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
       ||
 8007666:	2b00      	cmp	r3, #0
 8007668:	d142      	bne.n	80076f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
 800766e:	e03f      	b.n	80076f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d018      	beq.n	80076aa <RCCEx_PLLSAI1_Config+0x72>
 8007678:	2b03      	cmp	r3, #3
 800767a:	d825      	bhi.n	80076c8 <RCCEx_PLLSAI1_Config+0x90>
 800767c:	2b01      	cmp	r3, #1
 800767e:	d002      	beq.n	8007686 <RCCEx_PLLSAI1_Config+0x4e>
 8007680:	2b02      	cmp	r3, #2
 8007682:	d009      	beq.n	8007698 <RCCEx_PLLSAI1_Config+0x60>
 8007684:	e020      	b.n	80076c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007686:	4b62      	ldr	r3, [pc, #392]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d11d      	bne.n	80076ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007696:	e01a      	b.n	80076ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007698:	4b5d      	ldr	r3, [pc, #372]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d116      	bne.n	80076d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a8:	e013      	b.n	80076d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076aa:	4b59      	ldr	r3, [pc, #356]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10f      	bne.n	80076d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076b6:	4b56      	ldr	r3, [pc, #344]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076c6:	e006      	b.n	80076d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	e004      	b.n	80076d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80076ce:	bf00      	nop
 80076d0:	e002      	b.n	80076d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80076d2:	bf00      	nop
 80076d4:	e000      	b.n	80076d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80076d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80076de:	4b4c      	ldr	r3, [pc, #304]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f023 0203 	bic.w	r2, r3, #3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4949      	ldr	r1, [pc, #292]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 8086 	bne.w	8007804 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076f8:	4b45      	ldr	r3, [pc, #276]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a44      	ldr	r2, [pc, #272]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fa ffb8 	bl	8002678 <HAL_GetTick>
 8007708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800770a:	e009      	b.n	8007720 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800770c:	f7fa ffb4 	bl	8002678 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d902      	bls.n	8007720 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
        break;
 800771e:	e005      	b.n	800772c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007720:	4b3b      	ldr	r3, [pc, #236]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1ef      	bne.n	800770c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d168      	bne.n	8007804 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d113      	bne.n	8007760 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007738:	4b35      	ldr	r3, [pc, #212]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	4b35      	ldr	r3, [pc, #212]	; (8007814 <RCCEx_PLLSAI1_Config+0x1dc>)
 800773e:	4013      	ands	r3, r2
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6892      	ldr	r2, [r2, #8]
 8007744:	0211      	lsls	r1, r2, #8
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68d2      	ldr	r2, [r2, #12]
 800774a:	06d2      	lsls	r2, r2, #27
 800774c:	4311      	orrs	r1, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6852      	ldr	r2, [r2, #4]
 8007752:	3a01      	subs	r2, #1
 8007754:	0112      	lsls	r2, r2, #4
 8007756:	430a      	orrs	r2, r1
 8007758:	492d      	ldr	r1, [pc, #180]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 800775a:	4313      	orrs	r3, r2
 800775c:	610b      	str	r3, [r1, #16]
 800775e:	e02d      	b.n	80077bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d115      	bne.n	8007792 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007766:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	4b2b      	ldr	r3, [pc, #172]	; (8007818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800776c:	4013      	ands	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6892      	ldr	r2, [r2, #8]
 8007772:	0211      	lsls	r1, r2, #8
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6912      	ldr	r2, [r2, #16]
 8007778:	0852      	lsrs	r2, r2, #1
 800777a:	3a01      	subs	r2, #1
 800777c:	0552      	lsls	r2, r2, #21
 800777e:	4311      	orrs	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6852      	ldr	r2, [r2, #4]
 8007784:	3a01      	subs	r2, #1
 8007786:	0112      	lsls	r2, r2, #4
 8007788:	430a      	orrs	r2, r1
 800778a:	4921      	ldr	r1, [pc, #132]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 800778c:	4313      	orrs	r3, r2
 800778e:	610b      	str	r3, [r1, #16]
 8007790:	e014      	b.n	80077bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007792:	4b1f      	ldr	r3, [pc, #124]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	4b21      	ldr	r3, [pc, #132]	; (800781c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6892      	ldr	r2, [r2, #8]
 800779e:	0211      	lsls	r1, r2, #8
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6952      	ldr	r2, [r2, #20]
 80077a4:	0852      	lsrs	r2, r2, #1
 80077a6:	3a01      	subs	r2, #1
 80077a8:	0652      	lsls	r2, r2, #25
 80077aa:	4311      	orrs	r1, r2
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6852      	ldr	r2, [r2, #4]
 80077b0:	3a01      	subs	r2, #1
 80077b2:	0112      	lsls	r2, r2, #4
 80077b4:	430a      	orrs	r2, r1
 80077b6:	4916      	ldr	r1, [pc, #88]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077bc:	4b14      	ldr	r3, [pc, #80]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a13      	ldr	r2, [pc, #76]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c8:	f7fa ff56 	bl	8002678 <HAL_GetTick>
 80077cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077ce:	e009      	b.n	80077e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077d0:	f7fa ff52 	bl	8002678 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d902      	bls.n	80077e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	73fb      	strb	r3, [r7, #15]
          break;
 80077e2:	e005      	b.n	80077f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077e4:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0ef      	beq.n	80077d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077f6:	4b06      	ldr	r3, [pc, #24]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	4904      	ldr	r1, [pc, #16]	; (8007810 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007800:	4313      	orrs	r3, r2
 8007802:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
 8007814:	07ff800f 	.word	0x07ff800f
 8007818:	ff9f800f 	.word	0xff9f800f
 800781c:	f9ff800f 	.word	0xf9ff800f

08007820 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800782e:	4b72      	ldr	r3, [pc, #456]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00e      	beq.n	8007858 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800783a:	4b6f      	ldr	r3, [pc, #444]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f003 0203 	and.w	r2, r3, #3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d103      	bne.n	8007852 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
       ||
 800784e:	2b00      	cmp	r3, #0
 8007850:	d142      	bne.n	80078d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	73fb      	strb	r3, [r7, #15]
 8007856:	e03f      	b.n	80078d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d018      	beq.n	8007892 <RCCEx_PLLSAI2_Config+0x72>
 8007860:	2b03      	cmp	r3, #3
 8007862:	d825      	bhi.n	80078b0 <RCCEx_PLLSAI2_Config+0x90>
 8007864:	2b01      	cmp	r3, #1
 8007866:	d002      	beq.n	800786e <RCCEx_PLLSAI2_Config+0x4e>
 8007868:	2b02      	cmp	r3, #2
 800786a:	d009      	beq.n	8007880 <RCCEx_PLLSAI2_Config+0x60>
 800786c:	e020      	b.n	80078b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800786e:	4b62      	ldr	r3, [pc, #392]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d11d      	bne.n	80078b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800787e:	e01a      	b.n	80078b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007880:	4b5d      	ldr	r3, [pc, #372]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007888:	2b00      	cmp	r3, #0
 800788a:	d116      	bne.n	80078ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007890:	e013      	b.n	80078ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007892:	4b59      	ldr	r3, [pc, #356]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10f      	bne.n	80078be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800789e:	4b56      	ldr	r3, [pc, #344]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078ae:	e006      	b.n	80078be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
      break;
 80078b4:	e004      	b.n	80078c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80078b6:	bf00      	nop
 80078b8:	e002      	b.n	80078c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80078be:	bf00      	nop
    }

    if(status == HAL_OK)
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d108      	bne.n	80078d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80078c6:	4b4c      	ldr	r3, [pc, #304]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f023 0203 	bic.w	r2, r3, #3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4949      	ldr	r1, [pc, #292]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 8086 	bne.w	80079ec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80078e0:	4b45      	ldr	r3, [pc, #276]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a44      	ldr	r2, [pc, #272]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ec:	f7fa fec4 	bl	8002678 <HAL_GetTick>
 80078f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078f2:	e009      	b.n	8007908 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078f4:	f7fa fec0 	bl	8002678 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d902      	bls.n	8007908 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
        break;
 8007906:	e005      	b.n	8007914 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007908:	4b3b      	ldr	r3, [pc, #236]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1ef      	bne.n	80078f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d168      	bne.n	80079ec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d113      	bne.n	8007948 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007920:	4b35      	ldr	r3, [pc, #212]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	4b35      	ldr	r3, [pc, #212]	; (80079fc <RCCEx_PLLSAI2_Config+0x1dc>)
 8007926:	4013      	ands	r3, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6892      	ldr	r2, [r2, #8]
 800792c:	0211      	lsls	r1, r2, #8
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	68d2      	ldr	r2, [r2, #12]
 8007932:	06d2      	lsls	r2, r2, #27
 8007934:	4311      	orrs	r1, r2
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6852      	ldr	r2, [r2, #4]
 800793a:	3a01      	subs	r2, #1
 800793c:	0112      	lsls	r2, r2, #4
 800793e:	430a      	orrs	r2, r1
 8007940:	492d      	ldr	r1, [pc, #180]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007942:	4313      	orrs	r3, r2
 8007944:	614b      	str	r3, [r1, #20]
 8007946:	e02d      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d115      	bne.n	800797a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800794e:	4b2a      	ldr	r3, [pc, #168]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007950:	695a      	ldr	r2, [r3, #20]
 8007952:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007954:	4013      	ands	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6892      	ldr	r2, [r2, #8]
 800795a:	0211      	lsls	r1, r2, #8
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6912      	ldr	r2, [r2, #16]
 8007960:	0852      	lsrs	r2, r2, #1
 8007962:	3a01      	subs	r2, #1
 8007964:	0552      	lsls	r2, r2, #21
 8007966:	4311      	orrs	r1, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6852      	ldr	r2, [r2, #4]
 800796c:	3a01      	subs	r2, #1
 800796e:	0112      	lsls	r2, r2, #4
 8007970:	430a      	orrs	r2, r1
 8007972:	4921      	ldr	r1, [pc, #132]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007974:	4313      	orrs	r3, r2
 8007976:	614b      	str	r3, [r1, #20]
 8007978:	e014      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800797a:	4b1f      	ldr	r3, [pc, #124]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	4b21      	ldr	r3, [pc, #132]	; (8007a04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007980:	4013      	ands	r3, r2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6892      	ldr	r2, [r2, #8]
 8007986:	0211      	lsls	r1, r2, #8
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6952      	ldr	r2, [r2, #20]
 800798c:	0852      	lsrs	r2, r2, #1
 800798e:	3a01      	subs	r2, #1
 8007990:	0652      	lsls	r2, r2, #25
 8007992:	4311      	orrs	r1, r2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6852      	ldr	r2, [r2, #4]
 8007998:	3a01      	subs	r2, #1
 800799a:	0112      	lsls	r2, r2, #4
 800799c:	430a      	orrs	r2, r1
 800799e:	4916      	ldr	r1, [pc, #88]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80079a4:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b0:	f7fa fe62 	bl	8002678 <HAL_GetTick>
 80079b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079b6:	e009      	b.n	80079cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079b8:	f7fa fe5e 	bl	8002678 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d902      	bls.n	80079cc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	73fb      	strb	r3, [r7, #15]
          break;
 80079ca:	e005      	b.n	80079d8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0ef      	beq.n	80079b8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079e0:	695a      	ldr	r2, [r3, #20]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	4904      	ldr	r1, [pc, #16]	; (80079f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40021000 	.word	0x40021000
 80079fc:	07ff800f 	.word	0x07ff800f
 8007a00:	ff9f800f 	.word	0xff9f800f
 8007a04:	f9ff800f 	.word	0xf9ff800f

08007a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a08:	b084      	sub	sp, #16
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	f107 001c 	add.w	r0, r7, #28
 8007a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fa40 	bl	8008eac <USB_CoreReset>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
 8007a42:	e005      	b.n	8007a50 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr

08007a60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d165      	bne.n	8007b40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4a3e      	ldr	r2, [pc, #248]	; (8007b70 <USB_SetTurnaroundTime+0x110>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d906      	bls.n	8007a8a <USB_SetTurnaroundTime+0x2a>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4a3d      	ldr	r2, [pc, #244]	; (8007b74 <USB_SetTurnaroundTime+0x114>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d202      	bcs.n	8007a8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a84:	230f      	movs	r3, #15
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e05c      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4a39      	ldr	r2, [pc, #228]	; (8007b74 <USB_SetTurnaroundTime+0x114>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d306      	bcc.n	8007aa0 <USB_SetTurnaroundTime+0x40>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	4a38      	ldr	r2, [pc, #224]	; (8007b78 <USB_SetTurnaroundTime+0x118>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d202      	bcs.n	8007aa0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a9a:	230e      	movs	r3, #14
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	e051      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4a35      	ldr	r2, [pc, #212]	; (8007b78 <USB_SetTurnaroundTime+0x118>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d306      	bcc.n	8007ab6 <USB_SetTurnaroundTime+0x56>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4a34      	ldr	r2, [pc, #208]	; (8007b7c <USB_SetTurnaroundTime+0x11c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d202      	bcs.n	8007ab6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ab0:	230d      	movs	r3, #13
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e046      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4a30      	ldr	r2, [pc, #192]	; (8007b7c <USB_SetTurnaroundTime+0x11c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d306      	bcc.n	8007acc <USB_SetTurnaroundTime+0x6c>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <USB_SetTurnaroundTime+0x120>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d802      	bhi.n	8007acc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	e03b      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4a2c      	ldr	r2, [pc, #176]	; (8007b80 <USB_SetTurnaroundTime+0x120>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d906      	bls.n	8007ae2 <USB_SetTurnaroundTime+0x82>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4a2b      	ldr	r2, [pc, #172]	; (8007b84 <USB_SetTurnaroundTime+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d802      	bhi.n	8007ae2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007adc:	230b      	movs	r3, #11
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e030      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <USB_SetTurnaroundTime+0x124>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d906      	bls.n	8007af8 <USB_SetTurnaroundTime+0x98>
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4a26      	ldr	r2, [pc, #152]	; (8007b88 <USB_SetTurnaroundTime+0x128>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d802      	bhi.n	8007af8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007af2:	230a      	movs	r3, #10
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e025      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <USB_SetTurnaroundTime+0x128>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d906      	bls.n	8007b0e <USB_SetTurnaroundTime+0xae>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <USB_SetTurnaroundTime+0x12c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d202      	bcs.n	8007b0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b08:	2309      	movs	r3, #9
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e01a      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <USB_SetTurnaroundTime+0x12c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d306      	bcc.n	8007b24 <USB_SetTurnaroundTime+0xc4>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <USB_SetTurnaroundTime+0x130>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d802      	bhi.n	8007b24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007b1e:	2308      	movs	r3, #8
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e00f      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4a1a      	ldr	r2, [pc, #104]	; (8007b90 <USB_SetTurnaroundTime+0x130>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d906      	bls.n	8007b3a <USB_SetTurnaroundTime+0xda>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4a19      	ldr	r2, [pc, #100]	; (8007b94 <USB_SetTurnaroundTime+0x134>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d202      	bcs.n	8007b3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b34:	2307      	movs	r3, #7
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e004      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	e001      	b.n	8007b44 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b40:	2309      	movs	r3, #9
 8007b42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	029b      	lsls	r3, r3, #10
 8007b58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	00d8acbf 	.word	0x00d8acbf
 8007b74:	00e4e1c0 	.word	0x00e4e1c0
 8007b78:	00f42400 	.word	0x00f42400
 8007b7c:	01067380 	.word	0x01067380
 8007b80:	011a499f 	.word	0x011a499f
 8007b84:	01312cff 	.word	0x01312cff
 8007b88:	014ca43f 	.word	0x014ca43f
 8007b8c:	016e3600 	.word	0x016e3600
 8007b90:	01a6ab1f 	.word	0x01a6ab1f
 8007b94:	01e84800 	.word	0x01e84800

08007b98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f043 0201 	orr.w	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f023 0201 	bic.w	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d115      	bne.n	8007c2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	f7fa fd40 	bl	8002690 <HAL_Delay>
      ms++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 f8cf 	bl	8008dba <USB_GetMode>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d01e      	beq.n	8007c60 <USB_SetCurrentMode+0x84>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b31      	cmp	r3, #49	; 0x31
 8007c26:	d9f0      	bls.n	8007c0a <USB_SetCurrentMode+0x2e>
 8007c28:	e01a      	b.n	8007c60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d115      	bne.n	8007c5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f7fa fd27 	bl	8002690 <HAL_Delay>
      ms++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f8b6 	bl	8008dba <USB_GetMode>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <USB_SetCurrentMode+0x84>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b31      	cmp	r3, #49	; 0x31
 8007c58:	d9f0      	bls.n	8007c3c <USB_SetCurrentMode+0x60>
 8007c5a:	e001      	b.n	8007c60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e005      	b.n	8007c6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b32      	cmp	r3, #50	; 0x32
 8007c64:	d101      	bne.n	8007c6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c74:	b084      	sub	sp, #16
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b086      	sub	sp, #24
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	e009      	b.n	8007ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3340      	adds	r3, #64	; 0x40
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b0e      	cmp	r3, #14
 8007cac:	d9f2      	bls.n	8007c94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d11c      	bne.n	8007cee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc2:	f043 0302 	orr.w	r3, r3, #2
 8007cc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e005      	b.n	8007cfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d00:	461a      	mov	r2, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d14:	461a      	mov	r2, r3
 8007d16:	680b      	ldr	r3, [r1, #0]
 8007d18:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d1a:	2103      	movs	r1, #3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f955 	bl	8007fcc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d22:	2110      	movs	r1, #16
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f8f1 	bl	8007f0c <USB_FlushTxFifo>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f91b 	bl	8007f70 <USB_FlushRxFifo>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d56:	461a      	mov	r2, r3
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d62:	461a      	mov	r2, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	613b      	str	r3, [r7, #16]
 8007d6c:	e043      	b.n	8007df6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d84:	d118      	bne.n	8007db8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	e013      	b.n	8007dca <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dae:	461a      	mov	r2, r3
 8007db0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e008      	b.n	8007dca <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de8:	461a      	mov	r2, r3
 8007dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	3301      	adds	r3, #1
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d3b7      	bcc.n	8007d6e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dfe:	2300      	movs	r3, #0
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	e043      	b.n	8007e8c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1a:	d118      	bne.n	8007e4e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e013      	b.n	8007e60 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	461a      	mov	r2, r3
 8007e46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	e008      	b.n	8007e60 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d3b7      	bcc.n	8007e04 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ea6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007eb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	f043 0210 	orr.w	r2, r3, #16
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <USB_DevInit+0x294>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f043 0208 	orr.w	r2, r3, #8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d107      	bne.n	8007ef6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eee:	f043 0304 	orr.w	r3, r3, #4
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f02:	b004      	add	sp, #16
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	803c3800 	.word	0x803c3800

08007f0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <USB_FlushTxFifo+0x60>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d901      	bls.n	8007f2a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e01a      	b.n	8007f60 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	daf3      	bge.n	8007f1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	019b      	lsls	r3, r3, #6
 8007f3a:	f043 0220 	orr.w	r2, r3, #32
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	4a08      	ldr	r2, [pc, #32]	; (8007f6c <USB_FlushTxFifo+0x60>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d901      	bls.n	8007f52 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e006      	b.n	8007f60 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d0f1      	beq.n	8007f42 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	00030d40 	.word	0x00030d40

08007f70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	4a11      	ldr	r2, [pc, #68]	; (8007fc8 <USB_FlushRxFifo+0x58>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e017      	b.n	8007fbc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	daf3      	bge.n	8007f7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2210      	movs	r2, #16
 8007f9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	4a08      	ldr	r2, [pc, #32]	; (8007fc8 <USB_FlushRxFifo+0x58>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d901      	bls.n	8007fae <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e006      	b.n	8007fbc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d0f1      	beq.n	8007f9e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	00030d40 	.word	0x00030d40

08007fcc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fec:	4313      	orrs	r3, r2
 8007fee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0306 	and.w	r3, r3, #6
 8008016:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d002      	beq.n	8008024 <USB_GetDevSpeed+0x26>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b06      	cmp	r3, #6
 8008022:	d102      	bne.n	800802a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008024:	2302      	movs	r3, #2
 8008026:	75fb      	strb	r3, [r7, #23]
 8008028:	e001      	b.n	800802e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800802a:	230f      	movs	r3, #15
 800802c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008030:	4618      	mov	r0, r3
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d13a      	bne.n	80080ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f303 	lsl.w	r3, r1, r3
 800806e:	b29b      	uxth	r3, r3
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008076:	4313      	orrs	r3, r2
 8008078:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d155      	bne.n	800813c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	78db      	ldrb	r3, [r3, #3]
 80080aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	059b      	lsls	r3, r3, #22
 80080b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080b4:	4313      	orrs	r3, r2
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e036      	b.n	800813c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d4:	69da      	ldr	r2, [r3, #28]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	2101      	movs	r1, #1
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ec:	4313      	orrs	r3, r2
 80080ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d11a      	bne.n	800813c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	78db      	ldrb	r3, [r3, #3]
 8008120:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008122:	430b      	orrs	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
	...

0800814c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d161      	bne.n	800822c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800817a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800817e:	d11f      	bne.n	80081c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800819e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	2101      	movs	r1, #1
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e0:	4013      	ands	r3, r2
 80081e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	2101      	movs	r1, #1
 80081f6:	fa01 f303 	lsl.w	r3, r1, r3
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	43db      	mvns	r3, r3
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008204:	4013      	ands	r3, r2
 8008206:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	0159      	lsls	r1, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	440b      	add	r3, r1
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	4619      	mov	r1, r3
 8008224:	4b35      	ldr	r3, [pc, #212]	; (80082fc <USB_DeactivateEndpoint+0x1b0>)
 8008226:	4013      	ands	r3, r2
 8008228:	600b      	str	r3, [r1, #0]
 800822a:	e060      	b.n	80082ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800823e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008242:	d11f      	bne.n	8008284 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008262:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800827e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	2101      	movs	r1, #1
 8008296:	fa01 f303 	lsl.w	r3, r1, r3
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	43db      	mvns	r3, r3
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082a4:	4013      	ands	r3, r2
 80082a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	2101      	movs	r1, #1
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	43db      	mvns	r3, r3
 80082c2:	68f9      	ldr	r1, [r7, #12]
 80082c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c8:	4013      	ands	r3, r2
 80082ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	0159      	lsls	r1, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	440b      	add	r3, r1
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	4619      	mov	r1, r3
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <USB_DeactivateEndpoint+0x1b4>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	ec337800 	.word	0xec337800
 8008300:	eff37800 	.word	0xeff37800

08008304 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b01      	cmp	r3, #1
 800831e:	f040 810a 	bne.w	8008536 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d132      	bne.n	8008390 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	0151      	lsls	r1, r2, #5
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	440a      	add	r2, r1
 8008340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800834c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	440a      	add	r2, r1
 8008364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800836c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	440a      	add	r2, r1
 8008384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008388:	0cdb      	lsrs	r3, r3, #19
 800838a:	04db      	lsls	r3, r3, #19
 800838c:	6113      	str	r3, [r2, #16]
 800838e:	e074      	b.n	800847a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083aa:	0cdb      	lsrs	r3, r3, #19
 80083ac:	04db      	lsls	r3, r3, #19
 80083ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	0151      	lsls	r1, r2, #5
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	440a      	add	r2, r1
 80083c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6959      	ldr	r1, [r3, #20]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	440b      	add	r3, r1
 80083ec:	1e59      	subs	r1, r3, #1
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80083f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083f8:	4baf      	ldr	r3, [pc, #700]	; (80086b8 <USB_EPStartXfer+0x3b4>)
 80083fa:	400b      	ands	r3, r1
 80083fc:	6939      	ldr	r1, [r7, #16]
 80083fe:	0148      	lsls	r0, r1, #5
 8008400:	6979      	ldr	r1, [r7, #20]
 8008402:	4401      	add	r1, r0
 8008404:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008408:	4313      	orrs	r3, r2
 800840a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	691a      	ldr	r2, [r3, #16]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008422:	6939      	ldr	r1, [r7, #16]
 8008424:	0148      	lsls	r0, r1, #5
 8008426:	6979      	ldr	r1, [r7, #20]
 8008428:	4401      	add	r1, r0
 800842a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800842e:	4313      	orrs	r3, r2
 8008430:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	78db      	ldrb	r3, [r3, #3]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d11f      	bne.n	800847a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008454:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008458:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008478:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	0151      	lsls	r1, r2, #5
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	440a      	add	r2, r1
 8008490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008498:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	78db      	ldrb	r3, [r3, #3]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d015      	beq.n	80084ce <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8100 	beq.w	80086ac <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	2101      	movs	r1, #1
 80084be:	fa01 f303 	lsl.w	r3, r1, r3
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084c8:	4313      	orrs	r3, r2
 80084ca:	634b      	str	r3, [r1, #52]	; 0x34
 80084cc:	e0ee      	b.n	80086ac <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d110      	bne.n	8008500 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	e00f      	b.n	8008520 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	440a      	add	r2, r1
 8008516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68d9      	ldr	r1, [r3, #12]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	b29b      	uxth	r3, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9e2 	bl	80088f8 <USB_WritePacket>
 8008534:	e0ba      	b.n	80086ac <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008550:	0cdb      	lsrs	r3, r3, #19
 8008552:	04db      	lsls	r3, r3, #19
 8008554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008578:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d123      	bne.n	80085ca <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008598:	6939      	ldr	r1, [r7, #16]
 800859a:	0148      	lsls	r0, r1, #5
 800859c:	6979      	ldr	r1, [r7, #20]
 800859e:	4401      	add	r1, r0
 80085a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085a4:	4313      	orrs	r3, r2
 80085a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c6:	6113      	str	r3, [r2, #16]
 80085c8:	e033      	b.n	8008632 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	695a      	ldr	r2, [r3, #20]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	4413      	add	r3, r2
 80085d4:	1e5a      	subs	r2, r3, #1
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	fbb2 f3f3 	udiv	r3, r2, r3
 80085de:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	89fb      	ldrh	r3, [r7, #14]
 80085f0:	04d9      	lsls	r1, r3, #19
 80085f2:	4b31      	ldr	r3, [pc, #196]	; (80086b8 <USB_EPStartXfer+0x3b4>)
 80085f4:	400b      	ands	r3, r1
 80085f6:	6939      	ldr	r1, [r7, #16]
 80085f8:	0148      	lsls	r0, r1, #5
 80085fa:	6979      	ldr	r1, [r7, #20]
 80085fc:	4401      	add	r1, r0
 80085fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008602:	4313      	orrs	r3, r2
 8008604:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	89f9      	ldrh	r1, [r7, #14]
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008622:	6939      	ldr	r1, [r7, #16]
 8008624:	0148      	lsls	r0, r1, #5
 8008626:	6979      	ldr	r1, [r7, #20]
 8008628:	4401      	add	r1, r0
 800862a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800862e:	4313      	orrs	r3, r2
 8008630:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	78db      	ldrb	r3, [r3, #3]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d128      	bne.n	800868c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008646:	2b00      	cmp	r3, #0
 8008648:	d110      	bne.n	800866c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e00f      	b.n	800868c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800868a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	1ff80000 	.word	0x1ff80000

080086bc <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	f040 80ab 	bne.w	8008830 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d132      	bne.n	8008748 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008700:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	440a      	add	r2, r1
 800873c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008740:	0cdb      	lsrs	r3, r3, #19
 8008742:	04db      	lsls	r3, r3, #19
 8008744:	6113      	str	r3, [r2, #16]
 8008746:	e04e      	b.n	80087e6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	0cdb      	lsrs	r3, r3, #19
 8008764:	04db      	lsls	r3, r3, #19
 8008766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008782:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008786:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800878a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695a      	ldr	r2, [r3, #20]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	429a      	cmp	r2, r3
 8008796:	d903      	bls.n	80087a0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	0148      	lsls	r0, r1, #5
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	4401      	add	r1, r0
 80087de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087e2:	4313      	orrs	r3, r2
 80087e4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008804:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d06d      	beq.n	80088ea <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	2101      	movs	r1, #1
 8008820:	fa01 f303 	lsl.w	r3, r1, r3
 8008824:	68f9      	ldr	r1, [r7, #12]
 8008826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800882a:	4313      	orrs	r3, r2
 800882c:	634b      	str	r3, [r1, #52]	; 0x34
 800882e:	e05c      	b.n	80088ea <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800884a:	0cdb      	lsrs	r3, r3, #19
 800884c:	04db      	lsls	r3, r3, #19
 800884e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800886e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008872:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	0148      	lsls	r0, r1, #5
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	4401      	add	r1, r0
 80088c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088c6:	4313      	orrs	r3, r2
 80088c8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	0151      	lsls	r1, r2, #5
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	440a      	add	r2, r1
 80088e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b089      	sub	sp, #36	; 0x24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	460b      	mov	r3, r1
 8008908:	71fb      	strb	r3, [r7, #7]
 800890a:	4613      	mov	r3, r2
 800890c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008916:	88bb      	ldrh	r3, [r7, #4]
 8008918:	3303      	adds	r3, #3
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	e018      	b.n	8008956 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	031a      	lsls	r2, r3, #12
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4413      	add	r3, r2
 800892c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008930:	461a      	mov	r2, r3
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	3301      	adds	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	3301      	adds	r3, #1
 8008942:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	3301      	adds	r3, #1
 8008948:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	3301      	adds	r3, #1
 800894e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	3301      	adds	r3, #1
 8008954:	61bb      	str	r3, [r7, #24]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	429a      	cmp	r2, r3
 800895c:	d3e2      	bcc.n	8008924 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3724      	adds	r7, #36	; 0x24
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800896c:	b480      	push	{r7}
 800896e:	b08b      	sub	sp, #44	; 0x2c
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	089b      	lsrs	r3, r3, #2
 8008986:	b29b      	uxth	r3, r3
 8008988:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	e014      	b.n	80089c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	3301      	adds	r3, #1
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	3301      	adds	r3, #1
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	3301      	adds	r3, #1
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	3301      	adds	r3, #1
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	3301      	adds	r3, #1
 80089c0:	623b      	str	r3, [r7, #32]
 80089c2:	6a3a      	ldr	r2, [r7, #32]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d3e6      	bcc.n	8008998 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089ca:	8bfb      	ldrh	r3, [r7, #30]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01e      	beq.n	8008a0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089da:	461a      	mov	r2, r3
 80089dc:	f107 0310 	add.w	r3, r7, #16
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	701a      	strb	r2, [r3, #0]
      i++;
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	3301      	adds	r3, #1
 80089fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	3301      	adds	r3, #1
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a02:	8bfb      	ldrh	r3, [r7, #30]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a08:	8bfb      	ldrh	r3, [r7, #30]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1ea      	bne.n	80089e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	372c      	adds	r7, #44	; 0x2c
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d12c      	bne.n	8008a92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	db12      	blt.n	8008a70 <USB_EPSetStall+0x54>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00f      	beq.n	8008a70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	e02b      	b.n	8008aea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	db12      	blt.n	8008aca <USB_EPSetStall+0xae>
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00f      	beq.n	8008aca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ac4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ac8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ae8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d128      	bne.n	8008b66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	0151      	lsls	r1, r2, #5
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	440a      	add	r2, r1
 8008b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	78db      	ldrb	r3, [r3, #3]
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d003      	beq.n	8008b44 <USB_EPClearStall+0x4c>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	78db      	ldrb	r3, [r3, #3]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d138      	bne.n	8008bb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	e027      	b.n	8008bb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	78db      	ldrb	r3, [r3, #3]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d003      	beq.n	8008b96 <USB_EPClearStall+0x9e>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	78db      	ldrb	r3, [r3, #3]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d10f      	bne.n	8008bb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008be6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008bf8:	68f9      	ldr	r1, [r7, #12]
 8008bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c2a:	f023 0303 	bic.w	r3, r3, #3
 8008c2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c3e:	f023 0302 	bic.w	r3, r3, #2
 8008c42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c6c:	f023 0303 	bic.w	r3, r3, #3
 8008c70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c80:	f043 0302 	orr.w	r3, r3, #2
 8008c84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cac:	68fb      	ldr	r3, [r7, #12]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	b29b      	uxth	r3, r3
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d50:	68bb      	ldr	r3, [r7, #8]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b087      	sub	sp, #28
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8e:	01db      	lsls	r3, r3, #7
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4013      	ands	r3, r2
 8008daa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dac:	68bb      	ldr	r3, [r7, #8]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008df4:	f023 0307 	bic.w	r3, r3, #7
 8008df8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	333c      	adds	r3, #60	; 0x3c
 8008e2e:	3304      	adds	r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4a1c      	ldr	r2, [pc, #112]	; (8008ea8 <USB_EP0_OutStart+0x8c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d90a      	bls.n	8008e52 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e4c:	d101      	bne.n	8008e52 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e024      	b.n	8008e9c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e58:	461a      	mov	r2, r3
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e80:	f043 0318 	orr.w	r3, r3, #24
 8008e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e98:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	4f54300a 	.word	0x4f54300a

08008eac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	4a13      	ldr	r2, [pc, #76]	; (8008f0c <USB_CoreReset+0x60>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d901      	bls.n	8008ec8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e01a      	b.n	8008efe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	daf3      	bge.n	8008eb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f043 0201 	orr.w	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <USB_CoreReset+0x60>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d901      	bls.n	8008ef0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e006      	b.n	8008efe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d0f1      	beq.n	8008ee0 <USB_CoreReset+0x34>

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	00030d40 	.word	0x00030d40

08008f10 <USBD_AUDIO_Init>:
* @retval status
*/

static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 8008f1c:	4b28      	ldr	r3, [pc, #160]	; (8008fc0 <USBD_AUDIO_Init+0xb0>)
 8008f1e:	7d1b      	ldrb	r3, [r3, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <USBD_AUDIO_Init+0x18>
  {
    return USBD_FAIL; 
 8008f24:	2303      	movs	r3, #3
 8008f26:	e046      	b.n	8008fb6 <USBD_AUDIO_Init+0xa6>
  }
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  pdev->pClassData = &haudioInstance;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a25      	ldr	r2, [pc, #148]	; (8008fc0 <USBD_AUDIO_Init+0xb0>)
 8008f2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f36:	60fb      	str	r3, [r7, #12]
  uint16_t packet_dim = haudio->paketDimension;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8a5b      	ldrh	r3, [r3, #18]
 8008f3c:	817b      	strh	r3, [r7, #10]
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8a1b      	ldrh	r3, [r3, #16]
 8008f42:	461a      	mov	r2, r3
 8008f44:	4613      	mov	r3, r2
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	4413      	add	r3, r2
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	8a52      	ldrh	r2, [r2, #18]
 8008f4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f52:	813b      	strh	r3, [r7, #8]
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 8008f54:	893a      	ldrh	r2, [r7, #8]
 8008f56:	897b      	ldrh	r3, [r7, #10]
 8008f58:	fb12 f303 	smulbb	r3, r2, r3
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	831a      	strh	r2, [r3, #24]
  haudio->rd_ptr = 0;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	82da      	strh	r2, [r3, #22]
  haudio->timeout = 0;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	819a      	strh	r2, [r3, #12]
  
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	33b0      	adds	r3, #176	; 0xb0
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	6890      	ldr	r0, [r2, #8]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	7912      	ldrb	r2, [r2, #4]
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4798      	blx	r3
  
  USBD_LL_OpenEP(pdev,
 8008f8c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008f90:	2201      	movs	r2, #1
 8008f92:	2181      	movs	r1, #129	; 0x81
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7f8 f872 	bl	800107e <USBD_LL_OpenEP>
                 AUDIO_IN_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_IN_PACKET);
  
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8008f9a:	2181      	movs	r1, #129	; 0x81
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7f8 f89b 	bl	80010d8 <USBD_LL_FlushEP>
  
  
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	4a07      	ldr	r2, [pc, #28]	; (8008fc4 <USBD_AUDIO_Init+0xb4>)
 8008fa6:	2181      	movs	r1, #129	; 0x81
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7f8 f90d 	bl	80011c8 <USBD_LL_Transmit>
                   IsocInBuffDummy,                        
                   packet_dim);      
  
  haudio->state=STATE_USB_IDLE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	751a      	strb	r2, [r3, #20]
  return USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20001878 	.word	0x20001878
 8008fc4:	200016f4 	.word	0x200016f4

08008fc8 <USBD_AUDIO_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  /* Close EP IN */
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 8008fd4:	2181      	movs	r1, #129	; 0x81
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7f8 f86b 	bl	80010b2 <USBD_LL_CloseEP>
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_AUDIO_DeInit+0x3a>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	33b0      	adds	r3, #176	; 0xb0
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 8008ffc:	4b03      	ldr	r3, [pc, #12]	; (800900c <USBD_AUDIO_DeInit+0x44>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	751a      	strb	r2, [r3, #20]
  }
  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20001878 	.word	0x20001878

08009010 <USBD_AUDIO_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev, 
                                  USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	75fb      	strb	r3, [r7, #23]
  haudio = pdev->pClassData;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009024:	613b      	str	r3, [r7, #16]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800902e:	2b00      	cmp	r3, #0
 8009030:	d03a      	beq.n	80090a8 <USBD_AUDIO_Setup+0x98>
 8009032:	2b20      	cmp	r3, #32
 8009034:	d172      	bne.n	800911c <USBD_AUDIO_Setup+0x10c>
  {
    /* AUDIO Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :    
    switch (req->bRequest)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d019      	beq.n	8009072 <USBD_AUDIO_Setup+0x62>
 800903e:	2b00      	cmp	r3, #0
 8009040:	dd2b      	ble.n	800909a <USBD_AUDIO_Setup+0x8a>
 8009042:	2b84      	cmp	r3, #132	; 0x84
 8009044:	dc29      	bgt.n	800909a <USBD_AUDIO_Setup+0x8a>
 8009046:	2b81      	cmp	r3, #129	; 0x81
 8009048:	db27      	blt.n	800909a <USBD_AUDIO_Setup+0x8a>
 800904a:	3b81      	subs	r3, #129	; 0x81
 800904c:	2b03      	cmp	r3, #3
 800904e:	d824      	bhi.n	800909a <USBD_AUDIO_Setup+0x8a>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <USBD_AUDIO_Setup+0x48>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	08009069 	.word	0x08009069
 800905c:	0800907d 	.word	0x0800907d
 8009060:	08009087 	.word	0x08009087
 8009064:	08009091 	.word	0x08009091
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa00 	bl	8009470 <AUDIO_REQ_GetCurrent>
      break;
 8009070:	e019      	b.n	80090a6 <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);   
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fa23 	bl	80094c0 <AUDIO_REQ_SetCurrent>
      break;
 800907a:	e014      	b.n	80090a6 <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_MIN:
      AUDIO_REQ_GetMinimum(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f9be 	bl	8009400 <AUDIO_REQ_GetMinimum>
      break;
 8009084:	e00f      	b.n	80090a6 <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_MAX:
      AUDIO_REQ_GetMaximum(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f99d 	bl	80093c8 <AUDIO_REQ_GetMaximum>
      break;
 800908e:	e00a      	b.n	80090a6 <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_RES:
      AUDIO_REQ_GetResolution(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9d0 	bl	8009438 <AUDIO_REQ_GetResolution>
      break;
 8009098:	e005      	b.n	80090a6 <USBD_AUDIO_Setup+0x96>
      
    default:
      USBD_CtlError (pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 fff2 	bl	800b086 <USBD_CtlError>
      return USBD_FAIL;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e03b      	b.n	800911e <USBD_AUDIO_Setup+0x10e>
    }
    break; 
 80090a6:	e039      	b.n	800911c <USBD_AUDIO_Setup+0x10c>
    
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b0b      	cmp	r3, #11
 80090ae:	d023      	beq.n	80090f8 <USBD_AUDIO_Setup+0xe8>
 80090b0:	2b0b      	cmp	r3, #11
 80090b2:	dc33      	bgt.n	800911c <USBD_AUDIO_Setup+0x10c>
 80090b4:	2b06      	cmp	r3, #6
 80090b6:	d002      	beq.n	80090be <USBD_AUDIO_Setup+0xae>
 80090b8:	2b0a      	cmp	r3, #10
 80090ba:	d015      	beq.n	80090e8 <USBD_AUDIO_Setup+0xd8>
 80090bc:	e02e      	b.n	800911c <USBD_AUDIO_Setup+0x10c>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b21      	cmp	r3, #33	; 0x21
 80090c8:	d127      	bne.n	800911a <USBD_AUDIO_Setup+0x10a>
      {
        
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80090ca:	4b17      	ldr	r3, [pc, #92]	; (8009128 <USBD_AUDIO_Setup+0x118>)
 80090cc:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	88db      	ldrh	r3, [r3, #6]
 80090d2:	2b09      	cmp	r3, #9
 80090d4:	bf28      	it	cs
 80090d6:	2309      	movcs	r3, #9
 80090d8:	817b      	strh	r3, [r7, #10]
        
        USBD_CtlSendData (pdev, 
 80090da:	897b      	ldrh	r3, [r7, #10]
 80090dc:	461a      	mov	r2, r3
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f002 f841 	bl	800b168 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
      break;
 80090e6:	e018      	b.n	800911a <USBD_AUDIO_Setup+0x10a>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)haudio->alt_setting,
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	681b      	ldr	r3, [r3, #0]
      USBD_CtlSendData (pdev,
 80090ec:	2201      	movs	r2, #1
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f002 f839 	bl	800b168 <USBD_CtlSendData>
                        1);
      break;
 80090f6:	e011      	b.n	800911c <USBD_AUDIO_Setup+0x10c>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	885b      	ldrh	r3, [r3, #2]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d806      	bhi.n	8009110 <USBD_AUDIO_Setup+0x100>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 800910e:	e005      	b.n	800911c <USBD_AUDIO_Setup+0x10c>
        USBD_CtlError (pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 ffb7 	bl	800b086 <USBD_CtlError>
      break;
 8009118:	e000      	b.n	800911c <USBD_AUDIO_Setup+0x10c>
      break;
 800911a:	bf00      	nop
    }
  }
  return ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	200018ee 	.word	0x200018ee

0800912c <USBD_AUDIO_GetCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2276      	movs	r2, #118	; 0x76
 8009138:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	200018dc 	.word	0x200018dc

0800914c <USBD_AUDIO_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                  uint8_t epnum)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800915e:	617b      	str	r3, [r7, #20]
  uint32_t length_usb_pck;
  uint16_t app;
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	8b1b      	ldrh	r3, [r3, #24]
 8009164:	827b      	strh	r3, [r7, #18]
  uint16_t true_dim = haudio->buffer_length;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	89db      	ldrh	r3, [r3, #14]
 800916a:	823b      	strh	r3, [r7, #16]
  uint16_t packet_dim = haudio->paketDimension;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	8a5b      	ldrh	r3, [r3, #18]
 8009170:	81fb      	strh	r3, [r7, #14]
  uint16_t channels = haudio->channels;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	81bb      	strh	r3, [r7, #12]
  length_usb_pck = packet_dim;  
 8009178:	89fb      	ldrh	r3, [r7, #14]
 800917a:	61fb      	str	r3, [r7, #28]
  haudio->timeout=0;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2200      	movs	r2, #0
 8009180:	819a      	strh	r2, [r3, #12]
  if (epnum == (AUDIO_IN_EP & 0x7F))
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	2b01      	cmp	r3, #1
 8009186:	f040 808f 	bne.w	80092a8 <USBD_AUDIO_DataIn+0x15c>
  {    
    if (haudio->state == STATE_USB_IDLE) 
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	7d1b      	ldrb	r3, [r3, #20]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d10c      	bne.n	80091ac <USBD_AUDIO_DataIn+0x60>
    {
      haudio->state=STATE_USB_REQUESTS_STARTED;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2202      	movs	r2, #2
 8009196:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Record();      
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	33b0      	adds	r3, #176	; 0xb0
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	4798      	blx	r3
    }    
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	7d1b      	ldrb	r3, [r3, #20]
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d173      	bne.n	800929c <USBD_AUDIO_DataIn+0x150>
    {      
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	8adb      	ldrh	r3, [r3, #22]
 80091b8:	8a3a      	ldrh	r2, [r7, #16]
 80091ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80091be:	fb01 f202 	mul.w	r2, r1, r2
 80091c2:	1a9b      	subs	r3, r3, r2
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	82da      	strh	r2, [r3, #22]
      if(IsocInWr_app<haudio->rd_ptr){
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	8adb      	ldrh	r3, [r3, #22]
 80091ce:	8a7a      	ldrh	r2, [r7, #18]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d208      	bcs.n	80091e6 <USBD_AUDIO_DataIn+0x9a>
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	8adb      	ldrh	r3, [r3, #22]
 80091d8:	8a3a      	ldrh	r2, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	b29a      	uxth	r2, r3
 80091de:	8a7b      	ldrh	r3, [r7, #18]
 80091e0:	4413      	add	r3, r2
 80091e2:	837b      	strh	r3, [r7, #26]
 80091e4:	e004      	b.n	80091f0 <USBD_AUDIO_DataIn+0xa4>
      }else{
        app = IsocInWr_app - haudio->rd_ptr;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	8adb      	ldrh	r3, [r3, #22]
 80091ea:	8a7a      	ldrh	r2, [r7, #18]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	837b      	strh	r3, [r7, #26]
      }        
      if(app >= (packet_dim*haudio->upper_treshold)){       
 80091f0:	8b7a      	ldrh	r2, [r7, #26]
 80091f2:	89fb      	ldrh	r3, [r7, #14]
 80091f4:	6979      	ldr	r1, [r7, #20]
 80091f6:	7e89      	ldrb	r1, [r1, #26]
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	429a      	cmp	r2, r3
 80091fe:	db06      	blt.n	800920e <USBD_AUDIO_DataIn+0xc2>
        length_usb_pck += channels*2;
 8009200:	89bb      	ldrh	r3, [r7, #12]
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	461a      	mov	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4413      	add	r3, r2
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e00d      	b.n	800922a <USBD_AUDIO_DataIn+0xde>
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 800920e:	8b7a      	ldrh	r2, [r7, #26]
 8009210:	89fb      	ldrh	r3, [r7, #14]
 8009212:	6979      	ldr	r1, [r7, #20]
 8009214:	7ec9      	ldrb	r1, [r1, #27]
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	429a      	cmp	r2, r3
 800921c:	dc05      	bgt.n	800922a <USBD_AUDIO_DataIn+0xde>
        length_usb_pck -= channels*2;
 800921e:	89bb      	ldrh	r3, [r7, #12]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	461a      	mov	r2, r3
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	61fb      	str	r3, [r7, #28]
      }     
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
                        (uint8_t*)(&haudio->buffer[haudio->rd_ptr]),
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	8ad2      	ldrh	r2, [r2, #22]
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 8009232:	441a      	add	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2181      	movs	r1, #129	; 0x81
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7f7 ffc5 	bl	80011c8 <USBD_LL_Transmit>
                        length_usb_pck);      
      haudio->rd_ptr += length_usb_pck;      
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	8ada      	ldrh	r2, [r3, #22]
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	b29b      	uxth	r3, r3
 8009246:	4413      	add	r3, r2
 8009248:	b29a      	uxth	r2, r3
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	82da      	strh	r2, [r3, #22]

      if(app < haudio->buffer_length/10)
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	89db      	ldrh	r3, [r3, #14]
 8009252:	4a18      	ldr	r2, [pc, #96]	; (80092b4 <USBD_AUDIO_DataIn+0x168>)
 8009254:	fba2 2303 	umull	r2, r3, r2, r3
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	b29b      	uxth	r3, r3
 800925c:	8b7a      	ldrh	r2, [r7, #26]
 800925e:	429a      	cmp	r2, r3
 8009260:	d222      	bcs.n	80092a8 <USBD_AUDIO_DataIn+0x15c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	33b0      	adds	r3, #176	; 0xb0
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2201      	movs	r2, #1
 800927a:	751a      	strb	r2, [r3, #20]
        haudio->timeout=0;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2200      	movs	r2, #0
 8009280:	819a      	strh	r2, [r3, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	89db      	ldrh	r3, [r3, #14]
 800928a:	461a      	mov	r2, r3
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	8a1b      	ldrh	r3, [r3, #16]
 8009290:	4413      	add	r3, r2
 8009292:	461a      	mov	r2, r3
 8009294:	2100      	movs	r1, #0
 8009296:	f003 fde7 	bl	800ce68 <memset>
 800929a:	e005      	b.n	80092a8 <USBD_AUDIO_DataIn+0x15c>
      }       
    }
    else 
    {      
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	4a06      	ldr	r2, [pc, #24]	; (80092b8 <USBD_AUDIO_DataIn+0x16c>)
 80092a0:	2181      	movs	r1, #129	; 0x81
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7f7 ff90 	bl	80011c8 <USBD_LL_Transmit>
                        IsocInBuffDummy,
                        length_usb_pck);      
    }    
  }
  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	cccccccd 	.word	0xcccccccd
 80092b8:	200016f4 	.word	0x200016f4

080092bc <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ca:	60fb      	str	r3, [r7, #12]
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	7f1b      	ldrb	r3, [r3, #28]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d123      	bne.n	800931c <USBD_AUDIO_EP0_RxReady+0x60>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d11e      	bne.n	800931c <USBD_AUDIO_EP0_RxReady+0x60>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->VolumeCtl(VOL_CUR);    
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	33b0      	adds	r3, #176	; 0xb0
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	4a0d      	ldr	r2, [pc, #52]	; (8009328 <USBD_AUDIO_EP0_RxReady+0x6c>)
 80092f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80092f6:	4610      	mov	r0, r2
 80092f8:	4798      	blx	r3
      
      haudio->control.cmd = 0;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	771a      	strb	r2, [r3, #28]
      haudio->control.len = 0;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      haudio->control.unit = 0;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      haudio->control.data[0]=0;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	775a      	strb	r2, [r3, #29]
      haudio->control.data[0]=0;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	775a      	strb	r2, [r3, #29]
    }
  }    
  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20001874 	.word	0x20001874

0800932c <USBD_AUDIO_EP0_TxReady>:
*         handle EP0 TRx Ready event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USBD_AUDIO_SOF>:
*         handle SOF event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{  
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBD_AUDIO_IsoINIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USBD_AUDIO_IsoOutIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBD_AUDIO_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	220a      	movs	r2, #10
 80093b4:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 80093b6:	4b03      	ldr	r3, [pc, #12]	; (80093c4 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	200000ac 	.word	0x200000ac

080093c8 <AUDIO_REQ_GetMaximum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMaximum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d8:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MAX & 0xFF00 ) >> 8;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 80093f0:	461a      	mov	r2, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 feb8 	bl	800b168 <USBD_CtlSendData>
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <AUDIO_REQ_GetMinimum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMinimum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009410:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	22e0      	movs	r2, #224	; 0xe0
 8009416:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	22db      	movs	r2, #219	; 0xdb
 800941c:	779a      	strb	r2, [r3, #30]
  /* Send the current mute state */
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);   
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009428:	461a      	mov	r2, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 fe9c 	bl	800b168 <USBD_CtlSendData>
}
 8009430:	bf00      	nop
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <AUDIO_REQ_GetResolution>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetResolution(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009448:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2223      	movs	r2, #35	; 0x23
 800944e:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	779a      	strb	r2, [r3, #30]
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009460:	461a      	mov	r2, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 fe80 	bl	800b168 <USBD_CtlSendData>
}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <AUDIO_REQ_GetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009480:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <AUDIO_REQ_GetCurrent+0x4c>)
 8009484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <AUDIO_REQ_GetCurrent+0x4c>)
 8009490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009494:	b29b      	uxth	r3, r3
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	b29b      	uxth	r3, r3
 800949a:	b2da      	uxtb	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 80094aa:	461a      	mov	r2, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 fe5b 	bl	800b168 <USBD_CtlSendData>
}
 80094b2:	bf00      	nop
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20001874 	.word	0x20001874

080094c0 <AUDIO_REQ_SetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094d0:	60fb      	str	r3, [r7, #12]
  if (req->wLength)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	88db      	ldrh	r3, [r3, #6]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d017      	beq.n	800950a <AUDIO_REQ_SetCurrent+0x4a>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
    USBD_CtlPrepareRx (pdev,
 80094de:	461a      	mov	r2, r3
 80094e0:	490c      	ldr	r1, [pc, #48]	; (8009514 <AUDIO_REQ_SetCurrent+0x54>)
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fe6c 	bl	800b1c0 <USBD_CtlPrepareRx>
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	771a      	strb	r2, [r3, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	88db      	ldrh	r3, [r3, #6]
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	889b      	ldrh	r3, [r3, #4]
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	b29b      	uxth	r3, r3
 8009502:	b2da      	uxtb	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20001874 	.word	0x20001874

08009518 <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800952c:	61fb      	str	r3, [r7, #28]
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 800952e:	4b63      	ldr	r3, [pc, #396]	; (80096bc <USBD_AUDIO_Data_Transfer+0x1a4>)
 8009530:	7d1b      	ldrb	r3, [r3, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <USBD_AUDIO_Data_Transfer+0x22>
    return USBD_BUSY;    
 8009536:	2301      	movs	r3, #1
 8009538:	e0bb      	b.n	80096b2 <USBD_AUDIO_Data_Transfer+0x19a>
  }  
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	837b      	strh	r3, [r7, #26]
  uint16_t true_dim = haudio->buffer_length;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	89db      	ldrh	r3, [r3, #14]
 8009544:	833b      	strh	r3, [r7, #24]
  uint16_t current_data_Amount = haudio->dataAmount;
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	8a1b      	ldrh	r3, [r3, #16]
 800954a:	82fb      	strh	r3, [r7, #22]
  uint16_t packet_dim = haudio->paketDimension;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	8a5b      	ldrh	r3, [r3, #18]
 8009550:	82bb      	strh	r3, [r7, #20]
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	7d1b      	ldrb	r3, [r3, #20]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d003      	beq.n	8009562 <USBD_AUDIO_Data_Transfer+0x4a>
 800955a:	8afa      	ldrh	r2, [r7, #22]
 800955c:	8b7b      	ldrh	r3, [r7, #26]
 800955e:	429a      	cmp	r2, r3
 8009560:	d05c      	beq.n	800961c <USBD_AUDIO_Data_Transfer+0x104>
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	8b7a      	ldrh	r2, [r7, #26]
 8009566:	821a      	strh	r2, [r3, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 8009568:	8b7a      	ldrh	r2, [r7, #26]
 800956a:	4613      	mov	r3, r2
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	441a      	add	r2, r3
 8009570:	8abb      	ldrh	r3, [r7, #20]
 8009572:	fb92 f3f3 	sdiv	r3, r2, r3
 8009576:	827b      	strh	r3, [r7, #18]
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 8009578:	8a7a      	ldrh	r2, [r7, #18]
 800957a:	8abb      	ldrh	r3, [r7, #20]
 800957c:	fb12 f303 	smulbb	r3, r2, r3
 8009580:	b29a      	uxth	r2, r3
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	831a      	strh	r2, [r3, #24]
    haudio->rd_ptr = 0;
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	2200      	movs	r2, #0
 800958a:	82da      	strh	r2, [r3, #22]
    haudio->upper_treshold = wr_rd_offset + 1;
 800958c:	8a7b      	ldrh	r3, [r7, #18]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	3301      	adds	r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	769a      	strb	r2, [r3, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 8009598:	8a7b      	ldrh	r3, [r7, #18]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	76da      	strb	r2, [r3, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80095a4:	8b7a      	ldrh	r2, [r7, #26]
 80095a6:	8abb      	ldrh	r3, [r7, #20]
 80095a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	8aba      	ldrh	r2, [r7, #20]
 80095b0:	fb12 f303 	smulbb	r3, r2, r3
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	0052      	lsls	r2, r2, #1
 80095ba:	4413      	add	r3, r2
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	81da      	strh	r2, [r3, #14]
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d004      	beq.n	80095d6 <USBD_AUDIO_Data_Transfer+0xbe>
    {
      USBD_free(haudio->buffer);      
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d0:	4618      	mov	r0, r3
 80095d2:	f003 fb95 	bl	800cd00 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	89db      	ldrh	r3, [r3, #14]
 80095da:	461a      	mov	r2, r3
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	8a1b      	ldrh	r3, [r3, #16]
 80095e0:	4413      	add	r3, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f003 fb84 	bl	800ccf0 <malloc>
 80095e8:	4603      	mov	r3, r0
 80095ea:	461a      	mov	r2, r3
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	661a      	str	r2, [r3, #96]	; 0x60
    if(haudio->buffer == NULL)
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USBD_AUDIO_Data_Transfer+0xe4>
    {
      return USBD_FAIL;       
 80095f8:	2303      	movs	r3, #3
 80095fa:	e05a      	b.n	80096b2 <USBD_AUDIO_Data_Transfer+0x19a>
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	89db      	ldrh	r3, [r3, #14]
 8009604:	461a      	mov	r2, r3
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	8a1b      	ldrh	r3, [r3, #16]
 800960a:	4413      	add	r3, r2
 800960c:	461a      	mov	r2, r3
 800960e:	2100      	movs	r1, #0
 8009610:	f003 fc2a 	bl	800ce68 <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2203      	movs	r2, #3
 8009618:	751a      	strb	r2, [r3, #20]
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 800961a:	e049      	b.n	80096b0 <USBD_AUDIO_Data_Transfer+0x198>
    
    
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	7d1b      	ldrb	r3, [r3, #20]
 8009620:	2b03      	cmp	r3, #3
 8009622:	d145      	bne.n	80096b0 <USBD_AUDIO_Data_Transfer+0x198>
    if(haudio->timeout++==TIMEOUT_VALUE){
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	899b      	ldrh	r3, [r3, #12]
 8009628:	b21b      	sxth	r3, r3
 800962a:	b29a      	uxth	r2, r3
 800962c:	3201      	adds	r2, #1
 800962e:	b292      	uxth	r2, r2
 8009630:	b211      	sxth	r1, r2
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	8191      	strh	r1, [r2, #12]
 8009636:	2bc8      	cmp	r3, #200	; 0xc8
 8009638:	d10f      	bne.n	800965a <USBD_AUDIO_Data_Transfer+0x142>
      haudio->state=STATE_USB_IDLE;
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2201      	movs	r2, #1
 800963e:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();   
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	33b0      	adds	r3, #176	; 0xb0
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	4798      	blx	r3
     haudio->timeout=0;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2200      	movs	r2, #0
 8009658:	819a      	strh	r2, [r3, #12]
    }
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	8b12      	ldrh	r2, [r2, #24]
 8009662:	4413      	add	r3, r2
 8009664:	8b7a      	ldrh	r2, [r7, #26]
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	4618      	mov	r0, r3
 800966a:	f003 fc41 	bl	800cef0 <memcpy>
    haudio->wr_ptr += dataAmount;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	8b1a      	ldrh	r2, [r3, #24]
 8009672:	8b7b      	ldrh	r3, [r7, #26]
 8009674:	4413      	add	r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	831a      	strh	r2, [r3, #24]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	8b1b      	ldrh	r3, [r3, #24]
 8009680:	8b3a      	ldrh	r2, [r7, #24]
 8009682:	fbb3 f1f2 	udiv	r1, r3, r2
 8009686:	fb01 f202 	mul.w	r2, r1, r2
 800968a:	1a9b      	subs	r3, r3, r2
 800968c:	b29a      	uxth	r2, r3
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	831a      	strh	r2, [r3, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	8b1b      	ldrh	r3, [r3, #24]
 8009696:	8b7a      	ldrh	r2, [r7, #26]
 8009698:	429a      	cmp	r2, r3
 800969a:	d109      	bne.n	80096b0 <USBD_AUDIO_Data_Transfer+0x198>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096a0:	8b3b      	ldrh	r3, [r7, #24]
 80096a2:	18d0      	adds	r0, r2, r3
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a8:	8b7a      	ldrh	r2, [r7, #26]
 80096aa:	4619      	mov	r1, r3
 80096ac:	f003 fc20 	bl	800cef0 <memcpy>
    }
  }
  return USBD_OK;  
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3720      	adds	r7, #32
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20001878 	.word	0x20001878

080096c0 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData[0]= fops;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }
  return 0;}
 80096d8:	2300      	movs	r3, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <USBD_AUDIO_Init_Microphone_Descriptor>:
* @param  samplingFrequency: sampling frequency
* @param  Channels: number of channels
* @retval status
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	71fb      	strb	r3, [r7, #7]
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 80096f6:	4b5c      	ldr	r3, [pc, #368]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096f8:	2209      	movs	r2, #9
 80096fa:	701a      	strb	r2, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
 80096fc:	4b5a      	ldr	r3, [pc, #360]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096fe:	2202      	movs	r2, #2
 8009700:	705a      	strb	r2, [r3, #1]
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	336c      	adds	r3, #108	; 0x6c
 8009706:	b2da      	uxtb	r2, r3
 8009708:	4b57      	ldr	r3, [pc, #348]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800970a:	709a      	strb	r2, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	336c      	adds	r3, #108	; 0x6c
 8009710:	121b      	asrs	r3, r3, #8
 8009712:	b2da      	uxtb	r2, r3
 8009714:	4b54      	ldr	r3, [pc, #336]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009716:	70da      	strb	r2, [r3, #3]
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
 8009718:	4b53      	ldr	r3, [pc, #332]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800971a:	2202      	movs	r2, #2
 800971c:	711a      	strb	r2, [r3, #4]
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
 800971e:	4b52      	ldr	r3, [pc, #328]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009720:	2201      	movs	r2, #1
 8009722:	715a      	strb	r2, [r3, #5]
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
 8009724:	4b50      	ldr	r3, [pc, #320]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009726:	2200      	movs	r2, #0
 8009728:	719a      	strb	r2, [r3, #6]
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
 800972a:	4b4f      	ldr	r3, [pc, #316]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800972c:	2280      	movs	r2, #128	; 0x80
 800972e:	71da      	strb	r2, [r3, #7]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 8009730:	4b4d      	ldr	r3, [pc, #308]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009732:	2232      	movs	r2, #50	; 0x32
 8009734:	721a      	strb	r2, [r3, #8]
  /* USB Microphone Standard interface descriptor */
  USBD_AUDIO_CfgDesc[9] = 9;                                                   /* bLength */
 8009736:	4b4c      	ldr	r3, [pc, #304]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009738:	2209      	movs	r2, #9
 800973a:	725a      	strb	r2, [r3, #9]
  USBD_AUDIO_CfgDesc[10] = USB_INTERFACE_DESCRIPTOR_TYPE;                      /* bDescriptorType */
 800973c:	4b4a      	ldr	r3, [pc, #296]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800973e:	2204      	movs	r2, #4
 8009740:	729a      	strb	r2, [r3, #10]
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
 8009742:	4b49      	ldr	r3, [pc, #292]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009744:	2200      	movs	r2, #0
 8009746:	72da      	strb	r2, [r3, #11]
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
 8009748:	4b47      	ldr	r3, [pc, #284]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800974a:	2200      	movs	r2, #0
 800974c:	731a      	strb	r2, [r3, #12]
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
 800974e:	4b46      	ldr	r3, [pc, #280]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009750:	2200      	movs	r2, #0
 8009752:	735a      	strb	r2, [r3, #13]
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
 8009754:	4b44      	ldr	r3, [pc, #272]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009756:	2201      	movs	r2, #1
 8009758:	739a      	strb	r2, [r3, #14]
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
 800975a:	4b43      	ldr	r3, [pc, #268]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800975c:	2201      	movs	r2, #1
 800975e:	73da      	strb	r2, [r3, #15]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 8009760:	4b41      	ldr	r3, [pc, #260]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009762:	2200      	movs	r2, #0
 8009764:	741a      	strb	r2, [r3, #16]
  USBD_AUDIO_CfgDesc[17] = 0x00;                                               /* iInterface */   
 8009766:	4b40      	ldr	r3, [pc, #256]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009768:	2200      	movs	r2, #0
 800976a:	745a      	strb	r2, [r3, #17]
  /* USB Microphone Class-specific AC Interface Descriptor */
  USBD_AUDIO_CfgDesc[18] = 9;                                                  /* bLength */
 800976c:	4b3e      	ldr	r3, [pc, #248]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800976e:	2209      	movs	r2, #9
 8009770:	749a      	strb	r2, [r3, #18]
  USBD_AUDIO_CfgDesc[19] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009772:	4b3d      	ldr	r3, [pc, #244]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009774:	2224      	movs	r2, #36	; 0x24
 8009776:	74da      	strb	r2, [r3, #19]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 8009778:	4b3b      	ldr	r3, [pc, #236]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800977a:	2201      	movs	r2, #1
 800977c:	751a      	strb	r2, [r3, #20]
  USBD_AUDIO_CfgDesc[21] = 0x00;       /* 1.00 */                              /* bcdADC */
 800977e:	4b3a      	ldr	r3, [pc, #232]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009780:	2200      	movs	r2, #0
 8009782:	755a      	strb	r2, [r3, #21]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 8009784:	4b38      	ldr	r3, [pc, #224]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009786:	2201      	movs	r2, #1
 8009788:	759a      	strb	r2, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	3325      	adds	r3, #37	; 0x25
 800978e:	b2da      	uxtb	r2, r3
 8009790:	4b35      	ldr	r3, [pc, #212]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009792:	75da      	strb	r2, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 8009794:	4b34      	ldr	r3, [pc, #208]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009796:	2200      	movs	r2, #0
 8009798:	761a      	strb	r2, [r3, #24]
  USBD_AUDIO_CfgDesc[25] = 0x01;                                               /* bInCollection */
 800979a:	4b33      	ldr	r3, [pc, #204]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800979c:	2201      	movs	r2, #1
 800979e:	765a      	strb	r2, [r3, #25]
  USBD_AUDIO_CfgDesc[26] = 0x01;                                               /* baInterfaceNr */   
 80097a0:	4b31      	ldr	r3, [pc, #196]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	769a      	strb	r2, [r3, #26]
  /* USB Microphone Input Terminal Descriptor */
  USBD_AUDIO_CfgDesc[27] = AUDIO_INPUT_TERMINAL_DESC_SIZE;                     /* bLength */
 80097a6:	4b30      	ldr	r3, [pc, #192]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097a8:	220c      	movs	r2, #12
 80097aa:	76da      	strb	r2, [r3, #27]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80097ac:	4b2e      	ldr	r3, [pc, #184]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097ae:	2224      	movs	r2, #36	; 0x24
 80097b0:	771a      	strb	r2, [r3, #28]
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
 80097b2:	4b2d      	ldr	r3, [pc, #180]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097b4:	2202      	movs	r2, #2
 80097b6:	775a      	strb	r2, [r3, #29]
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
 80097b8:	4b2b      	ldr	r3, [pc, #172]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	779a      	strb	r2, [r3, #30]
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
 80097be:	4b2a      	ldr	r3, [pc, #168]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	77da      	strb	r2, [r3, #31]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 80097c4:	4b28      	ldr	r3, [pc, #160]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 2020 	strb.w	r2, [r3, #32]
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
 80097cc:	4b26      	ldr	r3, [pc, #152]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 80097d4:	4a24      	ldr	r2, [pc, #144]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if(Channels != 2)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d008      	beq.n	80097f4 <USBD_AUDIO_Init_Microphone_Descriptor+0x10c>
  {
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 80097e2:	4b21      	ldr	r3, [pc, #132]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80097ea:	4b1f      	ldr	r3, [pc, #124]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80097f2:	e007      	b.n	8009804 <USBD_AUDIO_Init_Microphone_Descriptor+0x11c>
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 80097f4:	4b1c      	ldr	r3, [pc, #112]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097f6:	2203      	movs	r2, #3
 80097f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 8009804:	4b18      	ldr	r3, [pc, #96]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	3308      	adds	r3, #8
 8009818:	b2da      	uxtb	r2, r3
 800981a:	4b13      	ldr	r3, [pc, #76]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800981c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009822:	2224      	movs	r2, #36	; 0x24
 8009824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800982a:	2206      	movs	r2, #6
 800982c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009832:	2202      	movs	r2, #2
 8009834:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
 8009838:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800983a:	2201      	movs	r2, #1
 800983c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009842:	2201      	movs	r2, #1
 8009844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  index = 47;   
 8009848:	232f      	movs	r3, #47	; 0x2f
 800984a:	82fb      	strh	r3, [r7, #22]
  if(Channels == 1)
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d10c      	bne.n	800986c <USBD_AUDIO_Init_Microphone_Descriptor+0x184>
  {
    AUDIO_CONTROLS = (0x02);     
 8009852:	2302      	movs	r3, #2
 8009854:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 8009856:	4a04      	ldr	r2, [pc, #16]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009858:	7d7b      	ldrb	r3, [r7, #21]
 800985a:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 800985e:	4b02      	ldr	r3, [pc, #8]	; (8009868 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009860:	2200      	movs	r2, #0
 8009862:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8009866:	e012      	b.n	800988e <USBD_AUDIO_Init_Microphone_Descriptor+0x1a6>
 8009868:	200018dc 	.word	0x200018dc
  }
  else
  {
    AUDIO_CONTROLS = (0x02);     
 800986c:	2302      	movs	r3, #2
 800986e:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8009870:	4bab      	ldr	r3, [pc, #684]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009872:	2200      	movs	r2, #0
 8009874:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8009878:	4aa9      	ldr	r2, [pc, #676]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800987a:	7d7b      	ldrb	r3, [r7, #21]
 800987c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009880:	8afb      	ldrh	r3, [r7, #22]
 8009882:	49a7      	ldr	r1, [pc, #668]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009884:	7d7a      	ldrb	r2, [r7, #21]
 8009886:	54ca      	strb	r2, [r1, r3]
    index++;
 8009888:	8afb      	ldrh	r3, [r7, #22]
 800988a:	3301      	adds	r3, #1
 800988c:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 2)
 800988e:	79fb      	ldrb	r3, [r7, #7]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d906      	bls.n	80098a2 <USBD_AUDIO_Init_Microphone_Descriptor+0x1ba>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009894:	8afb      	ldrh	r3, [r7, #22]
 8009896:	49a2      	ldr	r1, [pc, #648]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009898:	7d7a      	ldrb	r2, [r7, #21]
 800989a:	54ca      	strb	r2, [r1, r3]
    index++;
 800989c:	8afb      	ldrh	r3, [r7, #22]
 800989e:	3301      	adds	r3, #1
 80098a0:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 3)
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d906      	bls.n	80098b6 <USBD_AUDIO_Init_Microphone_Descriptor+0x1ce>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098a8:	8afb      	ldrh	r3, [r7, #22]
 80098aa:	499d      	ldr	r1, [pc, #628]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098ac:	7d7a      	ldrb	r2, [r7, #21]
 80098ae:	54ca      	strb	r2, [r1, r3]
    index++;
 80098b0:	8afb      	ldrh	r3, [r7, #22]
 80098b2:	3301      	adds	r3, #1
 80098b4:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 4)
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d906      	bls.n	80098ca <USBD_AUDIO_Init_Microphone_Descriptor+0x1e2>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098bc:	8afb      	ldrh	r3, [r7, #22]
 80098be:	4998      	ldr	r1, [pc, #608]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098c0:	7d7a      	ldrb	r2, [r7, #21]
 80098c2:	54ca      	strb	r2, [r1, r3]
    index++;
 80098c4:	8afb      	ldrh	r3, [r7, #22]
 80098c6:	3301      	adds	r3, #1
 80098c8:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 5)
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d906      	bls.n	80098de <USBD_AUDIO_Init_Microphone_Descriptor+0x1f6>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098d0:	8afb      	ldrh	r3, [r7, #22]
 80098d2:	4993      	ldr	r1, [pc, #588]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098d4:	7d7a      	ldrb	r2, [r7, #21]
 80098d6:	54ca      	strb	r2, [r1, r3]
    index++;
 80098d8:	8afb      	ldrh	r3, [r7, #22]
 80098da:	3301      	adds	r3, #1
 80098dc:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 6)
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	2b06      	cmp	r3, #6
 80098e2:	d906      	bls.n	80098f2 <USBD_AUDIO_Init_Microphone_Descriptor+0x20a>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098e4:	8afb      	ldrh	r3, [r7, #22]
 80098e6:	498e      	ldr	r1, [pc, #568]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098e8:	7d7a      	ldrb	r2, [r7, #21]
 80098ea:	54ca      	strb	r2, [r1, r3]
    index++;
 80098ec:	8afb      	ldrh	r3, [r7, #22]
 80098ee:	3301      	adds	r3, #1
 80098f0:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 7)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2b07      	cmp	r3, #7
 80098f6:	d906      	bls.n	8009906 <USBD_AUDIO_Init_Microphone_Descriptor+0x21e>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098f8:	8afb      	ldrh	r3, [r7, #22]
 80098fa:	4989      	ldr	r1, [pc, #548]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098fc:	7d7a      	ldrb	r2, [r7, #21]
 80098fe:	54ca      	strb	r2, [r1, r3]
    index++;
 8009900:	8afb      	ldrh	r3, [r7, #22]
 8009902:	3301      	adds	r3, #1
 8009904:	82fb      	strh	r3, [r7, #22]
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 8009906:	8afb      	ldrh	r3, [r7, #22]
 8009908:	4a85      	ldr	r2, [pc, #532]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800990a:	2100      	movs	r1, #0
 800990c:	54d1      	strb	r1, [r2, r3]
  index++;   
 800990e:	8afb      	ldrh	r3, [r7, #22]
 8009910:	3301      	adds	r3, #1
 8009912:	82fb      	strh	r3, [r7, #22]
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8009914:	8afb      	ldrh	r3, [r7, #22]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	82fa      	strh	r2, [r7, #22]
 800991a:	461a      	mov	r2, r3
 800991c:	4b80      	ldr	r3, [pc, #512]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800991e:	2109      	movs	r1, #9
 8009920:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009922:	8afb      	ldrh	r3, [r7, #22]
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	82fa      	strh	r2, [r7, #22]
 8009928:	461a      	mov	r2, r3
 800992a:	4b7d      	ldr	r3, [pc, #500]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800992c:	2124      	movs	r1, #36	; 0x24
 800992e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 8009930:	8afb      	ldrh	r3, [r7, #22]
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	82fa      	strh	r2, [r7, #22]
 8009936:	461a      	mov	r2, r3
 8009938:	4b79      	ldr	r3, [pc, #484]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800993a:	2103      	movs	r1, #3
 800993c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 800993e:	8afb      	ldrh	r3, [r7, #22]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	82fa      	strh	r2, [r7, #22]
 8009944:	461a      	mov	r2, r3
 8009946:	4b76      	ldr	r3, [pc, #472]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009948:	2103      	movs	r1, #3
 800994a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 800994c:	8afb      	ldrh	r3, [r7, #22]
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	82fa      	strh	r2, [r7, #22]
 8009952:	461a      	mov	r2, r3
 8009954:	4b72      	ldr	r3, [pc, #456]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009956:	2101      	movs	r1, #1
 8009958:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 800995a:	8afb      	ldrh	r3, [r7, #22]
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	82fa      	strh	r2, [r7, #22]
 8009960:	461a      	mov	r2, r3
 8009962:	4b6f      	ldr	r3, [pc, #444]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009964:	2101      	movs	r1, #1
 8009966:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8009968:	8afb      	ldrh	r3, [r7, #22]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	82fa      	strh	r2, [r7, #22]
 800996e:	461a      	mov	r2, r3
 8009970:	4b6b      	ldr	r3, [pc, #428]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009972:	2100      	movs	r1, #0
 8009974:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8009976:	8afb      	ldrh	r3, [r7, #22]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	82fa      	strh	r2, [r7, #22]
 800997c:	461a      	mov	r2, r3
 800997e:	4b68      	ldr	r3, [pc, #416]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009980:	2102      	movs	r1, #2
 8009982:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8009984:	8afb      	ldrh	r3, [r7, #22]
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	82fa      	strh	r2, [r7, #22]
 800998a:	461a      	mov	r2, r3
 800998c:	4b64      	ldr	r3, [pc, #400]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800998e:	2100      	movs	r1, #0
 8009990:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8009992:	8afb      	ldrh	r3, [r7, #22]
 8009994:	1c5a      	adds	r2, r3, #1
 8009996:	82fa      	strh	r2, [r7, #22]
 8009998:	461a      	mov	r2, r3
 800999a:	4b61      	ldr	r3, [pc, #388]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800999c:	2109      	movs	r1, #9
 800999e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 80099a0:	8afb      	ldrh	r3, [r7, #22]
 80099a2:	1c5a      	adds	r2, r3, #1
 80099a4:	82fa      	strh	r2, [r7, #22]
 80099a6:	461a      	mov	r2, r3
 80099a8:	4b5d      	ldr	r3, [pc, #372]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099aa:	2104      	movs	r1, #4
 80099ac:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 80099ae:	8afb      	ldrh	r3, [r7, #22]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	82fa      	strh	r2, [r7, #22]
 80099b4:	461a      	mov	r2, r3
 80099b6:	4b5a      	ldr	r3, [pc, #360]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099b8:	2101      	movs	r1, #1
 80099ba:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 80099bc:	8afb      	ldrh	r3, [r7, #22]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	82fa      	strh	r2, [r7, #22]
 80099c2:	461a      	mov	r2, r3
 80099c4:	4b56      	ldr	r3, [pc, #344]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099c6:	2100      	movs	r1, #0
 80099c8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 80099ca:	8afb      	ldrh	r3, [r7, #22]
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	82fa      	strh	r2, [r7, #22]
 80099d0:	461a      	mov	r2, r3
 80099d2:	4b53      	ldr	r3, [pc, #332]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099d4:	2100      	movs	r1, #0
 80099d6:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 80099d8:	8afb      	ldrh	r3, [r7, #22]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	82fa      	strh	r2, [r7, #22]
 80099de:	461a      	mov	r2, r3
 80099e0:	4b4f      	ldr	r3, [pc, #316]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099e2:	2101      	movs	r1, #1
 80099e4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 80099e6:	8afb      	ldrh	r3, [r7, #22]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	82fa      	strh	r2, [r7, #22]
 80099ec:	461a      	mov	r2, r3
 80099ee:	4b4c      	ldr	r3, [pc, #304]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099f0:	2102      	movs	r1, #2
 80099f2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 80099f4:	8afb      	ldrh	r3, [r7, #22]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	82fa      	strh	r2, [r7, #22]
 80099fa:	461a      	mov	r2, r3
 80099fc:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099fe:	2100      	movs	r1, #0
 8009a00:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8009a02:	8afb      	ldrh	r3, [r7, #22]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	82fa      	strh	r2, [r7, #22]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4b45      	ldr	r3, [pc, #276]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8009a10:	8afb      	ldrh	r3, [r7, #22]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	82fa      	strh	r2, [r7, #22]
 8009a16:	461a      	mov	r2, r3
 8009a18:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a1a:	2109      	movs	r1, #9
 8009a1c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8009a1e:	8afb      	ldrh	r3, [r7, #22]
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	82fa      	strh	r2, [r7, #22]
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b3e      	ldr	r3, [pc, #248]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a28:	2104      	movs	r1, #4
 8009a2a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	82fa      	strh	r2, [r7, #22]
 8009a32:	461a      	mov	r2, r3
 8009a34:	4b3a      	ldr	r3, [pc, #232]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a36:	2101      	movs	r1, #1
 8009a38:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 8009a3a:	8afb      	ldrh	r3, [r7, #22]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	82fa      	strh	r2, [r7, #22]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a44:	2101      	movs	r1, #1
 8009a46:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 8009a48:	8afb      	ldrh	r3, [r7, #22]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	82fa      	strh	r2, [r7, #22]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4b33      	ldr	r3, [pc, #204]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a52:	2101      	movs	r1, #1
 8009a54:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8009a56:	8afb      	ldrh	r3, [r7, #22]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	82fa      	strh	r2, [r7, #22]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4b30      	ldr	r3, [pc, #192]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a60:	2101      	movs	r1, #1
 8009a62:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8009a64:	8afb      	ldrh	r3, [r7, #22]
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	82fa      	strh	r2, [r7, #22]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a6e:	2102      	movs	r1, #2
 8009a70:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8009a72:	8afb      	ldrh	r3, [r7, #22]
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	82fa      	strh	r2, [r7, #22]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4b29      	ldr	r3, [pc, #164]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 8009a80:	8afb      	ldrh	r3, [r7, #22]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	82fa      	strh	r2, [r7, #22]
 8009a86:	461a      	mov	r2, r3
 8009a88:	4b25      	ldr	r3, [pc, #148]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8009a8e:	8afb      	ldrh	r3, [r7, #22]
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	82fa      	strh	r2, [r7, #22]
 8009a94:	461a      	mov	r2, r3
 8009a96:	4b22      	ldr	r3, [pc, #136]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a98:	2107      	movs	r1, #7
 8009a9a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009a9c:	8afb      	ldrh	r3, [r7, #22]
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	82fa      	strh	r2, [r7, #22]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009aa6:	2124      	movs	r1, #36	; 0x24
 8009aa8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 8009aaa:	8afb      	ldrh	r3, [r7, #22]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	82fa      	strh	r2, [r7, #22]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 8009ab8:	8afb      	ldrh	r3, [r7, #22]
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	82fa      	strh	r2, [r7, #22]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ac2:	2103      	movs	r1, #3
 8009ac4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8009ac6:	8afb      	ldrh	r3, [r7, #22]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	82fa      	strh	r2, [r7, #22]
 8009acc:	461a      	mov	r2, r3
 8009ace:	4b14      	ldr	r3, [pc, #80]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8009ad4:	8afb      	ldrh	r3, [r7, #22]
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	82fa      	strh	r2, [r7, #22]
 8009ada:	461a      	mov	r2, r3
 8009adc:	4b10      	ldr	r3, [pc, #64]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ade:	2101      	movs	r1, #1
 8009ae0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 8009ae2:	8afb      	ldrh	r3, [r7, #22]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	82fa      	strh	r2, [r7, #22]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009aec:	2100      	movs	r1, #0
 8009aee:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8009af0:	8afb      	ldrh	r3, [r7, #22]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	82fa      	strh	r2, [r7, #22]
 8009af6:	461a      	mov	r2, r3
 8009af8:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009afa:	210b      	movs	r1, #11
 8009afc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009afe:	8afb      	ldrh	r3, [r7, #22]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	82fa      	strh	r2, [r7, #22]
 8009b04:	461a      	mov	r2, r3
 8009b06:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b08:	2124      	movs	r1, #36	; 0x24
 8009b0a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8009b0c:	8afb      	ldrh	r3, [r7, #22]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	82fa      	strh	r2, [r7, #22]
 8009b12:	461a      	mov	r2, r3
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b16:	2102      	movs	r1, #2
 8009b18:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8009b1a:	8afb      	ldrh	r3, [r7, #22]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	e001      	b.n	8009b24 <USBD_AUDIO_Init_Microphone_Descriptor+0x43c>
 8009b20:	200018dc 	.word	0x200018dc
 8009b24:	82fa      	strh	r2, [r7, #22]
 8009b26:	461a      	mov	r2, r3
 8009b28:	4b7e      	ldr	r3, [pc, #504]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8009b2e:	8afb      	ldrh	r3, [r7, #22]
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	82fa      	strh	r2, [r7, #22]
 8009b34:	4619      	mov	r1, r3
 8009b36:	4a7b      	ldr	r2, [pc, #492]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	5453      	strb	r3, [r2, r1]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 8009b3c:	8afb      	ldrh	r3, [r7, #22]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	82fa      	strh	r2, [r7, #22]
 8009b42:	461a      	mov	r2, r3
 8009b44:	4b77      	ldr	r3, [pc, #476]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b46:	2102      	movs	r1, #2
 8009b48:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 8009b4a:	8afb      	ldrh	r3, [r7, #22]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	82fa      	strh	r2, [r7, #22]
 8009b50:	461a      	mov	r2, r3
 8009b52:	4b74      	ldr	r3, [pc, #464]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b54:	2110      	movs	r1, #16
 8009b56:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8009b58:	8afb      	ldrh	r3, [r7, #22]
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	82fa      	strh	r2, [r7, #22]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4b70      	ldr	r3, [pc, #448]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b62:	2101      	movs	r1, #1
 8009b64:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8009b66:	8afb      	ldrh	r3, [r7, #22]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	82fa      	strh	r2, [r7, #22]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	b2d9      	uxtb	r1, r3
 8009b72:	4b6c      	ldr	r3, [pc, #432]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b74:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	0a19      	lsrs	r1, r3, #8
 8009b7a:	8afb      	ldrh	r3, [r7, #22]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	82fa      	strh	r2, [r7, #22]
 8009b80:	461a      	mov	r2, r3
 8009b82:	b2c9      	uxtb	r1, r1
 8009b84:	4b67      	ldr	r3, [pc, #412]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b86:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	0c19      	lsrs	r1, r3, #16
 8009b8c:	8afb      	ldrh	r3, [r7, #22]
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	82fa      	strh	r2, [r7, #22]
 8009b92:	461a      	mov	r2, r3
 8009b94:	b2c9      	uxtb	r1, r1
 8009b96:	4b63      	ldr	r3, [pc, #396]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b98:	5499      	strb	r1, [r3, r2]
  /* Endpoint 1 - Standard Descriptor */
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8009b9a:	8afb      	ldrh	r3, [r7, #22]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	82fa      	strh	r2, [r7, #22]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4b60      	ldr	r3, [pc, #384]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009ba4:	2109      	movs	r1, #9
 8009ba6:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8009ba8:	8afb      	ldrh	r3, [r7, #22]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	82fa      	strh	r2, [r7, #22]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4b5c      	ldr	r3, [pc, #368]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bb2:	2105      	movs	r1, #5
 8009bb4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8009bb6:	8afb      	ldrh	r3, [r7, #22]
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	82fa      	strh	r2, [r7, #22]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bc0:	2181      	movs	r1, #129	; 0x81
 8009bc2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8009bc4:	8afb      	ldrh	r3, [r7, #22]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	82fa      	strh	r2, [r7, #22]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4b55      	ldr	r3, [pc, #340]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bce:	2105      	movs	r1, #5
 8009bd0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4a54      	ldr	r2, [pc, #336]	; (8009d28 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	099b      	lsrs	r3, r3, #6
 8009bdc:	3302      	adds	r3, #2
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	79fa      	ldrb	r2, [r7, #7]
 8009be2:	fb12 f303 	smulbb	r3, r2, r3
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	8afb      	ldrh	r3, [r7, #22]
 8009bea:	1c59      	adds	r1, r3, #1
 8009bec:	82f9      	strh	r1, [r7, #22]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	0053      	lsls	r3, r2, #1
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	4b4b      	ldr	r3, [pc, #300]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bf6:	545a      	strb	r2, [r3, r1]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4a4b      	ldr	r2, [pc, #300]	; (8009d28 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009c00:	099b      	lsrs	r3, r3, #6
 8009c02:	3302      	adds	r3, #2
 8009c04:	79fa      	ldrb	r2, [r7, #7]
 8009c06:	fb02 f303 	mul.w	r3, r2, r3
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	0a19      	lsrs	r1, r3, #8
 8009c0e:	8afb      	ldrh	r3, [r7, #22]
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	82fa      	strh	r2, [r7, #22]
 8009c14:	461a      	mov	r2, r3
 8009c16:	b2c9      	uxtb	r1, r1
 8009c18:	4b42      	ldr	r3, [pc, #264]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c1a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8009c1c:	8afb      	ldrh	r3, [r7, #22]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	82fa      	strh	r2, [r7, #22]
 8009c22:	461a      	mov	r2, r3
 8009c24:	4b3f      	ldr	r3, [pc, #252]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c26:	2101      	movs	r1, #1
 8009c28:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8009c2a:	8afb      	ldrh	r3, [r7, #22]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	82fa      	strh	r2, [r7, #22]
 8009c30:	461a      	mov	r2, r3
 8009c32:	4b3c      	ldr	r3, [pc, #240]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c34:	2100      	movs	r1, #0
 8009c36:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8009c38:	8afb      	ldrh	r3, [r7, #22]
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	82fa      	strh	r2, [r7, #22]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4b38      	ldr	r3, [pc, #224]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c42:	2100      	movs	r1, #0
 8009c44:	5499      	strb	r1, [r3, r2]
  /* Endpoint - Audio Streaming Descriptor*/
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8009c46:	8afb      	ldrh	r3, [r7, #22]
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	82fa      	strh	r2, [r7, #22]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b35      	ldr	r3, [pc, #212]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c50:	2107      	movs	r1, #7
 8009c52:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8009c54:	8afb      	ldrh	r3, [r7, #22]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	82fa      	strh	r2, [r7, #22]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4b31      	ldr	r3, [pc, #196]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c5e:	2125      	movs	r1, #37	; 0x25
 8009c60:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8009c62:	8afb      	ldrh	r3, [r7, #22]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	82fa      	strh	r2, [r7, #22]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	82fa      	strh	r2, [r7, #22]
 8009c76:	461a      	mov	r2, r3
 8009c78:	4b2a      	ldr	r3, [pc, #168]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8009c7e:	8afb      	ldrh	r3, [r7, #22]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	82fa      	strh	r2, [r7, #22]
 8009c84:	461a      	mov	r2, r3
 8009c86:	4b27      	ldr	r3, [pc, #156]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c88:	2100      	movs	r1, #0
 8009c8a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8009c8c:	8afb      	ldrh	r3, [r7, #22]
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	82fa      	strh	r2, [r7, #22]
 8009c92:	461a      	mov	r2, r3
 8009c94:	4b23      	ldr	r3, [pc, #140]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c96:	2100      	movs	r1, #0
 8009c98:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8009c9a:	8afb      	ldrh	r3, [r7, #22]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	82fa      	strh	r2, [r7, #22]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4b20      	ldr	r3, [pc, #128]	; (8009d24 <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	5499      	strb	r1, [r3, r2]
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4a1f      	ldr	r2, [pc, #124]	; (8009d28 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009cac:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb0:	099b      	lsrs	r3, r3, #6
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	fb12 f303 	smulbb	r3, r2, r3
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cc4:	825a      	strh	r2, [r3, #18]
  haudioInstance.frequency=samplingFrequency;
 8009cc6:	4a19      	ldr	r2, [pc, #100]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	6093      	str	r3, [r2, #8]
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8009ccc:	4b17      	ldr	r3, [pc, #92]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cce:	8a5b      	ldrh	r3, [r3, #18]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	0052      	lsls	r2, r2, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cdc:	81da      	strh	r2, [r3, #14]
  haudioInstance.channels=Channels;  
 8009cde:	4a13      	ldr	r2, [pc, #76]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	7113      	strb	r3, [r2, #4]
  haudioInstance.upper_treshold = 5;
 8009ce4:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ce6:	2205      	movs	r2, #5
 8009ce8:	769a      	strb	r2, [r3, #26]
  haudioInstance.lower_treshold = 2;
 8009cea:	4b10      	ldr	r3, [pc, #64]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cec:	2202      	movs	r2, #2
 8009cee:	76da      	strb	r2, [r3, #27]
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8009cf0:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	751a      	strb	r2, [r3, #20]
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cf8:	8a5b      	ldrh	r3, [r3, #18]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	0052      	lsls	r2, r2, #1
 8009cfe:	4413      	add	r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009d04:	831a      	strh	r2, [r3, #24]
  haudioInstance.rd_ptr = 0;  
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	82da      	strh	r2, [r3, #22]
  haudioInstance.dataAmount=0;
 8009d0c:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	821a      	strh	r2, [r3, #16]
  haudioInstance.buffer = 0;
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009d18:	bf00      	nop
 8009d1a:	371c      	adds	r7, #28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	200018dc 	.word	0x200018dc
 8009d28:	10624dd3 	.word	0x10624dd3
 8009d2c:	20001878 	.word	0x20001878

08009d30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e01f      	b.n	8009d88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	79fa      	ldrb	r2, [r7, #7]
 8009d7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7f7 f927 	bl	8000fd0 <USBD_LL_Init>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e025      	b.n	8009df4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32ae      	adds	r2, #174	; 0xae
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00f      	beq.n	8009de4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32ae      	adds	r2, #174	; 0xae
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	f107 020e 	add.w	r2, r7, #14
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7f7 f92b 	bl	8001060 <USBD_LL_Start>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	4798      	blx	r3
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f8b2 	bl	800b012 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009eca:	f003 031f 	and.w	r3, r3, #31
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d01a      	beq.n	8009f08 <USBD_LL_SetupStage+0x72>
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d822      	bhi.n	8009f1c <USBD_LL_SetupStage+0x86>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <USBD_LL_SetupStage+0x4a>
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d00a      	beq.n	8009ef4 <USBD_LL_SetupStage+0x5e>
 8009ede:	e01d      	b.n	8009f1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fb09 	bl	800a500 <USBD_StdDevReq>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef2:	e020      	b.n	8009f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fb71 	bl	800a5e4 <USBD_StdItfReq>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
      break;
 8009f06:	e016      	b.n	8009f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fbd3 	bl	800a6bc <USBD_StdEPReq>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1a:	e00c      	b.n	8009f36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7f7 f8e7 	bl	80010fe <USBD_LL_StallEP>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]
      break;
 8009f34:	bf00      	nop
  }

  return ret;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d16e      	bne.n	800a036 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	f040 8098 	bne.w	800a09c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d913      	bls.n	8009fa0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	1ad2      	subs	r2, r2, r3
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	bf28      	it	cs
 8009f92:	4613      	movcs	r3, r2
 8009f94:	461a      	mov	r2, r3
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f001 f92e 	bl	800b1fa <USBD_CtlContinueRx>
 8009f9e:	e07d      	b.n	800a09c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d014      	beq.n	8009fd8 <USBD_LL_DataOutStage+0x98>
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d81d      	bhi.n	8009fee <USBD_LL_DataOutStage+0xae>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <USBD_LL_DataOutStage+0x7c>
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d003      	beq.n	8009fc2 <USBD_LL_DataOutStage+0x82>
 8009fba:	e018      	b.n	8009fee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	75bb      	strb	r3, [r7, #22]
            break;
 8009fc0:	e018      	b.n	8009ff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	4619      	mov	r1, r3
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fa5e 	bl	800a48e <USBD_CoreFindIF>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75bb      	strb	r3, [r7, #22]
            break;
 8009fd6:	e00d      	b.n	8009ff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 fa60 	bl	800a4a8 <USBD_CoreFindEP>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75bb      	strb	r3, [r7, #22]
            break;
 8009fec:	e002      	b.n	8009ff4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75bb      	strb	r3, [r7, #22]
            break;
 8009ff2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ff4:	7dbb      	ldrb	r3, [r7, #22]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d119      	bne.n	800a02e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b03      	cmp	r3, #3
 800a004:	d113      	bne.n	800a02e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a006:	7dba      	ldrb	r2, [r7, #22]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	32ae      	adds	r2, #174	; 0xae
 800a00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a016:	7dba      	ldrb	r2, [r7, #22]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a01e:	7dba      	ldrb	r2, [r7, #22]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	32ae      	adds	r2, #174	; 0xae
 800a024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f001 f8f4 	bl	800b21c <USBD_CtlSendStatus>
 800a034:	e032      	b.n	800a09c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a036:	7afb      	ldrb	r3, [r7, #11]
 800a038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 fa31 	bl	800a4a8 <USBD_CoreFindEP>
 800a046:	4603      	mov	r3, r0
 800a048:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a04a:	7dbb      	ldrb	r3, [r7, #22]
 800a04c:	2bff      	cmp	r3, #255	; 0xff
 800a04e:	d025      	beq.n	800a09c <USBD_LL_DataOutStage+0x15c>
 800a050:	7dbb      	ldrb	r3, [r7, #22]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d122      	bne.n	800a09c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d117      	bne.n	800a092 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a062:	7dba      	ldrb	r2, [r7, #22]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	32ae      	adds	r2, #174	; 0xae
 800a068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00f      	beq.n	800a092 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a072:	7dba      	ldrb	r2, [r7, #22]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a07a:	7dba      	ldrb	r2, [r7, #22]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	32ae      	adds	r2, #174	; 0xae
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	7afa      	ldrb	r2, [r7, #11]
 800a088:	4611      	mov	r1, r2
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	4798      	blx	r3
 800a08e:	4603      	mov	r3, r0
 800a090:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	e000      	b.n	800a09e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d16f      	bne.n	800a19a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3314      	adds	r3, #20
 800a0be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d15a      	bne.n	800a180 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d914      	bls.n	800a100 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f001 f856 	bl	800b19e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7f7 f87a 	bl	80011f2 <USBD_LL_PrepareReceive>
 800a0fe:	e03f      	b.n	800a180 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d11c      	bne.n	800a146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a114:	429a      	cmp	r2, r3
 800a116:	d316      	bcc.n	800a146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a122:	429a      	cmp	r2, r3
 800a124:	d20f      	bcs.n	800a146 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f001 f837 	bl	800b19e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7f7 f857 	bl	80011f2 <USBD_LL_PrepareReceive>
 800a144:	e01c      	b.n	800a180 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d10f      	bne.n	800a172 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7f6 ffc2 	bl	80010fe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f001 f861 	bl	800b242 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d03a      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff fe42 	bl	8009e14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a198:	e032      	b.n	800a200 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f97f 	bl	800a4a8 <USBD_CoreFindEP>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	2bff      	cmp	r3, #255	; 0xff
 800a1b2:	d025      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d122      	bne.n	800a200 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d11c      	bne.n	800a200 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1c6:	7dfa      	ldrb	r2, [r7, #23]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	32ae      	adds	r2, #174	; 0xae
 800a1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d014      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1d6:	7dfa      	ldrb	r2, [r7, #23]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1de:	7dfa      	ldrb	r2, [r7, #23]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	32ae      	adds	r2, #174	; 0xae
 800a1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	7afa      	ldrb	r2, [r7, #11]
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	4798      	blx	r3
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a1f6:	7dbb      	ldrb	r3, [r7, #22]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
 800a1fe:	e000      	b.n	800a202 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d014      	beq.n	800a270 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6852      	ldr	r2, [r2, #4]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	4611      	mov	r1, r2
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	4798      	blx	r3
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a270:	2340      	movs	r3, #64	; 0x40
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7f6 ff01 	bl	800107e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2240      	movs	r2, #64	; 0x40
 800a288:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a28c:	2340      	movs	r3, #64	; 0x40
 800a28e:	2200      	movs	r2, #0
 800a290:	2180      	movs	r1, #128	; 0x80
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7f6 fef3 	bl	800107e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2240      	movs	r2, #64	; 0x40
 800a2a2:	621a      	str	r2, [r3, #32]

  return ret;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b083      	sub	sp, #12
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2204      	movs	r2, #4
 800a2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	d106      	bne.n	800a31c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a314:	b2da      	uxtb	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d110      	bne.n	800a360 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00b      	beq.n	800a360 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	32ae      	adds	r2, #174	; 0xae
 800a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	e01c      	b.n	800a3c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b03      	cmp	r3, #3
 800a396:	d115      	bne.n	800a3c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	32ae      	adds	r2, #174	; 0xae
 800a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00b      	beq.n	800a3c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	32ae      	adds	r2, #174	; 0xae
 800a3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	78fa      	ldrb	r2, [r7, #3]
 800a3be:	4611      	mov	r1, r2
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	32ae      	adds	r2, #174	; 0xae
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e01c      	b.n	800a42a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d115      	bne.n	800a428 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	32ae      	adds	r2, #174	; 0xae
 800a406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	32ae      	adds	r2, #174	; 0xae
 800a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	4611      	mov	r1, r2
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6852      	ldr	r2, [r2, #4]
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	4611      	mov	r1, r2
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a49a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b087      	sub	sp, #28
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4e0:	8a3b      	ldrh	r3, [r7, #16]
 800a4e2:	021b      	lsls	r3, r3, #8
 800a4e4:	b21a      	sxth	r2, r3
 800a4e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	b21b      	sxth	r3, r3
 800a4ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4f0:	89fb      	ldrh	r3, [r7, #14]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	d005      	beq.n	800a526 <USBD_StdDevReq+0x26>
 800a51a:	2b40      	cmp	r3, #64	; 0x40
 800a51c:	d857      	bhi.n	800a5ce <USBD_StdDevReq+0xce>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00f      	beq.n	800a542 <USBD_StdDevReq+0x42>
 800a522:	2b20      	cmp	r3, #32
 800a524:	d153      	bne.n	800a5ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	32ae      	adds	r2, #174	; 0xae
 800a530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	4798      	blx	r3
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
      break;
 800a540:	e04a      	b.n	800a5d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b09      	cmp	r3, #9
 800a548:	d83b      	bhi.n	800a5c2 <USBD_StdDevReq+0xc2>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <USBD_StdDevReq+0x50>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a5a5 	.word	0x0800a5a5
 800a554:	0800a5b9 	.word	0x0800a5b9
 800a558:	0800a5c3 	.word	0x0800a5c3
 800a55c:	0800a5af 	.word	0x0800a5af
 800a560:	0800a5c3 	.word	0x0800a5c3
 800a564:	0800a583 	.word	0x0800a583
 800a568:	0800a579 	.word	0x0800a579
 800a56c:	0800a5c3 	.word	0x0800a5c3
 800a570:	0800a59b 	.word	0x0800a59b
 800a574:	0800a58d 	.word	0x0800a58d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa3c 	bl	800a9f8 <USBD_GetDescriptor>
          break;
 800a580:	e024      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fba1 	bl	800accc <USBD_SetAddress>
          break;
 800a58a:	e01f      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fbe0 	bl	800ad54 <USBD_SetConfig>
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]
          break;
 800a598:	e018      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fc83 	bl	800aea8 <USBD_GetConfig>
          break;
 800a5a2:	e013      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fcb4 	bl	800af14 <USBD_GetStatus>
          break;
 800a5ac:	e00e      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fce3 	bl	800af7c <USBD_SetFeature>
          break;
 800a5b6:	e009      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fd07 	bl	800afce <USBD_ClrFeature>
          break;
 800a5c0:	e004      	b.n	800a5cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fd5e 	bl	800b086 <USBD_CtlError>
          break;
 800a5ca:	bf00      	nop
      }
      break;
 800a5cc:	e004      	b.n	800a5d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fd58 	bl	800b086 <USBD_CtlError>
      break;
 800a5d6:	bf00      	nop
  }

  return ret;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop

0800a5e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fa:	2b40      	cmp	r3, #64	; 0x40
 800a5fc:	d005      	beq.n	800a60a <USBD_StdItfReq+0x26>
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d852      	bhi.n	800a6a8 <USBD_StdItfReq+0xc4>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <USBD_StdItfReq+0x26>
 800a606:	2b20      	cmp	r3, #32
 800a608:	d14e      	bne.n	800a6a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a610:	b2db      	uxtb	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	2b02      	cmp	r3, #2
 800a616:	d840      	bhi.n	800a69a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	889b      	ldrh	r3, [r3, #4]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d836      	bhi.n	800a690 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	889b      	ldrh	r3, [r3, #4]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff ff2f 	bl	800a48e <USBD_CoreFindIF>
 800a630:	4603      	mov	r3, r0
 800a632:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2bff      	cmp	r3, #255	; 0xff
 800a638:	d01d      	beq.n	800a676 <USBD_StdItfReq+0x92>
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d11a      	bne.n	800a676 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a640:	7bba      	ldrb	r2, [r7, #14]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	32ae      	adds	r2, #174	; 0xae
 800a646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00f      	beq.n	800a670 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a650:	7bba      	ldrb	r2, [r7, #14]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a658:	7bba      	ldrb	r2, [r7, #14]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	32ae      	adds	r2, #174	; 0xae
 800a65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a66e:	e004      	b.n	800a67a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a670:	2303      	movs	r3, #3
 800a672:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a674:	e001      	b.n	800a67a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a676:	2303      	movs	r3, #3
 800a678:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	88db      	ldrh	r3, [r3, #6]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d110      	bne.n	800a6a4 <USBD_StdItfReq+0xc0>
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10d      	bne.n	800a6a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fdc7 	bl	800b21c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a68e:	e009      	b.n	800a6a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fcf7 	bl	800b086 <USBD_CtlError>
          break;
 800a698:	e004      	b.n	800a6a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fcf2 	bl	800b086 <USBD_CtlError>
          break;
 800a6a2:	e000      	b.n	800a6a6 <USBD_StdItfReq+0xc2>
          break;
 800a6a4:	bf00      	nop
      }
      break;
 800a6a6:	e004      	b.n	800a6b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fceb 	bl	800b086 <USBD_CtlError>
      break;
 800a6b0:	bf00      	nop
  }

  return ret;
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	889b      	ldrh	r3, [r3, #4]
 800a6ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6d8:	2b40      	cmp	r3, #64	; 0x40
 800a6da:	d007      	beq.n	800a6ec <USBD_StdEPReq+0x30>
 800a6dc:	2b40      	cmp	r3, #64	; 0x40
 800a6de:	f200 817f 	bhi.w	800a9e0 <USBD_StdEPReq+0x324>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d02a      	beq.n	800a73c <USBD_StdEPReq+0x80>
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	f040 817a 	bne.w	800a9e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff fed9 	bl	800a4a8 <USBD_CoreFindEP>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6fa:	7b7b      	ldrb	r3, [r7, #13]
 800a6fc:	2bff      	cmp	r3, #255	; 0xff
 800a6fe:	f000 8174 	beq.w	800a9ea <USBD_StdEPReq+0x32e>
 800a702:	7b7b      	ldrb	r3, [r7, #13]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f040 8170 	bne.w	800a9ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a70a:	7b7a      	ldrb	r2, [r7, #13]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a712:	7b7a      	ldrb	r2, [r7, #13]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	32ae      	adds	r2, #174	; 0xae
 800a718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 8163 	beq.w	800a9ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a724:	7b7a      	ldrb	r2, [r7, #13]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	32ae      	adds	r2, #174	; 0xae
 800a72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a73a:	e156      	b.n	800a9ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	2b03      	cmp	r3, #3
 800a742:	d008      	beq.n	800a756 <USBD_StdEPReq+0x9a>
 800a744:	2b03      	cmp	r3, #3
 800a746:	f300 8145 	bgt.w	800a9d4 <USBD_StdEPReq+0x318>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 809b 	beq.w	800a886 <USBD_StdEPReq+0x1ca>
 800a750:	2b01      	cmp	r3, #1
 800a752:	d03c      	beq.n	800a7ce <USBD_StdEPReq+0x112>
 800a754:	e13e      	b.n	800a9d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d002      	beq.n	800a768 <USBD_StdEPReq+0xac>
 800a762:	2b03      	cmp	r3, #3
 800a764:	d016      	beq.n	800a794 <USBD_StdEPReq+0xd8>
 800a766:	e02c      	b.n	800a7c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00d      	beq.n	800a78a <USBD_StdEPReq+0xce>
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b80      	cmp	r3, #128	; 0x80
 800a772:	d00a      	beq.n	800a78a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7f6 fcc0 	bl	80010fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a77e:	2180      	movs	r1, #128	; 0x80
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7f6 fcbc 	bl	80010fe <USBD_LL_StallEP>
 800a786:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a788:	e020      	b.n	800a7cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fc7a 	bl	800b086 <USBD_CtlError>
              break;
 800a792:	e01b      	b.n	800a7cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	885b      	ldrh	r3, [r3, #2]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10e      	bne.n	800a7ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00b      	beq.n	800a7ba <USBD_StdEPReq+0xfe>
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b80      	cmp	r3, #128	; 0x80
 800a7a6:	d008      	beq.n	800a7ba <USBD_StdEPReq+0xfe>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	88db      	ldrh	r3, [r3, #6]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d104      	bne.n	800a7ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7f6 fca2 	bl	80010fe <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fd2e 	bl	800b21c <USBD_CtlSendStatus>

              break;
 800a7c0:	e004      	b.n	800a7cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fc5e 	bl	800b086 <USBD_CtlError>
              break;
 800a7ca:	bf00      	nop
          }
          break;
 800a7cc:	e107      	b.n	800a9de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d002      	beq.n	800a7e0 <USBD_StdEPReq+0x124>
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d016      	beq.n	800a80c <USBD_StdEPReq+0x150>
 800a7de:	e04b      	b.n	800a878 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7e0:	7bbb      	ldrb	r3, [r7, #14]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <USBD_StdEPReq+0x146>
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b80      	cmp	r3, #128	; 0x80
 800a7ea:	d00a      	beq.n	800a802 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7f6 fc84 	bl	80010fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7f6:	2180      	movs	r1, #128	; 0x80
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7f6 fc80 	bl	80010fe <USBD_LL_StallEP>
 800a7fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a800:	e040      	b.n	800a884 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fc3e 	bl	800b086 <USBD_CtlError>
              break;
 800a80a:	e03b      	b.n	800a884 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	885b      	ldrh	r3, [r3, #2]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d136      	bne.n	800a882 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d004      	beq.n	800a828 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7f6 fc7e 	bl	8001124 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fcf7 	bl	800b21c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fe38 	bl	800a4a8 <USBD_CoreFindEP>
 800a838:	4603      	mov	r3, r0
 800a83a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a83c:	7b7b      	ldrb	r3, [r7, #13]
 800a83e:	2bff      	cmp	r3, #255	; 0xff
 800a840:	d01f      	beq.n	800a882 <USBD_StdEPReq+0x1c6>
 800a842:	7b7b      	ldrb	r3, [r7, #13]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d11c      	bne.n	800a882 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a848:	7b7a      	ldrb	r2, [r7, #13]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a850:	7b7a      	ldrb	r2, [r7, #13]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	32ae      	adds	r2, #174	; 0xae
 800a856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d010      	beq.n	800a882 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a860:	7b7a      	ldrb	r2, [r7, #13]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32ae      	adds	r2, #174	; 0xae
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a876:	e004      	b.n	800a882 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fc03 	bl	800b086 <USBD_CtlError>
              break;
 800a880:	e000      	b.n	800a884 <USBD_StdEPReq+0x1c8>
              break;
 800a882:	bf00      	nop
          }
          break;
 800a884:	e0ab      	b.n	800a9de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d002      	beq.n	800a898 <USBD_StdEPReq+0x1dc>
 800a892:	2b03      	cmp	r3, #3
 800a894:	d032      	beq.n	800a8fc <USBD_StdEPReq+0x240>
 800a896:	e097      	b.n	800a9c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <USBD_StdEPReq+0x1f2>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b80      	cmp	r3, #128	; 0x80
 800a8a2:	d004      	beq.n	800a8ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fbed 	bl	800b086 <USBD_CtlError>
                break;
 800a8ac:	e091      	b.n	800a9d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da0b      	bge.n	800a8ce <USBD_StdEPReq+0x212>
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	3310      	adds	r3, #16
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	e00b      	b.n	800a8e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fc37 	bl	800b168 <USBD_CtlSendData>
              break;
 800a8fa:	e06a      	b.n	800a9d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a900:	2b00      	cmp	r3, #0
 800a902:	da11      	bge.n	800a928 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	f003 020f 	and.w	r2, r3, #15
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	3324      	adds	r3, #36	; 0x24
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d117      	bne.n	800a94e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fbb0 	bl	800b086 <USBD_CtlError>
                  break;
 800a926:	e054      	b.n	800a9d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	f003 020f 	and.w	r2, r3, #15
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	440b      	add	r3, r1
 800a93a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d104      	bne.n	800a94e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fb9d 	bl	800b086 <USBD_CtlError>
                  break;
 800a94c:	e041      	b.n	800a9d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a94e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a952:	2b00      	cmp	r3, #0
 800a954:	da0b      	bge.n	800a96e <USBD_StdEPReq+0x2b2>
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	3310      	adds	r3, #16
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	3304      	adds	r3, #4
 800a96c:	e00b      	b.n	800a986 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	4413      	add	r3, r2
 800a984:	3304      	adds	r3, #4
 800a986:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a988:	7bbb      	ldrb	r3, [r7, #14]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <USBD_StdEPReq+0x2d8>
 800a98e:	7bbb      	ldrb	r3, [r7, #14]
 800a990:	2b80      	cmp	r3, #128	; 0x80
 800a992:	d103      	bne.n	800a99c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	e00e      	b.n	800a9ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7f6 fbd2 	bl	800114a <USBD_LL_IsStallEP>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d003      	beq.n	800a9b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	e002      	b.n	800a9ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fbd1 	bl	800b168 <USBD_CtlSendData>
              break;
 800a9c6:	e004      	b.n	800a9d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fb5b 	bl	800b086 <USBD_CtlError>
              break;
 800a9d0:	bf00      	nop
          }
          break;
 800a9d2:	e004      	b.n	800a9de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fb55 	bl	800b086 <USBD_CtlError>
          break;
 800a9dc:	bf00      	nop
      }
      break;
 800a9de:	e005      	b.n	800a9ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fb4f 	bl	800b086 <USBD_CtlError>
      break;
 800a9e8:	e000      	b.n	800a9ec <USBD_StdEPReq+0x330>
      break;
 800a9ea:	bf00      	nop
  }

  return ret;
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	885b      	ldrh	r3, [r3, #2]
 800aa12:	0a1b      	lsrs	r3, r3, #8
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	f200 8128 	bhi.w	800ac6e <USBD_GetDescriptor+0x276>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <USBD_GetDescriptor+0x2c>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa41 	.word	0x0800aa41
 800aa28:	0800aa59 	.word	0x0800aa59
 800aa2c:	0800aa99 	.word	0x0800aa99
 800aa30:	0800ac6f 	.word	0x0800ac6f
 800aa34:	0800ac6f 	.word	0x0800ac6f
 800aa38:	0800ac0f 	.word	0x0800ac0f
 800aa3c:	0800ac3b 	.word	0x0800ac3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	7c12      	ldrb	r2, [r2, #16]
 800aa4c:	f107 0108 	add.w	r1, r7, #8
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	60f8      	str	r0, [r7, #12]
      break;
 800aa56:	e112      	b.n	800ac7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	7c1b      	ldrb	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10d      	bne.n	800aa7c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa68:	f107 0208 	add.w	r2, r7, #8
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	4798      	blx	r3
 800aa70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3301      	adds	r3, #1
 800aa76:	2202      	movs	r2, #2
 800aa78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa7a:	e100      	b.n	800ac7e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	f107 0208 	add.w	r2, r7, #8
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
 800aa8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3301      	adds	r3, #1
 800aa92:	2202      	movs	r2, #2
 800aa94:	701a      	strb	r2, [r3, #0]
      break;
 800aa96:	e0f2      	b.n	800ac7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	885b      	ldrh	r3, [r3, #2]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b05      	cmp	r3, #5
 800aaa0:	f200 80ac 	bhi.w	800abfc <USBD_GetDescriptor+0x204>
 800aaa4:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <USBD_GetDescriptor+0xb4>)
 800aaa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaaa:	bf00      	nop
 800aaac:	0800aac5 	.word	0x0800aac5
 800aab0:	0800aaf9 	.word	0x0800aaf9
 800aab4:	0800ab2d 	.word	0x0800ab2d
 800aab8:	0800ab61 	.word	0x0800ab61
 800aabc:	0800ab95 	.word	0x0800ab95
 800aac0:	0800abc9 	.word	0x0800abc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00b      	beq.n	800aae8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	7c12      	ldrb	r2, [r2, #16]
 800aadc:	f107 0108 	add.w	r1, r7, #8
 800aae0:	4610      	mov	r0, r2
 800aae2:	4798      	blx	r3
 800aae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aae6:	e091      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 facb 	bl	800b086 <USBD_CtlError>
            err++;
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800aaf6:	e089      	b.n	800ac0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7c12      	ldrb	r2, [r2, #16]
 800ab10:	f107 0108 	add.w	r1, r7, #8
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab1a:	e077      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fab1 	bl	800b086 <USBD_CtlError>
            err++;
 800ab24:	7afb      	ldrb	r3, [r7, #11]
 800ab26:	3301      	adds	r3, #1
 800ab28:	72fb      	strb	r3, [r7, #11]
          break;
 800ab2a:	e06f      	b.n	800ac0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	7c12      	ldrb	r2, [r2, #16]
 800ab44:	f107 0108 	add.w	r1, r7, #8
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4798      	blx	r3
 800ab4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab4e:	e05d      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fa97 	bl	800b086 <USBD_CtlError>
            err++;
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab5e:	e055      	b.n	800ac0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	7c12      	ldrb	r2, [r2, #16]
 800ab78:	f107 0108 	add.w	r1, r7, #8
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4798      	blx	r3
 800ab80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab82:	e043      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fa7d 	bl	800b086 <USBD_CtlError>
            err++;
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	72fb      	strb	r3, [r7, #11]
          break;
 800ab92:	e03b      	b.n	800ac0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	7c12      	ldrb	r2, [r2, #16]
 800abac:	f107 0108 	add.w	r1, r7, #8
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abb6:	e029      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa63 	bl	800b086 <USBD_CtlError>
            err++;
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
          break;
 800abc6:	e021      	b.n	800ac0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	7c12      	ldrb	r2, [r2, #16]
 800abe0:	f107 0108 	add.w	r1, r7, #8
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
 800abe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abea:	e00f      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa49 	bl	800b086 <USBD_CtlError>
            err++;
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	3301      	adds	r3, #1
 800abf8:	72fb      	strb	r3, [r7, #11]
          break;
 800abfa:	e007      	b.n	800ac0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa41 	bl	800b086 <USBD_CtlError>
          err++;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac0a:	bf00      	nop
      }
      break;
 800ac0c:	e037      	b.n	800ac7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7c1b      	ldrb	r3, [r3, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1e:	f107 0208 	add.w	r2, r7, #8
 800ac22:	4610      	mov	r0, r2
 800ac24:	4798      	blx	r3
 800ac26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac28:	e029      	b.n	800ac7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fa2a 	bl	800b086 <USBD_CtlError>
        err++;
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	3301      	adds	r3, #1
 800ac36:	72fb      	strb	r3, [r7, #11]
      break;
 800ac38:	e021      	b.n	800ac7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	7c1b      	ldrb	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10d      	bne.n	800ac5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4a:	f107 0208 	add.w	r2, r7, #8
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4798      	blx	r3
 800ac52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3301      	adds	r3, #1
 800ac58:	2207      	movs	r2, #7
 800ac5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac5c:	e00f      	b.n	800ac7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa10 	bl	800b086 <USBD_CtlError>
        err++;
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac6c:	e007      	b.n	800ac7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa08 	bl	800b086 <USBD_CtlError>
      err++;
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac7c:	bf00      	nop
  }

  if (err != 0U)
 800ac7e:	7afb      	ldrb	r3, [r7, #11]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d11e      	bne.n	800acc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	88db      	ldrh	r3, [r3, #6]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d016      	beq.n	800acba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac8c:	893b      	ldrh	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00e      	beq.n	800acb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	88da      	ldrh	r2, [r3, #6]
 800ac96:	893b      	ldrh	r3, [r7, #8]
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	bf28      	it	cs
 800ac9c:	4613      	movcs	r3, r2
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aca2:	893b      	ldrh	r3, [r7, #8]
 800aca4:	461a      	mov	r2, r3
 800aca6:	68f9      	ldr	r1, [r7, #12]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fa5d 	bl	800b168 <USBD_CtlSendData>
 800acae:	e009      	b.n	800acc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f9e7 	bl	800b086 <USBD_CtlError>
 800acb8:	e004      	b.n	800acc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 faae 	bl	800b21c <USBD_CtlSendStatus>
 800acc0:	e000      	b.n	800acc4 <USBD_GetDescriptor+0x2cc>
    return;
 800acc2:	bf00      	nop
  }
}
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop

0800accc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	889b      	ldrh	r3, [r3, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d131      	bne.n	800ad42 <USBD_SetAddress+0x76>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	88db      	ldrh	r3, [r3, #6]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d12d      	bne.n	800ad42 <USBD_SetAddress+0x76>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	885b      	ldrh	r3, [r3, #2]
 800acea:	2b7f      	cmp	r3, #127	; 0x7f
 800acec:	d829      	bhi.n	800ad42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	885b      	ldrh	r3, [r3, #2]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b03      	cmp	r3, #3
 800ad04:	d104      	bne.n	800ad10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f9bc 	bl	800b086 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad0e:	e01d      	b.n	800ad4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	7bfa      	ldrb	r2, [r7, #15]
 800ad14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7f6 fa40 	bl	80011a2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa7a 	bl	800b21c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d004      	beq.n	800ad38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2202      	movs	r2, #2
 800ad32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	e009      	b.n	800ad4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad40:	e004      	b.n	800ad4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f99e 	bl	800b086 <USBD_CtlError>
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	885b      	ldrh	r3, [r3, #2]
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	4b4e      	ldr	r3, [pc, #312]	; (800aea4 <USBD_SetConfig+0x150>)
 800ad6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad6c:	4b4d      	ldr	r3, [pc, #308]	; (800aea4 <USBD_SetConfig+0x150>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d905      	bls.n	800ad80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f985 	bl	800b086 <USBD_CtlError>
    return USBD_FAIL;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e08c      	b.n	800ae9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d002      	beq.n	800ad92 <USBD_SetConfig+0x3e>
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d029      	beq.n	800ade4 <USBD_SetConfig+0x90>
 800ad90:	e075      	b.n	800ae7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad92:	4b44      	ldr	r3, [pc, #272]	; (800aea4 <USBD_SetConfig+0x150>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d020      	beq.n	800addc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad9a:	4b42      	ldr	r3, [pc, #264]	; (800aea4 <USBD_SetConfig+0x150>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ada4:	4b3f      	ldr	r3, [pc, #252]	; (800aea4 <USBD_SetConfig+0x150>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff f83d 	bl	8009e2a <USBD_SetClassConfig>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d008      	beq.n	800adcc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f962 	bl	800b086 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2202      	movs	r2, #2
 800adc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adca:	e065      	b.n	800ae98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fa25 	bl	800b21c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2203      	movs	r2, #3
 800add6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adda:	e05d      	b.n	800ae98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fa1d 	bl	800b21c <USBD_CtlSendStatus>
      break;
 800ade2:	e059      	b.n	800ae98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ade4:	4b2f      	ldr	r3, [pc, #188]	; (800aea4 <USBD_SetConfig+0x150>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d112      	bne.n	800ae12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2202      	movs	r2, #2
 800adf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800adf4:	4b2b      	ldr	r3, [pc, #172]	; (800aea4 <USBD_SetConfig+0x150>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adfe:	4b29      	ldr	r3, [pc, #164]	; (800aea4 <USBD_SetConfig+0x150>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff f82c 	bl	8009e62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fa06 	bl	800b21c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae10:	e042      	b.n	800ae98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae12:	4b24      	ldr	r3, [pc, #144]	; (800aea4 <USBD_SetConfig+0x150>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d02a      	beq.n	800ae76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff f81a 	bl	8009e62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae2e:	4b1d      	ldr	r3, [pc, #116]	; (800aea4 <USBD_SetConfig+0x150>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae38:	4b1a      	ldr	r3, [pc, #104]	; (800aea4 <USBD_SetConfig+0x150>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7fe fff3 	bl	8009e2a <USBD_SetClassConfig>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00f      	beq.n	800ae6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f918 	bl	800b086 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7fe ffff 	bl	8009e62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae6c:	e014      	b.n	800ae98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f9d4 	bl	800b21c <USBD_CtlSendStatus>
      break;
 800ae74:	e010      	b.n	800ae98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f9d0 	bl	800b21c <USBD_CtlSendStatus>
      break;
 800ae7c:	e00c      	b.n	800ae98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f900 	bl	800b086 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae86:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <USBD_SetConfig+0x150>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7fe ffe8 	bl	8009e62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae92:	2303      	movs	r3, #3
 800ae94:	73fb      	strb	r3, [r7, #15]
      break;
 800ae96:	bf00      	nop
  }

  return ret;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20001952 	.word	0x20001952

0800aea8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d004      	beq.n	800aec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f8e2 	bl	800b086 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aec2:	e023      	b.n	800af0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	dc02      	bgt.n	800aed6 <USBD_GetConfig+0x2e>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	dc03      	bgt.n	800aedc <USBD_GetConfig+0x34>
 800aed4:	e015      	b.n	800af02 <USBD_GetConfig+0x5a>
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d00b      	beq.n	800aef2 <USBD_GetConfig+0x4a>
 800aeda:	e012      	b.n	800af02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3308      	adds	r3, #8
 800aee6:	2201      	movs	r2, #1
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f93c 	bl	800b168 <USBD_CtlSendData>
        break;
 800aef0:	e00c      	b.n	800af0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3304      	adds	r3, #4
 800aef6:	2201      	movs	r2, #1
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f934 	bl	800b168 <USBD_CtlSendData>
        break;
 800af00:	e004      	b.n	800af0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f8be 	bl	800b086 <USBD_CtlError>
        break;
 800af0a:	bf00      	nop
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af24:	b2db      	uxtb	r3, r3
 800af26:	3b01      	subs	r3, #1
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d81e      	bhi.n	800af6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	88db      	ldrh	r3, [r3, #6]
 800af30:	2b02      	cmp	r3, #2
 800af32:	d004      	beq.n	800af3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f8a5 	bl	800b086 <USBD_CtlError>
        break;
 800af3c:	e01a      	b.n	800af74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d005      	beq.n	800af5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f043 0202 	orr.w	r2, r3, #2
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	330c      	adds	r3, #12
 800af5e:	2202      	movs	r2, #2
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f900 	bl	800b168 <USBD_CtlSendData>
      break;
 800af68:	e004      	b.n	800af74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f88a 	bl	800b086 <USBD_CtlError>
      break;
 800af72:	bf00      	nop
  }
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d107      	bne.n	800af9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f940 	bl	800b21c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af9c:	e013      	b.n	800afc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	885b      	ldrh	r3, [r3, #2]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d10b      	bne.n	800afbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	889b      	ldrh	r3, [r3, #4]
 800afaa:	0a1b      	lsrs	r3, r3, #8
 800afac:	b29b      	uxth	r3, r3
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f930 	bl	800b21c <USBD_CtlSendStatus>
}
 800afbc:	e003      	b.n	800afc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f860 	bl	800b086 <USBD_CtlError>
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	3b01      	subs	r3, #1
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d80b      	bhi.n	800affe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	885b      	ldrh	r3, [r3, #2]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d10c      	bne.n	800b008 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f910 	bl	800b21c <USBD_CtlSendStatus>
      }
      break;
 800affc:	e004      	b.n	800b008 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f840 	bl	800b086 <USBD_CtlError>
      break;
 800b006:	e000      	b.n	800b00a <USBD_ClrFeature+0x3c>
      break;
 800b008:	bf00      	nop
  }
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	781a      	ldrb	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3301      	adds	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fa40 	bl	800a4c2 <SWAPBYTE>
 800b042:	4603      	mov	r3, r0
 800b044:	461a      	mov	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7ff fa33 	bl	800a4c2 <SWAPBYTE>
 800b05c:	4603      	mov	r3, r0
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff fa26 	bl	800a4c2 <SWAPBYTE>
 800b076:	4603      	mov	r3, r0
 800b078:	461a      	mov	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	80da      	strh	r2, [r3, #6]
}
 800b07e:	bf00      	nop
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b090:	2180      	movs	r1, #128	; 0x80
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7f6 f833 	bl	80010fe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b098:	2100      	movs	r1, #0
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7f6 f82f 	bl	80010fe <USBD_LL_StallEP>
}
 800b0a0:	bf00      	nop
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d036      	beq.n	800b12c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0c2:	6938      	ldr	r0, [r7, #16]
 800b0c4:	f000 f836 	bl	800b134 <USBD_GetLen>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	4413      	add	r3, r2
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	7812      	ldrb	r2, [r2, #0]
 800b0e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0f8:	e013      	b.n	800b122 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	4413      	add	r3, r2
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	7812      	ldrb	r2, [r2, #0]
 800b104:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	3301      	adds	r3, #1
 800b10a:	613b      	str	r3, [r7, #16]
    idx++;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	3301      	adds	r3, #1
 800b110:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	4413      	add	r3, r2
 800b118:	2200      	movs	r2, #0
 800b11a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	3301      	adds	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e7      	bne.n	800b0fa <USBD_GetString+0x52>
 800b12a:	e000      	b.n	800b12e <USBD_GetString+0x86>
    return;
 800b12c:	bf00      	nop
  }
}
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b144:	e005      	b.n	800b152 <USBD_GetLen+0x1e>
  {
    len++;
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	3301      	adds	r3, #1
 800b14a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	3301      	adds	r3, #1
 800b150:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1f5      	bne.n	800b146 <USBD_GetLen+0x12>
  }

  return len;
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2202      	movs	r2, #2
 800b178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	2100      	movs	r1, #0
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7f6 f81a 	bl	80011c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7f6 f809 	bl	80011c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2203      	movs	r2, #3
 800b1d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f7f6 f801 	bl	80011f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	60f8      	str	r0, [r7, #12]
 800b202:	60b9      	str	r1, [r7, #8]
 800b204:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	2100      	movs	r1, #0
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7f5 fff0 	bl	80011f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2204      	movs	r2, #4
 800b228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b22c:	2300      	movs	r3, #0
 800b22e:	2200      	movs	r2, #0
 800b230:	2100      	movs	r1, #0
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f5 ffc8 	bl	80011c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b082      	sub	sp, #8
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2205      	movs	r2, #5
 800b24e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b252:	2300      	movs	r3, #0
 800b254:	2200      	movs	r2, #0
 800b256:	2100      	movs	r1, #0
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7f5 ffca 	bl	80011f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <arm_rfft_32_fast_init_f32>:
 800b268:	b178      	cbz	r0, 800b28a <arm_rfft_32_fast_init_f32+0x22>
 800b26a:	b430      	push	{r4, r5}
 800b26c:	4908      	ldr	r1, [pc, #32]	; (800b290 <arm_rfft_32_fast_init_f32+0x28>)
 800b26e:	4a09      	ldr	r2, [pc, #36]	; (800b294 <arm_rfft_32_fast_init_f32+0x2c>)
 800b270:	2310      	movs	r3, #16
 800b272:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b276:	8003      	strh	r3, [r0, #0]
 800b278:	2520      	movs	r5, #32
 800b27a:	2414      	movs	r4, #20
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <arm_rfft_32_fast_init_f32+0x30>)
 800b27e:	8205      	strh	r5, [r0, #16]
 800b280:	8184      	strh	r4, [r0, #12]
 800b282:	6143      	str	r3, [r0, #20]
 800b284:	bc30      	pop	{r4, r5}
 800b286:	2000      	movs	r0, #0
 800b288:	4770      	bx	lr
 800b28a:	f04f 30ff 	mov.w	r0, #4294967295
 800b28e:	4770      	bx	lr
 800b290:	0800e134 	.word	0x0800e134
 800b294:	08012a6c 	.word	0x08012a6c
 800b298:	0801b7ec 	.word	0x0801b7ec

0800b29c <arm_rfft_64_fast_init_f32>:
 800b29c:	b178      	cbz	r0, 800b2be <arm_rfft_64_fast_init_f32+0x22>
 800b29e:	b430      	push	{r4, r5}
 800b2a0:	4908      	ldr	r1, [pc, #32]	; (800b2c4 <arm_rfft_64_fast_init_f32+0x28>)
 800b2a2:	4a09      	ldr	r2, [pc, #36]	; (800b2c8 <arm_rfft_64_fast_init_f32+0x2c>)
 800b2a4:	2320      	movs	r3, #32
 800b2a6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b2aa:	8003      	strh	r3, [r0, #0]
 800b2ac:	2540      	movs	r5, #64	; 0x40
 800b2ae:	2430      	movs	r4, #48	; 0x30
 800b2b0:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <arm_rfft_64_fast_init_f32+0x30>)
 800b2b2:	8205      	strh	r5, [r0, #16]
 800b2b4:	8184      	strh	r4, [r0, #12]
 800b2b6:	6143      	str	r3, [r0, #20]
 800b2b8:	bc30      	pop	{r4, r5}
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	4770      	bx	lr
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c2:	4770      	bx	lr
 800b2c4:	0801028c 	.word	0x0801028c
 800b2c8:	080172ec 	.word	0x080172ec
 800b2cc:	0802006c 	.word	0x0802006c

0800b2d0 <arm_rfft_256_fast_init_f32>:
 800b2d0:	b180      	cbz	r0, 800b2f4 <arm_rfft_256_fast_init_f32+0x24>
 800b2d2:	b430      	push	{r4, r5}
 800b2d4:	4909      	ldr	r1, [pc, #36]	; (800b2fc <arm_rfft_256_fast_init_f32+0x2c>)
 800b2d6:	4a0a      	ldr	r2, [pc, #40]	; (800b300 <arm_rfft_256_fast_init_f32+0x30>)
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b2de:	8003      	strh	r3, [r0, #0]
 800b2e0:	f44f 7580 	mov.w	r5, #256	; 0x100
 800b2e4:	24d0      	movs	r4, #208	; 0xd0
 800b2e6:	4b07      	ldr	r3, [pc, #28]	; (800b304 <arm_rfft_256_fast_init_f32+0x34>)
 800b2e8:	8205      	strh	r5, [r0, #16]
 800b2ea:	8184      	strh	r4, [r0, #12]
 800b2ec:	6143      	str	r3, [r0, #20]
 800b2ee:	bc30      	pop	{r4, r5}
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	4770      	bx	lr
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	0800df94 	.word	0x0800df94
 800b300:	0801266c 	.word	0x0801266c
 800b304:	0801b3ec 	.word	0x0801b3ec

0800b308 <arm_rfft_512_fast_init_f32>:
 800b308:	b190      	cbz	r0, 800b330 <arm_rfft_512_fast_init_f32+0x28>
 800b30a:	b430      	push	{r4, r5}
 800b30c:	490a      	ldr	r1, [pc, #40]	; (800b338 <arm_rfft_512_fast_init_f32+0x30>)
 800b30e:	4a0b      	ldr	r2, [pc, #44]	; (800b33c <arm_rfft_512_fast_init_f32+0x34>)
 800b310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b314:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b318:	8003      	strh	r3, [r0, #0]
 800b31a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800b31e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b322:	4b07      	ldr	r3, [pc, #28]	; (800b340 <arm_rfft_512_fast_init_f32+0x38>)
 800b324:	8205      	strh	r5, [r0, #16]
 800b326:	8184      	strh	r4, [r0, #12]
 800b328:	6143      	str	r3, [r0, #20]
 800b32a:	bc30      	pop	{r4, r5}
 800b32c:	2000      	movs	r0, #0
 800b32e:	4770      	bx	lr
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	0800ff1c 	.word	0x0800ff1c
 800b33c:	08016aec 	.word	0x08016aec
 800b340:	0801f86c 	.word	0x0801f86c

0800b344 <arm_rfft_1024_fast_init_f32>:
 800b344:	b190      	cbz	r0, 800b36c <arm_rfft_1024_fast_init_f32+0x28>
 800b346:	b430      	push	{r4, r5}
 800b348:	490a      	ldr	r1, [pc, #40]	; (800b374 <arm_rfft_1024_fast_init_f32+0x30>)
 800b34a:	4a0b      	ldr	r2, [pc, #44]	; (800b378 <arm_rfft_1024_fast_init_f32+0x34>)
 800b34c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b350:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b354:	8003      	strh	r3, [r0, #0]
 800b356:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b35a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b35e:	4b07      	ldr	r3, [pc, #28]	; (800b37c <arm_rfft_1024_fast_init_f32+0x38>)
 800b360:	8205      	strh	r5, [r0, #16]
 800b362:	8184      	strh	r4, [r0, #12]
 800b364:	6143      	str	r3, [r0, #20]
 800b366:	bc30      	pop	{r4, r5}
 800b368:	2000      	movs	r0, #0
 800b36a:	4770      	bx	lr
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	080102ec 	.word	0x080102ec
 800b378:	080173ec 	.word	0x080173ec
 800b37c:	080183ec 	.word	0x080183ec

0800b380 <arm_rfft_2048_fast_init_f32>:
 800b380:	b190      	cbz	r0, 800b3a8 <arm_rfft_2048_fast_init_f32+0x28>
 800b382:	b430      	push	{r4, r5}
 800b384:	490a      	ldr	r1, [pc, #40]	; (800b3b0 <arm_rfft_2048_fast_init_f32+0x30>)
 800b386:	4a0b      	ldr	r2, [pc, #44]	; (800b3b4 <arm_rfft_2048_fast_init_f32+0x34>)
 800b388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b390:	8003      	strh	r3, [r0, #0]
 800b392:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800b396:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <arm_rfft_2048_fast_init_f32+0x38>)
 800b39c:	8205      	strh	r5, [r0, #16]
 800b39e:	8184      	strh	r4, [r0, #12]
 800b3a0:	6143      	str	r3, [r0, #20]
 800b3a2:	bc30      	pop	{r4, r5}
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	4770      	bx	lr
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	0800d184 	.word	0x0800d184
 800b3b4:	0801066c 	.word	0x0801066c
 800b3b8:	080193ec 	.word	0x080193ec

0800b3bc <arm_rfft_4096_fast_init_f32>:
 800b3bc:	b190      	cbz	r0, 800b3e4 <arm_rfft_4096_fast_init_f32+0x28>
 800b3be:	b430      	push	{r4, r5}
 800b3c0:	490a      	ldr	r1, [pc, #40]	; (800b3ec <arm_rfft_4096_fast_init_f32+0x30>)
 800b3c2:	4a0b      	ldr	r2, [pc, #44]	; (800b3f0 <arm_rfft_4096_fast_init_f32+0x34>)
 800b3c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3c8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b3cc:	8003      	strh	r3, [r0, #0]
 800b3ce:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800b3d2:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b3d6:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <arm_rfft_4096_fast_init_f32+0x38>)
 800b3d8:	8205      	strh	r5, [r0, #16]
 800b3da:	8184      	strh	r4, [r0, #12]
 800b3dc:	6143      	str	r3, [r0, #20]
 800b3de:	bc30      	pop	{r4, r5}
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	4770      	bx	lr
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	0800e15c 	.word	0x0800e15c
 800b3f0:	08012aec 	.word	0x08012aec
 800b3f4:	0801b86c 	.word	0x0801b86c

0800b3f8 <arm_rfft_fast_init_f32>:
 800b3f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b3fc:	d01f      	beq.n	800b43e <arm_rfft_fast_init_f32+0x46>
 800b3fe:	d90b      	bls.n	800b418 <arm_rfft_fast_init_f32+0x20>
 800b400:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b404:	d019      	beq.n	800b43a <arm_rfft_fast_init_f32+0x42>
 800b406:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b40a:	d012      	beq.n	800b432 <arm_rfft_fast_init_f32+0x3a>
 800b40c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b410:	d00d      	beq.n	800b42e <arm_rfft_fast_init_f32+0x36>
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	4770      	bx	lr
 800b418:	2940      	cmp	r1, #64	; 0x40
 800b41a:	d00c      	beq.n	800b436 <arm_rfft_fast_init_f32+0x3e>
 800b41c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b420:	d003      	beq.n	800b42a <arm_rfft_fast_init_f32+0x32>
 800b422:	2920      	cmp	r1, #32
 800b424:	d1f5      	bne.n	800b412 <arm_rfft_fast_init_f32+0x1a>
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <arm_rfft_fast_init_f32+0x4c>)
 800b428:	4718      	bx	r3
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <arm_rfft_fast_init_f32+0x50>)
 800b42c:	4718      	bx	r3
 800b42e:	4b07      	ldr	r3, [pc, #28]	; (800b44c <arm_rfft_fast_init_f32+0x54>)
 800b430:	4718      	bx	r3
 800b432:	4b07      	ldr	r3, [pc, #28]	; (800b450 <arm_rfft_fast_init_f32+0x58>)
 800b434:	4718      	bx	r3
 800b436:	4b07      	ldr	r3, [pc, #28]	; (800b454 <arm_rfft_fast_init_f32+0x5c>)
 800b438:	e7f6      	b.n	800b428 <arm_rfft_fast_init_f32+0x30>
 800b43a:	4b07      	ldr	r3, [pc, #28]	; (800b458 <arm_rfft_fast_init_f32+0x60>)
 800b43c:	e7f4      	b.n	800b428 <arm_rfft_fast_init_f32+0x30>
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <arm_rfft_fast_init_f32+0x64>)
 800b440:	e7f2      	b.n	800b428 <arm_rfft_fast_init_f32+0x30>
 800b442:	bf00      	nop
 800b444:	0800b269 	.word	0x0800b269
 800b448:	0800b2d1 	.word	0x0800b2d1
 800b44c:	0800b345 	.word	0x0800b345
 800b450:	0800b3bd 	.word	0x0800b3bd
 800b454:	0800b29d 	.word	0x0800b29d
 800b458:	0800b381 	.word	0x0800b381
 800b45c:	0800b309 	.word	0x0800b309

0800b460 <stage_rfft_f32>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	460e      	mov	r6, r1
 800b466:	8803      	ldrh	r3, [r0, #0]
 800b468:	6809      	ldr	r1, [r1, #0]
 800b46a:	6945      	ldr	r5, [r0, #20]
 800b46c:	b087      	sub	sp, #28
 800b46e:	3b01      	subs	r3, #1
 800b470:	4608      	mov	r0, r1
 800b472:	4614      	mov	r4, r2
 800b474:	9302      	str	r3, [sp, #8]
 800b476:	f7f4 fec9 	bl	800020c <__addsf3>
 800b47a:	6871      	ldr	r1, [r6, #4]
 800b47c:	4607      	mov	r7, r0
 800b47e:	4608      	mov	r0, r1
 800b480:	f7f4 fec4 	bl	800020c <__addsf3>
 800b484:	4601      	mov	r1, r0
 800b486:	4680      	mov	r8, r0
 800b488:	4638      	mov	r0, r7
 800b48a:	f7f4 febf 	bl	800020c <__addsf3>
 800b48e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b492:	f7f4 ffc3 	bl	800041c <__aeabi_fmul>
 800b496:	4641      	mov	r1, r8
 800b498:	6020      	str	r0, [r4, #0]
 800b49a:	4638      	mov	r0, r7
 800b49c:	f7f4 feb4 	bl	8000208 <__aeabi_fsub>
 800b4a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b4a4:	f7f4 ffba 	bl	800041c <__aeabi_fmul>
 800b4a8:	9b02      	ldr	r3, [sp, #8]
 800b4aa:	6060      	str	r0, [r4, #4]
 800b4ac:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b4b0:	3b08      	subs	r3, #8
 800b4b2:	3510      	adds	r5, #16
 800b4b4:	3410      	adds	r4, #16
 800b4b6:	3610      	adds	r6, #16
 800b4b8:	461f      	mov	r7, r3
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800b4c0:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b4c4:	9101      	str	r1, [sp, #4]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	9305      	str	r3, [sp, #20]
 800b4cc:	9204      	str	r2, [sp, #16]
 800b4ce:	f7f4 fe9b 	bl	8000208 <__aeabi_fsub>
 800b4d2:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800b4d6:	9901      	ldr	r1, [sp, #4]
 800b4d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4dc:	4683      	mov	fp, r0
 800b4de:	4648      	mov	r0, r9
 800b4e0:	f7f4 fe94 	bl	800020c <__addsf3>
 800b4e4:	9a04      	ldr	r2, [sp, #16]
 800b4e6:	9b05      	ldr	r3, [sp, #20]
 800b4e8:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800b4ec:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4681      	mov	r9, r0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f4 fe89 	bl	800020c <__addsf3>
 800b4fa:	4659      	mov	r1, fp
 800b4fc:	9004      	str	r0, [sp, #16]
 800b4fe:	4640      	mov	r0, r8
 800b500:	f7f4 ff8c 	bl	800041c <__aeabi_fmul>
 800b504:	9b04      	ldr	r3, [sp, #16]
 800b506:	4601      	mov	r1, r0
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f4 fe7f 	bl	800020c <__addsf3>
 800b50e:	4649      	mov	r1, r9
 800b510:	9004      	str	r0, [sp, #16]
 800b512:	4650      	mov	r0, sl
 800b514:	f7f4 ff82 	bl	800041c <__aeabi_fmul>
 800b518:	9b04      	ldr	r3, [sp, #16]
 800b51a:	4601      	mov	r1, r0
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f4 fe75 	bl	800020c <__addsf3>
 800b522:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b526:	f7f4 ff79 	bl	800041c <__aeabi_fmul>
 800b52a:	9903      	ldr	r1, [sp, #12]
 800b52c:	f844 0c08 	str.w	r0, [r4, #-8]
 800b530:	9801      	ldr	r0, [sp, #4]
 800b532:	f7f4 fe69 	bl	8000208 <__aeabi_fsub>
 800b536:	4659      	mov	r1, fp
 800b538:	9001      	str	r0, [sp, #4]
 800b53a:	4650      	mov	r0, sl
 800b53c:	f7f4 ff6e 	bl	800041c <__aeabi_fmul>
 800b540:	9b01      	ldr	r3, [sp, #4]
 800b542:	4601      	mov	r1, r0
 800b544:	4618      	mov	r0, r3
 800b546:	f7f4 fe61 	bl	800020c <__addsf3>
 800b54a:	4649      	mov	r1, r9
 800b54c:	4682      	mov	sl, r0
 800b54e:	4640      	mov	r0, r8
 800b550:	f7f4 ff64 	bl	800041c <__aeabi_fmul>
 800b554:	4601      	mov	r1, r0
 800b556:	4650      	mov	r0, sl
 800b558:	f7f4 fe56 	bl	8000208 <__aeabi_fsub>
 800b55c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b560:	f7f4 ff5c 	bl	800041c <__aeabi_fmul>
 800b564:	9b02      	ldr	r3, [sp, #8]
 800b566:	f844 0c04 	str.w	r0, [r4, #-4]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	f1a7 0708 	sub.w	r7, r7, #8
 800b570:	f106 0608 	add.w	r6, r6, #8
 800b574:	f105 0508 	add.w	r5, r5, #8
 800b578:	f104 0408 	add.w	r4, r4, #8
 800b57c:	9302      	str	r3, [sp, #8]
 800b57e:	d19c      	bne.n	800b4ba <stage_rfft_f32+0x5a>
 800b580:	b007      	add	sp, #28
 800b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b586:	bf00      	nop

0800b588 <merge_rfft_f32>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	680c      	ldr	r4, [r1, #0]
 800b58e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800b592:	8803      	ldrh	r3, [r0, #0]
 800b594:	6945      	ldr	r5, [r0, #20]
 800b596:	b087      	sub	sp, #28
 800b598:	3b01      	subs	r3, #1
 800b59a:	460e      	mov	r6, r1
 800b59c:	4620      	mov	r0, r4
 800b59e:	4641      	mov	r1, r8
 800b5a0:	4617      	mov	r7, r2
 800b5a2:	9302      	str	r3, [sp, #8]
 800b5a4:	f7f4 fe32 	bl	800020c <__addsf3>
 800b5a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b5ac:	f7f4 ff36 	bl	800041c <__aeabi_fmul>
 800b5b0:	4641      	mov	r1, r8
 800b5b2:	6038      	str	r0, [r7, #0]
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f7f4 fe27 	bl	8000208 <__aeabi_fsub>
 800b5ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b5be:	f7f4 ff2d 	bl	800041c <__aeabi_fmul>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d068      	beq.n	800b69c <merge_rfft_f32+0x114>
 800b5ca:	00dc      	lsls	r4, r3, #3
 800b5cc:	3c08      	subs	r4, #8
 800b5ce:	4434      	add	r4, r6
 800b5d0:	3510      	adds	r5, #16
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	3610      	adds	r6, #16
 800b5d6:	68a3      	ldr	r3, [r4, #8]
 800b5d8:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800b5dc:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b5e0:	9101      	str	r1, [sp, #4]
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	9204      	str	r2, [sp, #16]
 800b5ea:	f7f4 fe0d 	bl	8000208 <__aeabi_fsub>
 800b5ee:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800b5f2:	9901      	ldr	r1, [sp, #4]
 800b5f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5f8:	4683      	mov	fp, r0
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	f7f4 fe06 	bl	800020c <__addsf3>
 800b600:	9a04      	ldr	r2, [sp, #16]
 800b602:	9b05      	ldr	r3, [sp, #20]
 800b604:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800b608:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800b60c:	4611      	mov	r1, r2
 800b60e:	4681      	mov	r9, r0
 800b610:	4618      	mov	r0, r3
 800b612:	f7f4 fdfb 	bl	800020c <__addsf3>
 800b616:	4659      	mov	r1, fp
 800b618:	9004      	str	r0, [sp, #16]
 800b61a:	4640      	mov	r0, r8
 800b61c:	f7f4 fefe 	bl	800041c <__aeabi_fmul>
 800b620:	9b04      	ldr	r3, [sp, #16]
 800b622:	4601      	mov	r1, r0
 800b624:	4618      	mov	r0, r3
 800b626:	f7f4 fdef 	bl	8000208 <__aeabi_fsub>
 800b62a:	4649      	mov	r1, r9
 800b62c:	9004      	str	r0, [sp, #16]
 800b62e:	4650      	mov	r0, sl
 800b630:	f7f4 fef4 	bl	800041c <__aeabi_fmul>
 800b634:	9b04      	ldr	r3, [sp, #16]
 800b636:	4601      	mov	r1, r0
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f4 fde5 	bl	8000208 <__aeabi_fsub>
 800b63e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b642:	f7f4 feeb 	bl	800041c <__aeabi_fmul>
 800b646:	9903      	ldr	r1, [sp, #12]
 800b648:	f847 0c08 	str.w	r0, [r7, #-8]
 800b64c:	9801      	ldr	r0, [sp, #4]
 800b64e:	f7f4 fddb 	bl	8000208 <__aeabi_fsub>
 800b652:	4659      	mov	r1, fp
 800b654:	9001      	str	r0, [sp, #4]
 800b656:	4650      	mov	r0, sl
 800b658:	f7f4 fee0 	bl	800041c <__aeabi_fmul>
 800b65c:	9b01      	ldr	r3, [sp, #4]
 800b65e:	4601      	mov	r1, r0
 800b660:	4618      	mov	r0, r3
 800b662:	f7f4 fdd3 	bl	800020c <__addsf3>
 800b666:	4649      	mov	r1, r9
 800b668:	4682      	mov	sl, r0
 800b66a:	4640      	mov	r0, r8
 800b66c:	f7f4 fed6 	bl	800041c <__aeabi_fmul>
 800b670:	4601      	mov	r1, r0
 800b672:	4650      	mov	r0, sl
 800b674:	f7f4 fdc8 	bl	8000208 <__aeabi_fsub>
 800b678:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b67c:	f7f4 fece 	bl	800041c <__aeabi_fmul>
 800b680:	9b02      	ldr	r3, [sp, #8]
 800b682:	f847 0c04 	str.w	r0, [r7, #-4]
 800b686:	3b01      	subs	r3, #1
 800b688:	f1a4 0408 	sub.w	r4, r4, #8
 800b68c:	f106 0608 	add.w	r6, r6, #8
 800b690:	f105 0508 	add.w	r5, r5, #8
 800b694:	f107 0708 	add.w	r7, r7, #8
 800b698:	9302      	str	r3, [sp, #8]
 800b69a:	d19c      	bne.n	800b5d6 <merge_rfft_f32+0x4e>
 800b69c:	b007      	add	sp, #28
 800b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a2:	bf00      	nop

0800b6a4 <arm_rfft_fast_f32>:
 800b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a8:	8a05      	ldrh	r5, [r0, #16]
 800b6aa:	086d      	lsrs	r5, r5, #1
 800b6ac:	8005      	strh	r5, [r0, #0]
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	461d      	mov	r5, r3
 800b6b4:	b14b      	cbz	r3, 800b6ca <arm_rfft_fast_f32+0x26>
 800b6b6:	f7ff ff67 	bl	800b588 <merge_rfft_f32>
 800b6ba:	462a      	mov	r2, r5
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4620      	mov	r0, r4
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c6:	f000 bcfd 	b.w	800c0c4 <arm_cfft_f32>
 800b6ca:	460f      	mov	r7, r1
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f000 fcf8 	bl	800c0c4 <arm_cfft_f32>
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	4620      	mov	r0, r4
 800b6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	f7ff bebf 	b.w	800b460 <stage_rfft_f32>
 800b6e2:	bf00      	nop

0800b6e4 <arm_cfft_radix8by2_f32>:
 800b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	b093      	sub	sp, #76	; 0x4c
 800b6ea:	8802      	ldrh	r2, [r0, #0]
 800b6ec:	900e      	str	r0, [sp, #56]	; 0x38
 800b6ee:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	9111      	str	r1, [sp, #68]	; 0x44
 800b6f6:	6843      	ldr	r3, [r0, #4]
 800b6f8:	940f      	str	r4, [sp, #60]	; 0x3c
 800b6fa:	0850      	lsrs	r0, r2, #1
 800b6fc:	08d1      	lsrs	r1, r2, #3
 800b6fe:	9010      	str	r0, [sp, #64]	; 0x40
 800b700:	f000 8134 	beq.w	800b96c <arm_cfft_radix8by2_f32+0x288>
 800b704:	0080      	lsls	r0, r0, #2
 800b706:	3010      	adds	r0, #16
 800b708:	3310      	adds	r3, #16
 800b70a:	f105 0610 	add.w	r6, r5, #16
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	1822      	adds	r2, r4, r0
 800b712:	eb06 1301 	add.w	r3, r6, r1, lsl #4
 800b716:	182f      	adds	r7, r5, r0
 800b718:	930d      	str	r3, [sp, #52]	; 0x34
 800b71a:	f104 0910 	add.w	r9, r4, #16
 800b71e:	4693      	mov	fp, r2
 800b720:	f859 2c10 	ldr.w	r2, [r9, #-16]
 800b724:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800b728:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 800b72c:	f859 0c08 	ldr.w	r0, [r9, #-8]
 800b730:	f857 cc0c 	ldr.w	ip, [r7, #-12]
 800b734:	f857 8c04 	ldr.w	r8, [r7, #-4]
 800b738:	9101      	str	r1, [sp, #4]
 800b73a:	9002      	str	r0, [sp, #8]
 800b73c:	f85b 1c0c 	ldr.w	r1, [fp, #-12]
 800b740:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800b744:	f857 ec08 	ldr.w	lr, [r7, #-8]
 800b748:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800b74c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b750:	f8cd 8010 	str.w	r8, [sp, #16]
 800b754:	f85b cc04 	ldr.w	ip, [fp, #-4]
 800b758:	f85b 8c10 	ldr.w	r8, [fp, #-16]
 800b75c:	9105      	str	r1, [sp, #20]
 800b75e:	9006      	str	r0, [sp, #24]
 800b760:	4611      	mov	r1, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f8cd e00c 	str.w	lr, [sp, #12]
 800b768:	f8cd c01c 	str.w	ip, [sp, #28]
 800b76c:	930c      	str	r3, [sp, #48]	; 0x30
 800b76e:	9208      	str	r2, [sp, #32]
 800b770:	9409      	str	r4, [sp, #36]	; 0x24
 800b772:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b776:	f7f4 fd49 	bl	800020c <__addsf3>
 800b77a:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 800b77e:	f859 5c04 	ldr.w	r5, [r9, #-4]
 800b782:	9901      	ldr	r1, [sp, #4]
 800b784:	f846 0c10 	str.w	r0, [r6, #-16]
 800b788:	4650      	mov	r0, sl
 800b78a:	f7f4 fd3f 	bl	800020c <__addsf3>
 800b78e:	f856 8c08 	ldr.w	r8, [r6, #-8]
 800b792:	f846 0c0c 	str.w	r0, [r6, #-12]
 800b796:	9902      	ldr	r1, [sp, #8]
 800b798:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800b79c:	4640      	mov	r0, r8
 800b79e:	f7f4 fd35 	bl	800020c <__addsf3>
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f846 0c08 	str.w	r0, [r6, #-8]
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f7f4 fd2f 	bl	800020c <__addsf3>
 800b7ae:	9a08      	ldr	r2, [sp, #32]
 800b7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7b2:	f846 0c04 	str.w	r0, [r6, #-4]
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7f4 fd25 	bl	8000208 <__aeabi_fsub>
 800b7be:	9901      	ldr	r1, [sp, #4]
 800b7c0:	9008      	str	r0, [sp, #32]
 800b7c2:	4650      	mov	r0, sl
 800b7c4:	f7f4 fd20 	bl	8000208 <__aeabi_fsub>
 800b7c8:	9902      	ldr	r1, [sp, #8]
 800b7ca:	4682      	mov	sl, r0
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	f7f4 fd1b 	bl	8000208 <__aeabi_fsub>
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	9001      	str	r0, [sp, #4]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f7f4 fd16 	bl	8000208 <__aeabi_fsub>
 800b7dc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b7e0:	900c      	str	r0, [sp, #48]	; 0x30
 800b7e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b7e4:	4641      	mov	r1, r8
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7f4 fd10 	bl	800020c <__addsf3>
 800b7ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7ee:	9905      	ldr	r1, [sp, #20]
 800b7f0:	f847 0c10 	str.w	r0, [r7, #-16]
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f7f4 fd09 	bl	800020c <__addsf3>
 800b7fa:	9906      	ldr	r1, [sp, #24]
 800b7fc:	f847 0c0c 	str.w	r0, [r7, #-12]
 800b800:	9803      	ldr	r0, [sp, #12]
 800b802:	f7f4 fd03 	bl	800020c <__addsf3>
 800b806:	9907      	ldr	r1, [sp, #28]
 800b808:	f847 0c08 	str.w	r0, [r7, #-8]
 800b80c:	9804      	ldr	r0, [sp, #16]
 800b80e:	f7f4 fcfd 	bl	800020c <__addsf3>
 800b812:	4621      	mov	r1, r4
 800b814:	f847 0c04 	str.w	r0, [r7, #-4]
 800b818:	4640      	mov	r0, r8
 800b81a:	f7f4 fcf5 	bl	8000208 <__aeabi_fsub>
 800b81e:	4629      	mov	r1, r5
 800b820:	4680      	mov	r8, r0
 800b822:	9805      	ldr	r0, [sp, #20]
 800b824:	f7f4 fcf0 	bl	8000208 <__aeabi_fsub>
 800b828:	9903      	ldr	r1, [sp, #12]
 800b82a:	9002      	str	r0, [sp, #8]
 800b82c:	9806      	ldr	r0, [sp, #24]
 800b82e:	f7f4 fceb 	bl	8000208 <__aeabi_fsub>
 800b832:	9904      	ldr	r1, [sp, #16]
 800b834:	9003      	str	r0, [sp, #12]
 800b836:	9807      	ldr	r0, [sp, #28]
 800b838:	f7f4 fce6 	bl	8000208 <__aeabi_fsub>
 800b83c:	9b00      	ldr	r3, [sp, #0]
 800b83e:	9004      	str	r0, [sp, #16]
 800b840:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800b844:	9808      	ldr	r0, [sp, #32]
 800b846:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800b84a:	4621      	mov	r1, r4
 800b84c:	f7f4 fde6 	bl	800041c <__aeabi_fmul>
 800b850:	4629      	mov	r1, r5
 800b852:	9005      	str	r0, [sp, #20]
 800b854:	4650      	mov	r0, sl
 800b856:	f7f4 fde1 	bl	800041c <__aeabi_fmul>
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	4601      	mov	r1, r0
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f4 fcd4 	bl	800020c <__addsf3>
 800b864:	4621      	mov	r1, r4
 800b866:	f849 0c10 	str.w	r0, [r9, #-16]
 800b86a:	4650      	mov	r0, sl
 800b86c:	f7f4 fdd6 	bl	800041c <__aeabi_fmul>
 800b870:	4629      	mov	r1, r5
 800b872:	4682      	mov	sl, r0
 800b874:	9808      	ldr	r0, [sp, #32]
 800b876:	f7f4 fdd1 	bl	800041c <__aeabi_fmul>
 800b87a:	4601      	mov	r1, r0
 800b87c:	4650      	mov	r0, sl
 800b87e:	f7f4 fcc3 	bl	8000208 <__aeabi_fsub>
 800b882:	4629      	mov	r1, r5
 800b884:	f849 0c0c 	str.w	r0, [r9, #-12]
 800b888:	4640      	mov	r0, r8
 800b88a:	f7f4 fdc7 	bl	800041c <__aeabi_fmul>
 800b88e:	4621      	mov	r1, r4
 800b890:	4682      	mov	sl, r0
 800b892:	9802      	ldr	r0, [sp, #8]
 800b894:	f7f4 fdc2 	bl	800041c <__aeabi_fmul>
 800b898:	4601      	mov	r1, r0
 800b89a:	4650      	mov	r0, sl
 800b89c:	f7f4 fcb4 	bl	8000208 <__aeabi_fsub>
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f84b 0c10 	str.w	r0, [fp, #-16]
 800b8a6:	9802      	ldr	r0, [sp, #8]
 800b8a8:	f7f4 fdb8 	bl	800041c <__aeabi_fmul>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	f7f4 fdb3 	bl	800041c <__aeabi_fmul>
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f7f4 fca7 	bl	800020c <__addsf3>
 800b8be:	9b00      	ldr	r3, [sp, #0]
 800b8c0:	f84b 0c0c 	str.w	r0, [fp, #-12]
 800b8c4:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800b8c8:	9801      	ldr	r0, [sp, #4]
 800b8ca:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	f7f4 fda4 	bl	800041c <__aeabi_fmul>
 800b8d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8d8:	4680      	mov	r8, r0
 800b8da:	4629      	mov	r1, r5
 800b8dc:	4650      	mov	r0, sl
 800b8de:	f7f4 fd9d 	bl	800041c <__aeabi_fmul>
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	f7f4 fc91 	bl	800020c <__addsf3>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	f849 0c08 	str.w	r0, [r9, #-8]
 800b8f0:	4650      	mov	r0, sl
 800b8f2:	f7f4 fd93 	bl	800041c <__aeabi_fmul>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	9801      	ldr	r0, [sp, #4]
 800b8fc:	f7f4 fd8e 	bl	800041c <__aeabi_fmul>
 800b900:	4601      	mov	r1, r0
 800b902:	4640      	mov	r0, r8
 800b904:	f7f4 fc80 	bl	8000208 <__aeabi_fsub>
 800b908:	4629      	mov	r1, r5
 800b90a:	f849 0c04 	str.w	r0, [r9, #-4]
 800b90e:	9803      	ldr	r0, [sp, #12]
 800b910:	f7f4 fd84 	bl	800041c <__aeabi_fmul>
 800b914:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b918:	4680      	mov	r8, r0
 800b91a:	4621      	mov	r1, r4
 800b91c:	4650      	mov	r0, sl
 800b91e:	f7f4 fd7d 	bl	800041c <__aeabi_fmul>
 800b922:	4601      	mov	r1, r0
 800b924:	4640      	mov	r0, r8
 800b926:	f7f4 fc6f 	bl	8000208 <__aeabi_fsub>
 800b92a:	4629      	mov	r1, r5
 800b92c:	f84b 0c08 	str.w	r0, [fp, #-8]
 800b930:	4650      	mov	r0, sl
 800b932:	f7f4 fd73 	bl	800041c <__aeabi_fmul>
 800b936:	4621      	mov	r1, r4
 800b938:	4605      	mov	r5, r0
 800b93a:	9803      	ldr	r0, [sp, #12]
 800b93c:	f7f4 fd6e 	bl	800041c <__aeabi_fmul>
 800b940:	4601      	mov	r1, r0
 800b942:	4628      	mov	r0, r5
 800b944:	f7f4 fc62 	bl	800020c <__addsf3>
 800b948:	9b00      	ldr	r3, [sp, #0]
 800b94a:	f84b 0c04 	str.w	r0, [fp, #-4]
 800b94e:	3310      	adds	r3, #16
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b954:	3610      	adds	r6, #16
 800b956:	429e      	cmp	r6, r3
 800b958:	f107 0710 	add.w	r7, r7, #16
 800b95c:	f109 0910 	add.w	r9, r9, #16
 800b960:	f10b 0b10 	add.w	fp, fp, #16
 800b964:	f47f aedc 	bne.w	800b720 <arm_cfft_radix8by2_f32+0x3c>
 800b968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 800b970:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b972:	461a      	mov	r2, r3
 800b974:	4621      	mov	r1, r4
 800b976:	2302      	movs	r3, #2
 800b978:	f000 fd02 	bl	800c380 <arm_radix8_butterfly_f32>
 800b97c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b97e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	4621      	mov	r1, r4
 800b984:	2302      	movs	r3, #2
 800b986:	b013      	add	sp, #76	; 0x4c
 800b988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	f000 bcf8 	b.w	800c380 <arm_radix8_butterfly_f32>

0800b990 <arm_cfft_radix8by4_f32>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	8804      	ldrh	r4, [r0, #0]
 800b996:	680e      	ldr	r6, [r1, #0]
 800b998:	6845      	ldr	r5, [r0, #4]
 800b99a:	b0a7      	sub	sp, #156	; 0x9c
 800b99c:	0864      	lsrs	r4, r4, #1
 800b99e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800b9a2:	9119      	str	r1, [sp, #100]	; 0x64
 800b9a4:	4451      	add	r1, sl
 800b9a6:	eb01 0c0a 	add.w	ip, r1, sl
 800b9aa:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800b9ae:	9024      	str	r0, [sp, #144]	; 0x90
 800b9b0:	911a      	str	r1, [sp, #104]	; 0x68
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800b9ba:	f7f4 fc27 	bl	800020c <__addsf3>
 800b9be:	4639      	mov	r1, r7
 800b9c0:	4683      	mov	fp, r0
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7f4 fc20 	bl	8000208 <__aeabi_fsub>
 800b9c8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b9ca:	9001      	str	r0, [sp, #4]
 800b9cc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b9ce:	6877      	ldr	r7, [r6, #4]
 800b9d0:	6846      	ldr	r6, [r0, #4]
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7f4 fc19 	bl	800020c <__addsf3>
 800b9da:	4639      	mov	r1, r7
 800b9dc:	9002      	str	r0, [sp, #8]
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7f4 fc12 	bl	8000208 <__aeabi_fsub>
 800b9e4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b9e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9e8:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800b9ec:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 800b9f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b9f2:	9003      	str	r0, [sp, #12]
 800b9f4:	4659      	mov	r1, fp
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b9fc:	f7f4 fc06 	bl	800020c <__addsf3>
 800ba00:	4631      	mov	r1, r6
 800ba02:	f7f4 fc03 	bl	800020c <__addsf3>
 800ba06:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ba08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ba0a:	468c      	mov	ip, r1
 800ba0c:	4453      	add	r3, sl
 800ba0e:	931f      	str	r3, [sp, #124]	; 0x7c
 800ba10:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ba14:	f84c 0b08 	str.w	r0, [ip], #8
 800ba18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ba1a:	9802      	ldr	r0, [sp, #8]
 800ba1c:	6859      	ldr	r1, [r3, #4]
 800ba1e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800ba22:	f7f4 fbf3 	bl	800020c <__addsf3>
 800ba26:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ba28:	6849      	ldr	r1, [r1, #4]
 800ba2a:	f7f4 fbef 	bl	800020c <__addsf3>
 800ba2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba30:	9901      	ldr	r1, [sp, #4]
 800ba32:	6058      	str	r0, [r3, #4]
 800ba34:	4648      	mov	r0, r9
 800ba36:	f7f4 fbe9 	bl	800020c <__addsf3>
 800ba3a:	4641      	mov	r1, r8
 800ba3c:	f7f4 fbe4 	bl	8000208 <__aeabi_fsub>
 800ba40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba42:	4639      	mov	r1, r7
 800ba44:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ba48:	9803      	ldr	r0, [sp, #12]
 800ba4a:	f7f4 fbdd 	bl	8000208 <__aeabi_fsub>
 800ba4e:	4631      	mov	r1, r6
 800ba50:	f7f4 fbdc 	bl	800020c <__addsf3>
 800ba54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba56:	4639      	mov	r1, r7
 800ba58:	6050      	str	r0, [r2, #4]
 800ba5a:	4658      	mov	r0, fp
 800ba5c:	f7f4 fbd4 	bl	8000208 <__aeabi_fsub>
 800ba60:	4631      	mov	r1, r6
 800ba62:	f7f4 fbd1 	bl	8000208 <__aeabi_fsub>
 800ba66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ba68:	4649      	mov	r1, r9
 800ba6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba6e:	9802      	ldr	r0, [sp, #8]
 800ba70:	f7f4 fbca 	bl	8000208 <__aeabi_fsub>
 800ba74:	4641      	mov	r1, r8
 800ba76:	f7f4 fbc7 	bl	8000208 <__aeabi_fsub>
 800ba7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	6050      	str	r0, [r2, #4]
 800ba80:	9801      	ldr	r0, [sp, #4]
 800ba82:	f7f4 fbc1 	bl	8000208 <__aeabi_fsub>
 800ba86:	4641      	mov	r1, r8
 800ba88:	f7f4 fbc0 	bl	800020c <__addsf3>
 800ba8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba8e:	9903      	ldr	r1, [sp, #12]
 800ba90:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7f4 fbb9 	bl	800020c <__addsf3>
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	f7f4 fbb4 	bl	8000208 <__aeabi_fsub>
 800baa0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800baa2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800baa4:	6070      	str	r0, [r6, #4]
 800baa6:	0864      	lsrs	r4, r4, #1
 800baa8:	9423      	str	r4, [sp, #140]	; 0x8c
 800baaa:	1ea2      	subs	r2, r4, #2
 800baac:	9818      	ldr	r0, [sp, #96]	; 0x60
 800baae:	4634      	mov	r4, r6
 800bab0:	3408      	adds	r4, #8
 800bab2:	941b      	str	r4, [sp, #108]	; 0x6c
 800bab4:	4604      	mov	r4, r0
 800bab6:	3408      	adds	r4, #8
 800bab8:	941d      	str	r4, [sp, #116]	; 0x74
 800baba:	f101 0408 	add.w	r4, r1, #8
 800babe:	941e      	str	r4, [sp, #120]	; 0x78
 800bac0:	f105 0408 	add.w	r4, r5, #8
 800bac4:	9421      	str	r4, [sp, #132]	; 0x84
 800bac6:	f105 0710 	add.w	r7, r5, #16
 800baca:	f105 0418 	add.w	r4, r5, #24
 800bace:	0852      	lsrs	r2, r2, #1
 800bad0:	9722      	str	r7, [sp, #136]	; 0x88
 800bad2:	9420      	str	r4, [sp, #128]	; 0x80
 800bad4:	9225      	str	r2, [sp, #148]	; 0x94
 800bad6:	f000 820b 	beq.w	800bef0 <arm_cfft_radix8by4_f32+0x560>
 800bada:	f1aa 030c 	sub.w	r3, sl, #12
 800bade:	4634      	mov	r4, r6
 800bae0:	441e      	add	r6, r3
 800bae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bae4:	9606      	str	r6, [sp, #24]
 800bae6:	3310      	adds	r3, #16
 800bae8:	9305      	str	r3, [sp, #20]
 800baea:	f1a1 030c 	sub.w	r3, r1, #12
 800baee:	9304      	str	r3, [sp, #16]
 800baf0:	f105 0320 	add.w	r3, r5, #32
 800baf4:	9308      	str	r3, [sp, #32]
 800baf6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bafa:	9307      	str	r3, [sp, #28]
 800bafc:	f100 0310 	add.w	r3, r0, #16
 800bb00:	f101 0810 	add.w	r8, r1, #16
 800bb04:	9303      	str	r3, [sp, #12]
 800bb06:	f1a4 030c 	sub.w	r3, r4, #12
 800bb0a:	9709      	str	r7, [sp, #36]	; 0x24
 800bb0c:	f1a0 0a0c 	sub.w	sl, r0, #12
 800bb10:	9302      	str	r3, [sp, #8]
 800bb12:	f104 0910 	add.w	r9, r4, #16
 800bb16:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb1a:	9e05      	ldr	r6, [sp, #20]
 800bb1c:	9f03      	ldr	r7, [sp, #12]
 800bb1e:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800bb22:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800bb26:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7f4 fb6e 	bl	800020c <__addsf3>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4680      	mov	r8, r0
 800bb34:	4620      	mov	r0, r4
 800bb36:	f7f4 fb67 	bl	8000208 <__aeabi_fsub>
 800bb3a:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800bb3e:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800bb42:	900a      	str	r0, [sp, #40]	; 0x28
 800bb44:	4629      	mov	r1, r5
 800bb46:	4620      	mov	r0, r4
 800bb48:	9605      	str	r6, [sp, #20]
 800bb4a:	9703      	str	r7, [sp, #12]
 800bb4c:	f7f4 fb5e 	bl	800020c <__addsf3>
 800bb50:	4629      	mov	r1, r5
 800bb52:	4607      	mov	r7, r0
 800bb54:	4620      	mov	r0, r4
 800bb56:	f7f4 fb57 	bl	8000208 <__aeabi_fsub>
 800bb5a:	9c01      	ldr	r4, [sp, #4]
 800bb5c:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800bb60:	f854 bc04 	ldr.w	fp, [r4, #-4]
 800bb64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb66:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb68:	4658      	mov	r0, fp
 800bb6a:	f7f4 fb4f 	bl	800020c <__addsf3>
 800bb6e:	4631      	mov	r1, r6
 800bb70:	f7f4 fb4a 	bl	8000208 <__aeabi_fsub>
 800bb74:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bb78:	9401      	str	r4, [sp, #4]
 800bb7a:	f859 4c08 	ldr.w	r4, [r9, #-8]
 800bb7e:	900c      	str	r0, [sp, #48]	; 0x30
 800bb80:	4629      	mov	r1, r5
 800bb82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb84:	f7f4 fb40 	bl	8000208 <__aeabi_fsub>
 800bb88:	4621      	mov	r1, r4
 800bb8a:	f7f4 fb3f 	bl	800020c <__addsf3>
 800bb8e:	4629      	mov	r1, r5
 800bb90:	900d      	str	r0, [sp, #52]	; 0x34
 800bb92:	4640      	mov	r0, r8
 800bb94:	f7f4 fb38 	bl	8000208 <__aeabi_fsub>
 800bb98:	4621      	mov	r1, r4
 800bb9a:	f7f4 fb35 	bl	8000208 <__aeabi_fsub>
 800bb9e:	4659      	mov	r1, fp
 800bba0:	900e      	str	r0, [sp, #56]	; 0x38
 800bba2:	4638      	mov	r0, r7
 800bba4:	f7f4 fb30 	bl	8000208 <__aeabi_fsub>
 800bba8:	4631      	mov	r1, r6
 800bbaa:	f7f4 fb2d 	bl	8000208 <__aeabi_fsub>
 800bbae:	4659      	mov	r1, fp
 800bbb0:	9012      	str	r0, [sp, #72]	; 0x48
 800bbb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bbb4:	f7f4 fb28 	bl	8000208 <__aeabi_fsub>
 800bbb8:	4631      	mov	r1, r6
 800bbba:	f7f4 fb27 	bl	800020c <__addsf3>
 800bbbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbc0:	900a      	str	r0, [sp, #40]	; 0x28
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7f4 fb22 	bl	800020c <__addsf3>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	f7f4 fb1d 	bl	8000208 <__aeabi_fsub>
 800bbce:	4641      	mov	r1, r8
 800bbd0:	9013      	str	r0, [sp, #76]	; 0x4c
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f7f4 fb1a 	bl	800020c <__addsf3>
 800bbd8:	4621      	mov	r1, r4
 800bbda:	f7f4 fb17 	bl	800020c <__addsf3>
 800bbde:	9e05      	ldr	r6, [sp, #20]
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	f846 0c08 	str.w	r0, [r6, #-8]
 800bbe6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800bbea:	4638      	mov	r0, r7
 800bbec:	f7f4 fb0e 	bl	800020c <__addsf3>
 800bbf0:	f859 1c04 	ldr.w	r1, [r9, #-4]
 800bbf4:	f7f4 fb0a 	bl	800020c <__addsf3>
 800bbf8:	9f04      	ldr	r7, [sp, #16]
 800bbfa:	f846 0c04 	str.w	r0, [r6, #-4]
 800bbfe:	9605      	str	r6, [sp, #20]
 800bc00:	9e02      	ldr	r6, [sp, #8]
 800bc02:	687c      	ldr	r4, [r7, #4]
 800bc04:	6875      	ldr	r5, [r6, #4]
 800bc06:	4620      	mov	r0, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7f4 faff 	bl	800020c <__addsf3>
 800bc0e:	4629      	mov	r1, r5
 800bc10:	4680      	mov	r8, r0
 800bc12:	4620      	mov	r0, r4
 800bc14:	f7f4 faf8 	bl	8000208 <__aeabi_fsub>
 800bc18:	68bc      	ldr	r4, [r7, #8]
 800bc1a:	68b5      	ldr	r5, [r6, #8]
 800bc1c:	9704      	str	r7, [sp, #16]
 800bc1e:	4683      	mov	fp, r0
 800bc20:	4629      	mov	r1, r5
 800bc22:	4620      	mov	r0, r4
 800bc24:	9602      	str	r6, [sp, #8]
 800bc26:	f7f4 faf1 	bl	800020c <__addsf3>
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f7f4 faea 	bl	8000208 <__aeabi_fsub>
 800bc34:	9e06      	ldr	r6, [sp, #24]
 800bc36:	f8da 5008 	ldr.w	r5, [sl, #8]
 800bc3a:	68b4      	ldr	r4, [r6, #8]
 800bc3c:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4628      	mov	r0, r5
 800bc42:	f7f4 fae1 	bl	8000208 <__aeabi_fsub>
 800bc46:	4659      	mov	r1, fp
 800bc48:	9016      	str	r0, [sp, #88]	; 0x58
 800bc4a:	f7f4 fadf 	bl	800020c <__addsf3>
 800bc4e:	f8da 7004 	ldr.w	r7, [sl, #4]
 800bc52:	9606      	str	r6, [sp, #24]
 800bc54:	6876      	ldr	r6, [r6, #4]
 800bc56:	9014      	str	r0, [sp, #80]	; 0x50
 800bc58:	4639      	mov	r1, r7
 800bc5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bc5c:	f7f4 fad4 	bl	8000208 <__aeabi_fsub>
 800bc60:	4631      	mov	r1, r6
 800bc62:	f7f4 fad3 	bl	800020c <__addsf3>
 800bc66:	4639      	mov	r1, r7
 800bc68:	9010      	str	r0, [sp, #64]	; 0x40
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	f7f4 facc 	bl	8000208 <__aeabi_fsub>
 800bc70:	4631      	mov	r1, r6
 800bc72:	f7f4 fac9 	bl	8000208 <__aeabi_fsub>
 800bc76:	4629      	mov	r1, r5
 800bc78:	9015      	str	r0, [sp, #84]	; 0x54
 800bc7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc7c:	f7f4 fac4 	bl	8000208 <__aeabi_fsub>
 800bc80:	4621      	mov	r1, r4
 800bc82:	f7f4 fac1 	bl	8000208 <__aeabi_fsub>
 800bc86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc88:	9011      	str	r0, [sp, #68]	; 0x44
 800bc8a:	4659      	mov	r1, fp
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7f4 fabb 	bl	8000208 <__aeabi_fsub>
 800bc92:	4639      	mov	r1, r7
 800bc94:	4683      	mov	fp, r0
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7f4 fab6 	bl	8000208 <__aeabi_fsub>
 800bc9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc9e:	f7f4 fab3 	bl	8000208 <__aeabi_fsub>
 800bca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bca4:	4606      	mov	r6, r0
 800bca6:	4628      	mov	r0, r5
 800bca8:	f7f4 fab0 	bl	800020c <__addsf3>
 800bcac:	4621      	mov	r1, r4
 800bcae:	f7f4 faad 	bl	800020c <__addsf3>
 800bcb2:	9c04      	ldr	r4, [sp, #16]
 800bcb4:	60a0      	str	r0, [r4, #8]
 800bcb6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bcba:	4640      	mov	r0, r8
 800bcbc:	f7f4 faa6 	bl	800020c <__addsf3>
 800bcc0:	9a06      	ldr	r2, [sp, #24]
 800bcc2:	6851      	ldr	r1, [r2, #4]
 800bcc4:	f7f4 faa2 	bl	800020c <__addsf3>
 800bcc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bcca:	6060      	str	r0, [r4, #4]
 800bccc:	9404      	str	r4, [sp, #16]
 800bcce:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800bcd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bcd4:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800bcd8:	4621      	mov	r1, r4
 800bcda:	f7f4 fb9f 	bl	800041c <__aeabi_fmul>
 800bcde:	4629      	mov	r1, r5
 800bce0:	4680      	mov	r8, r0
 800bce2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bce4:	f7f4 fb9a 	bl	800041c <__aeabi_fmul>
 800bce8:	4601      	mov	r1, r0
 800bcea:	4640      	mov	r0, r8
 800bcec:	f7f4 fa8e 	bl	800020c <__addsf3>
 800bcf0:	9f01      	ldr	r7, [sp, #4]
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	f847 0c08 	str.w	r0, [r7, #-8]
 800bcf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bcfa:	f7f4 fb8f 	bl	800041c <__aeabi_fmul>
 800bcfe:	4629      	mov	r1, r5
 800bd00:	4680      	mov	r8, r0
 800bd02:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd04:	f7f4 fb8a 	bl	800041c <__aeabi_fmul>
 800bd08:	4601      	mov	r1, r0
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	f7f4 fa7c 	bl	8000208 <__aeabi_fsub>
 800bd10:	4629      	mov	r1, r5
 800bd12:	9701      	str	r7, [sp, #4]
 800bd14:	f847 0c04 	str.w	r0, [r7, #-4]
 800bd18:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd1a:	f7f4 fb7f 	bl	800041c <__aeabi_fmul>
 800bd1e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bd20:	4680      	mov	r8, r0
 800bd22:	4621      	mov	r1, r4
 800bd24:	4638      	mov	r0, r7
 800bd26:	f7f4 fb79 	bl	800041c <__aeabi_fmul>
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	f7f4 fa6b 	bl	8000208 <__aeabi_fsub>
 800bd32:	4629      	mov	r1, r5
 800bd34:	f8ca 0008 	str.w	r0, [sl, #8]
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7f4 fb6f 	bl	800041c <__aeabi_fmul>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4605      	mov	r5, r0
 800bd42:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd44:	f7f4 fb6a 	bl	800041c <__aeabi_fmul>
 800bd48:	4601      	mov	r1, r0
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	f7f4 fa5e 	bl	800020c <__addsf3>
 800bd50:	9908      	ldr	r1, [sp, #32]
 800bd52:	f8ca 0004 	str.w	r0, [sl, #4]
 800bd56:	f851 4c10 	ldr.w	r4, [r1, #-16]
 800bd5a:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 800bd5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd60:	4621      	mov	r1, r4
 800bd62:	f7f4 fb5b 	bl	800041c <__aeabi_fmul>
 800bd66:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800bd6a:	4607      	mov	r7, r0
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4640      	mov	r0, r8
 800bd70:	f7f4 fb54 	bl	800041c <__aeabi_fmul>
 800bd74:	4601      	mov	r1, r0
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7f4 fa48 	bl	800020c <__addsf3>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	4621      	mov	r1, r4
 800bd80:	f843 0c08 	str.w	r0, [r3, #-8]
 800bd84:	4640      	mov	r0, r8
 800bd86:	f7f4 fb49 	bl	800041c <__aeabi_fmul>
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd90:	f7f4 fb44 	bl	800041c <__aeabi_fmul>
 800bd94:	4601      	mov	r1, r0
 800bd96:	4638      	mov	r0, r7
 800bd98:	f7f4 fa36 	bl	8000208 <__aeabi_fsub>
 800bd9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd9e:	9903      	ldr	r1, [sp, #12]
 800bda0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bda4:	f841 0c04 	str.w	r0, [r1, #-4]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	4621      	mov	r1, r4
 800bdac:	f7f4 fb36 	bl	800041c <__aeabi_fmul>
 800bdb0:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4640      	mov	r0, r8
 800bdba:	f7f4 fb2f 	bl	800041c <__aeabi_fmul>
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f7f4 fa21 	bl	8000208 <__aeabi_fsub>
 800bdc6:	9f02      	ldr	r7, [sp, #8]
 800bdc8:	4629      	mov	r1, r5
 800bdca:	60b8      	str	r0, [r7, #8]
 800bdcc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bdce:	f7f4 fb25 	bl	800041c <__aeabi_fmul>
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	f7f4 fb20 	bl	800041c <__aeabi_fmul>
 800bddc:	4601      	mov	r1, r0
 800bdde:	4628      	mov	r0, r5
 800bde0:	f7f4 fa12 	bl	8000208 <__aeabi_fsub>
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	9807      	ldr	r0, [sp, #28]
 800bde8:	9702      	str	r7, [sp, #8]
 800bdea:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800bdee:	f850 5c14 	ldr.w	r5, [r0, #-20]
 800bdf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	f7f4 fb11 	bl	800041c <__aeabi_fmul>
 800bdfa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800bdfe:	4607      	mov	r7, r0
 800be00:	4629      	mov	r1, r5
 800be02:	4640      	mov	r0, r8
 800be04:	f7f4 fb0a 	bl	800041c <__aeabi_fmul>
 800be08:	4601      	mov	r1, r0
 800be0a:	4638      	mov	r0, r7
 800be0c:	f7f4 f9fe 	bl	800020c <__addsf3>
 800be10:	4621      	mov	r1, r4
 800be12:	f849 0c08 	str.w	r0, [r9, #-8]
 800be16:	4640      	mov	r0, r8
 800be18:	f7f4 fb00 	bl	800041c <__aeabi_fmul>
 800be1c:	4629      	mov	r1, r5
 800be1e:	4607      	mov	r7, r0
 800be20:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be22:	f7f4 fafb 	bl	800041c <__aeabi_fmul>
 800be26:	4601      	mov	r1, r0
 800be28:	4638      	mov	r0, r7
 800be2a:	f7f4 f9ed 	bl	8000208 <__aeabi_fsub>
 800be2e:	4629      	mov	r1, r5
 800be30:	f849 0c04 	str.w	r0, [r9, #-4]
 800be34:	4630      	mov	r0, r6
 800be36:	f7f4 faf1 	bl	800041c <__aeabi_fmul>
 800be3a:	4621      	mov	r1, r4
 800be3c:	4607      	mov	r7, r0
 800be3e:	4658      	mov	r0, fp
 800be40:	f7f4 faec 	bl	800041c <__aeabi_fmul>
 800be44:	4601      	mov	r1, r0
 800be46:	4638      	mov	r0, r7
 800be48:	f7f4 f9de 	bl	8000208 <__aeabi_fsub>
 800be4c:	9f06      	ldr	r7, [sp, #24]
 800be4e:	4629      	mov	r1, r5
 800be50:	60b8      	str	r0, [r7, #8]
 800be52:	4658      	mov	r0, fp
 800be54:	f7f4 fae2 	bl	800041c <__aeabi_fmul>
 800be58:	4621      	mov	r1, r4
 800be5a:	4605      	mov	r5, r0
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7f4 fadd 	bl	800041c <__aeabi_fmul>
 800be62:	4601      	mov	r1, r0
 800be64:	4628      	mov	r0, r5
 800be66:	f7f4 f9d1 	bl	800020c <__addsf3>
 800be6a:	9c04      	ldr	r4, [sp, #16]
 800be6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be6e:	9b01      	ldr	r3, [sp, #4]
 800be70:	9e05      	ldr	r6, [sp, #20]
 800be72:	9903      	ldr	r1, [sp, #12]
 800be74:	3c08      	subs	r4, #8
 800be76:	9404      	str	r4, [sp, #16]
 800be78:	f102 0408 	add.w	r4, r2, #8
 800be7c:	9a08      	ldr	r2, [sp, #32]
 800be7e:	9409      	str	r4, [sp, #36]	; 0x24
 800be80:	3210      	adds	r2, #16
 800be82:	461c      	mov	r4, r3
 800be84:	9208      	str	r2, [sp, #32]
 800be86:	3608      	adds	r6, #8
 800be88:	f101 0208 	add.w	r2, r1, #8
 800be8c:	3408      	adds	r4, #8
 800be8e:	9203      	str	r2, [sp, #12]
 800be90:	9605      	str	r6, [sp, #20]
 800be92:	9401      	str	r4, [sp, #4]
 800be94:	9d02      	ldr	r5, [sp, #8]
 800be96:	9b07      	ldr	r3, [sp, #28]
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	f1a5 0208 	sub.w	r2, r5, #8
 800be9e:	9202      	str	r2, [sp, #8]
 800bea0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bea2:	3318      	adds	r3, #24
 800bea4:	9307      	str	r3, [sp, #28]
 800bea6:	3a01      	subs	r2, #1
 800bea8:	f1a7 0308 	sub.w	r3, r7, #8
 800beac:	f1aa 0a08 	sub.w	sl, sl, #8
 800beb0:	f109 0908 	add.w	r9, r9, #8
 800beb4:	9306      	str	r3, [sp, #24]
 800beb6:	f47f ae30 	bne.w	800bb1a <arm_cfft_radix8by4_f32+0x18a>
 800beba:	9925      	ldr	r1, [sp, #148]	; 0x94
 800bebc:	9822      	ldr	r0, [sp, #136]	; 0x88
 800bebe:	00cb      	lsls	r3, r1, #3
 800bec0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800bec4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800bec8:	9122      	str	r1, [sp, #136]	; 0x88
 800beca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800becc:	4419      	add	r1, r3
 800bece:	911c      	str	r1, [sp, #112]	; 0x70
 800bed0:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bed2:	4419      	add	r1, r3
 800bed4:	9121      	str	r1, [sp, #132]	; 0x84
 800bed6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bed8:	4419      	add	r1, r3
 800beda:	911e      	str	r1, [sp, #120]	; 0x78
 800bedc:	991d      	ldr	r1, [sp, #116]	; 0x74
 800bede:	4419      	add	r1, r3
 800bee0:	911d      	str	r1, [sp, #116]	; 0x74
 800bee2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800bee4:	4419      	add	r1, r3
 800bee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bee8:	911b      	str	r1, [sp, #108]	; 0x6c
 800beea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beee:	9320      	str	r3, [sp, #128]	; 0x80
 800bef0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800bef2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bef4:	6834      	ldr	r4, [r6, #0]
 800bef6:	683d      	ldr	r5, [r7, #0]
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	f7f4 f986 	bl	800020c <__addsf3>
 800bf00:	4629      	mov	r1, r5
 800bf02:	9001      	str	r0, [sp, #4]
 800bf04:	4620      	mov	r0, r4
 800bf06:	f7f4 f97f 	bl	8000208 <__aeabi_fsub>
 800bf0a:	6874      	ldr	r4, [r6, #4]
 800bf0c:	687d      	ldr	r5, [r7, #4]
 800bf0e:	961c      	str	r6, [sp, #112]	; 0x70
 800bf10:	4683      	mov	fp, r0
 800bf12:	4629      	mov	r1, r5
 800bf14:	4620      	mov	r0, r4
 800bf16:	971d      	str	r7, [sp, #116]	; 0x74
 800bf18:	f7f4 f978 	bl	800020c <__addsf3>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4681      	mov	r9, r0
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7f4 f971 	bl	8000208 <__aeabi_fsub>
 800bf26:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bf28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf2a:	6867      	ldr	r7, [r4, #4]
 800bf2c:	685e      	ldr	r6, [r3, #4]
 800bf2e:	4682      	mov	sl, r0
 800bf30:	4659      	mov	r1, fp
 800bf32:	4638      	mov	r0, r7
 800bf34:	f7f4 f96a 	bl	800020c <__addsf3>
 800bf38:	4631      	mov	r1, r6
 800bf3a:	f7f4 f965 	bl	8000208 <__aeabi_fsub>
 800bf3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bf40:	6825      	ldr	r5, [r4, #0]
 800bf42:	941e      	str	r4, [sp, #120]	; 0x78
 800bf44:	6814      	ldr	r4, [r2, #0]
 800bf46:	9002      	str	r0, [sp, #8]
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4650      	mov	r0, sl
 800bf4c:	f7f4 f95c 	bl	8000208 <__aeabi_fsub>
 800bf50:	4621      	mov	r1, r4
 800bf52:	f7f4 f95b 	bl	800020c <__addsf3>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4680      	mov	r8, r0
 800bf5a:	9801      	ldr	r0, [sp, #4]
 800bf5c:	f7f4 f954 	bl	8000208 <__aeabi_fsub>
 800bf60:	4621      	mov	r1, r4
 800bf62:	f7f4 f951 	bl	8000208 <__aeabi_fsub>
 800bf66:	4639      	mov	r1, r7
 800bf68:	9003      	str	r0, [sp, #12]
 800bf6a:	4648      	mov	r0, r9
 800bf6c:	f7f4 f94c 	bl	8000208 <__aeabi_fsub>
 800bf70:	4631      	mov	r1, r6
 800bf72:	f7f4 f949 	bl	8000208 <__aeabi_fsub>
 800bf76:	4639      	mov	r1, r7
 800bf78:	9004      	str	r0, [sp, #16]
 800bf7a:	4658      	mov	r0, fp
 800bf7c:	f7f4 f944 	bl	8000208 <__aeabi_fsub>
 800bf80:	4631      	mov	r1, r6
 800bf82:	f7f4 f943 	bl	800020c <__addsf3>
 800bf86:	4651      	mov	r1, sl
 800bf88:	4606      	mov	r6, r0
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7f4 f93e 	bl	800020c <__addsf3>
 800bf90:	4621      	mov	r1, r4
 800bf92:	f7f4 f939 	bl	8000208 <__aeabi_fsub>
 800bf96:	9901      	ldr	r1, [sp, #4]
 800bf98:	4682      	mov	sl, r0
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7f4 f936 	bl	800020c <__addsf3>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	f7f4 f933 	bl	800020c <__addsf3>
 800bfa6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800bfa8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bfaa:	6028      	str	r0, [r5, #0]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4648      	mov	r0, r9
 800bfb0:	f7f4 f92c 	bl	800020c <__addsf3>
 800bfb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfb6:	6859      	ldr	r1, [r3, #4]
 800bfb8:	f7f4 f928 	bl	800020c <__addsf3>
 800bfbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfbe:	6068      	str	r0, [r5, #4]
 800bfc0:	6815      	ldr	r5, [r2, #0]
 800bfc2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bfc6:	6854      	ldr	r4, [r2, #4]
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f7f4 fa26 	bl	800041c <__aeabi_fmul>
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4681      	mov	r9, r0
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	f7f4 fa21 	bl	800041c <__aeabi_fmul>
 800bfda:	4601      	mov	r1, r0
 800bfdc:	4648      	mov	r0, r9
 800bfde:	f7f4 f915 	bl	800020c <__addsf3>
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	6038      	str	r0, [r7, #0]
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	f7f4 fa18 	bl	800041c <__aeabi_fmul>
 800bfec:	4621      	mov	r1, r4
 800bfee:	4605      	mov	r5, r0
 800bff0:	4658      	mov	r0, fp
 800bff2:	f7f4 fa13 	bl	800041c <__aeabi_fmul>
 800bff6:	4601      	mov	r1, r0
 800bff8:	4628      	mov	r0, r5
 800bffa:	f7f4 f905 	bl	8000208 <__aeabi_fsub>
 800bffe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6815      	ldr	r5, [r2, #0]
 800c004:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c008:	6854      	ldr	r4, [r2, #4]
 800c00a:	4629      	mov	r1, r5
 800c00c:	4658      	mov	r0, fp
 800c00e:	f7f4 fa05 	bl	800041c <__aeabi_fmul>
 800c012:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800c016:	4680      	mov	r8, r0
 800c018:	4621      	mov	r1, r4
 800c01a:	4648      	mov	r0, r9
 800c01c:	f7f4 f9fe 	bl	800041c <__aeabi_fmul>
 800c020:	4601      	mov	r1, r0
 800c022:	4640      	mov	r0, r8
 800c024:	f7f4 f8f2 	bl	800020c <__addsf3>
 800c028:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c02a:	4629      	mov	r1, r5
 800c02c:	6038      	str	r0, [r7, #0]
 800c02e:	4648      	mov	r0, r9
 800c030:	f7f4 f9f4 	bl	800041c <__aeabi_fmul>
 800c034:	4621      	mov	r1, r4
 800c036:	4605      	mov	r5, r0
 800c038:	4658      	mov	r0, fp
 800c03a:	f7f4 f9ef 	bl	800041c <__aeabi_fmul>
 800c03e:	4601      	mov	r1, r0
 800c040:	4628      	mov	r0, r5
 800c042:	f7f4 f8e1 	bl	8000208 <__aeabi_fsub>
 800c046:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6815      	ldr	r5, [r2, #0]
 800c04c:	6854      	ldr	r4, [r2, #4]
 800c04e:	4629      	mov	r1, r5
 800c050:	4630      	mov	r0, r6
 800c052:	f7f4 f9e3 	bl	800041c <__aeabi_fmul>
 800c056:	4621      	mov	r1, r4
 800c058:	4607      	mov	r7, r0
 800c05a:	4650      	mov	r0, sl
 800c05c:	f7f4 f9de 	bl	800041c <__aeabi_fmul>
 800c060:	4601      	mov	r1, r0
 800c062:	4638      	mov	r0, r7
 800c064:	f7f4 f8d2 	bl	800020c <__addsf3>
 800c068:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c06a:	4629      	mov	r1, r5
 800c06c:	6038      	str	r0, [r7, #0]
 800c06e:	4650      	mov	r0, sl
 800c070:	f7f4 f9d4 	bl	800041c <__aeabi_fmul>
 800c074:	4621      	mov	r1, r4
 800c076:	4605      	mov	r5, r0
 800c078:	4630      	mov	r0, r6
 800c07a:	f7f4 f9cf 	bl	800041c <__aeabi_fmul>
 800c07e:	4601      	mov	r1, r0
 800c080:	4628      	mov	r0, r5
 800c082:	f7f4 f8c1 	bl	8000208 <__aeabi_fsub>
 800c086:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 800c08a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	686a      	ldr	r2, [r5, #4]
 800c090:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c092:	4621      	mov	r1, r4
 800c094:	2304      	movs	r3, #4
 800c096:	f000 f973 	bl	800c380 <arm_radix8_butterfly_f32>
 800c09a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c09c:	686a      	ldr	r2, [r5, #4]
 800c09e:	4621      	mov	r1, r4
 800c0a0:	2304      	movs	r3, #4
 800c0a2:	f000 f96d 	bl	800c380 <arm_radix8_butterfly_f32>
 800c0a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c0a8:	686a      	ldr	r2, [r5, #4]
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	f000 f967 	bl	800c380 <arm_radix8_butterfly_f32>
 800c0b2:	686a      	ldr	r2, [r5, #4]
 800c0b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	2304      	movs	r3, #4
 800c0ba:	b027      	add	sp, #156	; 0x9c
 800c0bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c0:	f000 b95e 	b.w	800c380 <arm_radix8_butterfly_f32>

0800c0c4 <arm_cfft_f32>:
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	2a01      	cmp	r2, #1
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	4617      	mov	r7, r2
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	8805      	ldrh	r5, [r0, #0]
 800c0d4:	d05a      	beq.n	800c18c <arm_cfft_f32+0xc8>
 800c0d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c0da:	d064      	beq.n	800c1a6 <arm_cfft_f32+0xe2>
 800c0dc:	d916      	bls.n	800c10c <arm_cfft_f32+0x48>
 800c0de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c0e2:	d01a      	beq.n	800c11a <arm_cfft_f32+0x56>
 800c0e4:	d94b      	bls.n	800c17e <arm_cfft_f32+0xba>
 800c0e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c0ea:	d05c      	beq.n	800c1a6 <arm_cfft_f32+0xe2>
 800c0ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c0f0:	d105      	bne.n	800c0fe <arm_cfft_f32+0x3a>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	6872      	ldr	r2, [r6, #4]
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 f941 	bl	800c380 <arm_radix8_butterfly_f32>
 800c0fe:	f1b8 0f00 	cmp.w	r8, #0
 800c102:	d111      	bne.n	800c128 <arm_cfft_f32+0x64>
 800c104:	2f01      	cmp	r7, #1
 800c106:	d016      	beq.n	800c136 <arm_cfft_f32+0x72>
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	2d20      	cmp	r5, #32
 800c10e:	d04a      	beq.n	800c1a6 <arm_cfft_f32+0xe2>
 800c110:	d939      	bls.n	800c186 <arm_cfft_f32+0xc2>
 800c112:	2d40      	cmp	r5, #64	; 0x40
 800c114:	d0ed      	beq.n	800c0f2 <arm_cfft_f32+0x2e>
 800c116:	2d80      	cmp	r5, #128	; 0x80
 800c118:	d1f1      	bne.n	800c0fe <arm_cfft_f32+0x3a>
 800c11a:	4621      	mov	r1, r4
 800c11c:	4630      	mov	r0, r6
 800c11e:	f7ff fae1 	bl	800b6e4 <arm_cfft_radix8by2_f32>
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	d0ed      	beq.n	800c104 <arm_cfft_f32+0x40>
 800c128:	68b2      	ldr	r2, [r6, #8]
 800c12a:	89b1      	ldrh	r1, [r6, #12]
 800c12c:	4620      	mov	r0, r4
 800c12e:	f000 f843 	bl	800c1b8 <arm_bitreversal_32>
 800c132:	2f01      	cmp	r7, #1
 800c134:	d1e8      	bne.n	800c108 <arm_cfft_f32+0x44>
 800c136:	4628      	mov	r0, r5
 800c138:	f7f4 f918 	bl	800036c <__aeabi_ui2f>
 800c13c:	4601      	mov	r1, r0
 800c13e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c142:	f7f4 fa1f 	bl	8000584 <__aeabi_fdiv>
 800c146:	4607      	mov	r7, r0
 800c148:	2d00      	cmp	r5, #0
 800c14a:	d0dd      	beq.n	800c108 <arm_cfft_f32+0x44>
 800c14c:	3408      	adds	r4, #8
 800c14e:	2600      	movs	r6, #0
 800c150:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800c154:	4639      	mov	r1, r7
 800c156:	f7f4 f961 	bl	800041c <__aeabi_fmul>
 800c15a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c15e:	f844 0c08 	str.w	r0, [r4, #-8]
 800c162:	4639      	mov	r1, r7
 800c164:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 800c168:	f7f4 f958 	bl	800041c <__aeabi_fmul>
 800c16c:	3601      	adds	r6, #1
 800c16e:	42b5      	cmp	r5, r6
 800c170:	f844 0c04 	str.w	r0, [r4, #-4]
 800c174:	f104 0408 	add.w	r4, r4, #8
 800c178:	d1ea      	bne.n	800c150 <arm_cfft_f32+0x8c>
 800c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c182:	d0b6      	beq.n	800c0f2 <arm_cfft_f32+0x2e>
 800c184:	e7bb      	b.n	800c0fe <arm_cfft_f32+0x3a>
 800c186:	2d10      	cmp	r5, #16
 800c188:	d0c7      	beq.n	800c11a <arm_cfft_f32+0x56>
 800c18a:	e7b8      	b.n	800c0fe <arm_cfft_f32+0x3a>
 800c18c:	3104      	adds	r1, #4
 800c18e:	b17d      	cbz	r5, 800c1b0 <arm_cfft_f32+0xec>
 800c190:	2300      	movs	r3, #0
 800c192:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800c196:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800c19a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	429d      	cmp	r5, r3
 800c1a2:	d1f6      	bne.n	800c192 <arm_cfft_f32+0xce>
 800c1a4:	e797      	b.n	800c0d6 <arm_cfft_f32+0x12>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff fbf1 	bl	800b990 <arm_cfft_radix8by4_f32>
 800c1ae:	e7a6      	b.n	800c0fe <arm_cfft_f32+0x3a>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d0a9      	beq.n	800c108 <arm_cfft_f32+0x44>
 800c1b4:	e7b8      	b.n	800c128 <arm_cfft_f32+0x64>
 800c1b6:	bf00      	nop

0800c1b8 <arm_bitreversal_32>:
 800c1b8:	b1e9      	cbz	r1, 800c1f6 <arm_bitreversal_32+0x3e>
 800c1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1bc:	2500      	movs	r5, #0
 800c1be:	f102 0e02 	add.w	lr, r2, #2
 800c1c2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c1c6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c1ca:	08a4      	lsrs	r4, r4, #2
 800c1cc:	089b      	lsrs	r3, r3, #2
 800c1ce:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c1d2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c1d6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c1da:	00a6      	lsls	r6, r4, #2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	1d34      	adds	r4, r6, #4
 800c1e6:	3502      	adds	r5, #2
 800c1e8:	58c6      	ldr	r6, [r0, r3]
 800c1ea:	5907      	ldr	r7, [r0, r4]
 800c1ec:	50c7      	str	r7, [r0, r3]
 800c1ee:	428d      	cmp	r5, r1
 800c1f0:	5106      	str	r6, [r0, r4]
 800c1f2:	d3e6      	bcc.n	800c1c2 <arm_bitreversal_32+0xa>
 800c1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f6:	4770      	bx	lr

0800c1f8 <arm_cmplx_mag_f32>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	b083      	sub	sp, #12
 800c1fe:	ea5f 0b92 	movs.w	fp, r2, lsr #2
 800c202:	9201      	str	r2, [sp, #4]
 800c204:	4607      	mov	r7, r0
 800c206:	4688      	mov	r8, r1
 800c208:	d07b      	beq.n	800c302 <arm_cmplx_mag_f32+0x10a>
 800c20a:	f100 0420 	add.w	r4, r0, #32
 800c20e:	f101 0510 	add.w	r5, r1, #16
 800c212:	465e      	mov	r6, fp
 800c214:	f854 1c20 	ldr.w	r1, [r4, #-32]
 800c218:	f854 ac1c 	ldr.w	sl, [r4, #-28]
 800c21c:	4608      	mov	r0, r1
 800c21e:	f7f4 f8fd 	bl	800041c <__aeabi_fmul>
 800c222:	4651      	mov	r1, sl
 800c224:	4681      	mov	r9, r0
 800c226:	4650      	mov	r0, sl
 800c228:	f7f4 f8f8 	bl	800041c <__aeabi_fmul>
 800c22c:	4601      	mov	r1, r0
 800c22e:	4648      	mov	r0, r9
 800c230:	f7f3 ffec 	bl	800020c <__addsf3>
 800c234:	2100      	movs	r1, #0
 800c236:	4681      	mov	r9, r0
 800c238:	f7f4 faa2 	bl	8000780 <__aeabi_fcmpge>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	f000 808b 	beq.w	800c358 <arm_cmplx_mag_f32+0x160>
 800c242:	4648      	mov	r0, r9
 800c244:	f000 feae 	bl	800cfa4 <sqrtf>
 800c248:	f845 0c10 	str.w	r0, [r5, #-16]
 800c24c:	f854 1c18 	ldr.w	r1, [r4, #-24]
 800c250:	f854 ac14 	ldr.w	sl, [r4, #-20]
 800c254:	4608      	mov	r0, r1
 800c256:	f7f4 f8e1 	bl	800041c <__aeabi_fmul>
 800c25a:	4651      	mov	r1, sl
 800c25c:	4681      	mov	r9, r0
 800c25e:	4650      	mov	r0, sl
 800c260:	f7f4 f8dc 	bl	800041c <__aeabi_fmul>
 800c264:	4601      	mov	r1, r0
 800c266:	4648      	mov	r0, r9
 800c268:	f7f3 ffd0 	bl	800020c <__addsf3>
 800c26c:	2100      	movs	r1, #0
 800c26e:	4681      	mov	r9, r0
 800c270:	f7f4 fa86 	bl	8000780 <__aeabi_fcmpge>
 800c274:	2800      	cmp	r0, #0
 800c276:	d07b      	beq.n	800c370 <arm_cmplx_mag_f32+0x178>
 800c278:	4648      	mov	r0, r9
 800c27a:	f000 fe93 	bl	800cfa4 <sqrtf>
 800c27e:	f845 0c0c 	str.w	r0, [r5, #-12]
 800c282:	f854 1c10 	ldr.w	r1, [r4, #-16]
 800c286:	f854 ac0c 	ldr.w	sl, [r4, #-12]
 800c28a:	4608      	mov	r0, r1
 800c28c:	f7f4 f8c6 	bl	800041c <__aeabi_fmul>
 800c290:	4651      	mov	r1, sl
 800c292:	4681      	mov	r9, r0
 800c294:	4650      	mov	r0, sl
 800c296:	f7f4 f8c1 	bl	800041c <__aeabi_fmul>
 800c29a:	4601      	mov	r1, r0
 800c29c:	4648      	mov	r0, r9
 800c29e:	f7f3 ffb5 	bl	800020c <__addsf3>
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	4681      	mov	r9, r0
 800c2a6:	f7f4 fa6b 	bl	8000780 <__aeabi_fcmpge>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d05c      	beq.n	800c368 <arm_cmplx_mag_f32+0x170>
 800c2ae:	4648      	mov	r0, r9
 800c2b0:	f000 fe78 	bl	800cfa4 <sqrtf>
 800c2b4:	f845 0c08 	str.w	r0, [r5, #-8]
 800c2b8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800c2bc:	f854 ac04 	ldr.w	sl, [r4, #-4]
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	f7f4 f8ab 	bl	800041c <__aeabi_fmul>
 800c2c6:	4651      	mov	r1, sl
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	4650      	mov	r0, sl
 800c2cc:	f7f4 f8a6 	bl	800041c <__aeabi_fmul>
 800c2d0:	4601      	mov	r1, r0
 800c2d2:	4648      	mov	r0, r9
 800c2d4:	f7f3 ff9a 	bl	800020c <__addsf3>
 800c2d8:	2100      	movs	r1, #0
 800c2da:	4681      	mov	r9, r0
 800c2dc:	f7f4 fa50 	bl	8000780 <__aeabi_fcmpge>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d03d      	beq.n	800c360 <arm_cmplx_mag_f32+0x168>
 800c2e4:	4648      	mov	r0, r9
 800c2e6:	f000 fe5d 	bl	800cfa4 <sqrtf>
 800c2ea:	f845 0c04 	str.w	r0, [r5, #-4]
 800c2ee:	3e01      	subs	r6, #1
 800c2f0:	f104 0420 	add.w	r4, r4, #32
 800c2f4:	f105 0510 	add.w	r5, r5, #16
 800c2f8:	d18c      	bne.n	800c214 <arm_cmplx_mag_f32+0x1c>
 800c2fa:	eb07 174b 	add.w	r7, r7, fp, lsl #5
 800c2fe:	eb08 180b 	add.w	r8, r8, fp, lsl #4
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	f013 0a03 	ands.w	sl, r3, #3
 800c308:	d023      	beq.n	800c352 <arm_cmplx_mag_f32+0x15a>
 800c30a:	2600      	movs	r6, #0
 800c30c:	3708      	adds	r7, #8
 800c30e:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
 800c312:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800c316:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800c31a:	4608      	mov	r0, r1
 800c31c:	f7f4 f87e 	bl	800041c <__aeabi_fmul>
 800c320:	4629      	mov	r1, r5
 800c322:	4604      	mov	r4, r0
 800c324:	4628      	mov	r0, r5
 800c326:	f7f4 f879 	bl	800041c <__aeabi_fmul>
 800c32a:	4601      	mov	r1, r0
 800c32c:	4620      	mov	r0, r4
 800c32e:	f7f3 ff6d 	bl	800020c <__addsf3>
 800c332:	2100      	movs	r1, #0
 800c334:	4604      	mov	r4, r0
 800c336:	f108 0804 	add.w	r8, r8, #4
 800c33a:	f7f4 fa21 	bl	8000780 <__aeabi_fcmpge>
 800c33e:	b1d8      	cbz	r0, 800c378 <arm_cmplx_mag_f32+0x180>
 800c340:	4620      	mov	r0, r4
 800c342:	f000 fe2f 	bl	800cfa4 <sqrtf>
 800c346:	f848 0c04 	str.w	r0, [r8, #-4]
 800c34a:	45d0      	cmp	r8, sl
 800c34c:	f107 0708 	add.w	r7, r7, #8
 800c350:	d1df      	bne.n	800c312 <arm_cmplx_mag_f32+0x11a>
 800c352:	b003      	add	sp, #12
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	2300      	movs	r3, #0
 800c35a:	f845 3c10 	str.w	r3, [r5, #-16]
 800c35e:	e775      	b.n	800c24c <arm_cmplx_mag_f32+0x54>
 800c360:	2300      	movs	r3, #0
 800c362:	f845 3c04 	str.w	r3, [r5, #-4]
 800c366:	e7c2      	b.n	800c2ee <arm_cmplx_mag_f32+0xf6>
 800c368:	2300      	movs	r3, #0
 800c36a:	f845 3c08 	str.w	r3, [r5, #-8]
 800c36e:	e7a3      	b.n	800c2b8 <arm_cmplx_mag_f32+0xc0>
 800c370:	2300      	movs	r3, #0
 800c372:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c376:	e784      	b.n	800c282 <arm_cmplx_mag_f32+0x8a>
 800c378:	f848 6c04 	str.w	r6, [r8, #-4]
 800c37c:	e7e5      	b.n	800c34a <arm_cmplx_mag_f32+0x152>
 800c37e:	bf00      	nop

0800c380 <arm_radix8_butterfly_f32>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	b0b9      	sub	sp, #228	; 0xe4
 800c386:	e9cd 3236 	strd	r3, r2, [sp, #216]	; 0xd8
 800c38a:	4603      	mov	r3, r0
 800c38c:	3304      	adds	r3, #4
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	4613      	mov	r3, r2
 800c392:	3304      	adds	r3, #4
 800c394:	9116      	str	r1, [sp, #88]	; 0x58
 800c396:	9334      	str	r3, [sp, #208]	; 0xd0
 800c398:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c39a:	9000      	str	r0, [sp, #0]
 800c39c:	9118      	str	r1, [sp, #96]	; 0x60
 800c39e:	08df      	lsrs	r7, r3, #3
 800c3a0:	9900      	ldr	r1, [sp, #0]
 800c3a2:	00fa      	lsls	r2, r7, #3
 800c3a4:	4411      	add	r1, r2
 800c3a6:	ebc7 7347 	rsb	r3, r7, r7, lsl #29
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	9107      	str	r1, [sp, #28]
 800c3ae:	4411      	add	r1, r2
 800c3b0:	911f      	str	r1, [sp, #124]	; 0x7c
 800c3b2:	4419      	add	r1, r3
 800c3b4:	911d      	str	r1, [sp, #116]	; 0x74
 800c3b6:	4411      	add	r1, r2
 800c3b8:	911b      	str	r1, [sp, #108]	; 0x6c
 800c3ba:	4419      	add	r1, r3
 800c3bc:	188d      	adds	r5, r1, r2
 800c3be:	18ec      	adds	r4, r5, r3
 800c3c0:	eb04 0e02 	add.w	lr, r4, r2
 800c3c4:	910f      	str	r1, [sp, #60]	; 0x3c
 800c3c6:	eb0e 0103 	add.w	r1, lr, r3
 800c3ca:	1888      	adds	r0, r1, r2
 800c3cc:	9020      	str	r0, [sp, #128]	; 0x80
 800c3ce:	4418      	add	r0, r3
 800c3d0:	4616      	mov	r6, r2
 800c3d2:	9226      	str	r2, [sp, #152]	; 0x98
 800c3d4:	1882      	adds	r2, r0, r2
 800c3d6:	901e      	str	r0, [sp, #120]	; 0x78
 800c3d8:	18d0      	adds	r0, r2, r3
 800c3da:	900e      	str	r0, [sp, #56]	; 0x38
 800c3dc:	4430      	add	r0, r6
 800c3de:	4403      	add	r3, r0
 800c3e0:	199e      	adds	r6, r3, r6
 800c3e2:	3204      	adds	r2, #4
 800c3e4:	3404      	adds	r4, #4
 800c3e6:	901c      	str	r0, [sp, #112]	; 0x70
 800c3e8:	9215      	str	r2, [sp, #84]	; 0x54
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	1d1a      	adds	r2, r3, #4
 800c3ee:	9412      	str	r4, [sp, #72]	; 0x48
 800c3f0:	9219      	str	r2, [sp, #100]	; 0x64
 800c3f2:	f10e 0404 	add.w	r4, lr, #4
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c3fa:	9410      	str	r4, [sp, #64]	; 0x40
 800c3fc:	3204      	adds	r2, #4
 800c3fe:	1d0c      	adds	r4, r1, #4
 800c400:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c402:	9621      	str	r6, [sp, #132]	; 0x84
 800c404:	9211      	str	r2, [sp, #68]	; 0x44
 800c406:	463e      	mov	r6, r7
 800c408:	1d02      	adds	r2, r0, #4
 800c40a:	9635      	str	r6, [sp, #212]	; 0xd4
 800c40c:	9213      	str	r2, [sp, #76]	; 0x4c
 800c40e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c412:	1d0a      	adds	r2, r1, #4
 800c414:	9206      	str	r2, [sp, #24]
 800c416:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c418:	941a      	str	r4, [sp, #104]	; 0x68
 800c41a:	00f2      	lsls	r2, r6, #3
 800c41c:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 800c41e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800c422:	0131      	lsls	r1, r6, #4
 800c424:	3504      	adds	r5, #4
 800c426:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	2600      	movs	r6, #0
 800c42e:	9514      	str	r5, [sp, #80]	; 0x50
 800c430:	9125      	str	r1, [sp, #148]	; 0x94
 800c432:	9317      	str	r3, [sp, #92]	; 0x5c
 800c434:	46b2      	mov	sl, r6
 800c436:	4691      	mov	r9, r2
 800c438:	46c3      	mov	fp, r8
 800c43a:	9b07      	ldr	r3, [sp, #28]
 800c43c:	9f00      	ldr	r7, [sp, #0]
 800c43e:	f853 6009 	ldr.w	r6, [r3, r9]
 800c442:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800c446:	4631      	mov	r1, r6
 800c448:	4628      	mov	r0, r5
 800c44a:	f7f3 fedf 	bl	800020c <__addsf3>
 800c44e:	4631      	mov	r1, r6
 800c450:	4604      	mov	r4, r0
 800c452:	4628      	mov	r0, r5
 800c454:	f7f3 fed8 	bl	8000208 <__aeabi_fsub>
 800c458:	9b07      	ldr	r3, [sp, #28]
 800c45a:	9700      	str	r7, [sp, #0]
 800c45c:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800c460:	f857 700b 	ldr.w	r7, [r7, fp]
 800c464:	9005      	str	r0, [sp, #20]
 800c466:	4639      	mov	r1, r7
 800c468:	4630      	mov	r0, r6
 800c46a:	f7f3 fecf 	bl	800020c <__addsf3>
 800c46e:	4639      	mov	r1, r7
 800c470:	4605      	mov	r5, r0
 800c472:	4630      	mov	r0, r6
 800c474:	f7f3 fec8 	bl	8000208 <__aeabi_fsub>
 800c478:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c47a:	9008      	str	r0, [sp, #32]
 800c47c:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800c480:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c482:	f852 800b 	ldr.w	r8, [r2, fp]
 800c486:	4630      	mov	r0, r6
 800c488:	4641      	mov	r1, r8
 800c48a:	f7f3 febf 	bl	800020c <__addsf3>
 800c48e:	4641      	mov	r1, r8
 800c490:	4607      	mov	r7, r0
 800c492:	4630      	mov	r0, r6
 800c494:	f7f3 feb8 	bl	8000208 <__aeabi_fsub>
 800c498:	9a00      	ldr	r2, [sp, #0]
 800c49a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c49c:	f852 8009 	ldr.w	r8, [r2, r9]
 800c4a0:	f853 300b 	ldr.w	r3, [r3, fp]
 800c4a4:	9009      	str	r0, [sp, #36]	; 0x24
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	9302      	str	r3, [sp, #8]
 800c4ac:	f7f3 feae 	bl	800020c <__addsf3>
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	f7f3 fea6 	bl	8000208 <__aeabi_fsub>
 800c4bc:	4639      	mov	r1, r7
 800c4be:	900a      	str	r0, [sp, #40]	; 0x28
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7f3 fea1 	bl	8000208 <__aeabi_fsub>
 800c4c6:	4639      	mov	r1, r7
 800c4c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f7f3 fe9e 	bl	800020c <__addsf3>
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	f7f3 fe97 	bl	8000208 <__aeabi_fsub>
 800c4da:	4631      	mov	r1, r6
 800c4dc:	900c      	str	r0, [sp, #48]	; 0x30
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f7f3 fe94 	bl	800020c <__addsf3>
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f7f3 fe8f 	bl	800020c <__addsf3>
 800c4ee:	9b00      	ldr	r3, [sp, #0]
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7f3 fe86 	bl	8000208 <__aeabi_fsub>
 800c4fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c4fe:	f841 0009 	str.w	r0, [r1, r9]
 800c502:	9f01      	ldr	r7, [sp, #4]
 800c504:	9906      	ldr	r1, [sp, #24]
 800c506:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800c50a:	f851 6009 	ldr.w	r6, [r1, r9]
 800c50e:	4620      	mov	r0, r4
 800c510:	4631      	mov	r1, r6
 800c512:	f7f3 fe7b 	bl	800020c <__addsf3>
 800c516:	4631      	mov	r1, r6
 800c518:	4605      	mov	r5, r0
 800c51a:	4620      	mov	r0, r4
 800c51c:	f7f3 fe74 	bl	8000208 <__aeabi_fsub>
 800c520:	9906      	ldr	r1, [sp, #24]
 800c522:	f857 600b 	ldr.w	r6, [r7, fp]
 800c526:	f851 403a 	ldr.w	r4, [r1, sl, lsl #3]
 800c52a:	9002      	str	r0, [sp, #8]
 800c52c:	4631      	mov	r1, r6
 800c52e:	4620      	mov	r0, r4
 800c530:	9701      	str	r7, [sp, #4]
 800c532:	f7f3 fe6b 	bl	800020c <__addsf3>
 800c536:	4631      	mov	r1, r6
 800c538:	4680      	mov	r8, r0
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7f3 fe64 	bl	8000208 <__aeabi_fsub>
 800c540:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c542:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c544:	f854 403a 	ldr.w	r4, [r4, sl, lsl #3]
 800c548:	f856 600b 	ldr.w	r6, [r6, fp]
 800c54c:	900d      	str	r0, [sp, #52]	; 0x34
 800c54e:	4631      	mov	r1, r6
 800c550:	4620      	mov	r0, r4
 800c552:	f7f3 fe5b 	bl	800020c <__addsf3>
 800c556:	4631      	mov	r1, r6
 800c558:	4607      	mov	r7, r0
 800c55a:	4620      	mov	r0, r4
 800c55c:	f7f3 fe54 	bl	8000208 <__aeabi_fsub>
 800c560:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c562:	9c01      	ldr	r4, [sp, #4]
 800c564:	f851 600b 	ldr.w	r6, [r1, fp]
 800c568:	f854 4009 	ldr.w	r4, [r4, r9]
 800c56c:	9003      	str	r0, [sp, #12]
 800c56e:	4631      	mov	r1, r6
 800c570:	4620      	mov	r0, r4
 800c572:	f7f3 fe4b 	bl	800020c <__addsf3>
 800c576:	4631      	mov	r1, r6
 800c578:	9004      	str	r0, [sp, #16]
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7f3 fe44 	bl	8000208 <__aeabi_fsub>
 800c580:	4639      	mov	r1, r7
 800c582:	4606      	mov	r6, r0
 800c584:	4628      	mov	r0, r5
 800c586:	f7f3 fe3f 	bl	8000208 <__aeabi_fsub>
 800c58a:	4639      	mov	r1, r7
 800c58c:	4604      	mov	r4, r0
 800c58e:	4628      	mov	r0, r5
 800c590:	f7f3 fe3c 	bl	800020c <__addsf3>
 800c594:	9904      	ldr	r1, [sp, #16]
 800c596:	4607      	mov	r7, r0
 800c598:	4640      	mov	r0, r8
 800c59a:	f7f3 fe35 	bl	8000208 <__aeabi_fsub>
 800c59e:	9904      	ldr	r1, [sp, #16]
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	f7f3 fe32 	bl	800020c <__addsf3>
 800c5a8:	4680      	mov	r8, r0
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	f7f3 fe2d 	bl	800020c <__addsf3>
 800c5b2:	9b01      	ldr	r3, [sp, #4]
 800c5b4:	4641      	mov	r1, r8
 800c5b6:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	f7f3 fe24 	bl	8000208 <__aeabi_fsub>
 800c5c0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c5c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	f847 0009 	str.w	r0, [r7, r9]
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	f7f3 fe1d 	bl	800020c <__addsf3>
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c5d6:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 800c5da:	4640      	mov	r0, r8
 800c5dc:	f7f3 fe14 	bl	8000208 <__aeabi_fsub>
 800c5e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c5e2:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	f845 000b 	str.w	r0, [r5, fp]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f7f3 fe0c 	bl	8000208 <__aeabi_fsub>
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c5f4:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	f7f3 fe07 	bl	800020c <__addsf3>
 800c5fe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800c602:	9d08      	ldr	r5, [sp, #32]
 800c604:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c606:	4641      	mov	r1, r8
 800c608:	f844 000b 	str.w	r0, [r4, fp]
 800c60c:	4628      	mov	r0, r5
 800c60e:	f7f3 fdfb 	bl	8000208 <__aeabi_fsub>
 800c612:	4986      	ldr	r1, [pc, #536]	; (800c82c <arm_radix8_butterfly_f32+0x4ac>)
 800c614:	f7f3 ff02 	bl	800041c <__aeabi_fmul>
 800c618:	4641      	mov	r1, r8
 800c61a:	4604      	mov	r4, r0
 800c61c:	4628      	mov	r0, r5
 800c61e:	f7f3 fdf5 	bl	800020c <__addsf3>
 800c622:	4982      	ldr	r1, [pc, #520]	; (800c82c <arm_radix8_butterfly_f32+0x4ac>)
 800c624:	f7f3 fefa 	bl	800041c <__aeabi_fmul>
 800c628:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800c62c:	4605      	mov	r5, r0
 800c62e:	4631      	mov	r1, r6
 800c630:	4640      	mov	r0, r8
 800c632:	f7f3 fde9 	bl	8000208 <__aeabi_fsub>
 800c636:	497d      	ldr	r1, [pc, #500]	; (800c82c <arm_radix8_butterfly_f32+0x4ac>)
 800c638:	f7f3 fef0 	bl	800041c <__aeabi_fmul>
 800c63c:	4631      	mov	r1, r6
 800c63e:	4607      	mov	r7, r0
 800c640:	4640      	mov	r0, r8
 800c642:	f7f3 fde3 	bl	800020c <__addsf3>
 800c646:	4979      	ldr	r1, [pc, #484]	; (800c82c <arm_radix8_butterfly_f32+0x4ac>)
 800c648:	f7f3 fee8 	bl	800041c <__aeabi_fmul>
 800c64c:	9e05      	ldr	r6, [sp, #20]
 800c64e:	9004      	str	r0, [sp, #16]
 800c650:	4621      	mov	r1, r4
 800c652:	4630      	mov	r0, r6
 800c654:	f7f3 fdd8 	bl	8000208 <__aeabi_fsub>
 800c658:	4621      	mov	r1, r4
 800c65a:	4680      	mov	r8, r0
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7f3 fdd5 	bl	800020c <__addsf3>
 800c662:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c664:	9005      	str	r0, [sp, #20]
 800c666:	4629      	mov	r1, r5
 800c668:	4630      	mov	r0, r6
 800c66a:	f7f3 fdcd 	bl	8000208 <__aeabi_fsub>
 800c66e:	4629      	mov	r1, r5
 800c670:	4604      	mov	r4, r0
 800c672:	4630      	mov	r0, r6
 800c674:	f7f3 fdca 	bl	800020c <__addsf3>
 800c678:	4639      	mov	r1, r7
 800c67a:	4606      	mov	r6, r0
 800c67c:	9802      	ldr	r0, [sp, #8]
 800c67e:	f7f3 fdc3 	bl	8000208 <__aeabi_fsub>
 800c682:	4639      	mov	r1, r7
 800c684:	4605      	mov	r5, r0
 800c686:	9802      	ldr	r0, [sp, #8]
 800c688:	f7f3 fdc0 	bl	800020c <__addsf3>
 800c68c:	9904      	ldr	r1, [sp, #16]
 800c68e:	4607      	mov	r7, r0
 800c690:	9803      	ldr	r0, [sp, #12]
 800c692:	f7f3 fdb9 	bl	8000208 <__aeabi_fsub>
 800c696:	9904      	ldr	r1, [sp, #16]
 800c698:	9002      	str	r0, [sp, #8]
 800c69a:	9803      	ldr	r0, [sp, #12]
 800c69c:	f7f3 fdb6 	bl	800020c <__addsf3>
 800c6a0:	4601      	mov	r1, r0
 800c6a2:	9003      	str	r0, [sp, #12]
 800c6a4:	9805      	ldr	r0, [sp, #20]
 800c6a6:	f7f3 fdb1 	bl	800020c <__addsf3>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c6b4:	9805      	ldr	r0, [sp, #20]
 800c6b6:	f7f3 fda7 	bl	8000208 <__aeabi_fsub>
 800c6ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c6bc:	9902      	ldr	r1, [sp, #8]
 800c6be:	f842 000b 	str.w	r0, [r2, fp]
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	f7f3 fda2 	bl	800020c <__addsf3>
 800c6c8:	9a00      	ldr	r2, [sp, #0]
 800c6ca:	9902      	ldr	r1, [sp, #8]
 800c6cc:	f842 000b 	str.w	r0, [r2, fp]
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	f7f3 fd99 	bl	8000208 <__aeabi_fsub>
 800c6d6:	9a00      	ldr	r2, [sp, #0]
 800c6d8:	4631      	mov	r1, r6
 800c6da:	f842 0009 	str.w	r0, [r2, r9]
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f7f3 fd92 	bl	8000208 <__aeabi_fsub>
 800c6e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f7f3 fd8d 	bl	800020c <__addsf3>
 800c6f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	f842 000b 	str.w	r0, [r2, fp]
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f7f3 fd84 	bl	8000208 <__aeabi_fsub>
 800c700:	9f01      	ldr	r7, [sp, #4]
 800c702:	4629      	mov	r1, r5
 800c704:	f847 000b 	str.w	r0, [r7, fp]
 800c708:	4620      	mov	r0, r4
 800c70a:	f7f3 fd7f 	bl	800020c <__addsf3>
 800c70e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c710:	f847 0009 	str.w	r0, [r7, r9]
 800c714:	449a      	add	sl, r3
 800c716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c718:	449b      	add	fp, r3
 800c71a:	4499      	add	r9, r3
 800c71c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c71e:	4553      	cmp	r3, sl
 800c720:	f63f ae8b 	bhi.w	800c43a <arm_radix8_butterfly_f32+0xba>
 800c724:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800c726:	2b07      	cmp	r3, #7
 800c728:	f240 82dc 	bls.w	800cce4 <arm_radix8_butterfly_f32+0x964>
 800c72c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c72e:	015e      	lsls	r6, r3, #5
 800c730:	ebc3 62c3 	rsb	r2, r3, r3, lsl #27
 800c734:	4431      	add	r1, r6
 800c736:	0152      	lsls	r2, r2, #5
 800c738:	1888      	adds	r0, r1, r2
 800c73a:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	902e      	str	r0, [sp, #184]	; 0xb8
 800c742:	4430      	add	r0, r6
 800c744:	18c5      	adds	r5, r0, r3
 800c746:	902d      	str	r0, [sp, #180]	; 0xb4
 800c748:	18e8      	adds	r0, r5, r3
 800c74a:	1984      	adds	r4, r0, r6
 800c74c:	4422      	add	r2, r4
 800c74e:	912f      	str	r1, [sp, #188]	; 0xbc
 800c750:	1991      	adds	r1, r2, r6
 800c752:	18cf      	adds	r7, r1, r3
 800c754:	9724      	str	r7, [sp, #144]	; 0x90
 800c756:	441f      	add	r7, r3
 800c758:	19be      	adds	r6, r7, r6
 800c75a:	9723      	str	r7, [sp, #140]	; 0x8c
 800c75c:	18f7      	adds	r7, r6, r3
 800c75e:	18fb      	adds	r3, r7, r3
 800c760:	9322      	str	r3, [sp, #136]	; 0x88
 800c762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c764:	9730      	str	r7, [sp, #192]	; 0xc0
 800c766:	3308      	adds	r3, #8
 800c768:	9332      	str	r3, [sp, #200]	; 0xc8
 800c76a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c76c:	960d      	str	r6, [sp, #52]	; 0x34
 800c76e:	469c      	mov	ip, r3
 800c770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c772:	449c      	add	ip, r3
 800c774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c776:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800c77a:	3304      	adds	r3, #4
 800c77c:	9327      	str	r3, [sp, #156]	; 0x9c
 800c77e:	463b      	mov	r3, r7
 800c780:	3304      	adds	r3, #4
 800c782:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800c784:	932b      	str	r3, [sp, #172]	; 0xac
 800c786:	1d33      	adds	r3, r6, #4
 800c788:	930b      	str	r3, [sp, #44]	; 0x2c
 800c78a:	1d3b      	adds	r3, r7, #4
 800c78c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800c78e:	932a      	str	r3, [sp, #168]	; 0xa8
 800c790:	1d3b      	adds	r3, r7, #4
 800c792:	3204      	adds	r2, #4
 800c794:	932c      	str	r3, [sp, #176]	; 0xb0
 800c796:	2301      	movs	r3, #1
 800c798:	3504      	adds	r5, #4
 800c79a:	3404      	adds	r4, #4
 800c79c:	3004      	adds	r0, #4
 800c79e:	9226      	str	r2, [sp, #152]	; 0x98
 800c7a0:	9331      	str	r3, [sp, #196]	; 0xc4
 800c7a2:	1d0a      	adds	r2, r1, #4
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	950c      	str	r5, [sp, #48]	; 0x30
 800c7a8:	9428      	str	r4, [sp, #160]	; 0xa0
 800c7aa:	9029      	str	r0, [sp, #164]	; 0xa4
 800c7ac:	9225      	str	r2, [sp, #148]	; 0x94
 800c7ae:	9333      	str	r3, [sp, #204]	; 0xcc
 800c7b0:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 800c7b2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c7b4:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 800c7b6:	441e      	add	r6, r3
 800c7b8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800c7bc:	011d      	lsls	r5, r3, #4
 800c7be:	0134      	lsls	r4, r6, #4
 800c7c0:	597a      	ldr	r2, [r7, r5]
 800c7c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c7c4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c7c6:	f857 c033 	ldr.w	ip, [r7, r3, lsl #3]
 800c7ca:	5955      	ldr	r5, [r2, r5]
 800c7cc:	951f      	str	r5, [sp, #124]	; 0x7c
 800c7ce:	463d      	mov	r5, r7
 800c7d0:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800c7d2:	592a      	ldr	r2, [r5, r4]
 800c7d4:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 800c7d8:	9206      	str	r2, [sp, #24]
 800c7da:	0170      	lsls	r0, r6, #5
 800c7dc:	593a      	ldr	r2, [r7, r4]
 800c7de:	931d      	str	r3, [sp, #116]	; 0x74
 800c7e0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800c7e4:	462b      	mov	r3, r5
 800c7e6:	921c      	str	r2, [sp, #112]	; 0x70
 800c7e8:	582a      	ldr	r2, [r5, r0]
 800c7ea:	9207      	str	r2, [sp, #28]
 800c7ec:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
 800c7f0:	583a      	ldr	r2, [r7, r0]
 800c7f2:	920a      	str	r2, [sp, #40]	; 0x28
 800c7f4:	f853 2031 	ldr.w	r2, [r3, r1, lsl #3]
 800c7f8:	921a      	str	r2, [sp, #104]	; 0x68
 800c7fa:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
 800c7fe:	f857 103e 	ldr.w	r1, [r7, lr, lsl #3]
 800c802:	9120      	str	r1, [sp, #128]	; 0x80
 800c804:	4619      	mov	r1, r3
 800c806:	921e      	str	r2, [sp, #120]	; 0x78
 800c808:	f853 203e 	ldr.w	r2, [r3, lr, lsl #3]
 800c80c:	f851 3036 	ldr.w	r3, [r1, r6, lsl #3]
 800c810:	9633      	str	r6, [sp, #204]	; 0xcc
 800c812:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c816:	9208      	str	r2, [sp, #32]
 800c818:	9305      	str	r3, [sp, #20]
 800c81a:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 800c81e:	9309      	str	r3, [sp, #36]	; 0x24
 800c820:	e9dd 6831 	ldrd	r6, r8, [sp, #196]	; 0xc4
 800c824:	46b2      	mov	sl, r6
 800c826:	46c3      	mov	fp, r8
 800c828:	e002      	b.n	800c830 <arm_radix8_butterfly_f32+0x4b0>
 800c82a:	bf00      	nop
 800c82c:	3f3504f3 	.word	0x3f3504f3
 800c830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c832:	9f00      	ldr	r7, [sp, #0]
 800c834:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800c838:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	f7f3 fce4 	bl	800020c <__addsf3>
 800c844:	4631      	mov	r1, r6
 800c846:	4604      	mov	r4, r0
 800c848:	4628      	mov	r0, r5
 800c84a:	f7f3 fcdd 	bl	8000208 <__aeabi_fsub>
 800c84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c850:	f857 600b 	ldr.w	r6, [r7, fp]
 800c854:	9700      	str	r7, [sp, #0]
 800c856:	f852 700b 	ldr.w	r7, [r2, fp]
 800c85a:	900f      	str	r0, [sp, #60]	; 0x3c
 800c85c:	4639      	mov	r1, r7
 800c85e:	4630      	mov	r0, r6
 800c860:	f7f3 fcd4 	bl	800020c <__addsf3>
 800c864:	4639      	mov	r1, r7
 800c866:	4605      	mov	r5, r0
 800c868:	4630      	mov	r0, r6
 800c86a:	f7f3 fccd 	bl	8000208 <__aeabi_fsub>
 800c86e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c870:	9010      	str	r0, [sp, #64]	; 0x40
 800c872:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800c876:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c878:	f852 803a 	ldr.w	r8, [r2, sl, lsl #3]
 800c87c:	4630      	mov	r0, r6
 800c87e:	4641      	mov	r1, r8
 800c880:	f7f3 fcc4 	bl	800020c <__addsf3>
 800c884:	4641      	mov	r1, r8
 800c886:	4607      	mov	r7, r0
 800c888:	4630      	mov	r0, r6
 800c88a:	f7f3 fcbd 	bl	8000208 <__aeabi_fsub>
 800c88e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c890:	9011      	str	r0, [sp, #68]	; 0x44
 800c892:	f852 800b 	ldr.w	r8, [r2, fp]
 800c896:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c898:	f852 900b 	ldr.w	r9, [r2, fp]
 800c89c:	4640      	mov	r0, r8
 800c89e:	4649      	mov	r1, r9
 800c8a0:	f7f3 fcb4 	bl	800020c <__addsf3>
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	f7f3 fcad 	bl	8000208 <__aeabi_fsub>
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	9012      	str	r0, [sp, #72]	; 0x48
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f7f3 fca8 	bl	8000208 <__aeabi_fsub>
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	4680      	mov	r8, r0
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7f3 fca5 	bl	800020c <__addsf3>
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f7f3 fc9e 	bl	8000208 <__aeabi_fsub>
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	9013      	str	r0, [sp, #76]	; 0x4c
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f7f3 fc9b 	bl	800020c <__addsf3>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f7f3 fc96 	bl	800020c <__addsf3>
 800c8e0:	9a00      	ldr	r2, [sp, #0]
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f7f3 fc8d 	bl	8000208 <__aeabi_fsub>
 800c8ee:	9f01      	ldr	r7, [sp, #4]
 800c8f0:	9002      	str	r0, [sp, #8]
 800c8f2:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800c8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8f8:	f853 503a 	ldr.w	r5, [r3, sl, lsl #3]
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	f7f3 fc84 	bl	800020c <__addsf3>
 800c904:	4629      	mov	r1, r5
 800c906:	4606      	mov	r6, r0
 800c908:	4620      	mov	r0, r4
 800c90a:	f7f3 fc7d 	bl	8000208 <__aeabi_fsub>
 800c90e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c910:	f857 500b 	ldr.w	r5, [r7, fp]
 800c914:	9701      	str	r7, [sp, #4]
 800c916:	f851 700b 	ldr.w	r7, [r1, fp]
 800c91a:	9003      	str	r0, [sp, #12]
 800c91c:	4639      	mov	r1, r7
 800c91e:	4628      	mov	r0, r5
 800c920:	f7f3 fc74 	bl	800020c <__addsf3>
 800c924:	4639      	mov	r1, r7
 800c926:	4604      	mov	r4, r0
 800c928:	4628      	mov	r0, r5
 800c92a:	f7f3 fc6d 	bl	8000208 <__aeabi_fsub>
 800c92e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c930:	9014      	str	r0, [sp, #80]	; 0x50
 800c932:	f851 503a 	ldr.w	r5, [r1, sl, lsl #3]
 800c936:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800c938:	f851 703a 	ldr.w	r7, [r1, sl, lsl #3]
 800c93c:	4628      	mov	r0, r5
 800c93e:	4639      	mov	r1, r7
 800c940:	f7f3 fc64 	bl	800020c <__addsf3>
 800c944:	4639      	mov	r1, r7
 800c946:	4681      	mov	r9, r0
 800c948:	4628      	mov	r0, r5
 800c94a:	f7f3 fc5d 	bl	8000208 <__aeabi_fsub>
 800c94e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c950:	9004      	str	r0, [sp, #16]
 800c952:	f851 500b 	ldr.w	r5, [r1, fp]
 800c956:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c958:	f851 300b 	ldr.w	r3, [r1, fp]
 800c95c:	9315      	str	r3, [sp, #84]	; 0x54
 800c95e:	4619      	mov	r1, r3
 800c960:	4628      	mov	r0, r5
 800c962:	f7f3 fc53 	bl	800020c <__addsf3>
 800c966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c968:	4607      	mov	r7, r0
 800c96a:	4619      	mov	r1, r3
 800c96c:	4628      	mov	r0, r5
 800c96e:	f7f3 fc4b 	bl	8000208 <__aeabi_fsub>
 800c972:	4649      	mov	r1, r9
 800c974:	9015      	str	r0, [sp, #84]	; 0x54
 800c976:	4630      	mov	r0, r6
 800c978:	f7f3 fc46 	bl	8000208 <__aeabi_fsub>
 800c97c:	4649      	mov	r1, r9
 800c97e:	4605      	mov	r5, r0
 800c980:	4630      	mov	r0, r6
 800c982:	f7f3 fc43 	bl	800020c <__addsf3>
 800c986:	4639      	mov	r1, r7
 800c988:	4606      	mov	r6, r0
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7f3 fc3c 	bl	8000208 <__aeabi_fsub>
 800c990:	4639      	mov	r1, r7
 800c992:	4681      	mov	r9, r0
 800c994:	4620      	mov	r0, r4
 800c996:	f7f3 fc39 	bl	800020c <__addsf3>
 800c99a:	4649      	mov	r1, r9
 800c99c:	4607      	mov	r7, r0
 800c99e:	4640      	mov	r0, r8
 800c9a0:	f7f3 fc34 	bl	800020c <__addsf3>
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4640      	mov	r0, r8
 800c9aa:	f7f3 fc2d 	bl	8000208 <__aeabi_fsub>
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4680      	mov	r8, r0
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7f3 fc2a 	bl	800020c <__addsf3>
 800c9b8:	9b01      	ldr	r3, [sp, #4]
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7f3 fc21 	bl	8000208 <__aeabi_fsub>
 800c9c6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f7f3 fc1a 	bl	8000208 <__aeabi_fsub>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	4648      	mov	r0, r9
 800c9da:	f7f3 fc17 	bl	800020c <__addsf3>
 800c9de:	9902      	ldr	r1, [sp, #8]
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	9807      	ldr	r0, [sp, #28]
 800c9e4:	f7f3 fd1a 	bl	800041c <__aeabi_fmul>
 800c9e8:	4639      	mov	r1, r7
 800c9ea:	4681      	mov	r9, r0
 800c9ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9ee:	f7f3 fd15 	bl	800041c <__aeabi_fmul>
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	4648      	mov	r0, r9
 800c9f6:	f7f3 fc09 	bl	800020c <__addsf3>
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800c9fe:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 800ca02:	9807      	ldr	r0, [sp, #28]
 800ca04:	f7f3 fd0a 	bl	800041c <__aeabi_fmul>
 800ca08:	9902      	ldr	r1, [sp, #8]
 800ca0a:	4607      	mov	r7, r0
 800ca0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca0e:	f7f3 fd05 	bl	800041c <__aeabi_fmul>
 800ca12:	4601      	mov	r1, r0
 800ca14:	4638      	mov	r0, r7
 800ca16:	f7f3 fbf7 	bl	8000208 <__aeabi_fsub>
 800ca1a:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 800ca22:	9806      	ldr	r0, [sp, #24]
 800ca24:	f7f3 fcfa 	bl	800041c <__aeabi_fmul>
 800ca28:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4648      	mov	r0, r9
 800ca32:	f7f3 fcf3 	bl	800041c <__aeabi_fmul>
 800ca36:	4601      	mov	r1, r0
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7f3 fbe7 	bl	800020c <__addsf3>
 800ca3e:	4631      	mov	r1, r6
 800ca40:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800ca42:	f846 003a 	str.w	r0, [r6, sl, lsl #3]
 800ca46:	9806      	ldr	r0, [sp, #24]
 800ca48:	f7f3 fce8 	bl	800041c <__aeabi_fmul>
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4606      	mov	r6, r0
 800ca50:	4648      	mov	r0, r9
 800ca52:	f7f3 fce3 	bl	800041c <__aeabi_fmul>
 800ca56:	4601      	mov	r1, r0
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7f3 fbd5 	bl	8000208 <__aeabi_fsub>
 800ca5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ca60:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ca62:	4641      	mov	r1, r8
 800ca64:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7f3 fcd7 	bl	800041c <__aeabi_fmul>
 800ca6e:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800ca72:	4604      	mov	r4, r0
 800ca74:	4629      	mov	r1, r5
 800ca76:	4648      	mov	r0, r9
 800ca78:	f7f3 fcd0 	bl	800041c <__aeabi_fmul>
 800ca7c:	4601      	mov	r1, r0
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7f3 fbc4 	bl	800020c <__addsf3>
 800ca84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ca86:	4629      	mov	r1, r5
 800ca88:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7f3 fcc5 	bl	800041c <__aeabi_fmul>
 800ca92:	4641      	mov	r1, r8
 800ca94:	4604      	mov	r4, r0
 800ca96:	4648      	mov	r0, r9
 800ca98:	f7f3 fcc0 	bl	800041c <__aeabi_fmul>
 800ca9c:	4601      	mov	r1, r0
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7f3 fbb2 	bl	8000208 <__aeabi_fsub>
 800caa4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800caa6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800caaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800caac:	4639      	mov	r1, r7
 800caae:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 800cab2:	4648      	mov	r0, r9
 800cab4:	f7f3 fba8 	bl	8000208 <__aeabi_fsub>
 800cab8:	498c      	ldr	r1, [pc, #560]	; (800ccec <arm_radix8_butterfly_f32+0x96c>)
 800caba:	f7f3 fcaf 	bl	800041c <__aeabi_fmul>
 800cabe:	4639      	mov	r1, r7
 800cac0:	4604      	mov	r4, r0
 800cac2:	4648      	mov	r0, r9
 800cac4:	f7f3 fba2 	bl	800020c <__addsf3>
 800cac8:	4988      	ldr	r1, [pc, #544]	; (800ccec <arm_radix8_butterfly_f32+0x96c>)
 800caca:	f7f3 fca7 	bl	800041c <__aeabi_fmul>
 800cace:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800cad2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800cad4:	4607      	mov	r7, r0
 800cad6:	4641      	mov	r1, r8
 800cad8:	4630      	mov	r0, r6
 800cada:	f7f3 fb95 	bl	8000208 <__aeabi_fsub>
 800cade:	4983      	ldr	r1, [pc, #524]	; (800ccec <arm_radix8_butterfly_f32+0x96c>)
 800cae0:	f7f3 fc9c 	bl	800041c <__aeabi_fmul>
 800cae4:	4641      	mov	r1, r8
 800cae6:	4681      	mov	r9, r0
 800cae8:	4630      	mov	r0, r6
 800caea:	f7f3 fb8f 	bl	800020c <__addsf3>
 800caee:	497f      	ldr	r1, [pc, #508]	; (800ccec <arm_radix8_butterfly_f32+0x96c>)
 800caf0:	f7f3 fc94 	bl	800041c <__aeabi_fmul>
 800caf4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800caf6:	4605      	mov	r5, r0
 800caf8:	4621      	mov	r1, r4
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7f3 fb84 	bl	8000208 <__aeabi_fsub>
 800cb00:	4621      	mov	r1, r4
 800cb02:	9002      	str	r0, [sp, #8]
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7f3 fb81 	bl	800020c <__addsf3>
 800cb0a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800cb0e:	4604      	mov	r4, r0
 800cb10:	4639      	mov	r1, r7
 800cb12:	4640      	mov	r0, r8
 800cb14:	f7f3 fb78 	bl	8000208 <__aeabi_fsub>
 800cb18:	4639      	mov	r1, r7
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	4640      	mov	r0, r8
 800cb1e:	f7f3 fb75 	bl	800020c <__addsf3>
 800cb22:	4649      	mov	r1, r9
 800cb24:	4680      	mov	r8, r0
 800cb26:	9803      	ldr	r0, [sp, #12]
 800cb28:	f7f3 fb6e 	bl	8000208 <__aeabi_fsub>
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4607      	mov	r7, r0
 800cb30:	9803      	ldr	r0, [sp, #12]
 800cb32:	f7f3 fb6b 	bl	800020c <__addsf3>
 800cb36:	4629      	mov	r1, r5
 800cb38:	4681      	mov	r9, r0
 800cb3a:	9804      	ldr	r0, [sp, #16]
 800cb3c:	f7f3 fb64 	bl	8000208 <__aeabi_fsub>
 800cb40:	4629      	mov	r1, r5
 800cb42:	9003      	str	r0, [sp, #12]
 800cb44:	9804      	ldr	r0, [sp, #16]
 800cb46:	f7f3 fb61 	bl	800020c <__addsf3>
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	9004      	str	r0, [sp, #16]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f7f3 fb5c 	bl	800020c <__addsf3>
 800cb54:	9b04      	ldr	r3, [sp, #16]
 800cb56:	4605      	mov	r5, r0
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f7f3 fb54 	bl	8000208 <__aeabi_fsub>
 800cb60:	9903      	ldr	r1, [sp, #12]
 800cb62:	4604      	mov	r4, r0
 800cb64:	9802      	ldr	r0, [sp, #8]
 800cb66:	f7f3 fb51 	bl	800020c <__addsf3>
 800cb6a:	9903      	ldr	r1, [sp, #12]
 800cb6c:	9004      	str	r0, [sp, #16]
 800cb6e:	9802      	ldr	r0, [sp, #8]
 800cb70:	f7f3 fb4a 	bl	8000208 <__aeabi_fsub>
 800cb74:	4641      	mov	r1, r8
 800cb76:	9003      	str	r0, [sp, #12]
 800cb78:	4648      	mov	r0, r9
 800cb7a:	f7f3 fb45 	bl	8000208 <__aeabi_fsub>
 800cb7e:	4649      	mov	r1, r9
 800cb80:	9002      	str	r0, [sp, #8]
 800cb82:	4640      	mov	r0, r8
 800cb84:	f7f3 fb42 	bl	800020c <__addsf3>
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	f7f3 fb3b 	bl	8000208 <__aeabi_fsub>
 800cb92:	4639      	mov	r1, r7
 800cb94:	4680      	mov	r8, r0
 800cb96:	4630      	mov	r0, r6
 800cb98:	f7f3 fb38 	bl	800020c <__addsf3>
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4606      	mov	r6, r0
 800cba0:	9805      	ldr	r0, [sp, #20]
 800cba2:	f7f3 fc3b 	bl	800041c <__aeabi_fmul>
 800cba6:	9902      	ldr	r1, [sp, #8]
 800cba8:	4607      	mov	r7, r0
 800cbaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbac:	f7f3 fc36 	bl	800041c <__aeabi_fmul>
 800cbb0:	4601      	mov	r1, r0
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	f7f3 fb2a 	bl	800020c <__addsf3>
 800cbb8:	9a00      	ldr	r2, [sp, #0]
 800cbba:	9902      	ldr	r1, [sp, #8]
 800cbbc:	f842 000b 	str.w	r0, [r2, fp]
 800cbc0:	9805      	ldr	r0, [sp, #20]
 800cbc2:	f7f3 fc2b 	bl	800041c <__aeabi_fmul>
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4607      	mov	r7, r0
 800cbca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbcc:	f7f3 fc26 	bl	800041c <__aeabi_fmul>
 800cbd0:	4601      	mov	r1, r0
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7f3 fb18 	bl	8000208 <__aeabi_fsub>
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	4621      	mov	r1, r4
 800cbdc:	f843 000b 	str.w	r0, [r3, fp]
 800cbe0:	9808      	ldr	r0, [sp, #32]
 800cbe2:	f7f3 fc1b 	bl	800041c <__aeabi_fmul>
 800cbe6:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800cbe8:	4605      	mov	r5, r0
 800cbea:	4649      	mov	r1, r9
 800cbec:	4638      	mov	r0, r7
 800cbee:	f7f3 fc15 	bl	800041c <__aeabi_fmul>
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	f7f3 fb09 	bl	800020c <__addsf3>
 800cbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	f843 000b 	str.w	r0, [r3, fp]
 800cc02:	9808      	ldr	r0, [sp, #32]
 800cc04:	f7f3 fc0a 	bl	800041c <__aeabi_fmul>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f7f3 fc05 	bl	800041c <__aeabi_fmul>
 800cc12:	4601      	mov	r1, r0
 800cc14:	4628      	mov	r0, r5
 800cc16:	f7f3 faf7 	bl	8000208 <__aeabi_fsub>
 800cc1a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cc1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800cc20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cc22:	4649      	mov	r1, r9
 800cc24:	f845 000b 	str.w	r0, [r5, fp]
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f7f3 fbf7 	bl	800041c <__aeabi_fmul>
 800cc2e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800cc30:	4604      	mov	r4, r0
 800cc32:	4641      	mov	r1, r8
 800cc34:	4628      	mov	r0, r5
 800cc36:	f7f3 fbf1 	bl	800041c <__aeabi_fmul>
 800cc3a:	4601      	mov	r1, r0
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f7f3 fae5 	bl	800020c <__addsf3>
 800cc42:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800cc44:	4641      	mov	r1, r8
 800cc46:	f843 000b 	str.w	r0, [r3, fp]
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f7f3 fbe6 	bl	800041c <__aeabi_fmul>
 800cc50:	4649      	mov	r1, r9
 800cc52:	4604      	mov	r4, r0
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7f3 fbe1 	bl	800041c <__aeabi_fmul>
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f7f3 fad3 	bl	8000208 <__aeabi_fsub>
 800cc62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cc64:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cc68:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800cc6a:	f843 000b 	str.w	r0, [r3, fp]
 800cc6e:	4641      	mov	r1, r8
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7f3 fbd3 	bl	800041c <__aeabi_fmul>
 800cc76:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800cc78:	4604      	mov	r4, r0
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7f3 fbcd 	bl	800041c <__aeabi_fmul>
 800cc82:	4601      	mov	r1, r0
 800cc84:	4620      	mov	r0, r4
 800cc86:	f7f3 fac1 	bl	800020c <__addsf3>
 800cc8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	f843 000b 	str.w	r0, [r3, fp]
 800cc92:	4638      	mov	r0, r7
 800cc94:	f7f3 fbc2 	bl	800041c <__aeabi_fmul>
 800cc98:	4641      	mov	r1, r8
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f7f3 fbbd 	bl	800041c <__aeabi_fmul>
 800cca2:	4601      	mov	r1, r0
 800cca4:	4620      	mov	r0, r4
 800cca6:	f7f3 faaf 	bl	8000208 <__aeabi_fsub>
 800ccaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ccac:	449a      	add	sl, r3
 800ccae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ccb0:	f843 000b 	str.w	r0, [r3, fp]
 800ccb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccb6:	449b      	add	fp, r3
 800ccb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ccba:	4553      	cmp	r3, sl
 800ccbc:	f63f adb8 	bhi.w	800c830 <arm_radix8_butterfly_f32+0x4b0>
 800ccc0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ccc2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ccc4:	3208      	adds	r2, #8
 800ccc6:	9232      	str	r2, [sp, #200]	; 0xc8
 800ccc8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800ccca:	3301      	adds	r3, #1
 800cccc:	429a      	cmp	r2, r3
 800ccce:	9331      	str	r3, [sp, #196]	; 0xc4
 800ccd0:	f47f ad6e 	bne.w	800c7b0 <arm_radix8_butterfly_f32+0x430>
 800ccd4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800ccd6:	9216      	str	r2, [sp, #88]	; 0x58
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	9336      	str	r3, [sp, #216]	; 0xd8
 800ccde:	4613      	mov	r3, r2
 800cce0:	f7ff bb5d 	b.w	800c39e <arm_radix8_butterfly_f32+0x1e>
 800cce4:	b039      	add	sp, #228	; 0xe4
 800cce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccea:	bf00      	nop
 800ccec:	3f3504f3 	.word	0x3f3504f3

0800ccf0 <malloc>:
 800ccf0:	4b02      	ldr	r3, [pc, #8]	; (800ccfc <malloc+0xc>)
 800ccf2:	4601      	mov	r1, r0
 800ccf4:	6818      	ldr	r0, [r3, #0]
 800ccf6:	f000 b82b 	b.w	800cd50 <_malloc_r>
 800ccfa:	bf00      	nop
 800ccfc:	20000104 	.word	0x20000104

0800cd00 <free>:
 800cd00:	4b02      	ldr	r3, [pc, #8]	; (800cd0c <free+0xc>)
 800cd02:	4601      	mov	r1, r0
 800cd04:	6818      	ldr	r0, [r3, #0]
 800cd06:	f000 b901 	b.w	800cf0c <_free_r>
 800cd0a:	bf00      	nop
 800cd0c:	20000104 	.word	0x20000104

0800cd10 <sbrk_aligned>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	4e0e      	ldr	r6, [pc, #56]	; (800cd4c <sbrk_aligned+0x3c>)
 800cd14:	460c      	mov	r4, r1
 800cd16:	6831      	ldr	r1, [r6, #0]
 800cd18:	4605      	mov	r5, r0
 800cd1a:	b911      	cbnz	r1, 800cd22 <sbrk_aligned+0x12>
 800cd1c:	f000 f8ac 	bl	800ce78 <_sbrk_r>
 800cd20:	6030      	str	r0, [r6, #0]
 800cd22:	4621      	mov	r1, r4
 800cd24:	4628      	mov	r0, r5
 800cd26:	f000 f8a7 	bl	800ce78 <_sbrk_r>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	d00a      	beq.n	800cd44 <sbrk_aligned+0x34>
 800cd2e:	1cc4      	adds	r4, r0, #3
 800cd30:	f024 0403 	bic.w	r4, r4, #3
 800cd34:	42a0      	cmp	r0, r4
 800cd36:	d007      	beq.n	800cd48 <sbrk_aligned+0x38>
 800cd38:	1a21      	subs	r1, r4, r0
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 f89c 	bl	800ce78 <_sbrk_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	d101      	bne.n	800cd48 <sbrk_aligned+0x38>
 800cd44:	f04f 34ff 	mov.w	r4, #4294967295
 800cd48:	4620      	mov	r0, r4
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
 800cd4c:	20001958 	.word	0x20001958

0800cd50 <_malloc_r>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	1ccd      	adds	r5, r1, #3
 800cd56:	f025 0503 	bic.w	r5, r5, #3
 800cd5a:	3508      	adds	r5, #8
 800cd5c:	2d0c      	cmp	r5, #12
 800cd5e:	bf38      	it	cc
 800cd60:	250c      	movcc	r5, #12
 800cd62:	2d00      	cmp	r5, #0
 800cd64:	4607      	mov	r7, r0
 800cd66:	db01      	blt.n	800cd6c <_malloc_r+0x1c>
 800cd68:	42a9      	cmp	r1, r5
 800cd6a:	d905      	bls.n	800cd78 <_malloc_r+0x28>
 800cd6c:	230c      	movs	r3, #12
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	2600      	movs	r6, #0
 800cd72:	4630      	mov	r0, r6
 800cd74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce4c <_malloc_r+0xfc>
 800cd7c:	f000 f868 	bl	800ce50 <__malloc_lock>
 800cd80:	f8d8 3000 	ldr.w	r3, [r8]
 800cd84:	461c      	mov	r4, r3
 800cd86:	bb5c      	cbnz	r4, 800cde0 <_malloc_r+0x90>
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f7ff ffc0 	bl	800cd10 <sbrk_aligned>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	4604      	mov	r4, r0
 800cd94:	d155      	bne.n	800ce42 <_malloc_r+0xf2>
 800cd96:	f8d8 4000 	ldr.w	r4, [r8]
 800cd9a:	4626      	mov	r6, r4
 800cd9c:	2e00      	cmp	r6, #0
 800cd9e:	d145      	bne.n	800ce2c <_malloc_r+0xdc>
 800cda0:	2c00      	cmp	r4, #0
 800cda2:	d048      	beq.n	800ce36 <_malloc_r+0xe6>
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	4631      	mov	r1, r6
 800cda8:	4638      	mov	r0, r7
 800cdaa:	eb04 0903 	add.w	r9, r4, r3
 800cdae:	f000 f863 	bl	800ce78 <_sbrk_r>
 800cdb2:	4581      	cmp	r9, r0
 800cdb4:	d13f      	bne.n	800ce36 <_malloc_r+0xe6>
 800cdb6:	6821      	ldr	r1, [r4, #0]
 800cdb8:	1a6d      	subs	r5, r5, r1
 800cdba:	4629      	mov	r1, r5
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	f7ff ffa7 	bl	800cd10 <sbrk_aligned>
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	d037      	beq.n	800ce36 <_malloc_r+0xe6>
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	442b      	add	r3, r5
 800cdca:	6023      	str	r3, [r4, #0]
 800cdcc:	f8d8 3000 	ldr.w	r3, [r8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d038      	beq.n	800ce46 <_malloc_r+0xf6>
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	42a2      	cmp	r2, r4
 800cdd8:	d12b      	bne.n	800ce32 <_malloc_r+0xe2>
 800cdda:	2200      	movs	r2, #0
 800cddc:	605a      	str	r2, [r3, #4]
 800cdde:	e00f      	b.n	800ce00 <_malloc_r+0xb0>
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	1b52      	subs	r2, r2, r5
 800cde4:	d41f      	bmi.n	800ce26 <_malloc_r+0xd6>
 800cde6:	2a0b      	cmp	r2, #11
 800cde8:	d917      	bls.n	800ce1a <_malloc_r+0xca>
 800cdea:	1961      	adds	r1, r4, r5
 800cdec:	42a3      	cmp	r3, r4
 800cdee:	6025      	str	r5, [r4, #0]
 800cdf0:	bf18      	it	ne
 800cdf2:	6059      	strne	r1, [r3, #4]
 800cdf4:	6863      	ldr	r3, [r4, #4]
 800cdf6:	bf08      	it	eq
 800cdf8:	f8c8 1000 	streq.w	r1, [r8]
 800cdfc:	5162      	str	r2, [r4, r5]
 800cdfe:	604b      	str	r3, [r1, #4]
 800ce00:	4638      	mov	r0, r7
 800ce02:	f104 060b 	add.w	r6, r4, #11
 800ce06:	f000 f829 	bl	800ce5c <__malloc_unlock>
 800ce0a:	f026 0607 	bic.w	r6, r6, #7
 800ce0e:	1d23      	adds	r3, r4, #4
 800ce10:	1af2      	subs	r2, r6, r3
 800ce12:	d0ae      	beq.n	800cd72 <_malloc_r+0x22>
 800ce14:	1b9b      	subs	r3, r3, r6
 800ce16:	50a3      	str	r3, [r4, r2]
 800ce18:	e7ab      	b.n	800cd72 <_malloc_r+0x22>
 800ce1a:	42a3      	cmp	r3, r4
 800ce1c:	6862      	ldr	r2, [r4, #4]
 800ce1e:	d1dd      	bne.n	800cddc <_malloc_r+0x8c>
 800ce20:	f8c8 2000 	str.w	r2, [r8]
 800ce24:	e7ec      	b.n	800ce00 <_malloc_r+0xb0>
 800ce26:	4623      	mov	r3, r4
 800ce28:	6864      	ldr	r4, [r4, #4]
 800ce2a:	e7ac      	b.n	800cd86 <_malloc_r+0x36>
 800ce2c:	4634      	mov	r4, r6
 800ce2e:	6876      	ldr	r6, [r6, #4]
 800ce30:	e7b4      	b.n	800cd9c <_malloc_r+0x4c>
 800ce32:	4613      	mov	r3, r2
 800ce34:	e7cc      	b.n	800cdd0 <_malloc_r+0x80>
 800ce36:	230c      	movs	r3, #12
 800ce38:	603b      	str	r3, [r7, #0]
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	f000 f80e 	bl	800ce5c <__malloc_unlock>
 800ce40:	e797      	b.n	800cd72 <_malloc_r+0x22>
 800ce42:	6025      	str	r5, [r4, #0]
 800ce44:	e7dc      	b.n	800ce00 <_malloc_r+0xb0>
 800ce46:	605b      	str	r3, [r3, #4]
 800ce48:	deff      	udf	#255	; 0xff
 800ce4a:	bf00      	nop
 800ce4c:	20001954 	.word	0x20001954

0800ce50 <__malloc_lock>:
 800ce50:	4801      	ldr	r0, [pc, #4]	; (800ce58 <__malloc_lock+0x8>)
 800ce52:	f000 b84b 	b.w	800ceec <__retarget_lock_acquire_recursive>
 800ce56:	bf00      	nop
 800ce58:	20001a98 	.word	0x20001a98

0800ce5c <__malloc_unlock>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__malloc_unlock+0x8>)
 800ce5e:	f000 b846 	b.w	800ceee <__retarget_lock_release_recursive>
 800ce62:	bf00      	nop
 800ce64:	20001a98 	.word	0x20001a98

0800ce68 <memset>:
 800ce68:	4402      	add	r2, r0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d100      	bne.n	800ce72 <memset+0xa>
 800ce70:	4770      	bx	lr
 800ce72:	f803 1b01 	strb.w	r1, [r3], #1
 800ce76:	e7f9      	b.n	800ce6c <memset+0x4>

0800ce78 <_sbrk_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d06      	ldr	r5, [pc, #24]	; (800ce94 <_sbrk_r+0x1c>)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	602b      	str	r3, [r5, #0]
 800ce84:	f7f3 fcba 	bl	80007fc <_sbrk>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_sbrk_r+0x1a>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_sbrk_r+0x1a>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	20001a94 	.word	0x20001a94

0800ce98 <__errno>:
 800ce98:	4b01      	ldr	r3, [pc, #4]	; (800cea0 <__errno+0x8>)
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	20000104 	.word	0x20000104

0800cea4 <__libc_init_array>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4d0d      	ldr	r5, [pc, #52]	; (800cedc <__libc_init_array+0x38>)
 800cea8:	4c0d      	ldr	r4, [pc, #52]	; (800cee0 <__libc_init_array+0x3c>)
 800ceaa:	1b64      	subs	r4, r4, r5
 800ceac:	10a4      	asrs	r4, r4, #2
 800ceae:	2600      	movs	r6, #0
 800ceb0:	42a6      	cmp	r6, r4
 800ceb2:	d109      	bne.n	800cec8 <__libc_init_array+0x24>
 800ceb4:	4d0b      	ldr	r5, [pc, #44]	; (800cee4 <__libc_init_array+0x40>)
 800ceb6:	4c0c      	ldr	r4, [pc, #48]	; (800cee8 <__libc_init_array+0x44>)
 800ceb8:	f000 f89e 	bl	800cff8 <_init>
 800cebc:	1b64      	subs	r4, r4, r5
 800cebe:	10a4      	asrs	r4, r4, #2
 800cec0:	2600      	movs	r6, #0
 800cec2:	42a6      	cmp	r6, r4
 800cec4:	d105      	bne.n	800ced2 <__libc_init_array+0x2e>
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cecc:	4798      	blx	r3
 800cece:	3601      	adds	r6, #1
 800ced0:	e7ee      	b.n	800ceb0 <__libc_init_array+0xc>
 800ced2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced6:	4798      	blx	r3
 800ced8:	3601      	adds	r6, #1
 800ceda:	e7f2      	b.n	800cec2 <__libc_init_array+0x1e>
 800cedc:	08020170 	.word	0x08020170
 800cee0:	08020170 	.word	0x08020170
 800cee4:	08020170 	.word	0x08020170
 800cee8:	08020174 	.word	0x08020174

0800ceec <__retarget_lock_acquire_recursive>:
 800ceec:	4770      	bx	lr

0800ceee <__retarget_lock_release_recursive>:
 800ceee:	4770      	bx	lr

0800cef0 <memcpy>:
 800cef0:	440a      	add	r2, r1
 800cef2:	4291      	cmp	r1, r2
 800cef4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cef8:	d100      	bne.n	800cefc <memcpy+0xc>
 800cefa:	4770      	bx	lr
 800cefc:	b510      	push	{r4, lr}
 800cefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf06:	4291      	cmp	r1, r2
 800cf08:	d1f9      	bne.n	800cefe <memcpy+0xe>
 800cf0a:	bd10      	pop	{r4, pc}

0800cf0c <_free_r>:
 800cf0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	d044      	beq.n	800cf9c <_free_r+0x90>
 800cf12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf16:	9001      	str	r0, [sp, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf1e:	bfb8      	it	lt
 800cf20:	18e4      	addlt	r4, r4, r3
 800cf22:	f7ff ff95 	bl	800ce50 <__malloc_lock>
 800cf26:	4a1e      	ldr	r2, [pc, #120]	; (800cfa0 <_free_r+0x94>)
 800cf28:	9801      	ldr	r0, [sp, #4]
 800cf2a:	6813      	ldr	r3, [r2, #0]
 800cf2c:	b933      	cbnz	r3, 800cf3c <_free_r+0x30>
 800cf2e:	6063      	str	r3, [r4, #4]
 800cf30:	6014      	str	r4, [r2, #0]
 800cf32:	b003      	add	sp, #12
 800cf34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf38:	f7ff bf90 	b.w	800ce5c <__malloc_unlock>
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d908      	bls.n	800cf52 <_free_r+0x46>
 800cf40:	6825      	ldr	r5, [r4, #0]
 800cf42:	1961      	adds	r1, r4, r5
 800cf44:	428b      	cmp	r3, r1
 800cf46:	bf01      	itttt	eq
 800cf48:	6819      	ldreq	r1, [r3, #0]
 800cf4a:	685b      	ldreq	r3, [r3, #4]
 800cf4c:	1949      	addeq	r1, r1, r5
 800cf4e:	6021      	streq	r1, [r4, #0]
 800cf50:	e7ed      	b.n	800cf2e <_free_r+0x22>
 800cf52:	461a      	mov	r2, r3
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	b10b      	cbz	r3, 800cf5c <_free_r+0x50>
 800cf58:	42a3      	cmp	r3, r4
 800cf5a:	d9fa      	bls.n	800cf52 <_free_r+0x46>
 800cf5c:	6811      	ldr	r1, [r2, #0]
 800cf5e:	1855      	adds	r5, r2, r1
 800cf60:	42a5      	cmp	r5, r4
 800cf62:	d10b      	bne.n	800cf7c <_free_r+0x70>
 800cf64:	6824      	ldr	r4, [r4, #0]
 800cf66:	4421      	add	r1, r4
 800cf68:	1854      	adds	r4, r2, r1
 800cf6a:	42a3      	cmp	r3, r4
 800cf6c:	6011      	str	r1, [r2, #0]
 800cf6e:	d1e0      	bne.n	800cf32 <_free_r+0x26>
 800cf70:	681c      	ldr	r4, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	6053      	str	r3, [r2, #4]
 800cf76:	440c      	add	r4, r1
 800cf78:	6014      	str	r4, [r2, #0]
 800cf7a:	e7da      	b.n	800cf32 <_free_r+0x26>
 800cf7c:	d902      	bls.n	800cf84 <_free_r+0x78>
 800cf7e:	230c      	movs	r3, #12
 800cf80:	6003      	str	r3, [r0, #0]
 800cf82:	e7d6      	b.n	800cf32 <_free_r+0x26>
 800cf84:	6825      	ldr	r5, [r4, #0]
 800cf86:	1961      	adds	r1, r4, r5
 800cf88:	428b      	cmp	r3, r1
 800cf8a:	bf04      	itt	eq
 800cf8c:	6819      	ldreq	r1, [r3, #0]
 800cf8e:	685b      	ldreq	r3, [r3, #4]
 800cf90:	6063      	str	r3, [r4, #4]
 800cf92:	bf04      	itt	eq
 800cf94:	1949      	addeq	r1, r1, r5
 800cf96:	6021      	streq	r1, [r4, #0]
 800cf98:	6054      	str	r4, [r2, #4]
 800cf9a:	e7ca      	b.n	800cf32 <_free_r+0x26>
 800cf9c:	b003      	add	sp, #12
 800cf9e:	bd30      	pop	{r4, r5, pc}
 800cfa0:	20001954 	.word	0x20001954

0800cfa4 <sqrtf>:
 800cfa4:	b508      	push	{r3, lr}
 800cfa6:	ed2d 8b02 	vpush	{d8}
 800cfaa:	ee08 0a10 	vmov	s16, r0
 800cfae:	f000 f81b 	bl	800cfe8 <__ieee754_sqrtf>
 800cfb2:	eeb4 8a48 	vcmp.f32	s16, s16
 800cfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfba:	ee07 0a90 	vmov	s15, r0
 800cfbe:	d60c      	bvs.n	800cfda <sqrtf+0x36>
 800cfc0:	eddf 8a08 	vldr	s17, [pc, #32]	; 800cfe4 <sqrtf+0x40>
 800cfc4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	d505      	bpl.n	800cfda <sqrtf+0x36>
 800cfce:	f7ff ff63 	bl	800ce98 <__errno>
 800cfd2:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800cfd6:	2321      	movs	r3, #33	; 0x21
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	ecbd 8b02 	vpop	{d8}
 800cfde:	ee17 0a90 	vmov	r0, s15
 800cfe2:	bd08      	pop	{r3, pc}
 800cfe4:	00000000 	.word	0x00000000

0800cfe8 <__ieee754_sqrtf>:
 800cfe8:	ee07 0a90 	vmov	s15, r0
 800cfec:	eef1 7ae7 	vsqrt.f32	s15, s15
 800cff0:	ee17 0a90 	vmov	r0, s15
 800cff4:	4770      	bx	lr
	...

0800cff8 <_init>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	bf00      	nop
 800cffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffe:	bc08      	pop	{r3}
 800d000:	469e      	mov	lr, r3
 800d002:	4770      	bx	lr

0800d004 <_fini>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	bf00      	nop
 800d008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00a:	bc08      	pop	{r3}
 800d00c:	469e      	mov	lr, r3
 800d00e:	4770      	bx	lr
