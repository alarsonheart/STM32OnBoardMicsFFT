
OnBoardMics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe8  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013160  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020308  08020308  00040108  2**0
                  CONTENTS
  4 .ARM          00000000  08020308  08020308  00040108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08020308  08020308  00040108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020308  08020308  00030308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020310  08020310  00030310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08020318  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011504  20000108  08020420  00040108  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2001160c  08020420  0004160c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00040136  2**0
                  CONTENTS, READONLY
 13 .debug_line   0002ac54  00000000  00000000  000401ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000164  00000000  00000000  0006ae42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00024e18  00000000  00000000  0006afa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005475  00000000  00000000  0008fdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001940  00000000  00000000  00095238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ce1f  00000000  00000000  00096b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000120d  00000000  00000000  00213997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00040e13  00000000  00000000  00214ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c2c  00000000  00000000  002559b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004120  00000000  00000000  0025c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000170  00000000  00000000  00260704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000108 	.word	0x20000108
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d190 	.word	0x0800d190

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	0800d190 	.word	0x0800d190

08000200 <__aeabi_frsub>:
 8000200:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__addsf3>
 8000206:	bf00      	nop

08000208 <__aeabi_fsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800020c <__addsf3>:
 800020c:	0042      	lsls	r2, r0, #1
 800020e:	bf1f      	itttt	ne
 8000210:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000214:	ea92 0f03 	teqne	r2, r3
 8000218:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800021c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000220:	d06a      	beq.n	80002f8 <__addsf3+0xec>
 8000222:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000226:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022a:	bfc1      	itttt	gt
 800022c:	18d2      	addgt	r2, r2, r3
 800022e:	4041      	eorgt	r1, r0
 8000230:	4048      	eorgt	r0, r1
 8000232:	4041      	eorgt	r1, r0
 8000234:	bfb8      	it	lt
 8000236:	425b      	neglt	r3, r3
 8000238:	2b19      	cmp	r3, #25
 800023a:	bf88      	it	hi
 800023c:	4770      	bxhi	lr
 800023e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000246:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800024a:	bf18      	it	ne
 800024c:	4240      	negne	r0, r0
 800024e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000252:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000256:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4249      	negne	r1, r1
 800025e:	ea92 0f03 	teq	r2, r3
 8000262:	d03f      	beq.n	80002e4 <__addsf3+0xd8>
 8000264:	f1a2 0201 	sub.w	r2, r2, #1
 8000268:	fa41 fc03 	asr.w	ip, r1, r3
 800026c:	eb10 000c 	adds.w	r0, r0, ip
 8000270:	f1c3 0320 	rsb	r3, r3, #32
 8000274:	fa01 f103 	lsl.w	r1, r1, r3
 8000278:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800027c:	d502      	bpl.n	8000284 <__addsf3+0x78>
 800027e:	4249      	negs	r1, r1
 8000280:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000288:	d313      	bcc.n	80002b2 <__addsf3+0xa6>
 800028a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028e:	d306      	bcc.n	800029e <__addsf3+0x92>
 8000290:	0840      	lsrs	r0, r0, #1
 8000292:	ea4f 0131 	mov.w	r1, r1, rrx
 8000296:	f102 0201 	add.w	r2, r2, #1
 800029a:	2afe      	cmp	r2, #254	; 0xfe
 800029c:	d251      	bcs.n	8000342 <__addsf3+0x136>
 800029e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	ea40 0003 	orr.w	r0, r0, r3
 80002b0:	4770      	bx	lr
 80002b2:	0049      	lsls	r1, r1, #1
 80002b4:	eb40 0000 	adc.w	r0, r0, r0
 80002b8:	3a01      	subs	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c0:	d2ed      	bcs.n	800029e <__addsf3+0x92>
 80002c2:	fab0 fc80 	clz	ip, r0
 80002c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ca:	ebb2 020c 	subs.w	r2, r2, ip
 80002ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d2:	bfaa      	itet	ge
 80002d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002d8:	4252      	neglt	r2, r2
 80002da:	4318      	orrge	r0, r3
 80002dc:	bfbc      	itt	lt
 80002de:	40d0      	lsrlt	r0, r2
 80002e0:	4318      	orrlt	r0, r3
 80002e2:	4770      	bx	lr
 80002e4:	f092 0f00 	teq	r2, #0
 80002e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002ec:	bf06      	itte	eq
 80002ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002f2:	3201      	addeq	r2, #1
 80002f4:	3b01      	subne	r3, #1
 80002f6:	e7b5      	b.n	8000264 <__addsf3+0x58>
 80002f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000300:	bf18      	it	ne
 8000302:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000306:	d021      	beq.n	800034c <__addsf3+0x140>
 8000308:	ea92 0f03 	teq	r2, r3
 800030c:	d004      	beq.n	8000318 <__addsf3+0x10c>
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	bf08      	it	eq
 8000314:	4608      	moveq	r0, r1
 8000316:	4770      	bx	lr
 8000318:	ea90 0f01 	teq	r0, r1
 800031c:	bf1c      	itt	ne
 800031e:	2000      	movne	r0, #0
 8000320:	4770      	bxne	lr
 8000322:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000326:	d104      	bne.n	8000332 <__addsf3+0x126>
 8000328:	0040      	lsls	r0, r0, #1
 800032a:	bf28      	it	cs
 800032c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000330:	4770      	bx	lr
 8000332:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000336:	bf3c      	itt	cc
 8000338:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800033c:	4770      	bxcc	lr
 800033e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000342:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000346:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034a:	4770      	bx	lr
 800034c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000350:	bf16      	itet	ne
 8000352:	4608      	movne	r0, r1
 8000354:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000358:	4601      	movne	r1, r0
 800035a:	0242      	lsls	r2, r0, #9
 800035c:	bf06      	itte	eq
 800035e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000362:	ea90 0f01 	teqeq	r0, r1
 8000366:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800036a:	4770      	bx	lr

0800036c <__aeabi_ui2f>:
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e004      	b.n	800037c <__aeabi_i2f+0x8>
 8000372:	bf00      	nop

08000374 <__aeabi_i2f>:
 8000374:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000378:	bf48      	it	mi
 800037a:	4240      	negmi	r0, r0
 800037c:	ea5f 0c00 	movs.w	ip, r0
 8000380:	bf08      	it	eq
 8000382:	4770      	bxeq	lr
 8000384:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000388:	4601      	mov	r1, r0
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	e01c      	b.n	80003ca <__aeabi_l2f+0x2a>

08000390 <__aeabi_ul2f>:
 8000390:	ea50 0201 	orrs.w	r2, r0, r1
 8000394:	bf08      	it	eq
 8000396:	4770      	bxeq	lr
 8000398:	f04f 0300 	mov.w	r3, #0
 800039c:	e00a      	b.n	80003b4 <__aeabi_l2f+0x14>
 800039e:	bf00      	nop

080003a0 <__aeabi_l2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003ac:	d502      	bpl.n	80003b4 <__aeabi_l2f+0x14>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	ea5f 0c01 	movs.w	ip, r1
 80003b8:	bf02      	ittt	eq
 80003ba:	4684      	moveq	ip, r0
 80003bc:	4601      	moveq	r1, r0
 80003be:	2000      	moveq	r0, #0
 80003c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003c4:	bf08      	it	eq
 80003c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ce:	fabc f28c 	clz	r2, ip
 80003d2:	3a08      	subs	r2, #8
 80003d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003d8:	db10      	blt.n	80003fc <__aeabi_l2f+0x5c>
 80003da:	fa01 fc02 	lsl.w	ip, r1, r2
 80003de:	4463      	add	r3, ip
 80003e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	fa20 f202 	lsr.w	r2, r0, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	f020 0001 	biceq.w	r0, r0, #1
 80003fa:	4770      	bx	lr
 80003fc:	f102 0220 	add.w	r2, r2, #32
 8000400:	fa01 fc02 	lsl.w	ip, r1, r2
 8000404:	f1c2 0220 	rsb	r2, r2, #32
 8000408:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800040c:	fa21 f202 	lsr.w	r2, r1, r2
 8000410:	eb43 0002 	adc.w	r0, r3, r2
 8000414:	bf08      	it	eq
 8000416:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041a:	4770      	bx	lr

0800041c <__aeabi_fmul>:
 800041c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000424:	bf1e      	ittt	ne
 8000426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800042a:	ea92 0f0c 	teqne	r2, ip
 800042e:	ea93 0f0c 	teqne	r3, ip
 8000432:	d06f      	beq.n	8000514 <__aeabi_fmul+0xf8>
 8000434:	441a      	add	r2, r3
 8000436:	ea80 0c01 	eor.w	ip, r0, r1
 800043a:	0240      	lsls	r0, r0, #9
 800043c:	bf18      	it	ne
 800043e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000442:	d01e      	beq.n	8000482 <__aeabi_fmul+0x66>
 8000444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000448:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800044c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000450:	fba0 3101 	umull	r3, r1, r0, r1
 8000454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000458:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800045c:	bf3e      	ittt	cc
 800045e:	0049      	lslcc	r1, r1, #1
 8000460:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000464:	005b      	lslcc	r3, r3, #1
 8000466:	ea40 0001 	orr.w	r0, r0, r1
 800046a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800046e:	2afd      	cmp	r2, #253	; 0xfd
 8000470:	d81d      	bhi.n	80004ae <__aeabi_fmul+0x92>
 8000472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000476:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800047a:	bf08      	it	eq
 800047c:	f020 0001 	biceq.w	r0, r0, #1
 8000480:	4770      	bx	lr
 8000482:	f090 0f00 	teq	r0, #0
 8000486:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800048a:	bf08      	it	eq
 800048c:	0249      	lsleq	r1, r1, #9
 800048e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000492:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000496:	3a7f      	subs	r2, #127	; 0x7f
 8000498:	bfc2      	ittt	gt
 800049a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800049e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004a2:	4770      	bxgt	lr
 80004a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	3a01      	subs	r2, #1
 80004ae:	dc5d      	bgt.n	800056c <__aeabi_fmul+0x150>
 80004b0:	f112 0f19 	cmn.w	r2, #25
 80004b4:	bfdc      	itt	le
 80004b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ba:	4770      	bxle	lr
 80004bc:	f1c2 0200 	rsb	r2, r2, #0
 80004c0:	0041      	lsls	r1, r0, #1
 80004c2:	fa21 f102 	lsr.w	r1, r1, r2
 80004c6:	f1c2 0220 	rsb	r2, r2, #32
 80004ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80004d2:	f140 0000 	adc.w	r0, r0, #0
 80004d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004da:	bf08      	it	eq
 80004dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e0:	4770      	bx	lr
 80004e2:	f092 0f00 	teq	r2, #0
 80004e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ea:	bf02      	ittt	eq
 80004ec:	0040      	lsleq	r0, r0, #1
 80004ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004f2:	3a01      	subeq	r2, #1
 80004f4:	d0f9      	beq.n	80004ea <__aeabi_fmul+0xce>
 80004f6:	ea40 000c 	orr.w	r0, r0, ip
 80004fa:	f093 0f00 	teq	r3, #0
 80004fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000502:	bf02      	ittt	eq
 8000504:	0049      	lsleq	r1, r1, #1
 8000506:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800050a:	3b01      	subeq	r3, #1
 800050c:	d0f9      	beq.n	8000502 <__aeabi_fmul+0xe6>
 800050e:	ea41 010c 	orr.w	r1, r1, ip
 8000512:	e78f      	b.n	8000434 <__aeabi_fmul+0x18>
 8000514:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000518:	ea92 0f0c 	teq	r2, ip
 800051c:	bf18      	it	ne
 800051e:	ea93 0f0c 	teqne	r3, ip
 8000522:	d00a      	beq.n	800053a <__aeabi_fmul+0x11e>
 8000524:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000528:	bf18      	it	ne
 800052a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800052e:	d1d8      	bne.n	80004e2 <__aeabi_fmul+0xc6>
 8000530:	ea80 0001 	eor.w	r0, r0, r1
 8000534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f090 0f00 	teq	r0, #0
 800053e:	bf17      	itett	ne
 8000540:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000544:	4608      	moveq	r0, r1
 8000546:	f091 0f00 	teqne	r1, #0
 800054a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800054e:	d014      	beq.n	800057a <__aeabi_fmul+0x15e>
 8000550:	ea92 0f0c 	teq	r2, ip
 8000554:	d101      	bne.n	800055a <__aeabi_fmul+0x13e>
 8000556:	0242      	lsls	r2, r0, #9
 8000558:	d10f      	bne.n	800057a <__aeabi_fmul+0x15e>
 800055a:	ea93 0f0c 	teq	r3, ip
 800055e:	d103      	bne.n	8000568 <__aeabi_fmul+0x14c>
 8000560:	024b      	lsls	r3, r1, #9
 8000562:	bf18      	it	ne
 8000564:	4608      	movne	r0, r1
 8000566:	d108      	bne.n	800057a <__aeabi_fmul+0x15e>
 8000568:	ea80 0001 	eor.w	r0, r0, r1
 800056c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000578:	4770      	bx	lr
 800057a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800057e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000582:	4770      	bx	lr

08000584 <__aeabi_fdiv>:
 8000584:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000588:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800058c:	bf1e      	ittt	ne
 800058e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000592:	ea92 0f0c 	teqne	r2, ip
 8000596:	ea93 0f0c 	teqne	r3, ip
 800059a:	d069      	beq.n	8000670 <__aeabi_fdiv+0xec>
 800059c:	eba2 0203 	sub.w	r2, r2, r3
 80005a0:	ea80 0c01 	eor.w	ip, r0, r1
 80005a4:	0249      	lsls	r1, r1, #9
 80005a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005aa:	d037      	beq.n	800061c <__aeabi_fdiv+0x98>
 80005ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005bc:	428b      	cmp	r3, r1
 80005be:	bf38      	it	cc
 80005c0:	005b      	lslcc	r3, r3, #1
 80005c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ca:	428b      	cmp	r3, r1
 80005cc:	bf24      	itt	cs
 80005ce:	1a5b      	subcs	r3, r3, r1
 80005d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005d8:	bf24      	itt	cs
 80005da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005e6:	bf24      	itt	cs
 80005e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005f4:	bf24      	itt	cs
 80005f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	bf18      	it	ne
 8000602:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000606:	d1e0      	bne.n	80005ca <__aeabi_fdiv+0x46>
 8000608:	2afd      	cmp	r2, #253	; 0xfd
 800060a:	f63f af50 	bhi.w	80004ae <__aeabi_fmul+0x92>
 800060e:	428b      	cmp	r3, r1
 8000610:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000614:	bf08      	it	eq
 8000616:	f020 0001 	biceq.w	r0, r0, #1
 800061a:	4770      	bx	lr
 800061c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000620:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000624:	327f      	adds	r2, #127	; 0x7f
 8000626:	bfc2      	ittt	gt
 8000628:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800062c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000630:	4770      	bxgt	lr
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	3a01      	subs	r2, #1
 800063c:	e737      	b.n	80004ae <__aeabi_fmul+0x92>
 800063e:	f092 0f00 	teq	r2, #0
 8000642:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000646:	bf02      	ittt	eq
 8000648:	0040      	lsleq	r0, r0, #1
 800064a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800064e:	3a01      	subeq	r2, #1
 8000650:	d0f9      	beq.n	8000646 <__aeabi_fdiv+0xc2>
 8000652:	ea40 000c 	orr.w	r0, r0, ip
 8000656:	f093 0f00 	teq	r3, #0
 800065a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800065e:	bf02      	ittt	eq
 8000660:	0049      	lsleq	r1, r1, #1
 8000662:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000666:	3b01      	subeq	r3, #1
 8000668:	d0f9      	beq.n	800065e <__aeabi_fdiv+0xda>
 800066a:	ea41 010c 	orr.w	r1, r1, ip
 800066e:	e795      	b.n	800059c <__aeabi_fdiv+0x18>
 8000670:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000674:	ea92 0f0c 	teq	r2, ip
 8000678:	d108      	bne.n	800068c <__aeabi_fdiv+0x108>
 800067a:	0242      	lsls	r2, r0, #9
 800067c:	f47f af7d 	bne.w	800057a <__aeabi_fmul+0x15e>
 8000680:	ea93 0f0c 	teq	r3, ip
 8000684:	f47f af70 	bne.w	8000568 <__aeabi_fmul+0x14c>
 8000688:	4608      	mov	r0, r1
 800068a:	e776      	b.n	800057a <__aeabi_fmul+0x15e>
 800068c:	ea93 0f0c 	teq	r3, ip
 8000690:	d104      	bne.n	800069c <__aeabi_fdiv+0x118>
 8000692:	024b      	lsls	r3, r1, #9
 8000694:	f43f af4c 	beq.w	8000530 <__aeabi_fmul+0x114>
 8000698:	4608      	mov	r0, r1
 800069a:	e76e      	b.n	800057a <__aeabi_fmul+0x15e>
 800069c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006a0:	bf18      	it	ne
 80006a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006a6:	d1ca      	bne.n	800063e <__aeabi_fdiv+0xba>
 80006a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006ac:	f47f af5c 	bne.w	8000568 <__aeabi_fmul+0x14c>
 80006b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006b4:	f47f af3c 	bne.w	8000530 <__aeabi_fmul+0x114>
 80006b8:	e75f      	b.n	800057a <__aeabi_fmul+0x15e>
 80006ba:	bf00      	nop

080006bc <__gesf2>:
 80006bc:	f04f 3cff 	mov.w	ip, #4294967295
 80006c0:	e006      	b.n	80006d0 <__cmpsf2+0x4>
 80006c2:	bf00      	nop

080006c4 <__lesf2>:
 80006c4:	f04f 0c01 	mov.w	ip, #1
 80006c8:	e002      	b.n	80006d0 <__cmpsf2+0x4>
 80006ca:	bf00      	nop

080006cc <__cmpsf2>:
 80006cc:	f04f 0c01 	mov.w	ip, #1
 80006d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e0:	bf18      	it	ne
 80006e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006e6:	d011      	beq.n	800070c <__cmpsf2+0x40>
 80006e8:	b001      	add	sp, #4
 80006ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006ee:	bf18      	it	ne
 80006f0:	ea90 0f01 	teqne	r0, r1
 80006f4:	bf58      	it	pl
 80006f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80006fa:	bf88      	it	hi
 80006fc:	17c8      	asrhi	r0, r1, #31
 80006fe:	bf38      	it	cc
 8000700:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000704:	bf18      	it	ne
 8000706:	f040 0001 	orrne.w	r0, r0, #1
 800070a:	4770      	bx	lr
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	d102      	bne.n	8000718 <__cmpsf2+0x4c>
 8000712:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000716:	d105      	bne.n	8000724 <__cmpsf2+0x58>
 8000718:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800071c:	d1e4      	bne.n	80006e8 <__cmpsf2+0x1c>
 800071e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000722:	d0e1      	beq.n	80006e8 <__cmpsf2+0x1c>
 8000724:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <__aeabi_cfrcmple>:
 800072c:	4684      	mov	ip, r0
 800072e:	4608      	mov	r0, r1
 8000730:	4661      	mov	r1, ip
 8000732:	e7ff      	b.n	8000734 <__aeabi_cfcmpeq>

08000734 <__aeabi_cfcmpeq>:
 8000734:	b50f      	push	{r0, r1, r2, r3, lr}
 8000736:	f7ff ffc9 	bl	80006cc <__cmpsf2>
 800073a:	2800      	cmp	r0, #0
 800073c:	bf48      	it	mi
 800073e:	f110 0f00 	cmnmi.w	r0, #0
 8000742:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000744 <__aeabi_fcmpeq>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff fff4 	bl	8000734 <__aeabi_cfcmpeq>
 800074c:	bf0c      	ite	eq
 800074e:	2001      	moveq	r0, #1
 8000750:	2000      	movne	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_fcmplt>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff ffea 	bl	8000734 <__aeabi_cfcmpeq>
 8000760:	bf34      	ite	cc
 8000762:	2001      	movcc	r0, #1
 8000764:	2000      	movcs	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_fcmple>:
 800076c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000770:	f7ff ffe0 	bl	8000734 <__aeabi_cfcmpeq>
 8000774:	bf94      	ite	ls
 8000776:	2001      	movls	r0, #1
 8000778:	2000      	movhi	r0, #0
 800077a:	f85d fb08 	ldr.w	pc, [sp], #8
 800077e:	bf00      	nop

08000780 <__aeabi_fcmpge>:
 8000780:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000784:	f7ff ffd2 	bl	800072c <__aeabi_cfrcmple>
 8000788:	bf94      	ite	ls
 800078a:	2001      	movls	r0, #1
 800078c:	2000      	movhi	r0, #0
 800078e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000792:	bf00      	nop

08000794 <__aeabi_fcmpgt>:
 8000794:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000798:	f7ff ffc8 	bl	800072c <__aeabi_cfrcmple>
 800079c:	bf34      	ite	cc
 800079e:	2001      	movcc	r0, #1
 80007a0:	2000      	movcs	r0, #0
 80007a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a6:	bf00      	nop

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ae:	e003      	b.n	80007b8 <LoopCopyDataInit>

080007b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007b6:	3104      	adds	r1, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80007bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007c0:	d3f6      	bcc.n	80007b0 <CopyDataInit>
	ldr	r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c4:	e002      	b.n	80007cc <LoopFillZerobss>

080007c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c8:	f842 3b04 	str.w	r3, [r2], #4

080007cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <LoopForever+0x16>)
	cmp	r2, r3
 80007ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007d0:	d3f9      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f001 ff93 	bl	80026fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f00c fc31 	bl	800d03c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f000 fa4d 	bl	8000c78 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80007e4:	08020318 	.word	0x08020318
	ldr	r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007ec:	20000108 	.word	0x20000108
	ldr	r2, =_sbss
 80007f0:	20000108 	.word	0x20000108
	ldr	r3, = _ebss
 80007f4:	2001160c 	.word	0x2001160c

080007f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_IRQHandler>
	...

080007fc <_sbrk>:
  }
  return len;
}

caddr_t _sbrk(int incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x50>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x16>
  {
    heap_end = &end;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <_sbrk+0x50>)
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <_sbrk+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  prev_heap_end = heap_end;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <_sbrk+0x50>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	60fb      	str	r3, [r7, #12]
  if (heap_end + incr > stack_ptr)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <_sbrk+0x50>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	466a      	mov	r2, sp
 8000822:	4293      	cmp	r3, r2
 8000824:	d907      	bls.n	8000836 <_sbrk+0x3a>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8000826:	f00c fc03 	bl	800d030 <__errno>
 800082a:	4603      	mov	r3, r0
 800082c:	220c      	movs	r2, #12
 800082e:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	e006      	b.n	8000844 <_sbrk+0x48>
  }

  heap_end += incr;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <_sbrk+0x50>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <_sbrk+0x50>)
 8000840:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000128 	.word	0x20000128
 8000850:	20011610 	.word	0x20011610

08000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  */



void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
//  AudioProcess();
  BSP_LED_Off(LED1);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 ff49 	bl	80016f4 <BSP_LED_Off>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Transfer Complete user callback, called by BSP functions.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  AudioProcess();
 8000872:	f000 f8dd 	bl	8000a30 <AudioProcess>
  BSP_LED_On(LED1);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 ff22 	bl	80016c0 <BSP_LED_On>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <Perform_FFT>:
        window[i] = a0 - a1 * arm_cos_f32(coef) + a2 * arm_cos_f32(2.0f * coef) - a3 * arm_cos_f32(3.0f * coef);
    }
}

void Perform_FFT(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b090      	sub	sp, #64	; 0x40
 8000888:	af00      	add	r7, sp, #0
//    {
//        fftInput[i] *= bh_window[i];
//    }
    // Perform the FFT on the fftInput buffer
    arm_rfft_fast_instance_f32 fft;
    arm_rfft_fast_init_f32(&fft, FFT_BUFFER_SIZE);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000890:	4618      	mov	r0, r3
 8000892:	f00a fe7d 	bl	800b590 <arm_rfft_fast_init_f32>
    arm_rfft_fast_f32(&fft, fftInput, fftOutput, 0);
 8000896:	1d38      	adds	r0, r7, #4
 8000898:	2300      	movs	r3, #0
 800089a:	4a5b      	ldr	r2, [pc, #364]	; (8000a08 <Perform_FFT+0x184>)
 800089c:	495b      	ldr	r1, [pc, #364]	; (8000a0c <Perform_FFT+0x188>)
 800089e:	f00a ffcd 	bl	800b83c <arm_rfft_fast_f32>

    // Compute the magnitude spectrum (only the first half since it's symmetric)
    arm_cmplx_mag_f32(fftOutput, fftMagnitude, FFT_BUFFER_SIZE / 2);
 80008a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a6:	495a      	ldr	r1, [pc, #360]	; (8000a10 <Perform_FFT+0x18c>)
 80008a8:	4857      	ldr	r0, [pc, #348]	; (8000a08 <Perform_FFT+0x184>)
 80008aa:	f00b fd71 	bl	800c390 <arm_cmplx_mag_f32>

    // Fill strength_buffer with frequency data and corresponding strengths
    float32_t sampling_rate = 48000.0f;
 80008ae:	4b59      	ldr	r3, [pc, #356]	; (8000a14 <Perform_FFT+0x190>)
 80008b0:	623b      	str	r3, [r7, #32]
    float32_t bin_width = sampling_rate / FFT_BUFFER_SIZE;
 80008b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80008b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000a18 <Perform_FFT+0x194>
 80008ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008be:	edc7 7a07 	vstr	s15, [r7, #28]

    for (int i = 0; i < FFT_BUFFER_SIZE / 2; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008c6:	e01c      	b.n	8000902 <Perform_FFT+0x7e>
    {
        strength_buffer[i].bin_width = i * bin_width;
 80008c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ca:	ee07 3a90 	vmov	s15, r3
 80008ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80008d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008da:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <Perform_FFT+0x198>)
 80008dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4413      	add	r3, r2
 80008e2:	edc3 7a00 	vstr	s15, [r3]
        strength_buffer[i].strength = fftMagnitude[i];
 80008e6:	4a4a      	ldr	r2, [pc, #296]	; (8000a10 <Perform_FFT+0x18c>)
 80008e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	494a      	ldr	r1, [pc, #296]	; (8000a1c <Perform_FFT+0x198>)
 80008f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	3304      	adds	r3, #4
 80008fa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FFT_BUFFER_SIZE / 2; i++)
 80008fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fe:	3301      	adds	r3, #1
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000908:	dbde      	blt.n	80008c8 <Perform_FFT+0x44>
    }

    // Find the indices of the largest peaks
    for (int i = 0; i < NUM_PEAKS; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
 800090e:	e073      	b.n	80009f8 <Perform_FFT+0x174>
        {
            float32_t max_magnitude = -1.0f;
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <Perform_FFT+0x19c>)
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
            uint32_t max_index = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30

            for (int j = 0; j < FFT_BUFFER_SIZE / 2; j++)
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800091c:	e032      	b.n	8000984 <Perform_FFT+0x100>
            {
                if (strength_buffer[j].strength > max_magnitude)
 800091e:	4a3f      	ldr	r2, [pc, #252]	; (8000a1c <Perform_FFT+0x198>)
 8000920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4413      	add	r3, r2
 8000926:	3304      	adds	r3, #4
 8000928:	edd3 7a00 	vldr	s15, [r3]
 800092c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	d521      	bpl.n	800097e <Perform_FFT+0xfa>
                {
                    int found = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
                    for (int k = 0; k < i; k++)
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
 8000942:	e00c      	b.n	800095e <Perform_FFT+0xda>
                    {
                        if (peak_indices[k] == j)
 8000944:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <Perform_FFT+0x1a0>)
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	429a      	cmp	r2, r3
 8000950:	d102      	bne.n	8000958 <Perform_FFT+0xd4>
                        {
                            found = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
                            break;
 8000956:	e006      	b.n	8000966 <Perform_FFT+0xe2>
                    for (int k = 0; k < i; k++)
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	3301      	adds	r3, #1
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
 800095e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000962:	429a      	cmp	r2, r3
 8000964:	dbee      	blt.n	8000944 <Perform_FFT+0xc0>
                        }
                    }

                    if (!found)
 8000966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000968:	2b00      	cmp	r3, #0
 800096a:	d108      	bne.n	800097e <Perform_FFT+0xfa>
                    {
                        max_magnitude = strength_buffer[j].strength;
 800096c:	4a2b      	ldr	r2, [pc, #172]	; (8000a1c <Perform_FFT+0x198>)
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	4413      	add	r3, r2
 8000974:	3304      	adds	r3, #4
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
                        max_index = j;
 800097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
            for (int j = 0; j < FFT_BUFFER_SIZE / 2; j++)
 800097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000980:	3301      	adds	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800098a:	dbc8      	blt.n	800091e <Perform_FFT+0x9a>
                    }
                }
            }

            peak_indices[i] = max_index;
 800098c:	4925      	ldr	r1, [pc, #148]	; (8000a24 <Perform_FFT+0x1a0>)
 800098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            peak_frequencies[i] = strength_buffer[max_index].bin_width;
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <Perform_FFT+0x198>)
 8000998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <Perform_FFT+0x1a4>)
 80009a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	601a      	str	r2, [r3, #0]
            // Store the peak information in the peak_info_array
            peak_info_array[i].index = peak_indices[i];
 80009aa:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <Perform_FFT+0x1a0>)
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80009b2:	481e      	ldr	r0, [pc, #120]	; (8000a2c <Perform_FFT+0x1a8>)
 80009b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4403      	add	r3, r0
 80009c0:	6019      	str	r1, [r3, #0]
            peak_info_array[i].frequency = peak_frequencies[i];
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <Perform_FFT+0x1a4>)
 80009c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	6819      	ldr	r1, [r3, #0]
 80009cc:	4817      	ldr	r0, [pc, #92]	; (8000a2c <Perform_FFT+0x1a8>)
 80009ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4403      	add	r3, r0
 80009da:	3304      	adds	r3, #4
 80009dc:	6019      	str	r1, [r3, #0]
            peak_info_array[i].strength = max_magnitude;
 80009de:	4913      	ldr	r1, [pc, #76]	; (8000a2c <Perform_FFT+0x1a8>)
 80009e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	3308      	adds	r3, #8
 80009ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009f0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_PEAKS; i++)
 80009f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f4:	3301      	adds	r3, #1
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80009f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fa:	2b09      	cmp	r3, #9
 80009fc:	dd88      	ble.n	8000910 <Perform_FFT+0x8c>
        }
//    HAL_Delay(1000);
    }
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3740      	adds	r7, #64	; 0x40
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000a1f8 	.word	0x2000a1f8
 8000a0c:	200061f4 	.word	0x200061f4
 8000a10:	2000e1f8 	.word	0x2000e1f8
 8000a14:	473b8000 	.word	0x473b8000
 8000a18:	45800000 	.word	0x45800000
 8000a1c:	200001a4 	.word	0x200001a4
 8000a20:	bf800000 	.word	0xbf800000
 8000a24:	200061a4 	.word	0x200061a4
 8000a28:	200061cc 	.word	0x200061cc
 8000a2c:	2000012c 	.word	0x2000012c

08000a30 <AudioProcess>:
void AudioProcess(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
    // Convert 16-bit PCM data to float and store in fftInput buffer
    for (int i = 0; i < BUFFER_SIZE / 2; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e031      	b.n	8000aa0 <AudioProcess+0x70>
    {
        if (fftBufferIndex < FFT_BUFFER_SIZE)
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <AudioProcess+0x9c>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a44:	d229      	bcs.n	8000a9a <AudioProcess+0x6a>
        {
            float32_t left_sample = (float32_t)PCM_Buffer[i * 2] * 1.0f;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <AudioProcess+0xa0>)
 8000a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a58:	edc7 7a02 	vstr	s15, [r7, #8]
            float32_t right_sample = (float32_t)PCM_Buffer[i * 2 + 1] * 1.0f;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <AudioProcess+0xa0>)
 8000a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a70:	edc7 7a01 	vstr	s15, [r7, #4]
            fftInput[fftBufferIndex] = left_sample + right_sample; // Sum left and right samples
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <AudioProcess+0x9c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <AudioProcess+0xa4>)
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	edc3 7a00 	vstr	s15, [r3]
            fftBufferIndex++;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <AudioProcess+0x9c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <AudioProcess+0x9c>)
 8000a98:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE / 2; i++)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8000aa4:	d9ca      	bls.n	8000a3c <AudioProcess+0xc>
        }
    }

    // If the FFT buffer is filled, perform the FFT
    if (fftBufferIndex >= FFT_BUFFER_SIZE)
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <AudioProcess+0x9c>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aae:	d304      	bcc.n	8000aba <AudioProcess+0x8a>
    {
        Perform_FFT();
 8000ab0:	f7ff fee8 	bl	8000884 <Perform_FFT>
        fftBufferIndex = 0; // Reset the index for the next iteration
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <AudioProcess+0x9c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	801a      	strh	r2, [r3, #0]
    }

    // Send the processed FFT data to USB (you can remove this if not needed)
     Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY / 1000) * AUDIO_IN_CHANNELS * N_MS_PER_INTERRUPT);
 8000aba:	2160      	movs	r1, #96	; 0x60
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <AudioProcess+0xa0>)
 8000abe:	f000 fa0f 	bl	8000ee0 <Send_Audio_to_USB>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000a1f4 	.word	0x2000a1f4
 8000ad0:	2001020c 	.word	0x2001020c
 8000ad4:	200061f4 	.word	0x200061f4

08000ad8 <Init_Acquisition_Peripherals>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Init_Acquisition_Peripherals(uint32_t AudioFreq, uint32_t Device, uint32_t ChnlNbr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  MicParams.BitsPerSample = 16;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <Init_Acquisition_Peripherals+0x44>)
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	609a      	str	r2, [r3, #8]
  MicParams.ChannelsNbr = ChnlNbr;
 8000aea:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <Init_Acquisition_Peripherals+0x44>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60d3      	str	r3, [r2, #12]
  MicParams.Device = Device;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <Init_Acquisition_Peripherals+0x44>)
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	6013      	str	r3, [r2, #0]
  MicParams.SampleRate = AudioFreq;
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <Init_Acquisition_Peripherals+0x44>)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6053      	str	r3, [r2, #4]
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <Init_Acquisition_Peripherals+0x44>)
 8000afe:	2240      	movs	r2, #64	; 0x40
 8000b00:	611a      	str	r2, [r3, #16]

  if (BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 8000b02:	4906      	ldr	r1, [pc, #24]	; (8000b1c <Init_Acquisition_Peripherals+0x44>)
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fe0f 	bl	8001728 <BSP_AUDIO_IN_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <Init_Acquisition_Peripherals+0x3c>
  {
    Error_Handler();
 8000b10:	f000 f816 	bl	8000b40 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200101f8 	.word	0x200101f8

08000b20 <Start_Acquisition>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Start_Acquisition(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if (BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE) != BSP_ERROR_NONE)
 8000b24:	2260      	movs	r2, #96	; 0x60
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <Start_Acquisition+0x1c>)
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f001 f839 	bl	8001ba0 <BSP_AUDIO_IN_Record>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <Start_Acquisition+0x18>
  {
    Error_Handler();
 8000b34:	f000 f804 	bl	8000b40 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2001020c 	.word	0x2001020c

08000b40 <Error_Handler>:



void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  while (1);
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x4>
	...

08000b48 <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0be      	sub	sp, #248	; 0xf8
 8000b4c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f005 fb1a 	bl	8006188 <HAL_PWREx_ControlVoltageScaling>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }
  /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8000b54:	f005 fae8 	bl	8006128 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <SystemClock_Config+0x124>)
 8000b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5e:	4a43      	ldr	r2, [pc, #268]	; (8000c6c <SystemClock_Config+0x124>)
 8000b60:	f023 0318 	bic.w	r3, r3, #24
 8000b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 8000b68:	2335      	movs	r3, #53	; 0x35
 8000b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                                     | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000b88:	23b0      	movs	r3, #176	; 0xb0
 8000b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b94:	2303      	movs	r3, #3
 8000b96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ba6:	233c      	movs	r3, #60	; 0x3c
 8000ba8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fb94 	bl	80062f0 <HAL_RCC_OscConfig>
//    _Error_Handler(__FILE__, __LINE__);
  }

  /**Initializes the CPU, AHB and APB buses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000be6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bea:	2105      	movs	r1, #5
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 ffa9 	bl	8006b44 <HAL_RCC_ClockConfig>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_DFSDM1
 8000bf2:	f44f 33b4 	mov.w	r3, #92160	; 0x16800
 8000bf6:	607b      	str	r3, [r7, #4]
                                       | RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000c12:	2305      	movs	r3, #5
 8000c14:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000c16:	2360      	movs	r3, #96	; 0x60
 8000c18:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8000c1a:	2319      	movs	r3, #25
 8000c1c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK | RCC_PLLSAI1_SAI1CLK;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <SystemClock_Config+0x128>)
 8000c28:	623b      	str	r3, [r7, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fa3f 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f006 f8af 	bl	8006d9c <HAL_RCC_MCOConfig>

  /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000c3e:	f006 f96b 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <SystemClock_Config+0x12c>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	099b      	lsrs	r3, r3, #6
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fffa 	bl	8003c46 <HAL_SYSTICK_Config>

  /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f003 f804 	bl	8003c60 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f002 ffc7 	bl	8003bf2 <HAL_NVIC_SetPriority>
}
 8000c64:	bf00      	nop
 8000c66:	37f8      	adds	r7, #248	; 0xf8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	01010000 	.word	0x01010000
 8000c74:	10624dd3 	.word	0x10624dd3

08000c78 <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000c7e:	f001 fd4f 	bl	8002720 <HAL_Init>
//  USBD_LL_Start(&fftOut);
//  USBD_LL_OpenEP(&fftOut, 0x80U, USBD_EP_TYPE_BULK, 64);


  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <main+0x80>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <main+0x80>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <main+0x80>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  /* enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 8000c9a:	f005 fb19 	bl	80062d0 <HAL_PWREx_EnableVddUSB>

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f7ff ff53 	bl	8000b48 <SystemClock_Config>

  BSP_LED_Init(LED2);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 fcca 	bl	800163c <BSP_LED_Init>
  BSP_LED_Off(LED2);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fd23 	bl	80016f4 <BSP_LED_Off>
  BSP_LED_Init(LED1);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fcc4 	bl	800163c <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 fd1d 	bl	80016f4 <BSP_LED_Off>

  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000cc0:	480e      	ldr	r0, [pc, #56]	; (8000cfc <main+0x84>)
 8000cc2:	f008 fddd 	bl	8009880 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	490d      	ldr	r1, [pc, #52]	; (8000d00 <main+0x88>)
 8000cca:	480c      	ldr	r0, [pc, #48]	; (8000cfc <main+0x84>)
 8000ccc:	f009 f8fc 	bl	8009ec8 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <main+0x8c>)
 8000cd2:	480a      	ldr	r0, [pc, #40]	; (8000cfc <main+0x84>)
 8000cd4:	f009 f928 	bl	8009f28 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 8000cd8:	490b      	ldr	r1, [pc, #44]	; (8000d08 <main+0x90>)
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <main+0x84>)
 8000cdc:	f008 fdbc 	bl	8009858 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <main+0x84>)
 8000ce2:	f009 f957 	bl	8009f94 <USBD_Start>

  /* Start audio acquisition and streaming */

#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, ACTIVE_MICROPHONES_MASK, AUDIO_IN_CHANNELS);
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2103      	movs	r1, #3
 8000cea:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000cee:	f7ff fef3 	bl	8000ad8 <Init_Acquisition_Peripherals>
  Start_Acquisition();
 8000cf2:	f7ff ff15 	bl	8000b20 <Start_Acquisition>
#endif

  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <main+0x7e>
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	200102cc 	.word	0x200102cc
 8000d00:	20000024 	.word	0x20000024
 8000d04:	20000074 	.word	0x20000074
 8000d08:	20000000 	.word	0x20000000

08000d0c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000d4e:	f001 fd4b 	bl	80027e8 <HAL_IncTick>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <OTG_FS_IRQHandler+0x10>)
 8000d5e:	f004 fa80 	bl	8005262 <HAL_PCD_IRQHandler>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2001069c 	.word	0x2001069c

08000d6c <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(ADC1_Handle.DMA_Handle);
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <DMA1_Channel1_IRQHandler+0x14>)
 8000d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fe28 	bl	80049ca <HAL_DMA_IRQHandler>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20010bfc 	.word	0x20010bfc

08000d84 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AMic_OnBoard_DfsdmFilter.hdmaReg);
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <DMA1_Channel4_IRQHandler+0x14>)
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 fe1c 	bl	80049ca <HAL_DMA_IRQHandler>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20010d00 	.word	0x20010d00

08000d9c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&DMic_OnBoard_Dma);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA1_Channel7_IRQHandler+0x10>)
 8000da2:	f003 fe12 	bl	80049ca <HAL_DMA_IRQHandler>

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20010ff8 	.word	0x20010ff8

08000db0 <DFSDM1_FLT0_IRQHandler>:

void DFSDM1_FLT0_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  HAL_DFSDM_IRQHandler(&DMic_OnBoard_DfsdmFilter);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <DFSDM1_FLT0_IRQHandler+0x10>)
 8000db6:	f003 f9f9 	bl	80041ac <HAL_DFSDM_IRQHandler>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20010f6c 	.word	0x20010f6c

08000dc4 <DFSDM1_FLT1_IRQHandler>:

void DFSDM1_FLT1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  HAL_DFSDM_IRQHandler(&AMic_OnBoard_DfsdmFilter);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DFSDM1_FLT1_IRQHandler+0x10>)
 8000dca:	f003 f9ef 	bl	80041ac <HAL_DFSDM_IRQHandler>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20010d00 	.word	0x20010d00

08000dd8 <Audio_Init>:
  * @param  BitRes: desired bit resolution
  * @param  ChnlNbr: number of channel to be configured
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  MicParams.SampleRate = AudioFreq;
  MicParams.Volume = AUDIO_VOLUME_INPUT;

  return BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
 8000de4:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <Audio_DeInit>:
  * @brief  De-Initializes the AUDIO media low layer.
  * @param  options: Reserved for future use
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_DeInit(uint32_t options)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_DeInit(BSP_AUDIO_IN_INSTANCE);
#else
  return BSP_ERROR_NONE;
 8000dfa:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <Audio_Record>:
/**
  * @brief  Start audio recording engine
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Record(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE);
#else
  return BSP_ERROR_NONE;
 8000e0c:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <Audio_VolumeCtl>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: Volume level
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_VolumeCtl(int16_t Volume)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
  /* Call low layer volume setting function */
  uint32_t j = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  uint32_t mic_instance;

  /* Find the setting nearest to the desired setting */
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000e26:	e002      	b.n	8000e2e <Audio_VolumeCtl+0x16>
  {
    j++;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b3f      	cmp	r3, #63	; 0x3f
 8000e32:	d817      	bhi.n	8000e64 <Audio_VolumeCtl+0x4c>
 8000e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e38:	4910      	ldr	r1, [pc, #64]	; (8000e7c <Audio_VolumeCtl+0x64>)
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e46:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	3101      	adds	r1, #1
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <Audio_VolumeCtl+0x64>)
 8000e54:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bfb8      	it	lt
 8000e5e:	425b      	neglt	r3, r3
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dce1      	bgt.n	8000e28 <Audio_VolumeCtl+0x10>
  }
  mic_instance = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  /* Now do the volume adjustment */
  return BSP_AUDIO_IN_SetVolume(mic_instance, j);
 8000e68:	68f9      	ldr	r1, [r7, #12]
 8000e6a:	68b8      	ldr	r0, [r7, #8]
 8000e6c:	f000 ff00 	bl	8001c70 <BSP_AUDIO_IN_SetVolume>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b25b      	sxtb	r3, r3


}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	0800d1a8 	.word	0x0800d1a8

08000e80 <Audio_MuteCtl>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: Command opcode
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_MuteCtl(uint8_t cmd)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <Audio_Stop>:
  * @brief  Stops audio acquisition
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Stop(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_Stop(1U);
#else
  return BSP_ERROR_NONE;
 8000e9c:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <Audio_Pause>:
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */

static int8_t Audio_Pause(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <Audio_Resume>:
  * @brief  Resumes audio acquisition
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Resume(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return BSP_ERROR_NONE;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Audio_CommandMgr>:
  * @param  None
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */

static int8_t Audio_CommandMgr(uint8_t cmd)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <Send_Audio_to_USB>:
  *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
  *       you can pass 16 PCM samples if the function is called each millisecond,
  *       32 samples if called every 2 milliseconds and so on.
  */
void Send_Audio_to_USB(int16_t *audioData, uint16_t PCMSamples)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <Send_Audio_to_USB+0x20>)
 8000ef4:	f008 fbdc 	bl	80096b0 <USBD_AUDIO_Data_Transfer>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200102cc 	.word	0x200102cc

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;

  if (hpcd->Instance == USB_OTG_FS)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f68:	d131      	bne.n	8000fce <HAL_PCD_MspInit+0x76>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000f82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f94:	230a      	movs	r3, #10
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f003 fe61 	bl	8004c68 <HAL_GPIO_Init>

    /* Enable USB FS Clocks */
    __USB_OTG_FS_CLK_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	2043      	movs	r0, #67	; 0x43
 8000fc4:	f002 fe15 	bl	8003bf2 <HAL_NVIC_SetPriority>

    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000fc8:	2043      	movs	r0, #67	; 0x43
 8000fca:	f002 fe2e 	bl	8003c2a <HAL_NVIC_EnableIRQ>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_PCD_SetupStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f009 f81b 	bl	800a02e <USBD_LL_SetupStage>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_PCD_DataOutStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	1a9b      	subs	r3, r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	4619      	mov	r1, r3
 800102a:	f009 f855 	bl	800a0d8 <USBD_LL_DataOutStage>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_PCD_DataInStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3348      	adds	r3, #72	; 0x48
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	4619      	mov	r1, r3
 800105e:	f009 f8ee 	bl	800a23e <USBD_LL_DataInStage>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001078:	4618      	mov	r0, r3
 800107a:	f009 fa22 	bl	800a4c2 <USBD_LL_SOF>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_PCD_ResetCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001094:	4618      	mov	r0, r3
 8001096:	f009 f984 	bl	800a3a2 <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 f9cf 	bl	800a446 <USBD_LL_SetSpeed>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_PCD_SuspendCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010be:	4618      	mov	r0, r3
 80010c0:	f009 f9d1 	bl	800a466 <USBD_LL_Suspend>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_PCD_ResumeCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010da:	4618      	mov	r0, r3
 80010dc:	f009 f9d9 	bl	800a492 <USBD_LL_Resume>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fa31 	bl	800a566 <USBD_LL_IsoOUTIncomplete>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_PCD_ISOINIncompleteCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f009 f9ed 	bl	800a502 <USBD_LL_IsoINIncomplete>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_PCD_ConnectCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800113e:	4618      	mov	r0, r3
 8001140:	f009 fa43 	bl	800a5ca <USBD_LL_DevConnected>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_PCD_DisconnectCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800115a:	4618      	mov	r0, r3
 800115c:	f009 fa40 	bl	800a5e0 <USBD_LL_DevDisconnected>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <USBD_LL_Init>:
  *         Initialize the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Change Systick prioity */
  NVIC_SetPriority(SysTick_IRQn, 0);
 8001170:	2100      	movs	r1, #0
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	f7ff fec5 	bl	8000f04 <__NVIC_SetPriority>

  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <USBD_LL_Init+0x8c>)
 800117c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001180:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 8;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <USBD_LL_Init+0x8c>)
 8001184:	2208      	movs	r2, #8
 8001186:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <USBD_LL_Init+0x8c>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <USBD_LL_Init+0x8c>)
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <USBD_LL_Init+0x8c>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <USBD_LL_Init+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011ca:	f003 fef7 	bl	8004fbc <HAL_PCD_Init>

  HAL_PCD_SetRxFiFo(&hpcd, 0x36);
 80011ce:	2136      	movs	r1, #54	; 0x36
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011d2:	f004 ff68 	bl	80060a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x32);
 80011d6:	2232      	movs	r2, #50	; 0x32
 80011d8:	2100      	movs	r1, #0
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011dc:	f004 ff1c 	bl	8006018 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0xC8);
 80011e0:	22c8      	movs	r2, #200	; 0xc8
 80011e2:	2101      	movs	r1, #1
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <USBD_LL_Init+0x8c>)
 80011e6:	f004 ff17 	bl	8006018 <HAL_PCDEx_SetTxFiFo>


  return USBD_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2001069c 	.word	0x2001069c

080011f8 <USBD_LL_Start>:
  *         Start the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fffc 	bl	8005204 <HAL_PCD_Start>
  return USBD_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint Type
  * @param  ep_mps: Endpoint Max Packet Size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	4608      	mov	r0, r1
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	4603      	mov	r3, r0
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	460b      	mov	r3, r1
 800122a:	70bb      	strb	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	883a      	ldrh	r2, [r7, #0]
 800123a:	78f9      	ldrb	r1, [r7, #3]
 800123c:	f004 fbcf 	bl	80059de <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);

  return USBD_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <USBD_LL_CloseEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fc24 	bl	8005aae <HAL_PCD_EP_Close>
  return USBD_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <USBD_LL_FlushEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fd8e 	bl	8005da8 <HAL_PCD_EP_Flush>
  return USBD_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <USBD_LL_StallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80012a8:	78fa      	ldrb	r2, [r7, #3]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 fcc3 	bl	8005c38 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <USBD_LL_ClearStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fd12 	bl	8005cfc <HAL_PCD_EP_ClrStall>
  return USBD_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <USBD_LL_IsStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80012f4:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 80012f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da0b      	bge.n	8001316 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001304:	68f9      	ldr	r1, [r7, #12]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	333e      	adds	r3, #62	; 0x3e
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	e00b      	b.n	800132e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800132c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <USBD_LL_SetUSBAddress>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800134c:	78fa      	ldrb	r2, [r7, #3]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fb1f 	bl	8005994 <HAL_PCD_SetAddress>
  return USBD_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <USBD_LL_Transmit>:
  * @param  pbuf:pointer to data to be sent
  * @param  size: data size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	460b      	mov	r3, r1
 800136e:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001376:	7af9      	ldrb	r1, [r7, #11]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	f004 fc1f 	bl	8005bbe <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <USBD_LL_PrepareReceive>:
  * @param  pbuf:pointer to data to be received
  * @param  size: data size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	460b      	mov	r3, r1
 8001398:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80013a0:	7af9      	ldrb	r1, [r7, #11]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	f004 fbcc 	bl	8005b42 <HAL_PCD_EP_Receive>
  return USBD_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <USBD_AUDIO_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(hUSBDDeviceDesc);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2212      	movs	r2, #18
 80013c4:	801a      	strh	r2, [r3, #0]
  return hUSBDDeviceDesc;
 80013c6:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <USBD_AUDIO_DeviceDescriptor+0x20>)
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000040 	.word	0x20000040

080013d8 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2204      	movs	r2, #4
 80013e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80013ea:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <USBD_AUDIO_LangIDStrDescriptor+0x20>)
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20000054 	.word	0x20000054

080013fc <USBD_AUDIO_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if (speed == 0)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d105      	bne.n	800141a <USBD_AUDIO_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 8001412:	4808      	ldr	r0, [pc, #32]	; (8001434 <USBD_AUDIO_ProductStrDescriptor+0x38>)
 8001414:	f009 ff14 	bl	800b240 <USBD_GetString>
 8001418:	e004      	b.n	8001424 <USBD_AUDIO_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	4904      	ldr	r1, [pc, #16]	; (8001430 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <USBD_AUDIO_ProductStrDescriptor+0x3c>)
 8001420:	f009 ff0e 	bl	800b240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <USBD_AUDIO_ProductStrDescriptor+0x34>)
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20010aa4 	.word	0x20010aa4
 8001434:	0800d22c 	.word	0x0800d22c
 8001438:	0800d250 	.word	0x0800d250

0800143c <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	4904      	ldr	r1, [pc, #16]	; (800145c <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <USBD_AUDIO_ManufacturerStrDescriptor+0x24>)
 800144e:	f009 fef7 	bl	800b240 <USBD_GetString>
  return USBD_StrDesc;
 8001452:	4b02      	ldr	r3, [pc, #8]	; (800145c <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20010aa4 	.word	0x20010aa4
 8001460:	0800d274 	.word	0x0800d274

08001464 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d105      	bne.n	8001482 <USBD_AUDIO_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <USBD_AUDIO_SerialStrDescriptor+0x38>)
 800147c:	f009 fee0 	bl	800b240 <USBD_GetString>
 8001480:	e004      	b.n	800148c <USBD_AUDIO_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	4904      	ldr	r1, [pc, #16]	; (8001498 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 8001488:	f009 feda 	bl	800b240 <USBD_GetString>
  }
  return USBD_StrDesc;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <USBD_AUDIO_SerialStrDescriptor+0x34>)
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20010aa4 	.word	0x20010aa4
 800149c:	0800d288 	.word	0x0800d288
 80014a0:	0800d298 	.word	0x0800d298

080014a4 <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <USBD_AUDIO_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 80014bc:	f009 fec0 	bl	800b240 <USBD_GetString>
 80014c0:	e004      	b.n	80014cc <USBD_AUDIO_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4904      	ldr	r1, [pc, #16]	; (80014d8 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 80014c8:	f009 feba 	bl	800b240 <USBD_GetString>
  }
  return USBD_StrDesc;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20010aa4 	.word	0x20010aa4
 80014dc:	0800d2a8 	.word	0x0800d2a8

080014e0 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if (speed == 0)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <USBD_AUDIO_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 80014f8:	f009 fea2 	bl	800b240 <USBD_GetString>
 80014fc:	e004      	b.n	8001508 <USBD_AUDIO_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 8001504:	f009 fe9c 	bl	800b240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20010aa4 	.word	0x20010aa4
 8001518:	0800d2b8 	.word	0x0800d2b8

0800151c <BSP_ADC1_Initialization>:
  * @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
  * @retval BSP_ERROR_NONE in case of success
  * @retval BSP_ERROR_PERIPH_FAILURE in case of failures
  */
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if (ADC_UsedFor == ADC1_NOT_USED)
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <BSP_ADC1_Initialization+0xd0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d152      	bne.n	80015d4 <BSP_ADC1_Initialization+0xb8>
  {

    /**Common config */
    ADC1_Handle.Instance = ADC1;
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001530:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <BSP_ADC1_Initialization+0xd8>)
 8001532:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 800154e:	2204      	movs	r2, #4
 8001550:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001554:	2200      	movs	r2, #0
 8001556:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 800155a:	2201      	movs	r2, #1
 800155c:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1;
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001560:	2201      	movs	r2, #1
 8001562:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001566:	2201      	movs	r2, #1
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 800157a:	2200      	movs	r2, #0
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800158c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 8001598:	2200      	movs	r2, #0
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	64da      	str	r2, [r3, #76]	; 0x4c

    if (HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 80015b0:	f001 fb4c 	bl	8002c4c <HAL_ADC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80015ba:	f06f 0303 	mvn.w	r3, #3
 80015be:	e011      	b.n	80015e4 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 80015c0:	217f      	movs	r1, #127	; 0x7f
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <BSP_ADC1_Initialization+0xd4>)
 80015c4:	f002 f9da 	bl	800397c <HAL_ADCEx_Calibration_Start>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80015ce:	f06f 0303 	mvn.w	r3, #3
 80015d2:	e007      	b.n	80015e4 <BSP_ADC1_Initialization+0xc8>
    }
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <BSP_ADC1_Initialization+0xd0>)
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4313      	orrs	r3, r2
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b03      	ldr	r3, [pc, #12]	; (80015ec <BSP_ADC1_Initialization+0xd0>)
 80015e0:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20010c64 	.word	0x20010c64
 80015f0:	20010bfc 	.word	0x20010bfc
 80015f4:	50040000 	.word	0x50040000

080015f8 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hDfsdmFilter ADC handle
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_ADC_MspInit+0x40>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <HAL_ADC_MspInit+0x40>)
 8001606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800160a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_ADC_MspInit+0x40>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_ADC_MspInit+0x40>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_ADC_MspInit+0x40>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000

0800163c <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10c      	bne.n	8001666 <BSP_LED_Init+0x2a>
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <BSP_LED_Init+0x78>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <BSP_LED_Init+0x78>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <BSP_LED_Init+0x78>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	e00b      	b.n	800167e <BSP_LED_Init+0x42>
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <BSP_LED_Init+0x78>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <BSP_LED_Init+0x78>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <BSP_LED_Init+0x78>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <BSP_LED_Init+0x7c>)
 8001682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <BSP_LED_Init+0x80>)
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	f107 0214 	add.w	r2, r7, #20
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fae0 	bl	8004c68 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	0800d2d0 	.word	0x0800d2d0
 80016bc:	2000005c 	.word	0x2000005c

080016c0 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <BSP_LED_On+0x2c>)
 80016ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <BSP_LED_On+0x30>)
 80016d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016da:	2201      	movs	r2, #1
 80016dc:	4619      	mov	r1, r3
 80016de:	f003 fc55 	bl	8004f8c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000005c 	.word	0x2000005c
 80016f0:	0800d2d0 	.word	0x0800d2d0

080016f4 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <BSP_LED_Off+0x2c>)
 8001702:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <BSP_LED_Off+0x30>)
 800170a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	f003 fc3b 	bl	8004f8c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000005c 	.word	0x2000005c
 8001724:	0800d2d0 	.word	0x0800d2d0

08001728 <BSP_AUDIO_IN_Init>:
/** @defgroup STWIN_AUDIO_IN_Exported_Functions
  * @{
  */

__weak int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b090      	sub	sp, #64	; 0x40
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d902      	bls.n	800173e <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001738:	f06f 0301 	mvn.w	r3, #1
 800173c:	e21e      	b.n	8001b7c <BSP_AUDIO_IN_Init+0x454>
  }
  else
  {
    /* Store the audio record context */
    AudioInCtx[Instance].Device          = AudioInit->Device;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	49a7      	ldr	r1, [pc, #668]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	204c      	movs	r0, #76	; 0x4c
 8001748:	fb00 f303 	mul.w	r3, r0, r3
 800174c:	440b      	add	r3, r1
 800174e:	3304      	adds	r3, #4
 8001750:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	49a2      	ldr	r1, [pc, #648]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	204c      	movs	r0, #76	; 0x4c
 800175c:	fb00 f303 	mul.w	r3, r0, r3
 8001760:	440b      	add	r3, r1
 8001762:	3310      	adds	r3, #16
 8001764:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	499d      	ldr	r1, [pc, #628]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	204c      	movs	r0, #76	; 0x4c
 8001770:	fb00 f303 	mul.w	r3, r0, r3
 8001774:	440b      	add	r3, r1
 8001776:	3308      	adds	r3, #8
 8001778:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4998      	ldr	r1, [pc, #608]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	204c      	movs	r0, #76	; 0x4c
 8001784:	fb00 f303 	mul.w	r3, r0, r3
 8001788:	440b      	add	r3, r1
 800178a:	330c      	adds	r3, #12
 800178c:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	4993      	ldr	r1, [pc, #588]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	204c      	movs	r0, #76	; 0x4c
 8001798:	fb00 f303 	mul.w	r3, r0, r3
 800179c:	440b      	add	r3, r1
 800179e:	3320      	adds	r3, #32
 80017a0:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80017a2:	4a8f      	ldr	r2, [pc, #572]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	214c      	movs	r1, #76	; 0x4c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	3324      	adds	r3, #36	; 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

    if (Instance == 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <BSP_AUDIO_IN_Init+0x98>
    {
      return BSP_ERROR_WRONG_PARAM;
 80017ba:	f06f 0301 	mvn.w	r3, #1
 80017be:	e1dd      	b.n	8001b7c <BSP_AUDIO_IN_Init+0x454>
    }
    else
    {
      if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80017c0:	4a87      	ldr	r2, [pc, #540]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	214c      	movs	r1, #76	; 0x4c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3304      	adds	r3, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8181 	beq.w	8001adc <BSP_AUDIO_IN_Init+0x3b4>
      {
        MX_DFSDM_Config dfsdm_config;

        DMic_OnBoard_DfsdmChannel.Instance = DMIC_ONBOARD_CHANNEL;
 80017da:	4b82      	ldr	r3, [pc, #520]	; (80019e4 <BSP_AUDIO_IN_Init+0x2bc>)
 80017dc:	4a82      	ldr	r2, [pc, #520]	; (80019e8 <BSP_AUDIO_IN_Init+0x2c0>)
 80017de:	601a      	str	r2, [r3, #0]
        DMic_OnBoard_DfsdmFilter.Instance  = DMIC_ONBOARD_FILTER;
 80017e0:	4b82      	ldr	r3, [pc, #520]	; (80019ec <BSP_AUDIO_IN_Init+0x2c4>)
 80017e2:	4a83      	ldr	r2, [pc, #524]	; (80019f0 <BSP_AUDIO_IN_Init+0x2c8>)
 80017e4:	601a      	str	r2, [r3, #0]

        DFSDM_FilterMspInit(&DMic_OnBoard_DfsdmFilter);
 80017e6:	4881      	ldr	r0, [pc, #516]	; (80019ec <BSP_AUDIO_IN_Init+0x2c4>)
 80017e8:	f000 fe7e 	bl	80024e8 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&DMic_OnBoard_DfsdmChannel);
 80017ec:	487d      	ldr	r0, [pc, #500]	; (80019e4 <BSP_AUDIO_IN_Init+0x2bc>)
 80017ee:	f000 fe1f 	bl	8002430 <DFSDM_ChannelMspInit>

        dfsdm_config.FilterInstance  = DMIC_ONBOARD_FILTER;
 80017f2:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <BSP_AUDIO_IN_Init+0x2c8>)
 80017f4:	60fb      	str	r3, [r7, #12]
        dfsdm_config.ChannelInstance = DMIC_ONBOARD_CHANNEL;
 80017f6:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <BSP_AUDIO_IN_Init+0x2c0>)
 80017f8:	61fb      	str	r3, [r7, #28]
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;
 80017fe:	2301      	movs	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_5;
 8001802:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <BSP_AUDIO_IN_Init+0x2cc>)
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
        dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
        dfsdm_config.DmaMode         = DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        dfsdm_config.Activation      = ENABLE;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 800181a:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	214c      	movs	r1, #76	; 0x4c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3308      	adds	r3, #8
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800182e:	d02e      	beq.n	800188e <BSP_AUDIO_IN_Init+0x166>
 8001830:	4a6b      	ldr	r2, [pc, #428]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	214c      	movs	r1, #76	; 0x4c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3308      	adds	r3, #8
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001844:	4293      	cmp	r3, r2
 8001846:	d01f      	beq.n	8001888 <BSP_AUDIO_IN_Init+0x160>
 8001848:	4a65      	ldr	r2, [pc, #404]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	214c      	movs	r1, #76	; 0x4c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3308      	adds	r3, #8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800185c:	d011      	beq.n	8001882 <BSP_AUDIO_IN_Init+0x15a>
 800185e:	4a60      	ldr	r2, [pc, #384]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	214c      	movs	r1, #76	; 0x4c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3308      	adds	r3, #8
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001872:	4293      	cmp	r3, r2
 8001874:	d102      	bne.n	800187c <BSP_AUDIO_IN_Init+0x154>
 8001876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800187a:	e00a      	b.n	8001892 <BSP_AUDIO_IN_Init+0x16a>
 800187c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001880:	e007      	b.n	8001892 <BSP_AUDIO_IN_Init+0x16a>
 8001882:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001886:	e004      	b.n	8001892 <BSP_AUDIO_IN_Init+0x16a>
 8001888:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800188c:	e001      	b.n	8001892 <BSP_AUDIO_IN_Init+0x16a>
 800188e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001892:	617b      	str	r3, [r7, #20]
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	214c      	movs	r1, #76	; 0x4c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3308      	adds	r3, #8
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80018a8:	d054      	beq.n	8001954 <BSP_AUDIO_IN_Init+0x22c>
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	214c      	movs	r1, #76	; 0x4c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3308      	adds	r3, #8
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f642 3211 	movw	r2, #11025	; 0x2b11
 80018be:	4293      	cmp	r3, r2
 80018c0:	d045      	beq.n	800194e <BSP_AUDIO_IN_Init+0x226>
 80018c2:	4a47      	ldr	r2, [pc, #284]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	214c      	movs	r1, #76	; 0x4c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3308      	adds	r3, #8
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80018d6:	d038      	beq.n	800194a <BSP_AUDIO_IN_Init+0x222>
 80018d8:	4a41      	ldr	r2, [pc, #260]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	214c      	movs	r1, #76	; 0x4c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3308      	adds	r3, #8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f245 6222 	movw	r2, #22050	; 0x5622
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d02a      	beq.n	8001946 <BSP_AUDIO_IN_Init+0x21e>
 80018f0:	4a3b      	ldr	r2, [pc, #236]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	214c      	movs	r1, #76	; 0x4c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3308      	adds	r3, #8
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001904:	d01d      	beq.n	8001942 <BSP_AUDIO_IN_Init+0x21a>
 8001906:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	214c      	movs	r1, #76	; 0x4c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3308      	adds	r3, #8
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f64a 4244 	movw	r2, #44100	; 0xac44
 800191a:	4293      	cmp	r3, r2
 800191c:	d00f      	beq.n	800193e <BSP_AUDIO_IN_Init+0x216>
 800191e:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	214c      	movs	r1, #76	; 0x4c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3308      	adds	r3, #8
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <BSP_AUDIO_IN_Init+0x212>
 8001936:	2340      	movs	r3, #64	; 0x40
 8001938:	e00e      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 800193a:	2320      	movs	r3, #32
 800193c:	e00c      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	e00a      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	e008      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	e006      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	e004      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	e001      	b.n	8001958 <BSP_AUDIO_IN_Init+0x230>
 8001954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001958:	61bb      	str	r3, [r7, #24]
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	214c      	movs	r1, #76	; 0x4c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3308      	adds	r3, #8
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800196e:	d045      	beq.n	80019fc <BSP_AUDIO_IN_Init+0x2d4>
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	214c      	movs	r1, #76	; 0x4c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3308      	adds	r3, #8
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001984:	d029      	beq.n	80019da <BSP_AUDIO_IN_Init+0x2b2>
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	214c      	movs	r1, #76	; 0x4c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	3308      	adds	r3, #8
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800199a:	d01c      	beq.n	80019d6 <BSP_AUDIO_IN_Init+0x2ae>
 800199c:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	214c      	movs	r1, #76	; 0x4c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3308      	adds	r3, #8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00e      	beq.n	80019d2 <BSP_AUDIO_IN_Init+0x2aa>
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <BSP_AUDIO_IN_Init+0x2b8>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	214c      	movs	r1, #76	; 0x4c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3308      	adds	r3, #8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <BSP_AUDIO_IN_Init+0x2d0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <BSP_AUDIO_IN_Init+0x2a6>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e017      	b.n	80019fe <BSP_AUDIO_IN_Init+0x2d6>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e015      	b.n	80019fe <BSP_AUDIO_IN_Init+0x2d6>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e013      	b.n	80019fe <BSP_AUDIO_IN_Init+0x2d6>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e011      	b.n	80019fe <BSP_AUDIO_IN_Init+0x2d6>
 80019da:	2306      	movs	r3, #6
 80019dc:	e00f      	b.n	80019fe <BSP_AUDIO_IN_Init+0x2d6>
 80019de:	bf00      	nop
 80019e0:	20010c68 	.word	0x20010c68
 80019e4:	20010fc0 	.word	0x20010fc0
 80019e8:	400160a0 	.word	0x400160a0
 80019ec:	20010f6c 	.word	0x20010f6c
 80019f0:	40016100 	.word	0x40016100
 80019f4:	00050020 	.word	0x00050020
 80019f8:	00017700 	.word	0x00017700
 80019fc:	2306      	movs	r3, #6
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 8001a00:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	214c      	movs	r1, #76	; 0x4c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001a14:	d053      	beq.n	8001abe <BSP_AUDIO_IN_Init+0x396>
 8001a16:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	214c      	movs	r1, #76	; 0x4c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3308      	adds	r3, #8
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d045      	beq.n	8001aba <BSP_AUDIO_IN_Init+0x392>
 8001a2e:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	214c      	movs	r1, #76	; 0x4c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001a42:	d038      	beq.n	8001ab6 <BSP_AUDIO_IN_Init+0x38e>
 8001a44:	4a4f      	ldr	r2, [pc, #316]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	214c      	movs	r1, #76	; 0x4c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3308      	adds	r3, #8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f245 6222 	movw	r2, #22050	; 0x5622
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d02a      	beq.n	8001ab2 <BSP_AUDIO_IN_Init+0x38a>
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	214c      	movs	r1, #76	; 0x4c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3308      	adds	r3, #8
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001a70:	d01d      	beq.n	8001aae <BSP_AUDIO_IN_Init+0x386>
 8001a72:	4a44      	ldr	r2, [pc, #272]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	214c      	movs	r1, #76	; 0x4c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3308      	adds	r3, #8
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00f      	beq.n	8001aaa <BSP_AUDIO_IN_Init+0x382>
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	214c      	movs	r1, #76	; 0x4c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	3308      	adds	r3, #8
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <BSP_AUDIO_IN_Init+0x37e>
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	e00c      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e00a      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001aaa:	230a      	movs	r3, #10
 8001aac:	e008      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001aae:	230a      	movs	r3, #10
 8001ab0:	e006      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	e004      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e002      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e000      	b.n	8001ac0 <BSP_AUDIO_IN_Init+0x398>
 8001abe:	230c      	movs	r3, #12
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default configuration of DFSDM filters and channels */
        if (MX_DFSDM_Init(&DMic_OnBoard_DfsdmFilter, &DMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	492f      	ldr	r1, [pc, #188]	; (8001b88 <BSP_AUDIO_IN_Init+0x460>)
 8001aca:	4830      	ldr	r0, [pc, #192]	; (8001b8c <BSP_AUDIO_IN_Init+0x464>)
 8001acc:	f000 fb8c 	bl	80021e8 <MX_DFSDM_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <BSP_AUDIO_IN_Init+0x3b4>
        {
          /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
          return BSP_ERROR_PERIPH_FAILURE;
 8001ad6:	f06f 0303 	mvn.w	r3, #3
 8001ada:	e04f      	b.n	8001b7c <BSP_AUDIO_IN_Init+0x454>
        }

      }
      if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8001adc:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	214c      	movs	r1, #76	; 0x4c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d039      	beq.n	8001b68 <BSP_AUDIO_IN_Init+0x440>
      {
        MX_DFSDM_Config dfsdm_config;

        dfsdm_config.FilterInstance  = AMIC_ONBOARD_FILTER;
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <BSP_AUDIO_IN_Init+0x468>)
 8001af6:	60fb      	str	r3, [r7, #12]
        dfsdm_config.ChannelInstance = AMIC_ONBOARD_CHANNEL;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <BSP_AUDIO_IN_Init+0x46c>)
 8001afa:	61fb      	str	r3, [r7, #28]
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS; /*NU*/
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;/*NU*/
 8001b00:	2301      	movs	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_0;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
        if (AudioInCtx[Instance].ChannelsNbr == 1U)
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	214c      	movs	r1, #76	; 0x4c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3310      	adds	r3, #16
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <BSP_AUDIO_IN_Init+0x3fa>
        {
          dfsdm_config.RegularTrigger = DFSDM_FILTER_SW_TRIGGER;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e001      	b.n	8001b26 <BSP_AUDIO_IN_Init+0x3fe>
        }
        else
        {
          dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
        }
        dfsdm_config.DmaMode       = DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        dfsdm_config.Activation      = DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_ADC_OUTPUT;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
        dfsdm_config.SincOrder       = SINC_ORDER;
 8001b38:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001b3c:	617b      	str	r3, [r7, #20]
        dfsdm_config.Oversampling    = DECIMATION_RATIO_DFSDM;
 8001b3e:	2340      	movs	r3, #64	; 0x40
 8001b40:	61bb      	str	r3, [r7, #24]
        dfsdm_config.ClockDivider    = 1;/*NU*/
 8001b42:	2301      	movs	r3, #1
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        dfsdm_config.RightBitShift   = RBITSHIFT;
 8001b46:	230a      	movs	r3, #10
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default configuration of DFSDM filters and channels */
        if (MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4911      	ldr	r1, [pc, #68]	; (8001b98 <BSP_AUDIO_IN_Init+0x470>)
 8001b52:	4812      	ldr	r0, [pc, #72]	; (8001b9c <BSP_AUDIO_IN_Init+0x474>)
 8001b54:	f000 fb48 	bl	80021e8 <MX_DFSDM_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <BSP_AUDIO_IN_Init+0x43c>
        {
          /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
          return BSP_ERROR_PERIPH_FAILURE;
 8001b5e:	f06f 0303 	mvn.w	r3, #3
 8001b62:	e00b      	b.n	8001b7c <BSP_AUDIO_IN_Init+0x454>
        }

        /*adc init*/
        MX_ADC1_Init();
 8001b64:	f000 fc38 	bl	80023d8 <MX_ADC1_Init>
      }
    }
  }

  /* Update BSP AUDIO IN state */
  AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <BSP_AUDIO_IN_Init+0x45c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	214c      	movs	r1, #76	; 0x4c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3324      	adds	r3, #36	; 0x24
 8001b76:	2202      	movs	r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
  /* Return BSP status */
  return BSP_ERROR_NONE;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3740      	adds	r7, #64	; 0x40
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20010c68 	.word	0x20010c68
 8001b88:	20010fc0 	.word	0x20010fc0
 8001b8c:	20010f6c 	.word	0x20010f6c
 8001b90:	40016180 	.word	0x40016180
 8001b94:	40016000 	.word	0x40016000
 8001b98:	20010d54 	.word	0x20010d54
 8001b9c:	20010d00 	.word	0x20010d00

08001ba0 <BSP_AUDIO_IN_Record>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t *pBuf, uint32_t NbrOfBytes)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  AudioInCtx[Instance].pBuff = (uint16_t *)pBuf;
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <BSP_AUDIO_IN_Record+0xb8>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	214c      	movs	r1, #76	; 0x4c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	601a      	str	r2, [r3, #0]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d902      	bls.n	8001bce <BSP_AUDIO_IN_Record+0x2e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001bc8:	f06f 0301 	mvn.w	r3, #1
 8001bcc:	e040      	b.n	8001c50 <BSP_AUDIO_IN_Record+0xb0>
  }
  else if (Instance == 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <BSP_AUDIO_IN_Record+0x3a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001bd4:	f06f 0301 	mvn.w	r3, #1
 8001bd8:	e03a      	b.n	8001c50 <BSP_AUDIO_IN_Record+0xb0>
  }
  else
  {
    if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <BSP_AUDIO_IN_Record+0xb8>)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	214c      	movs	r1, #76	; 0x4c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <BSP_AUDIO_IN_Record+0x6e>
    {
      if (HAL_ADC_Start(&ADC1_Handle) != HAL_OK)
 8001bf2:	481a      	ldr	r0, [pc, #104]	; (8001c5c <BSP_AUDIO_IN_Record+0xbc>)
 8001bf4:	f001 f976 	bl	8002ee4 <HAL_ADC_Start>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <BSP_AUDIO_IN_Record+0x64>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8001bfe:	f06f 0303 	mvn.w	r3, #3
 8001c02:	617b      	str	r3, [r7, #20]
      }
      (void)HAL_DFSDM_FilterRegularStart_DMA(&AMic_OnBoard_DfsdmFilter, DFSDM_OUT, NbrOfBytes);
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4916      	ldr	r1, [pc, #88]	; (8001c60 <BSP_AUDIO_IN_Record+0xc0>)
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <BSP_AUDIO_IN_Record+0xc4>)
 8001c0a:	f002 fa4d 	bl	80040a8 <HAL_DFSDM_FilterRegularStart_DMA>
    }

    if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <BSP_AUDIO_IN_Record+0xb8>)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	214c      	movs	r1, #76	; 0x4c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <BSP_AUDIO_IN_Record+0x9c>
    {
      if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DMic_OnBoard_DfsdmFilter,
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	490f      	ldr	r1, [pc, #60]	; (8001c68 <BSP_AUDIO_IN_Record+0xc8>)
 8001c2a:	4810      	ldr	r0, [pc, #64]	; (8001c6c <BSP_AUDIO_IN_Record+0xcc>)
 8001c2c:	f002 fa3c 	bl	80040a8 <HAL_DFSDM_FilterRegularStart_DMA>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <BSP_AUDIO_IN_Record+0x9c>
                                                     (int32_t *) RecBuff,
                                                     NbrOfBytes))
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8001c36:	f06f 0303 	mvn.w	r3, #3
 8001c3a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Update BSP AUDIO IN state */
  AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <BSP_AUDIO_IN_Record+0xb8>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	214c      	movs	r1, #76	; 0x4c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3324      	adds	r3, #36	; 0x24
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
  return ret;
 8001c4e:	697b      	ldr	r3, [r7, #20]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20010c68 	.word	0x20010c68
 8001c5c:	20010bfc 	.word	0x20010bfc
 8001c60:	20010dec 	.word	0x20010dec
 8001c64:	20010d00 	.word	0x20010d00
 8001c68:	20011058 	.word	0x20011058
 8001c6c:	20010f6c 	.word	0x20010f6c

08001c70 <BSP_AUDIO_IN_SetVolume>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when I2S / SPI is used or 1 if DFSDM is used
  * @param  Volume    Volume level to be returnd
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_SetVolume(uint32_t Instance, uint32_t Volume)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d902      	bls.n	8001c8a <BSP_AUDIO_IN_SetVolume+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001c84:	f06f 0301 	mvn.w	r3, #1
 8001c88:	e00f      	b.n	8001caa <BSP_AUDIO_IN_SetVolume+0x3a>
  }
  else if (Instance == 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <BSP_AUDIO_IN_SetVolume+0x26>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001c90:	f06f 0301 	mvn.w	r3, #1
 8001c94:	e009      	b.n	8001caa <BSP_AUDIO_IN_SetVolume+0x3a>
  }
  else
  {
    /* Update AudioIn Context */
    AudioInCtx[Instance].Volume = Volume;
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <BSP_AUDIO_IN_SetVolume+0x48>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	214c      	movs	r1, #76	; 0x4c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3320      	adds	r3, #32
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return ret;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20010c68 	.word	0x20010c68

08001cbc <HAL_DFSDM_FilterRegConvCpltCallback>:
using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  uint32_t j;

  if (AudioInCtx[1].IsMultiBuff == 1U)
 8001cc4:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d103      	bne.n	8001cd4 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7fe fdcc 	bl	800086a <BSP_AUDIO_IN_TransferComplete_CallBack>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
      }
    }
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8001cd2:	e13a      	b.n	8001f4a <HAL_DFSDM_FilterRegConvCpltCallback+0x28e>
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001cd4:	4b9f      	ldr	r3, [pc, #636]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80c3 	beq.w	8001e68 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ac>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e0b5      	b.n	8001e54 <HAL_DFSDM_FilterRegConvCpltCallback+0x198>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 128;
 8001ce8:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	4a9a      	ldr	r2, [pc, #616]	; (8001f58 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	099a      	lsrs	r2, r3, #6
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a98      	ldr	r2, [pc, #608]	; (8001f5c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da00      	bge.n	8001d04 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>
 8001d02:	33ff      	adds	r3, #255	; 0xff
 8001d04:	121b      	asrs	r3, r3, #8
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da00      	bge.n	8001d16 <HAL_DFSDM_FilterRegConvCpltCallback+0x5a>
 8001d14:	337f      	adds	r3, #127	; 0x7f
 8001d16:	11db      	asrs	r3, r3, #7
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d1c:	67da      	str	r2, [r3, #124]	; 0x7c
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8001d1e:	4b8d      	ldr	r3, [pc, #564]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d20:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d24:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d28:	441a      	add	r2, r3
 8001d2a:	4b8a      	ldr	r3, [pc, #552]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d30:	1ad2      	subs	r2, r2, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da00      	bge.n	8001d40 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
 8001d3e:	33ff      	adds	r3, #255	; 0xff
 8001d40:	121b      	asrs	r3, r3, #8
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d4e:	4a81      	ldr	r2, [pc, #516]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	db0e      	blt.n	8001d7e <HAL_DFSDM_FilterRegConvCpltCallback+0xc2>
 8001d60:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d66:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	dc04      	bgt.n	8001d78 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>
 8001d6e:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	e004      	b.n	8001d82 <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8001d78:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001d7c:	e001      	b.n	8001d82 <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8001d7e:	f248 0308 	movw	r3, #32776	; 0x8008
 8001d82:	4a74      	ldr	r2, [pc, #464]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d84:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001d86:	4a73      	ldr	r2, [pc, #460]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	fb00 f202 	mul.w	r2, r0, r2
 8001d90:	0052      	lsls	r2, r2, #1
 8001d92:	440a      	add	r2, r1
 8001d94:	8013      	strh	r3, [r2, #0]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	4a6f      	ldr	r2, [pc, #444]	; (8001f58 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	099a      	lsrs	r2, r3, #6
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da00      	bge.n	8001db2 <HAL_DFSDM_FilterRegConvCpltCallback+0xf6>
 8001db0:	33ff      	adds	r3, #255	; 0xff
 8001db2:	121b      	asrs	r3, r3, #8
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da01      	bge.n	8001dc6 <HAL_DFSDM_FilterRegConvCpltCallback+0x10a>
 8001dc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001dc6:	125b      	asrs	r3, r3, #9
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001dd0:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001dd2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	441a      	add	r2, r3
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	1ad2      	subs	r2, r2, r3
 8001de6:	4613      	mov	r3, r2
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da00      	bge.n	8001df4 <HAL_DFSDM_FilterRegConvCpltCallback+0x138>
 8001df2:	33ff      	adds	r3, #255	; 0xff
 8001df4:	121b      	asrs	r3, r3, #8
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001dfe:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e04:	4a53      	ldr	r2, [pc, #332]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr * j) + 1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001e0a:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e10:	4a53      	ldr	r2, [pc, #332]	; (8001f60 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	db0e      	blt.n	8001e34 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1c:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001e20:	4293      	cmp	r3, r2
 8001e22:	dc04      	bgt.n	8001e2e <HAL_DFSDM_FilterRegConvCpltCallback+0x172>
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	e004      	b.n	8001e38 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
 8001e2e:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001e32:	e001      	b.n	8001e38 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
 8001e34:	f248 0308 	movw	r3, #32776	; 0x8008
 8001e38:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e3a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e3c:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	fb00 f202 	mul.w	r2, r0, r2
 8001e46:	3201      	adds	r2, #1
 8001e48:	0052      	lsls	r2, r2, #1
 8001e4a:	440a      	add	r2, r1
 8001e4c:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	4a3f      	ldr	r2, [pc, #252]	; (8001f58 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	f4ff af40 	bcc.w	8001ce8 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d169      	bne.n	8001f44 <HAL_DFSDM_FilterRegConvCpltCallback+0x288>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e05d      	b.n	8001f32 <HAL_DFSDM_FilterRegConvCpltCallback+0x276>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	4a37      	ldr	r2, [pc, #220]	; (8001f58 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	099a      	lsrs	r2, r3, #6
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da00      	bge.n	8001e92 <HAL_DFSDM_FilterRegConvCpltCallback+0x1d6>
 8001e90:	33ff      	adds	r3, #255	; 0xff
 8001e92:	121b      	asrs	r3, r3, #8
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da01      	bge.n	8001ea6 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
 8001ea2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ea6:	125b      	asrs	r3, r3, #9
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001eb2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	441a      	add	r2, r3
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	1ad2      	subs	r2, r2, r3
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	019b      	lsls	r3, r3, #6
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da00      	bge.n	8001ed4 <HAL_DFSDM_FilterRegConvCpltCallback+0x218>
 8001ed2:	33ff      	adds	r3, #255	; 0xff
 8001ed4:	121b      	asrs	r3, r3, #8
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	db0e      	blt.n	8001f14 <HAL_DFSDM_FilterRegConvCpltCallback+0x258>
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efc:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001f00:	4293      	cmp	r3, r2
 8001f02:	dc04      	bgt.n	8001f0e <HAL_DFSDM_FilterRegConvCpltCallback+0x252>
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	e004      	b.n	8001f18 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>
 8001f0e:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001f12:	e001      	b.n	8001f18 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>
 8001f14:	f248 0308 	movw	r3, #32776	; 0x8008
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001f1a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001f1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	fb00 f202 	mul.w	r2, r0, r2
 8001f26:	0052      	lsls	r2, r2, #1
 8001f28:	440a      	add	r2, r1
 8001f2a:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d398      	bcc.n	8001e76 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ba>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7fe fc90 	bl	800086a <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20010c68 	.word	0x20010c68
 8001f58:	10624dd3 	.word	0x10624dd3
 8001f5c:	20011058 	.word	0x20011058
 8001f60:	ffff8008 	.word	0xffff8008
 8001f64:	20010dec 	.word	0x20010dec

08001f68 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  uint32_t j;

  if (AudioInCtx[1].IsMultiBuff == 1U)
 8001f70:	4b98      	ldr	r3, [pc, #608]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d103      	bne.n	8001f80 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7fe fc6b 	bl	8000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>
      }
    }
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }

}
 8001f7e:	e125      	b.n	80021cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001f80:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80b5 	beq.w	80020f8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e0a7      	b.n	80020e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17c>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 128;
 8001f94:	4a90      	ldr	r2, [pc, #576]	; (80021d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da00      	bge.n	8001fa2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3a>
 8001fa0:	33ff      	adds	r3, #255	; 0xff
 8001fa2:	121b      	asrs	r3, r3, #8
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da00      	bge.n	8001fb4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4c>
 8001fb2:	337f      	adds	r3, #127	; 0x7f
 8001fb4:	11db      	asrs	r3, r3, #7
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fba:	67da      	str	r2, [r3, #124]	; 0x7c
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8001fbc:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001fc2:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fc6:	441a      	add	r2, r3
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fce:	1ad2      	subs	r2, r2, r3
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	019b      	lsls	r3, r3, #6
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da00      	bge.n	8001fde <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x76>
 8001fdc:	33ff      	adds	r3, #255	; 0xff
 8001fde:	121b      	asrs	r3, r3, #8
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8001fe8:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fec:	4a79      	ldr	r2, [pc, #484]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8001ff2:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ff8:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	db0e      	blt.n	800201c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb4>
 8001ffe:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002004:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8002008:	4293      	cmp	r3, r2
 800200a:	dc04      	bgt.n	8002016 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xae>
 800200c:	4b71      	ldr	r3, [pc, #452]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800200e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002012:	b29b      	uxth	r3, r3
 8002014:	e004      	b.n	8002020 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>
 8002016:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 800201a:	e001      	b.n	8002020 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>
 800201c:	f248 0308 	movw	r3, #32776	; 0x8008
 8002020:	4a6c      	ldr	r2, [pc, #432]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002022:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002024:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002026:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	fb00 f202 	mul.w	r2, r0, r2
 800202e:	0052      	lsls	r2, r2, #1
 8002030:	440a      	add	r2, r1
 8002032:	8013      	strh	r3, [r2, #0]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da00      	bge.n	8002042 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xda>
 8002040:	33ff      	adds	r3, #255	; 0xff
 8002042:	121b      	asrs	r3, r3, #8
 8002044:	461a      	mov	r2, r3
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	da01      	bge.n	8002056 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xee>
 8002052:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002056:	125b      	asrs	r3, r3, #9
 8002058:	461a      	mov	r2, r3
 800205a:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800205c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002062:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002066:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	441a      	add	r2, r3
 800206e:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	4613      	mov	r3, r2
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	da00      	bge.n	8002084 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11c>
 8002082:	33ff      	adds	r3, #255	; 0xff
 8002084:	121b      	asrs	r3, r3, #8
 8002086:	461a      	mov	r2, r3
 8002088:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800208a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002094:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr * j) + 1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	db0e      	blt.n	80020c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15c>
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ac:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 80020b0:	4293      	cmp	r3, r2
 80020b2:	dc04      	bgt.n	80020be <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x156>
 80020b4:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80020b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	e004      	b.n	80020c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 80020be:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 80020c2:	e001      	b.n	80020c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 80020c4:	f248 0308 	movw	r3, #32776	; 0x8008
 80020c8:	4a42      	ldr	r2, [pc, #264]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80020ca:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80020cc:	4a41      	ldr	r2, [pc, #260]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80020ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	fb00 f202 	mul.w	r2, r0, r2
 80020d6:	3201      	adds	r2, #1
 80020d8:	0052      	lsls	r2, r2, #1
 80020da:	440a      	add	r2, r1
 80020dc:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	4a3e      	ldr	r2, [pc, #248]	; (80021e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	f4ff af4e 	bcc.w	8001f94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80020fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d162      	bne.n	80021c6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25e>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e056      	b.n	80021b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24c>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8002106:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	2b00      	cmp	r3, #0
 8002110:	da00      	bge.n	8002114 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>
 8002112:	33ff      	adds	r3, #255	; 0xff
 8002114:	121b      	asrs	r3, r3, #8
 8002116:	461a      	mov	r2, r3
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800211a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	da01      	bge.n	8002128 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 8002124:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002128:	125b      	asrs	r3, r3, #9
 800212a:	461a      	mov	r2, r3
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800212e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002134:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	441a      	add	r2, r3
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	4613      	mov	r3, r2
 800214a:	019b      	lsls	r3, r3, #6
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	da00      	bge.n	8002156 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ee>
 8002154:	33ff      	adds	r3, #255	; 0xff
 8002156:	121b      	asrs	r3, r3, #8
 8002158:	461a      	mov	r2, r3
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800215c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800216e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002172:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	db0e      	blt.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x22e>
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800217a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800217e:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8002182:	4293      	cmp	r3, r2
 8002184:	dc04      	bgt.n	8002190 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x228>
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218c:	b29b      	uxth	r3, r3
 800218e:	e004      	b.n	800219a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x232>
 8002190:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8002194:	e001      	b.n	800219a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x232>
 8002196:	f248 0308 	movw	r3, #32776	; 0x8008
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800219c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800219e:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80021a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	fb00 f202 	mul.w	r2, r0, r2
 80021a8:	0052      	lsls	r2, r2, #1
 80021aa:	440a      	add	r2, r1
 80021ac:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d39f      	bcc.n	8002106 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19e>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7fe fb44 	bl	8000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20010c68 	.word	0x20010c68
 80021d8:	20011058 	.word	0x20011058
 80021dc:	ffff8008 	.word	0xffff8008
 80021e0:	20010dec 	.word	0x20010dec
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <MX_DFSDM_Init>:
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter,
                                       DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021f4:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	4a72      	ldr	r2, [pc, #456]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6493      	str	r3, [r2, #72]	; 0x48
 8002200:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 8002202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002210:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	6613      	str	r3, [r2, #96]	; 0x60
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002224:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	4a66      	ldr	r2, [pc, #408]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6493      	str	r3, [r2, #72]	; 0x48
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <MX_DFSDM_Init+0x1dc>)
 8002232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]

  /* MIC channels initialization */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(hDfsdmChannel);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = MXConfig->Activation;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800225c:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = (uint32_t)(MXConfig->ClockDivider);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = MXConfig->Multiplexer;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2200      	movs	r2, #0
 8002272:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2204      	movs	r2, #4
 8002278:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	220a      	movs	r2, #10
 8002284:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	61da      	str	r2, [r3, #28]

  if (HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f001 fcf7 	bl	8003c98 <HAL_DFSDM_ChannelInit>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_DFSDM_Init+0xcc>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e083      	b.n	80023bc <MX_DFSDM_Init+0x1d4>
  }

  /* MIC filters  initialization */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(hDfsdmFilter);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = MXConfig->DmaMode;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fa:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f001 fd9e 	bl	8003e54 <HAL_DFSDM_FilterInit>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_DFSDM_Init+0x13a>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e04c      	b.n	80023bc <MX_DFSDM_Init+0x1d4>
  }

  /* Configure injected channel */
  if (HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2201      	movs	r2, #1
 8002328:	4619      	mov	r1, r3
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 fe76 	bl	800401c <HAL_DFSDM_FilterConfigRegChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_DFSDM_Init+0x152>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e040      	b.n	80023bc <MX_DFSDM_Init+0x1d4>
  }

  /* Configure DMA for AMic_Onboard */
  if (MXConfig->FilterInstance == AMIC_ONBOARD_FILTER)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <MX_DFSDM_Init+0x1e0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d13a      	bne.n	80023ba <MX_DFSDM_Init+0x1d2>
  {
    AMic_OnBoard_Dma.Init.Request = DMA_REQUEST_ANALOG;
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002346:	2257      	movs	r2, #87	; 0x57
 8002348:	605a      	str	r2, [r3, #4]
    AMic_OnBoard_Dma.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    AMic_OnBoard_Dma.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    AMic_OnBoard_Dma.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	611a      	str	r2, [r3, #16]
    AMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 800235e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002362:	615a      	str	r2, [r3, #20]
    AMic_OnBoard_Dma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236a:	619a      	str	r2, [r3, #24]
    AMic_OnBoard_Dma.Init.Mode = DMA_CIRCULAR;
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 800236e:	2220      	movs	r2, #32
 8002370:	61da      	str	r2, [r3, #28]
    AMic_OnBoard_Dma.Init.Priority = DMA_PRIORITY_HIGH;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002378:	621a      	str	r2, [r3, #32]
    AMic_OnBoard_Dma.Instance = DFSDM_DMA_ANALOG;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <MX_DFSDM_Init+0x1e8>)
 800237e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hDfsdmFilter, hdmaReg, AMic_OnBoard_Dma);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6293      	str	r3, [r2, #40]	; 0x28

    if (AudioInCtx[1].ChannelsNbr == 1U)
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_DFSDM_Init+0x1ec>)
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d103      	bne.n	800239c <MX_DFSDM_Init+0x1b4>
    {
      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&AMic_OnBoard_Dma);
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&AMic_OnBoard_Dma);
 800239c:	480b      	ldr	r0, [pc, #44]	; (80023cc <MX_DFSDM_Init+0x1e4>)
 800239e:	f002 f95b 	bl	8004658 <HAL_DMA_Init>

    if (AudioInCtx[1].ChannelsNbr == 1U)
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_DFSDM_Init+0x1ec>)
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <MX_DFSDM_Init+0x1d2>
    {
      HAL_NVIC_SetPriority(DFSDM_DMA_ANALOG_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2106      	movs	r1, #6
 80023ae:	200e      	movs	r0, #14
 80023b0:	f001 fc1f 	bl	8003bf2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_ANALOG_IRQn);
 80023b4:	200e      	movs	r0, #14
 80023b6:	f001 fc38 	bl	8003c2a <HAL_NVIC_EnableIRQ>
    }
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40016180 	.word	0x40016180
 80023cc:	20010d8c 	.word	0x20010d8c
 80023d0:	40020044 	.word	0x40020044
 80023d4:	20010c68 	.word	0x20010c68

080023d8 <MX_ADC1_Init>:
  * @param  None
  * @retval None
  */
/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80023de:	463b      	mov	r3, r7
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]

  /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_AUDIO);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff f894 	bl	800151c <BSP_ADC1_Initialization>
  HAL_ADC_Audio_MspInit(&ADC1_Handle);
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <MX_ADC1_Init+0x50>)
 80023f6:	f000 f8ed 	bl	80025d4 <HAL_ADC_Audio_MspInit>

  /**Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_2;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_ADC1_Init+0x54>)
 80023fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023fe:	2306      	movs	r3, #6
 8002400:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLE_TIME;
 8002402:	2302      	movs	r3, #2
 8002404:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002406:	237f      	movs	r3, #127	; 0x7f
 8002408:	60fb      	str	r3, [r7, #12]

#if (DECIMATION_RATIO_DFSDM != 1)
  sConfig.OffsetNumber = ADC_OFFSET_1;             /* Offset subtraction */
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0x800;                                 /* Parameter discarded because offset correction is disabled */
 800240e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002412:	617b      	str	r3, [r7, #20]
#endif

  (void)HAL_ADC_ConfigChannel(&ADC1_Handle, &sConfig);
 8002414:	463b      	mov	r3, r7
 8002416:	4619      	mov	r1, r3
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <MX_ADC1_Init+0x50>)
 800241a:	f000 fdc7 	bl	8002fac <HAL_ADC_ConfigChannel>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20010bfc 	.word	0x20010bfc
 800242c:	08600004 	.word	0x08600004

08002430 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002438:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6613      	str	r3, [r2, #96]	; 0x60
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]

  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <DFSDM_ChannelMspInit+0xa8>)
 8002452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d037      	beq.n	80024cc <DFSDM_ChannelMspInit+0x9c>
  {
    if (hDfsdmChannel->Instance == DMIC_ONBOARD_CHANNEL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <DFSDM_ChannelMspInit+0xac>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d132      	bne.n	80024cc <DFSDM_ChannelMspInit+0x9c>
    {
      /* Enable GPIO clock */
      DMIC_ONBOARD_DATAIN_GPIO_CLK_ENABLE();
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
      DMIC_ONBOARD_CKOUT_GPIO_CLK_ENABLE();
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <DFSDM_ChannelMspInit+0xa4>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]

      /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_CKOUT_PIN;
 8002496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_CKOUT_DATIN_AF;
 80024a8:	2306      	movs	r3, #6
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(DMIC_ONBOARD_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	480b      	ldr	r0, [pc, #44]	; (80024e0 <DFSDM_ChannelMspInit+0xb0>)
 80024b4:	f002 fbd8 	bl	8004c68 <HAL_GPIO_Init>

      /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_DATIN_PIN;
 80024b8:	2340      	movs	r3, #64	; 0x40
 80024ba:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_DATAIN_DATIN_AF ;
 80024bc:	2306      	movs	r3, #6
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(DMIC_ONBOARD_DATIN_GPIO_PORT, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4807      	ldr	r0, [pc, #28]	; (80024e4 <DFSDM_ChannelMspInit+0xb4>)
 80024c8:	f002 fbce 	bl	8004c68 <HAL_GPIO_Init>
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	20010c68 	.word	0x20010c68
 80024dc:	400160a0 	.word	0x400160a0
 80024e0:	48001000 	.word	0x48001000
 80024e4:	48000400 	.word	0x48000400

080024e8 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Enable DFSDM clock */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	4a31      	ldr	r2, [pc, #196]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6493      	str	r3, [r2, #72]	; 0x48
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 800250a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6613      	str	r3, [r2, #96]	; 0x60
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 8002516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]

  /* Enable the DMA clock */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6493      	str	r3, [r2, #72]	; 0x48
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <DFSDM_FilterMspInit+0xd4>)
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]

  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <DFSDM_FilterMspInit+0xd8>)
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d037      	beq.n	80025b4 <DFSDM_FilterMspInit+0xcc>
  {
    if (hDfsdmFilter->Instance == DMIC_ONBOARD_FILTER)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <DFSDM_FilterMspInit+0xdc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d132      	bne.n	80025b4 <DFSDM_FilterMspInit+0xcc>
    {
      /*********** Configure DMA stream for DIGITAL microphone *******************/
      DMic_OnBoard_Dma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
      DMic_OnBoard_Dma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
      DMic_OnBoard_Dma.Init.MemInc              = DMA_MINC_ENABLE;
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	611a      	str	r2, [r3, #16]
      DMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002566:	615a      	str	r2, [r3, #20]
      DMic_OnBoard_Dma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 800256a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800256e:	619a      	str	r2, [r3, #24]
      DMic_OnBoard_Dma.Init.Mode                = DMA_CIRCULAR;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002572:	2220      	movs	r2, #32
 8002574:	61da      	str	r2, [r3, #28]
      DMic_OnBoard_Dma.Init.Priority            = DMA_PRIORITY_HIGH;
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257c:	621a      	str	r2, [r3, #32]
      DMic_OnBoard_Dma.Init.Request             = DMA_REQUEST_DIGITAL;
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002580:	2256      	movs	r2, #86	; 0x56
 8002582:	605a      	str	r2, [r3, #4]

      DMic_OnBoard_Dma.Instance                 = DFSDM_DMA_DIGITAL;
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <DFSDM_FilterMspInit+0xe4>)
 8002588:	601a      	str	r2, [r3, #0]

      /* Associate the DMA handle */
      __HAL_LINKDMA(&DMic_OnBoard_DfsdmFilter, hdmaReg, DMic_OnBoard_Dma);
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <DFSDM_FilterMspInit+0xe8>)
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <DFSDM_FilterMspInit+0xe8>)
 8002594:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&DMic_OnBoard_Dma);
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Configure the DMA Channel */
      (void)HAL_DMA_Init(&DMic_OnBoard_Dma);
 800259e:	480a      	ldr	r0, [pc, #40]	; (80025c8 <DFSDM_FilterMspInit+0xe0>)
 80025a0:	f002 f85a 	bl	8004658 <HAL_DMA_Init>

      /* DMA IRQ Channel configuration */
      HAL_NVIC_SetPriority(DFSDM_DMA_DIGITAL_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2106      	movs	r1, #6
 80025a8:	2011      	movs	r0, #17
 80025aa:	f001 fb22 	bl	8003bf2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_DIGITAL_IRQn);
 80025ae:	2011      	movs	r0, #17
 80025b0:	f001 fb3b 	bl	8003c2a <HAL_NVIC_EnableIRQ>
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	20010c68 	.word	0x20010c68
 80025c4:	40016100 	.word	0x40016100
 80025c8:	20010ff8 	.word	0x20010ff8
 80025cc:	40020080 	.word	0x40020080
 80025d0:	20010f6c 	.word	0x20010f6c

080025d4 <HAL_ADC_Audio_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hDfsdmFilter ADC handle
  * @retval None
  */
void HAL_ADC_Audio_MspInit(ADC_HandleTypeDef *hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if (HAL_ADC_Counter == 0)
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_ADC_Audio_MspInit+0x114>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d177      	bne.n	80026d4 <HAL_ADC_Audio_MspInit+0x100>
    GPIO_InitTypeDef          GPIO_InitStruct;
    static DMA_HandleTypeDef         DmaHandle;

    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO clock ****************************************/
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e4:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	4a40      	ldr	r2, [pc, #256]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f0:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]
    /* ADC Periph clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 8002602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697b      	ldr	r3, [r7, #20]
    /* ADC Periph interface clock configuration */
    __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800261e:	4a33      	ldr	r2, [pc, #204]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Enable DMA clock */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6493      	str	r3, [r2, #72]	; 0x48
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 8002636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	4a29      	ldr	r2, [pc, #164]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6493      	str	r3, [r2, #72]	; 0x48
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_ADC_Audio_MspInit+0x118>)
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]

    /*##- 2- Configure peripheral GPIO #########################################*/
    /* ADC Channel GPIO pin configuration */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002658:	2303      	movs	r3, #3
 800265a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800265c:	230b      	movs	r3, #11
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	4821      	ldr	r0, [pc, #132]	; (80026f0 <HAL_ADC_Audio_MspInit+0x11c>)
 800266c:	f002 fafc 	bl	8004c68 <HAL_GPIO_Init>

    /*##- 3- Configure DMA #####################################################*/

    /*********************** Configure DMA parameters ***************************/
    DmaHandle.Instance                 = DMA1_Channel1;
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_ADC_Audio_MspInit+0x124>)
 8002674:	601a      	str	r2, [r3, #0]
    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 8002678:	2205      	movs	r2, #5
 800267a:	605a      	str	r2, [r3, #4]
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	611a      	str	r2, [r3, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 8002690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002694:	615a      	str	r2, [r3, #20]
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 8002698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269c:	619a      	str	r2, [r3, #24]
    DmaHandle.Init.Mode                = DMA_CIRCULAR;
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 80026a0:	2220      	movs	r2, #32
 80026a2:	61da      	str	r2, [r3, #28]
    DmaHandle.Init.Priority            = DMA_PRIORITY_MEDIUM;
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 80026a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026aa:	621a      	str	r2, [r3, #32]
    /* Deinitialize  & Initialize the DMA for new transfer */
    (void)HAL_DMA_DeInit(&DmaHandle);
 80026ac:	4811      	ldr	r0, [pc, #68]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 80026ae:	f002 f87b 	bl	80047a8 <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&DmaHandle);
 80026b2:	4810      	ldr	r0, [pc, #64]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 80026b4:	f001 ffd0 	bl	8004658 <HAL_DMA_Init>

    /* Associate the DMA handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 80026bc:	651a      	str	r2, [r3, #80]	; 0x50
 80026be:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_ADC_Audio_MspInit+0x120>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* NVIC configuration for DMA Input data interrupt */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2101      	movs	r1, #1
 80026c8:	200b      	movs	r0, #11
 80026ca:	f001 fa92 	bl	8003bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026ce:	200b      	movs	r0, #11
 80026d0:	f001 faab 	bl	8003c2a <HAL_NVIC_EnableIRQ>
  }

  HAL_ADC_Counter++;
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HAL_ADC_Audio_MspInit+0x114>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_ADC_Audio_MspInit+0x114>)
 80026dc:	6013      	str	r3, [r2, #0]
}
 80026de:	bf00      	nop
 80026e0:	3730      	adds	r7, #48	; 0x30
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200111d8 	.word	0x200111d8
 80026ec:	40021000 	.word	0x40021000
 80026f0:	48000800 	.word	0x48000800
 80026f4:	200111dc 	.word	0x200111dc
 80026f8:	40020008 	.word	0x40020008

080026fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_Init+0x3c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_Init+0x3c>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002736:	2003      	movs	r0, #3
 8002738:	f001 fa50 	bl	8003bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273c:	200f      	movs	r0, #15
 800273e:	f000 f817 	bl	8002770 <HAL_InitTick>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	e001      	b.n	8002752 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800274e:	f000 f807 	bl	8002760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002752:	79fb      	ldrb	r3, [r7, #7]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40022000 	.word	0x40022000

08002760 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_InitTick+0x6c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d023      	beq.n	80027cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_InitTick+0x70>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_InitTick+0x6c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	fbb3 f3f1 	udiv	r3, r3, r1
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fa53 	bl	8003c46 <HAL_SYSTICK_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d809      	bhi.n	80027c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f001 fa1d 	bl	8003bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_InitTick+0x74>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e007      	b.n	80027d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e004      	b.n	80027d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e001      	b.n	80027d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000070 	.word	0x20000070
 80027e0:	20000068 	.word	0x20000068
 80027e4:	2000006c 	.word	0x2000006c

080027e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000070 	.word	0x20000070
 800280c:	2001123c 	.word	0x2001123c

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2001123c 	.word	0x2001123c

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff ffee 	bl	8002810 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffde 	bl	8002810 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000070 	.word	0x20000070

08002870 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <LL_ADC_SetOffset+0x44>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	4313      	orrs	r3, r2
 8002908:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	03fff000 	.word	0x03fff000

08002920 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	461a      	mov	r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	615a      	str	r2, [r3, #20]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3330      	adds	r3, #48	; 0x30
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	211f      	movs	r1, #31
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 011f 	and.w	r1, r3, #31
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0e5b      	lsrs	r3, r3, #25
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0d1b      	lsrs	r3, r3, #20
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2107      	movs	r1, #7
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	401a      	ands	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	0d1b      	lsrs	r3, r3, #20
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0318 	and.w	r3, r3, #24
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a7c:	40d9      	lsrs	r1, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	400b      	ands	r3, r1
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	431a      	orrs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	0007ffff 	.word	0x0007ffff

08002aa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6093      	str	r3, [r2, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002afc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b78:	f043 0202 	orr.w	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_IsEnabled+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_IsEnabled+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_IsDisableOngoing+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_ADC_IsDisableOngoing+0x1a>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d101      	bne.n	8002c18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e12f      	b.n	8002ec6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe fcbf 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff19 	bl	8002ac4 <LL_ADC_IsDeepPowerDownEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff feff 	bl	8002aa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff34 	bl	8002b14 <LL_ADC_IsInternalRegulatorEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff18 	bl	8002aec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbc:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <HAL_ADC_Init+0x284>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	4a84      	ldr	r2, [pc, #528]	; (8002ed4 <HAL_ADC_Init+0x288>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cd0:	e002      	b.n	8002cd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff16 	bl	8002b14 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff76 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 80c8 	bne.w	8002eb4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 80c4 	bne.w	8002eb4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d34:	f043 0202 	orr.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff23 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4c:	4862      	ldr	r0, [pc, #392]	; (8002ed8 <HAL_ADC_Init+0x28c>)
 8002d4e:	f7ff ff1d 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	485f      	ldr	r0, [pc, #380]	; (8002edc <HAL_ADC_Init+0x290>)
 8002d60:	f7ff fd86 	bl	8002870 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7e5b      	ldrb	r3, [r3, #25]
 8002d68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d106      	bne.n	8002da0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	3b01      	subs	r3, #1
 8002d98:	045b      	lsls	r3, r3, #17
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_ADC_Init+0x294>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff13 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002dda:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff20 	bl	8002c26 <LL_ADC_INJ_IsConversionOngoing>
 8002de6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d140      	bne.n	8002e70 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d13d      	bne.n	8002e70 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dfe:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e06:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e16:	f023 0306 	bic.w	r3, r3, #6
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d118      	bne.n	8002e60 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e44:	4311      	orrs	r1, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e50:	430a      	orrs	r2, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	611a      	str	r2, [r3, #16]
 8002e5e:	e007      	b.n	8002e70 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10c      	bne.n	8002e92 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f023 010f 	bic.w	r1, r3, #15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e90:	e007      	b.n	8002ea2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 020f 	bic.w	r2, r2, #15
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002eb2:	e007      	b.n	8002ec4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000068 	.word	0x20000068
 8002ed4:	053e2d63 	.word	0x053e2d63
 8002ed8:	50040000 	.word	0x50040000
 8002edc:	50040300 	.word	0x50040300
 8002ee0:	fff0c007 	.word	0xfff0c007

08002ee4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fe85 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d14f      	bne.n	8002f9c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Start+0x26>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e04b      	b.n	8002fa2 <HAL_ADC_Start+0xbe>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fc44 	bl	80037a0 <ADC_Enable>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d137      	bne.n	8002f92 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d106      	bne.n	8002f52 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f023 0206 	bic.w	r2, r3, #6
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f50:	e002      	b.n	8002f58 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	221c      	movs	r2, #28
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fe24 	bl	8002bd8 <LL_ADC_REG_StartConversion>
 8002f90:	e006      	b.n	8002fa0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002f9a:	e001      	b.n	8002fa0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0b6      	sub	sp, #216	; 0xd8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x22>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e3d3      	b.n	8003776 <HAL_ADC_ConfigChannel+0x7ca>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fe10 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 83b8 	bne.w	8003758 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d824      	bhi.n	800303a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	3b02      	subs	r3, #2
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d81b      	bhi.n	8003032 <HAL_ADC_ConfigChannel+0x86>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_ADC_ConfigChannel+0x54>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003011 	.word	0x08003011
 8003004:	08003019 	.word	0x08003019
 8003008:	08003021 	.word	0x08003021
 800300c:	08003029 	.word	0x08003029
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	220c      	movs	r2, #12
 8003014:	605a      	str	r2, [r3, #4]
          break;
 8003016:	e010      	b.n	800303a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2212      	movs	r2, #18
 800301c:	605a      	str	r2, [r3, #4]
          break;
 800301e:	e00c      	b.n	800303a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2218      	movs	r2, #24
 8003024:	605a      	str	r2, [r3, #4]
          break;
 8003026:	e008      	b.n	800303a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302e:	605a      	str	r2, [r3, #4]
          break;
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2206      	movs	r2, #6
 8003036:	605a      	str	r2, [r3, #4]
          break;
 8003038:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	f7ff fcae 	bl	80029a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fdd5 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8003056:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fde1 	bl	8002c26 <LL_ADC_INJ_IsConversionOngoing>
 8003064:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003068:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 81c1 	bne.w	80033f4 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 81bc 	bne.w	80033f4 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003084:	d10f      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	4619      	mov	r1, r3
 8003092:	f7ff fcb5 	bl	8002a00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fc6f 	bl	8002982 <LL_ADC_SetSamplingTimeCommonConfig>
 80030a4:	e00e      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7ff fca4 	bl	8002a00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fc5f 	bl	8002982 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d00a      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030f6:	f7ff fbef 	bl	80028d8 <LL_ADC_SetOffset>
 80030fa:	e17b      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fc0c 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x17c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fc01 	bl	8002920 <LL_ADC_GetOffsetChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	e01e      	b.n	8003166 <HAL_ADC_ConfigChannel+0x1ba>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fbf6 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800314a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800314e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e004      	b.n	8003164 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 800315a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_ADC_ConfigChannel+0x1d2>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	e018      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x204>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800319a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e004      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80031a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d106      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fbc5 	bl	800294c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fba9 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x242>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fb9e 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	e01e      	b.n	800322c <HAL_ADC_ConfigChannel+0x280>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fb93 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800320c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e004      	b.n	800322a <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8003220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x298>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	e018      	b.n	8003276 <HAL_ADC_ConfigChannel+0x2ca>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e004      	b.n	8003276 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 800326c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003276:	429a      	cmp	r2, r3
 8003278:	d106      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb62 	bl	800294c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb46 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x308>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fb3b 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80032aa:	4603      	mov	r3, r0
 80032ac:	0e9b      	lsrs	r3, r3, #26
 80032ae:	f003 021f 	and.w	r2, r3, #31
 80032b2:	e01e      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x346>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fb30 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e004      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 80032e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_ADC_ConfigChannel+0x35e>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	e016      	b.n	8003338 <HAL_ADC_ConfigChannel+0x38c>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800331c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800331e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e004      	b.n	8003338 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800332e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003338:	429a      	cmp	r2, r3
 800333a:	d106      	bne.n	800334a <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	2102      	movs	r1, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fb01 	bl	800294c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2103      	movs	r1, #3
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fae5 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003356:	4603      	mov	r3, r0
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x3ca>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2103      	movs	r1, #3
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fada 	bl	8002920 <LL_ADC_GetOffsetChannel>
 800336c:	4603      	mov	r3, r0
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	e017      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x3fa>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2103      	movs	r1, #3
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff facf 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800338e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003390:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8003398:	2320      	movs	r3, #32
 800339a:	e003      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 800339c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_ADC_ConfigChannel+0x412>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0e9b      	lsrs	r3, r3, #26
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	e011      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x436>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e003      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d106      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2103      	movs	r1, #3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff faac 	bl	800294c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fbc7 	bl	8002b8c <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 813f 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	f7ff fb20 	bl	8002a58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a8e      	ldr	r2, [pc, #568]	; (8003658 <HAL_ADC_ConfigChannel+0x6ac>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f040 8130 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_ADC_ConfigChannel+0x4a0>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e9b      	lsrs	r3, r3, #26
 800343a:	3301      	adds	r3, #1
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2b09      	cmp	r3, #9
 8003442:	bf94      	ite	ls
 8003444:	2301      	movls	r3, #1
 8003446:	2300      	movhi	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	e019      	b.n	8003480 <HAL_ADC_ConfigChannel+0x4d4>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800345a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800345c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800345e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8003468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	2b09      	cmp	r3, #9
 8003478:	bf94      	ite	ls
 800347a:	2301      	movls	r3, #1
 800347c:	2300      	movhi	r3, #0
 800347e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003480:	2b00      	cmp	r3, #0
 8003482:	d079      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x4f4>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349e:	e015      	b.n	80034cc <HAL_ADC_ConfigChannel+0x520>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 80034bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	069b      	lsls	r3, r3, #26
 80034c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x540>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	3301      	adds	r3, #1
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	e017      	b.n	800351c <HAL_ADC_ConfigChannel+0x570>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e003      	b.n	8003510 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3301      	adds	r3, #1
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x596>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	3301      	adds	r3, #1
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	051b      	lsls	r3, r3, #20
 8003540:	e018      	b.n	8003574 <HAL_ADC_ConfigChannel+0x5c8>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003574:	430b      	orrs	r3, r1
 8003576:	e080      	b.n	800367a <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x5e8>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	3301      	adds	r3, #1
 800358c:	069b      	lsls	r3, r3, #26
 800358e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003592:	e015      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x614>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 80035ac:	2320      	movs	r3, #32
 80035ae:	e003      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x634>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	3301      	adds	r3, #1
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	e017      	b.n	8003610 <HAL_ADC_ConfigChannel+0x664>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	61fb      	str	r3, [r7, #28]
  return result;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	ea42 0103 	orr.w	r1, r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_ADC_ConfigChannel+0x690>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	3301      	adds	r3, #1
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	3b1e      	subs	r3, #30
 8003634:	051b      	lsls	r3, r3, #20
 8003636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800363a:	e01d      	b.n	8003678 <HAL_ADC_ConfigChannel+0x6cc>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	613b      	str	r3, [r7, #16]
  return result;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8003654:	2320      	movs	r3, #32
 8003656:	e005      	b.n	8003664 <HAL_ADC_ConfigChannel+0x6b8>
 8003658:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	051b      	lsls	r3, r3, #20
 8003674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003678:	430b      	orrs	r3, r1
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	4619      	mov	r1, r3
 8003680:	f7ff f9be 	bl	8002a00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_ADC_ConfigChannel+0x7d4>)
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d06c      	beq.n	800376a <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003690:	483c      	ldr	r0, [pc, #240]	; (8003784 <HAL_ADC_ConfigChannel+0x7d8>)
 8003692:	f7ff f913 	bl	80028bc <LL_ADC_GetCommonPathInternalCh>
 8003696:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3a      	ldr	r2, [pc, #232]	; (8003788 <HAL_ADC_ConfigChannel+0x7dc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d127      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d121      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a35      	ldr	r2, [pc, #212]	; (800378c <HAL_ADC_ConfigChannel+0x7e0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d157      	bne.n	800376a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c2:	4619      	mov	r1, r3
 80036c4:	482f      	ldr	r0, [pc, #188]	; (8003784 <HAL_ADC_ConfigChannel+0x7d8>)
 80036c6:	f7ff f8e6 	bl	8002896 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_ADC_ConfigChannel+0x7e4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	4a30      	ldr	r2, [pc, #192]	; (8003794 <HAL_ADC_ConfigChannel+0x7e8>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036e4:	e002      	b.n	80036ec <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f9      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f2:	e03a      	b.n	800376a <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <HAL_ADC_ConfigChannel+0x7ec>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d113      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x77a>
 80036fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1f      	ldr	r2, [pc, #124]	; (800378c <HAL_ADC_ConfigChannel+0x7e0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d12a      	bne.n	800376a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371c:	4619      	mov	r1, r3
 800371e:	4819      	ldr	r0, [pc, #100]	; (8003784 <HAL_ADC_ConfigChannel+0x7d8>)
 8003720:	f7ff f8b9 	bl	8002896 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003724:	e021      	b.n	800376a <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_ADC_ConfigChannel+0x7f0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d11c      	bne.n	800376a <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a12      	ldr	r2, [pc, #72]	; (800378c <HAL_ADC_ConfigChannel+0x7e0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d111      	bne.n	800376a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800374a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800374e:	4619      	mov	r1, r3
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <HAL_ADC_ConfigChannel+0x7d8>)
 8003752:	f7ff f8a0 	bl	8002896 <LL_ADC_SetCommonPathInternalCh>
 8003756:	e008      	b.n	800376a <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003772:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003776:	4618      	mov	r0, r3
 8003778:	37d8      	adds	r7, #216	; 0xd8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	80080000 	.word	0x80080000
 8003784:	50040300 	.word	0x50040300
 8003788:	c7520000 	.word	0xc7520000
 800378c:	50040000 	.word	0x50040000
 8003790:	20000068 	.word	0x20000068
 8003794:	053e2d63 	.word	0x053e2d63
 8003798:	cb840000 	.word	0xcb840000
 800379c:	80000001 	.word	0x80000001

080037a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f9ed 	bl	8002b8c <LL_ADC_IsEnabled>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d14d      	bne.n	8003854 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <ADC_Enable+0xc0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e039      	b.n	8003856 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f9a8 	bl	8002b3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037ec:	f7ff f810 	bl	8002810 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037f2:	e028      	b.n	8003846 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f9c7 	bl	8002b8c <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f997 	bl	8002b3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800380e:	f7fe ffff 	bl	8002810 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d914      	bls.n	8003846 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d00d      	beq.n	8003846 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e007      	b.n	8003856 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d1cf      	bne.n	80037f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	8000003f 	.word	0x8000003f

08003864 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff f99e 	bl	8002bb2 <LL_ADC_IsDisableOngoing>
 8003876:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f985 	bl	8002b8c <LL_ADC_IsEnabled>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d047      	beq.n	8003918 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d144      	bne.n	8003918 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030d 	and.w	r3, r3, #13
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10c      	bne.n	80038b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f95f 	bl	8002b64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2203      	movs	r2, #3
 80038ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038ae:	f7fe ffaf 	bl	8002810 <HAL_GetTick>
 80038b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b4:	e029      	b.n	800390a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f043 0210 	orr.w	r2, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c6:	f043 0201 	orr.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e023      	b.n	800391a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038d2:	f7fe ff9d 	bl	8002810 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d914      	bls.n	800390a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f043 0210 	orr.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e007      	b.n	800391a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1dc      	bne.n	80038d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <LL_ADC_StartCalibration>:
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800393e:	4313      	orrs	r3, r2
 8003940:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_IsCalibrationOnGoing>:
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003968:	d101      	bne.n	800396e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_ADCEx_Calibration_Start+0x1c>
 8003994:	2302      	movs	r3, #2
 8003996:	e04d      	b.n	8003a34 <HAL_ADCEx_Calibration_Start+0xb8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff5f 	bl	8003864 <ADC_Disable>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d136      	bne.n	8003a1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039b8:	f023 0302 	bic.w	r3, r3, #2
 80039bc:	f043 0202 	orr.w	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ffa9 	bl	8003922 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039d0:	e014      	b.n	80039fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80039de:	d30d      	bcc.n	80039fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f023 0312 	bic.w	r3, r3, #18
 80039e8:	f043 0210 	orr.w	r2, r3, #16
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e01b      	b.n	8003a34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ffa7 	bl	8003954 <LL_ADC_IsCalibrationOnGoing>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e2      	bne.n	80039d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f023 0303 	bic.w	r3, r3, #3
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a1c:	e005      	b.n	8003a2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <__NVIC_SetPriorityGrouping>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <__NVIC_SetPriorityGrouping+0x44>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6e:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <__NVIC_SetPriorityGrouping+0x44>)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	60d3      	str	r3, [r2, #12]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_GetPriorityGrouping>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <__NVIC_GetPriorityGrouping+0x18>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	f003 0307 	and.w	r3, r3, #7
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_EnableIRQ>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	db0b      	blt.n	8003aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	4907      	ldr	r1, [pc, #28]	; (8003ad8 <__NVIC_EnableIRQ+0x38>)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000e100 	.word	0xe000e100

08003adc <__NVIC_SetPriority>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	db0a      	blt.n	8003b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	490c      	ldr	r1, [pc, #48]	; (8003b28 <__NVIC_SetPriority+0x4c>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	440b      	add	r3, r1
 8003b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b04:	e00a      	b.n	8003b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4908      	ldr	r1, [pc, #32]	; (8003b2c <__NVIC_SetPriority+0x50>)
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	3b04      	subs	r3, #4
 8003b14:	0112      	lsls	r2, r2, #4
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	440b      	add	r3, r1
 8003b1a:	761a      	strb	r2, [r3, #24]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f1c3 0307 	rsb	r3, r3, #7
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	bf28      	it	cs
 8003b4e:	2304      	movcs	r3, #4
 8003b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d902      	bls.n	8003b60 <NVIC_EncodePriority+0x30>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3b03      	subs	r3, #3
 8003b5e:	e000      	b.n	8003b62 <NVIC_EncodePriority+0x32>
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	401a      	ands	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b78:	f04f 31ff 	mov.w	r1, #4294967295
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	43d9      	mvns	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b88:	4313      	orrs	r3, r2
         );
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba8:	d301      	bcc.n	8003bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00f      	b.n	8003bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <SysTick_Config+0x40>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bb6:	210f      	movs	r1, #15
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f7ff ff8e 	bl	8003adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <SysTick_Config+0x40>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc6:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <SysTick_Config+0x40>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000e010 	.word	0xe000e010

08003bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff29 	bl	8003a3c <__NVIC_SetPriorityGrouping>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c04:	f7ff ff3e 	bl	8003a84 <__NVIC_GetPriorityGrouping>
 8003c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	6978      	ldr	r0, [r7, #20]
 8003c10:	f7ff ff8e 	bl	8003b30 <NVIC_EncodePriority>
 8003c14:	4602      	mov	r2, r0
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff5d 	bl	8003adc <__NVIC_SetPriority>
}
 8003c22:	bf00      	nop
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff31 	bl	8003aa0 <__NVIC_EnableIRQ>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ffa2 	bl	8003b98 <SysTick_Config>
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d106      	bne.n	8003c7c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003c7a:	e005      	b.n	8003c88 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000e010 	.word	0xe000e010

08003c98 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0ac      	b.n	8003e04 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fc30 	bl	8004514 <DFSDM_GetChannelFromInstance>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <HAL_DFSDM_ChannelInit+0x174>)
 8003cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e09f      	b.n	8003e04 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8a7 	bl	8003e18 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_DFSDM_ChannelInit+0x178>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	4a4f      	ldr	r2, [pc, #316]	; (8003e10 <HAL_DFSDM_ChannelInit+0x178>)
 8003cd2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003cd4:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_DFSDM_ChannelInit+0x178>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d125      	bne.n	8003d28 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ce8:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4948      	ldr	r1, [pc, #288]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a46      	ldr	r2, [pc, #280]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cfc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003d00:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	791b      	ldrb	r3, [r3, #4]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d108      	bne.n	8003d1c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003d0a:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	493f      	ldr	r1, [pc, #252]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003d36:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d46:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003d4c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 020f 	bic.w	r2, r2, #15
 8003d64:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003d8c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6899      	ldr	r1, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 0207 	and.w	r2, r2, #7
 8003db8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fb8e 	bl	8004514 <DFSDM_GetChannelFromInstance>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4904      	ldr	r1, [pc, #16]	; (8003e0c <HAL_DFSDM_ChannelInit+0x174>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20011244 	.word	0x20011244
 8003e10:	20011240 	.word	0x20011240
 8003e14:	40016000 	.word	0x40016000

08003e18 <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0ca      	b.n	8003ffc <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a66      	ldr	r2, [pc, #408]	; (8004004 <HAL_DFSDM_FilterInit+0x1b0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d109      	bne.n	8003e84 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d003      	beq.n	8003e80 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0bb      	b.n	8003ffc <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8b3 	bl	8004008 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003eb0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7a1b      	ldrb	r3, [r3, #8]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e007      	b.n	8003edc <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003eda:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7a5b      	ldrb	r3, [r3, #9]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e007      	b.n	8003f06 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f14:	f023 0308 	bic.w	r3, r3, #8
 8003f18:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d108      	bne.n	8003f34 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7c1b      	ldrb	r3, [r3, #16]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d108      	bne.n	8003f4e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0210 	orr.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e007      	b.n	8003f5e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0210 	bic.w	r2, r2, #16
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7c5b      	ldrb	r3, [r3, #17]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d108      	bne.n	8003f78 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0220 	orr.w	r2, r2, #32
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e007      	b.n	8003f88 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0220 	bic.w	r2, r2, #32
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003f96:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003f9a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6959      	ldr	r1, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003fae:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003fb6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7c1a      	ldrb	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40016100 	.word	0x40016100

08004008 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02e      	beq.n	8004094 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800403c:	2bff      	cmp	r3, #255	; 0xff
 800403e:	d029      	beq.n	8004094 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10d      	bne.n	8004076 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e00a      	b.n	800408c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6819      	ldr	r1, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
 8004092:	e001      	b.n	8004098 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
 80040c8:	e064      	b.n	8004194 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d8:	d002      	beq.n	80040e0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
 80040de:	e059      	b.n	8004194 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10e      	bne.n	8004106 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d002      	beq.n	8004106 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
 8004104:	e046      	b.n	8004194 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800411c:	2b20      	cmp	r3, #32
 800411e:	d102      	bne.n	8004126 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
 8004124:	e036      	b.n	8004194 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d004      	beq.n	800413a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004136:	2b03      	cmp	r3, #3
 8004138:	d12a      	bne.n	8004190 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004148:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8004150:	2b20      	cmp	r3, #32
 8004152:	d101      	bne.n	8004158 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004156:	e000      	b.n	800415a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004158:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	331c      	adds	r3, #28
 800416a:	4619      	mov	r1, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f000 fbb0 	bl	80048d4 <HAL_DMA_Start_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004186:	e005      	b.n	8004194 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fa0f 	bl	80045ac <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800418e:	e001      	b.n	8004194 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004194:	7dfb      	ldrb	r3, [r7, #23]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	080044d5 	.word	0x080044d5
 80041a4:	080044f1 	.word	0x080044f1
 80041a8:	080044b9 	.word	0x080044b9

080041ac <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00f      	beq.n	80041ee <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f95c 	bl	80044a4 <HAL_DFSDM_FilterErrorCallback>
 80041ec:	e13b      	b.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00f      	beq.n	8004218 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2204      	movs	r2, #4
 8004208:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f947 	bl	80044a4 <HAL_DFSDM_FilterErrorCallback>
 8004216:	e126      	b.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d025      	beq.n	800426e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd fd45 	bl	8001cbc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8114 	bne.w	8004464 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 810f 	bne.w	8004464 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0202 	bic.w	r2, r2, #2
 8004254:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800425c:	2b02      	cmp	r3, #2
 800425e:	d101      	bne.n	8004264 <HAL_DFSDM_IRQHandler+0xb8>
 8004260:	2201      	movs	r2, #1
 8004262:	e000      	b.n	8004266 <HAL_DFSDM_IRQHandler+0xba>
 8004264:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800426c:	e0fa      	b.n	8004464 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d034      	beq.n	80042e2 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800427e:	2b00      	cmp	r3, #0
 8004280:	d02f      	beq.n	80042e2 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8f8 	bl	8004478 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	1e5a      	subs	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 80e5 	bne.w	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d112      	bne.n	80042ca <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d101      	bne.n	80042c2 <HAL_DFSDM_IRQHandler+0x116>
 80042be:	2201      	movs	r2, #1
 80042c0:	e000      	b.n	80042c4 <HAL_DFSDM_IRQHandler+0x118>
 80042c2:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <HAL_DFSDM_IRQHandler+0x12e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	e000      	b.n	80042dc <HAL_DFSDM_IRQHandler+0x130>
 80042da:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80042e0:	e0c1      	b.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d03d      	beq.n	8004368 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d038      	beq.n	8004368 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_DFSDM_IRQHandler+0x162>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_DFSDM_IRQHandler+0x164>
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800431e:	e005      	b.n	800432c <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	3301      	adds	r3, #1
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_DFSDM_IRQHandler+0x190>
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b06      	cmp	r3, #6
 800433a:	d9f1      	bls.n	8004320 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d105      	bne.n	800434e <HAL_DFSDM_IRQHandler+0x1a2>
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	3308      	adds	r3, #8
 8004346:	2201      	movs	r2, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	e003      	b.n	8004356 <HAL_DFSDM_IRQHandler+0x1aa>
 800434e:	2201      	movs	r2, #1
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f893 	bl	800448c <HAL_DFSDM_FilterAwdCallback>
  {
 8004366:	e07e      	b.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a40      	ldr	r2, [pc, #256]	; (8004470 <HAL_DFSDM_IRQHandler+0x2c4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d141      	bne.n	80043f6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03c      	beq.n	80043f6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004382:	2b00      	cmp	r3, #0
 8004384:	d037      	beq.n	80043f6 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	b2db      	uxtb	r3, r3
 8004394:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004396:	e02a      	b.n	80043ee <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01f      	beq.n	80043e2 <HAL_DFSDM_IRQHandler+0x236>
 80043a2:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_DFSDM_IRQHandler+0x2c8>)
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d019      	beq.n	80043e2 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80043ae:	4a31      	ldr	r2, [pc, #196]	; (8004474 <HAL_DFSDM_IRQHandler+0x2c8>)
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00f      	beq.n	80043e2 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f103 0210 	add.w	r2, r3, #16
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <HAL_DFSDM_IRQHandler+0x2c8>)
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fd25 	bl	8003e2c <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	3301      	adds	r3, #1
 80043e6:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2b07      	cmp	r3, #7
 80043f2:	d9d1      	bls.n	8004398 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80043f4:	e037      	b.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <HAL_DFSDM_IRQHandler+0x2c4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d132      	bne.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02d      	beq.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004410:	2b00      	cmp	r3, #0
 8004412:	d028      	beq.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0e1b      	lsrs	r3, r3, #24
 8004420:	b2db      	uxtb	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004424:	e005      	b.n	8004432 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3301      	adds	r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_DFSDM_IRQHandler+0x296>
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d9f1      	bls.n	8004426 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f103 0218 	add.w	r2, r3, #24
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f202 	lsl.w	r2, r1, r2
 8004452:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8004454:	4a07      	ldr	r2, [pc, #28]	; (8004474 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fcef 	bl	8003e40 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8004462:	e000      	b.n	8004466 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004464:	bf00      	nop
}
 8004466:	bf00      	nop
 8004468:	3730      	adds	r7, #48	; 0x30
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40016100 	.word	0x40016100
 8004474:	20011244 	.word	0x20011244

08004478 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7fd fd4e 	bl	8001f68 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7fd fbea 	bl	8001cbc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2203      	movs	r2, #3
 8004502:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ffcd 	bl	80044a4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <DFSDM_GetChannelFromInstance+0x7c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d102      	bne.n	800452a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e02b      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a19      	ldr	r2, [pc, #100]	; (8004594 <DFSDM_GetChannelFromInstance+0x80>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d102      	bne.n	8004538 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e024      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a17      	ldr	r2, [pc, #92]	; (8004598 <DFSDM_GetChannelFromInstance+0x84>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d102      	bne.n	8004546 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004540:	2302      	movs	r3, #2
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e01d      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <DFSDM_GetChannelFromInstance+0x88>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d102      	bne.n	8004554 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800454e:	2304      	movs	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e016      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d102      	bne.n	8004562 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800455c:	2305      	movs	r3, #5
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e00f      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <DFSDM_GetChannelFromInstance+0x90>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d102      	bne.n	8004570 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800456a:	2306      	movs	r3, #6
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e008      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <DFSDM_GetChannelFromInstance+0x94>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d102      	bne.n	800457e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004578:	2307      	movs	r3, #7
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e001      	b.n	8004582 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800457e:	2303      	movs	r3, #3
 8004580:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40016000 	.word	0x40016000
 8004594:	40016020 	.word	0x40016020
 8004598:	40016040 	.word	0x40016040
 800459c:	40016080 	.word	0x40016080
 80045a0:	400160a0 	.word	0x400160a0
 80045a4:	400160c0 	.word	0x400160c0
 80045a8:	400160e0 	.word	0x400160e0

080045ac <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e033      	b.n	8004636 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80045ec:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004604:	2b03      	cmp	r3, #3
 8004606:	d116      	bne.n	8004636 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <DFSDM_RegConvStart+0x84>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	e000      	b.n	8004632 <DFSDM_RegConvStart+0x86>
 8004630:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <DFSDM_RegConvStart+0x98>
 8004640:	2202      	movs	r2, #2
 8004642:	e000      	b.n	8004646 <DFSDM_RegConvStart+0x9a>
 8004644:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e08d      	b.n	8004786 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_DMA_Init+0x138>)
 8004672:	429a      	cmp	r2, r3
 8004674:	d80f      	bhi.n	8004696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <HAL_DMA_Init+0x13c>)
 800467e:	4413      	add	r3, r2
 8004680:	4a45      	ldr	r2, [pc, #276]	; (8004798 <HAL_DMA_Init+0x140>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	009a      	lsls	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_DMA_Init+0x144>)
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
 8004694:	e00e      	b.n	80046b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <HAL_DMA_Init+0x148>)
 800469e:	4413      	add	r3, r2
 80046a0:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <HAL_DMA_Init+0x140>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	009a      	lsls	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <HAL_DMA_Init+0x14c>)
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa4c 	bl	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004714:	d102      	bne.n	800471c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004730:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d010      	beq.n	800475c <HAL_DMA_Init+0x104>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b04      	cmp	r3, #4
 8004740:	d80c      	bhi.n	800475c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa6c 	bl	8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e008      	b.n	800476e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40020407 	.word	0x40020407
 8004794:	bffdfff8 	.word	0xbffdfff8
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	40020000 	.word	0x40020000
 80047a0:	bffdfbf8 	.word	0xbffdfbf8
 80047a4:	40020400 	.word	0x40020400

080047a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07b      	b.n	80048b2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_DMA_DeInit+0x114>)
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d80f      	bhi.n	80047f6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <HAL_DMA_DeInit+0x118>)
 80047de:	4413      	add	r3, r2
 80047e0:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <HAL_DMA_DeInit+0x11c>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	009a      	lsls	r2, r3, #2
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a35      	ldr	r2, [pc, #212]	; (80048c8 <HAL_DMA_DeInit+0x120>)
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
 80047f4:	e00e      	b.n	8004814 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_DMA_DeInit+0x124>)
 80047fe:	4413      	add	r3, r2
 8004800:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <HAL_DMA_DeInit+0x11c>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	009a      	lsls	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <HAL_DMA_DeInit+0x128>)
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	f003 021c 	and.w	r2, r3, #28
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f202 	lsl.w	r2, r1, r2
 800482e:	605a      	str	r2, [r3, #4]
#if defined(DMAMUX1)

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f9b7 	bl	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004846:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <HAL_DMA_DeInit+0xc8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d80b      	bhi.n	8004870 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f9e1 	bl	8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800486e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	65da      	str	r2, [r3, #92]	; 0x5c

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40020407 	.word	0x40020407
 80048c0:	bffdfff8 	.word	0xbffdfff8
 80048c4:	cccccccd 	.word	0xcccccccd
 80048c8:	40020000 	.word	0x40020000
 80048cc:	bffdfbf8 	.word	0xbffdfbf8
 80048d0:	40020400 	.word	0x40020400

080048d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_DMA_Start_IT+0x20>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e066      	b.n	80049c2 <HAL_DMA_Start_IT+0xee>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d155      	bne.n	80049b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f8fb 	bl	8004b28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 020e 	orr.w	r2, r2, #14
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e00f      	b.n	800496c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 020a 	orr.w	r2, r2, #10
 800496a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e005      	b.n	80049c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f003 031c 	and.w	r3, r3, #28
 80049ea:	2204      	movs	r2, #4
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d026      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x7a>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d021      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d107      	bne.n	8004a1e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0204 	bic.w	r2, r2, #4
 8004a1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f003 021c 	and.w	r2, r3, #28
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2104      	movs	r1, #4
 8004a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a30:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d071      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004a42:	e06c      	b.n	8004b1e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	f003 031c 	and.w	r3, r3, #28
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02e      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xec>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d029      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 020a 	bic.w	r2, r2, #10
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	f003 021c 	and.w	r2, r3, #28
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2102      	movs	r1, #2
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d038      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ab4:	e033      	b.n	8004b1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f003 031c 	and.w	r3, r3, #28
 8004abe:	2208      	movs	r2, #8
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02a      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x156>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d025      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020e 	bic.w	r2, r2, #14
 8004ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	f003 021c 	and.w	r2, r3, #28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f202 	lsl.w	r2, r1, r2
 8004af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
}
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b3e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b50:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	f003 021c 	and.w	r2, r3, #28
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2101      	movs	r1, #1
 8004b60:	fa01 f202 	lsl.w	r2, r1, r2
 8004b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d108      	bne.n	8004b88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b86:	e007      	b.n	8004b98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d80a      	bhi.n	8004bce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bc4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6493      	str	r3, [r2, #72]	; 0x48
 8004bcc:	e007      	b.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	009a      	lsls	r2, r3, #2
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b08      	subs	r3, #8
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40020407 	.word	0x40020407
 8004c14:	4002081c 	.word	0x4002081c
 8004c18:	cccccccd 	.word	0xcccccccd
 8004c1c:	40020880 	.word	0x40020880

08004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	1000823f 	.word	0x1000823f
 8004c64:	40020940 	.word	0x40020940

08004c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c76:	e166      	b.n	8004f46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	4013      	ands	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8158 	beq.w	8004f40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d005      	beq.n	8004ca8 <HAL_GPIO_Init+0x40>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d130      	bne.n	8004d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cde:	2201      	movs	r2, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	f003 0201 	and.w	r2, r3, #1
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d017      	beq.n	8004d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	2203      	movs	r2, #3
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d123      	bne.n	8004d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	08da      	lsrs	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3208      	adds	r2, #8
 8004d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	220f      	movs	r2, #15
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	08da      	lsrs	r2, r3, #3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3208      	adds	r2, #8
 8004d94:	6939      	ldr	r1, [r7, #16]
 8004d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80b2 	beq.w	8004f40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ddc:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <HAL_GPIO_Init+0x2fc>)
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	4a60      	ldr	r2, [pc, #384]	; (8004f64 <HAL_GPIO_Init+0x2fc>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6613      	str	r3, [r2, #96]	; 0x60
 8004de8:	4b5e      	ldr	r3, [pc, #376]	; (8004f64 <HAL_GPIO_Init+0x2fc>)
 8004dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004df4:	4a5c      	ldr	r2, [pc, #368]	; (8004f68 <HAL_GPIO_Init+0x300>)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	089b      	lsrs	r3, r3, #2
 8004dfa:	3302      	adds	r3, #2
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	220f      	movs	r2, #15
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	43db      	mvns	r3, r3
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e1e:	d02b      	beq.n	8004e78 <HAL_GPIO_Init+0x210>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a52      	ldr	r2, [pc, #328]	; (8004f6c <HAL_GPIO_Init+0x304>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d025      	beq.n	8004e74 <HAL_GPIO_Init+0x20c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a51      	ldr	r2, [pc, #324]	; (8004f70 <HAL_GPIO_Init+0x308>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01f      	beq.n	8004e70 <HAL_GPIO_Init+0x208>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a50      	ldr	r2, [pc, #320]	; (8004f74 <HAL_GPIO_Init+0x30c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d019      	beq.n	8004e6c <HAL_GPIO_Init+0x204>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a4f      	ldr	r2, [pc, #316]	; (8004f78 <HAL_GPIO_Init+0x310>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_GPIO_Init+0x200>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <HAL_GPIO_Init+0x314>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00d      	beq.n	8004e64 <HAL_GPIO_Init+0x1fc>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a4d      	ldr	r2, [pc, #308]	; (8004f80 <HAL_GPIO_Init+0x318>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <HAL_GPIO_Init+0x1f8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a4c      	ldr	r2, [pc, #304]	; (8004f84 <HAL_GPIO_Init+0x31c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_GPIO_Init+0x1f4>
 8004e58:	2307      	movs	r3, #7
 8004e5a:	e00e      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	e00c      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e60:	2306      	movs	r3, #6
 8004e62:	e00a      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e64:	2305      	movs	r3, #5
 8004e66:	e008      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	e006      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e004      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e002      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	f002 0203 	and.w	r2, r2, #3
 8004e80:	0092      	lsls	r2, r2, #2
 8004e82:	4093      	lsls	r3, r2
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e8a:	4937      	ldr	r1, [pc, #220]	; (8004f68 <HAL_GPIO_Init+0x300>)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	3302      	adds	r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e98:	4b3b      	ldr	r3, [pc, #236]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ebc:	4a32      	ldr	r2, [pc, #200]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ec2:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ee6:	4a28      	ldr	r2, [pc, #160]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004eec:	4b26      	ldr	r3, [pc, #152]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f3a:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3301      	adds	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f ae91 	bne.w	8004c78 <HAL_GPIO_Init+0x10>
  }
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	48000400 	.word	0x48000400
 8004f70:	48000800 	.word	0x48000800
 8004f74:	48000c00 	.word	0x48000c00
 8004f78:	48001000 	.word	0x48001000
 8004f7c:	48001400 	.word	0x48001400
 8004f80:	48001800 	.word	0x48001800
 8004f84:	48001c00 	.word	0x48001c00
 8004f88:	40010400 	.word	0x40010400

08004f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f9c:	787b      	ldrb	r3, [r7, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fa8:	e002      	b.n	8004fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fbe:	b08f      	sub	sp, #60	; 0x3c
 8004fc0:	af0a      	add	r7, sp, #40	; 0x28
 8004fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e116      	b.n	80051fc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fb ffb5 	bl	8000f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f002 fea0 	bl	8007d52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	687e      	ldr	r6, [r7, #4]
 800501a:	466d      	mov	r5, sp
 800501c:	f106 0410 	add.w	r4, r6, #16
 8005020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800502c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005030:	1d33      	adds	r3, r6, #4
 8005032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005034:	6838      	ldr	r0, [r7, #0]
 8005036:	f002 fdb3 	bl	8007ba0 <USB_CoreInit>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0d7      	b.n	80051fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f002 fe8e 	bl	8007d74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]
 800505c:	e04a      	b.n	80050f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800505e:	7bfa      	ldrb	r2, [r7, #15]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	333d      	adds	r3, #61	; 0x3d
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	333c      	adds	r3, #60	; 0x3c
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	b298      	uxth	r0, r3
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3342      	adds	r3, #66	; 0x42
 800509a:	4602      	mov	r2, r0
 800509c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	333f      	adds	r3, #63	; 0x3f
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3344      	adds	r3, #68	; 0x44
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050c6:	7bfa      	ldrb	r2, [r7, #15]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3348      	adds	r3, #72	; 0x48
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3350      	adds	r3, #80	; 0x50
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3301      	adds	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3af      	bcc.n	800505e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
 8005102:	e044      	b.n	800518e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005104:	7bfa      	ldrb	r2, [r7, #15]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	3301      	adds	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	7bfa      	ldrb	r2, [r7, #15]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d3b5      	bcc.n	8005104 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	687e      	ldr	r6, [r7, #4]
 80051a0:	466d      	mov	r5, sp
 80051a2:	f106 0410 	add.w	r4, r6, #16
 80051a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80051b6:	1d33      	adds	r3, r6, #4
 80051b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ba:	6838      	ldr	r0, [r7, #0]
 80051bc:	f002 fe26 	bl	8007e0c <USB_DevInit>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e014      	b.n	80051fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ff6c 	bl	80060c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f003 fdf8 	bl	8008dea <USB_DevDisconnect>

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_PCD_Start+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e01c      	b.n	800525a <HAL_PCD_Start+0x56>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f002 fd75 	bl	8007d30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f003 fdac 	bl	8008da8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005262:	b590      	push	{r4, r7, lr}
 8005264:	b08d      	sub	sp, #52	; 0x34
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f003 fe6a 	bl	8008f52 <USB_GetMode>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f040 8384 	bne.w	800598e <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f003 fdce 	bl	8008e2c <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 837a 	beq.w	800598c <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f003 fdc5 	bl	8008e2c <USB_ReadInterrupts>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d107      	bne.n	80052bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f002 0202 	and.w	r2, r2, #2
 80052ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f003 fdb3 	bl	8008e2c <USB_ReadInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d161      	bne.n	8005394 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0210 	bic.w	r2, r2, #16
 80052de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	0c5b      	lsrs	r3, r3, #17
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	2b02      	cmp	r3, #2
 800530a:	d124      	bne.n	8005356 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d035      	beq.n	8005384 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	6a38      	ldr	r0, [r7, #32]
 800532c:	f003 fbea 	bl	8008b04 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800533c:	441a      	add	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800534e:	441a      	add	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	619a      	str	r2, [r3, #24]
 8005354:	e016      	b.n	8005384 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	0c5b      	lsrs	r3, r3, #17
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	2b06      	cmp	r3, #6
 8005360:	d110      	bne.n	8005384 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005368:	2208      	movs	r2, #8
 800536a:	4619      	mov	r1, r3
 800536c:	6a38      	ldr	r0, [r7, #32]
 800536e:	f003 fbc9 	bl	8008b04 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537e:	441a      	add	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0210 	orr.w	r2, r2, #16
 8005392:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f003 fd47 	bl	8008e2c <USB_ReadInterrupts>
 800539e:	4603      	mov	r3, r0
 80053a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053a8:	d16e      	bne.n	8005488 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f003 fd4d 	bl	8008e52 <USB_ReadDevAllOutEpInterrupt>
 80053b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80053ba:	e062      	b.n	8005482 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d057      	beq.n	8005476 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f003 fd72 	bl	8008eba <USB_ReadDevOutEPInterrupt>
 80053d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	461a      	mov	r2, r3
 80053f0:	2301      	movs	r3, #1
 80053f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80053f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fd8c 	bl	8005f14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	2308      	movs	r3, #8
 8005416:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fdc8 	bl	8005fb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	2310      	movs	r3, #16
 800543a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	461a      	mov	r2, r3
 8005454:	2320      	movs	r3, #32
 8005456:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	461a      	mov	r2, r3
 8005470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005474:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d199      	bne.n	80053bc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f003 fccd 	bl	8008e2c <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800549c:	f040 808c 	bne.w	80055b8 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 fcee 	bl	8008e86 <USB_ReadDevAllInEpInterrupt>
 80054aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80054b0:	e07e      	b.n	80055b0 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d073      	beq.n	80055a4 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	4611      	mov	r1, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fd15 	bl	8008ef6 <USB_ReadDevInEPInterrupt>
 80054cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	2201      	movs	r2, #1
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69f9      	ldr	r1, [r7, #28]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4013      	ands	r3, r2
 80054fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	2301      	movs	r3, #1
 800550c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	b2db      	uxtb	r3, r3
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7fb fd8e 	bl	8001036 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	2308      	movs	r3, #8
 8005534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	461a      	mov	r2, r3
 800554e:	2310      	movs	r3, #16
 8005550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	461a      	mov	r2, r3
 800556a:	2340      	movs	r3, #64	; 0x40
 800556c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800557a:	6a38      	ldr	r0, [r7, #32]
 800557c:	f002 fd92 	bl	80080a4 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	461a      	mov	r2, r3
 800558e:	2302      	movs	r3, #2
 8005590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800559c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc2f 	bl	8005e02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	3301      	adds	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f47f af7d 	bne.w	80054b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f003 fc35 	bl	8008e2c <USB_ReadInterrupts>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055cc:	d122      	bne.n	8005614 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d108      	bne.n	80055fe <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055f4:	2100      	movs	r1, #0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fd8a 	bl	8006110 <HAL_PCDEx_LPM_Callback>
 80055fc:	e002      	b.n	8005604 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb fd64 	bl	80010cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f003 fc07 	bl	8008e2c <USB_ReadInterrupts>
 800561e:	4603      	mov	r3, r0
 8005620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005628:	d112      	bne.n	8005650 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d102      	bne.n	8005640 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fd38 	bl	80010b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800564e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f003 fbe9 	bl	8008e2c <USB_ReadInterrupts>
 800565a:	4603      	mov	r3, r0
 800565c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005664:	d121      	bne.n	80056aa <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005674:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d111      	bne.n	80056a4 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	f003 020f 	and.w	r2, r3, #15
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800569a:	2101      	movs	r1, #1
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fd37 	bl	8006110 <HAL_PCDEx_LPM_Callback>
 80056a2:	e002      	b.n	80056aa <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb fd03 	bl	80010b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 fbbc 	bl	8008e2c <USB_ReadInterrupts>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	f040 80b5 	bne.w	800582c <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2110      	movs	r1, #16
 80056dc:	4618      	mov	r0, r3
 80056de:	f002 fce1 	bl	80080a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e6:	e046      	b.n	8005776 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	461a      	mov	r2, r3
 80056f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800571a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800572e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800574e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800576e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	3301      	adds	r3, #1
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577c:	429a      	cmp	r2, r3
 800577e:	d3b3      	bcc.n	80056e8 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005792:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	2b00      	cmp	r3, #0
 800579a:	d016      	beq.n	80057ca <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f043 030b 	orr.w	r3, r3, #11
 80057b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c2:	f043 030b 	orr.w	r3, r3, #11
 80057c6:	6453      	str	r3, [r2, #68]	; 0x44
 80057c8:	e015      	b.n	80057f6 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80057e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f0:	f043 030b 	orr.w	r3, r3, #11
 80057f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005804:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005808:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f003 fbcc 	bl	8008fb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800582a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f003 fafb 	bl	8008e2c <USB_ReadInterrupts>
 8005836:	4603      	mov	r3, r0
 8005838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005840:	d124      	bne.n	800588c <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f003 fb91 	bl	8008f6e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f002 fca0 	bl	8008196 <USB_GetDevSpeed>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681c      	ldr	r4, [r3, #0]
 8005862:	f001 fb59 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8005866:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	4620      	mov	r0, r4
 8005872:	f002 f9c1 	bl	8007bf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb fc05 	bl	8001086 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800588a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f003 facb 	bl	8008e2c <USB_ReadInterrupts>
 8005896:	4603      	mov	r3, r0
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b08      	cmp	r3, #8
 800589e:	d10a      	bne.n	80058b6 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7fb fbe2 	bl	800106a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f002 0208 	and.w	r2, r2, #8
 80058b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f003 fab6 	bl	8008e2c <USB_ReadInterrupts>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ca:	d10f      	bne.n	80058ec <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fb fc18 	bl	800110c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695a      	ldr	r2, [r3, #20]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f003 fa9b 	bl	8008e2c <USB_ReadInterrupts>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005900:	d10f      	bne.n	8005922 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	b2db      	uxtb	r3, r3
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fb fbeb 	bl	80010e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f003 fa80 	bl	8008e2c <USB_ReadInterrupts>
 800592c:	4603      	mov	r3, r0
 800592e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d10a      	bne.n	800594e <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fb fbf9 	bl	8001130 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800594c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f003 fa6a 	bl	8008e2c <USB_ReadInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d115      	bne.n	800598e <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fb fbe9 	bl	800114c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6859      	ldr	r1, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	e000      	b.n	800598e <HAL_PCD_IRQHandler+0x72c>
      return;
 800598c:	bf00      	nop
    }
  }
}
 800598e:	3734      	adds	r7, #52	; 0x34
 8005990:	46bd      	mov	sp, r7
 8005992:	bd90      	pop	{r4, r7, pc}

08005994 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_PCD_SetAddress+0x1a>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e013      	b.n	80059d6 <HAL_PCD_SetAddress+0x42>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f003 f9c8 	bl	8008d5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	4608      	mov	r0, r1
 80059e8:	4611      	mov	r1, r2
 80059ea:	461a      	mov	r2, r3
 80059ec:	4603      	mov	r3, r0
 80059ee:	70fb      	strb	r3, [r7, #3]
 80059f0:	460b      	mov	r3, r1
 80059f2:	803b      	strh	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da0f      	bge.n	8005a24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 020f 	and.w	r2, r3, #15
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3338      	adds	r3, #56	; 0x38
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	3304      	adds	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	705a      	strb	r2, [r3, #1]
 8005a22:	e00f      	b.n	8005a44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	f003 020f 	and.w	r2, r3, #15
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a50:	883a      	ldrh	r2, [r7, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	78ba      	ldrb	r2, [r7, #2]
 8005a5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a6e:	78bb      	ldrb	r3, [r7, #2]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d102      	bne.n	8005a7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_PCD_EP_Open+0xaa>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e00e      	b.n	8005aa6 <HAL_PCD_EP_Open+0xc8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68f9      	ldr	r1, [r7, #12]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f002 fb9c 	bl	80081d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005aa4:	7afb      	ldrb	r3, [r7, #11]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da0f      	bge.n	8005ae2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	f003 020f 	and.w	r2, r3, #15
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	3338      	adds	r3, #56	; 0x38
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	705a      	strb	r2, [r3, #1]
 8005ae0:	e00f      	b.n	8005b02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ae2:	78fb      	ldrb	r3, [r7, #3]
 8005ae4:	f003 020f 	and.w	r2, r3, #15
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	3304      	adds	r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_PCD_EP_Close+0x6e>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e00e      	b.n	8005b3a <HAL_PCD_EP_Close+0x8c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 fbda 	bl	80082e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	f003 020f 	and.w	r2, r3, #15
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	3304      	adds	r3, #4
 8005b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f002 fe57 	bl	8008854 <USB_EP0StartXfer>
 8005ba6:	e005      	b.n	8005bb4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f002 fc74 	bl	800849c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bce:	7afb      	ldrb	r3, [r7, #11]
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	3338      	adds	r3, #56	; 0x38
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	3304      	adds	r3, #4
 8005be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6979      	ldr	r1, [r7, #20]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f002 fe1a 	bl	8008854 <USB_EP0StartXfer>
 8005c20:	e005      	b.n	8005c2e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f002 fc37 	bl	800849c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	f003 020f 	and.w	r2, r3, #15
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d901      	bls.n	8005c56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e04e      	b.n	8005cf4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da0f      	bge.n	8005c7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	3338      	adds	r3, #56	; 0x38
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	3304      	adds	r3, #4
 8005c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	705a      	strb	r2, [r3, #1]
 8005c7c:	e00d      	b.n	8005c9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4413      	add	r3, r2
 8005c90:	3304      	adds	r3, #4
 8005c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_PCD_EP_SetStall+0x82>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e01c      	b.n	8005cf4 <HAL_PCD_EP_SetStall+0xbc>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f002 ff73 	bl	8008bb4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d108      	bne.n	8005cea <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f003 f965 	bl	8008fb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 020f 	and.w	r2, r3, #15
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d901      	bls.n	8005d1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e042      	b.n	8005da0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da0f      	bge.n	8005d42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	3338      	adds	r3, #56	; 0x38
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	3304      	adds	r3, #4
 8005d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	705a      	strb	r2, [r3, #1]
 8005d40:	e00f      	b.n	8005d62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4413      	add	r3, r2
 8005d58:	3304      	adds	r3, #4
 8005d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_PCD_EP_ClrStall+0x86>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e00e      	b.n	8005da0 <HAL_PCD_EP_ClrStall+0xa4>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f002 ff7d 	bl	8008c90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_PCD_EP_Flush+0x1a>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e01b      	b.n	8005dfa <HAL_PCD_EP_Flush+0x52>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da09      	bge.n	8005de6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f002 f960 	bl	80080a4 <USB_FlushTxFifo>
 8005de4:	e004      	b.n	8005df0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 f98c 	bl	8008108 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b088      	sub	sp, #32
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	3338      	adds	r3, #56	; 0x38
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	3304      	adds	r3, #4
 8005e28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d901      	bls.n	8005e3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e067      	b.n	8005f0a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d902      	bls.n	8005e56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e5e:	e026      	b.n	8005eae <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d902      	bls.n	8005e7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	3303      	adds	r3, #3
 8005e80:	089b      	lsrs	r3, r3, #2
 8005e82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68d9      	ldr	r1, [r3, #12]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f002 fdfd 	bl	8008a90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	441a      	add	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d809      	bhi.n	8005ed8 <PCD_WriteEmptyTxFifo+0xd6>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d203      	bcs.n	8005ed8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1c3      	bne.n	8005e60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	695a      	ldr	r2, [r3, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d811      	bhi.n	8005f08 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	2201      	movs	r2, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	6939      	ldr	r1, [r7, #16]
 8005f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f04:	4013      	ands	r3, r2
 8005f06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	333c      	adds	r3, #60	; 0x3c
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a19      	ldr	r2, [pc, #100]	; (8005fac <PCD_EP_OutXfrComplete_int+0x98>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d124      	bne.n	8005f94 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	461a      	mov	r2, r3
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	e01a      	b.n	8005fa0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	2320      	movs	r3, #32
 8005f84:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fb f837 	bl	8001000 <HAL_PCD_DataOutStageCallback>
 8005f92:	e005      	b.n	8005fa0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fb f830 	bl	8001000 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	4f54310a 	.word	0x4f54310a

08005fb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	333c      	adds	r3, #60	; 0x3c
 8005fc8:	3304      	adds	r3, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <PCD_EP_OutSetupPacket_int+0x64>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d90e      	bls.n	8006004 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d009      	beq.n	8006004 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006002:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fa ffe9 	bl	8000fdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	4f54300a 	.word	0x4f54300a

08006018 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
 8006024:	4613      	mov	r3, r2
 8006026:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d107      	bne.n	8006046 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006036:	883b      	ldrh	r3, [r7, #0]
 8006038:	0419      	lsls	r1, r3, #16
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	430a      	orrs	r2, r1
 8006042:	629a      	str	r2, [r3, #40]	; 0x28
 8006044:	e028      	b.n	8006098 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4413      	add	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	e00d      	b.n	8006076 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	3340      	adds	r3, #64	; 0x40
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4413      	add	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	3301      	adds	r3, #1
 8006074:	73fb      	strb	r3, [r7, #15]
 8006076:	7bfa      	ldrb	r2, [r7, #15]
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	3b01      	subs	r3, #1
 800607c:	429a      	cmp	r2, r3
 800607e:	d3ec      	bcc.n	800605a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006080:	883b      	ldrh	r3, [r7, #0]
 8006082:	0418      	lsls	r0, r3, #16
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6819      	ldr	r1, [r3, #0]
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	3b01      	subs	r3, #1
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	4302      	orrs	r2, r0
 8006090:	3340      	adds	r3, #64	; 0x40
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	887a      	ldrh	r2, [r7, #2]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fa:	f043 0303 	orr.w	r3, r3, #3
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a04      	ldr	r2, [pc, #16]	; (8006144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40007000 	.word	0x40007000

08006148 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_PWREx_GetVoltageRange+0x3c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d102      	bne.n	8006160 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800615a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615e:	e00b      	b.n	8006178 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616e:	d102      	bne.n	8006176 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006174:	e000      	b.n	8006178 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006176:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40007000 	.word	0x40007000

08006188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d141      	bne.n	800621a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006196:	4b4b      	ldr	r3, [pc, #300]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800619e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a2:	d131      	bne.n	8006208 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061a4:	4b47      	ldr	r3, [pc, #284]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061aa:	4a46      	ldr	r2, [pc, #280]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b4:	4b43      	ldr	r3, [pc, #268]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061bc:	4a41      	ldr	r2, [pc, #260]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80061c4:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2232      	movs	r2, #50	; 0x32
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	4a3f      	ldr	r2, [pc, #252]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061d0:	fba2 2303 	umull	r2, r3, r2, r3
 80061d4:	0c9b      	lsrs	r3, r3, #18
 80061d6:	3301      	adds	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061da:	e002      	b.n	80061e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3b01      	subs	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061e2:	4b38      	ldr	r3, [pc, #224]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ee:	d102      	bne.n	80061f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f2      	bne.n	80061dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061f6:	4b33      	ldr	r3, [pc, #204]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	d158      	bne.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e057      	b.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006208:	4b2e      	ldr	r3, [pc, #184]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620e:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006218:	e04d      	b.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006220:	d141      	bne.n	80062a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006222:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622e:	d131      	bne.n	8006294 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006236:	4a23      	ldr	r2, [pc, #140]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006240:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006248:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800624e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006250:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2232      	movs	r2, #50	; 0x32
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	0c9b      	lsrs	r3, r3, #18
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006266:	e002      	b.n	800626e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3b01      	subs	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800626e:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627a:	d102      	bne.n	8006282 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f2      	bne.n	8006268 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d112      	bne.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e011      	b.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80062a4:	e007      	b.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062ae:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	40007000 	.word	0x40007000
 80062c8:	20000068 	.word	0x20000068
 80062cc:	431bde83 	.word	0x431bde83

080062d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a04      	ldr	r2, [pc, #16]	; (80062ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80062da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062de:	6053      	str	r3, [r2, #4]
}
 80062e0:	bf00      	nop
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40007000 	.word	0x40007000

080062f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f000 bc1a 	b.w	8006b38 <HAL_RCC_OscConfig+0x848>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006304:	4b96      	ldr	r3, [pc, #600]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800630e:	4b94      	ldr	r3, [pc, #592]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80e4 	beq.w	80064ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_RCC_OscConfig+0x4c>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	2b0c      	cmp	r3, #12
 8006330:	f040 808b 	bne.w	800644a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b01      	cmp	r3, #1
 8006338:	f040 8087 	bne.w	800644a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800633c:	4b88      	ldr	r3, [pc, #544]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_OscConfig+0x64>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e3f1      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1a      	ldr	r2, [r3, #32]
 8006358:	4b81      	ldr	r3, [pc, #516]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <HAL_RCC_OscConfig+0x7e>
 8006364:	4b7e      	ldr	r3, [pc, #504]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	e005      	b.n	800637a <HAL_RCC_OscConfig+0x8a>
 800636e:	4b7c      	ldr	r3, [pc, #496]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800637a:	4293      	cmp	r3, r2
 800637c:	d223      	bcs.n	80063c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fdd4 	bl	8006f30 <RCC_SetFlashLatencyFromMSIRange>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e3d2      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006392:	4b73      	ldr	r3, [pc, #460]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a72      	ldr	r2, [pc, #456]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006398:	f043 0308 	orr.w	r3, r3, #8
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b70      	ldr	r3, [pc, #448]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	496d      	ldr	r1, [pc, #436]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063b0:	4b6b      	ldr	r3, [pc, #428]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4968      	ldr	r1, [pc, #416]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
 80063c4:	e025      	b.n	8006412 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063c6:	4b66      	ldr	r3, [pc, #408]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a65      	ldr	r2, [pc, #404]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063cc:	f043 0308 	orr.w	r3, r3, #8
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b63      	ldr	r3, [pc, #396]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	4960      	ldr	r1, [pc, #384]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063e4:	4b5e      	ldr	r3, [pc, #376]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	495b      	ldr	r1, [pc, #364]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fd94 	bl	8006f30 <RCC_SetFlashLatencyFromMSIRange>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e392      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006412:	f000 fcf7 	bl	8006e04 <HAL_RCC_GetSysClockFreq>
 8006416:	4602      	mov	r2, r0
 8006418:	4b51      	ldr	r3, [pc, #324]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	4950      	ldr	r1, [pc, #320]	; (8006564 <HAL_RCC_OscConfig+0x274>)
 8006424:	5ccb      	ldrb	r3, [r1, r3]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	fa22 f303 	lsr.w	r3, r2, r3
 800642e:	4a4e      	ldr	r2, [pc, #312]	; (8006568 <HAL_RCC_OscConfig+0x278>)
 8006430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006432:	4b4e      	ldr	r3, [pc, #312]	; (800656c <HAL_RCC_OscConfig+0x27c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc f99a 	bl	8002770 <HAL_InitTick>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d052      	beq.n	80064ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	e376      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d032      	beq.n	80064b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006452:	4b43      	ldr	r3, [pc, #268]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a42      	ldr	r2, [pc, #264]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800645e:	f7fc f9d7 	bl	8002810 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006466:	f7fc f9d3 	bl	8002810 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e35f      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006478:	4b39      	ldr	r3, [pc, #228]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006484:	4b36      	ldr	r3, [pc, #216]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a35      	ldr	r2, [pc, #212]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800648a:	f043 0308 	orr.w	r3, r3, #8
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b33      	ldr	r3, [pc, #204]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	4930      	ldr	r1, [pc, #192]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064a2:	4b2f      	ldr	r3, [pc, #188]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	492b      	ldr	r1, [pc, #172]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
 80064b6:	e01a      	b.n	80064ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064b8:	4b29      	ldr	r3, [pc, #164]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a28      	ldr	r2, [pc, #160]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064c4:	f7fc f9a4 	bl	8002810 <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064cc:	f7fc f9a0 	bl	8002810 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e32c      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f0      	bne.n	80064cc <HAL_RCC_OscConfig+0x1dc>
 80064ea:	e000      	b.n	80064ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d077      	beq.n	80065ea <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d005      	beq.n	800650c <HAL_RCC_OscConfig+0x21c>
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b0c      	cmp	r3, #12
 8006504:	d10e      	bne.n	8006524 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d10b      	bne.n	8006524 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800650c:	4b14      	ldr	r3, [pc, #80]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d067      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2f8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d163      	bne.n	80065e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e309      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d106      	bne.n	800653c <HAL_RCC_OscConfig+0x24c>
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a0b      	ldr	r2, [pc, #44]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e025      	b.n	8006588 <HAL_RCC_OscConfig+0x298>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006544:	d114      	bne.n	8006570 <HAL_RCC_OscConfig+0x280>
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a05      	ldr	r2, [pc, #20]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 800654c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	4b03      	ldr	r3, [pc, #12]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a02      	ldr	r2, [pc, #8]	; (8006560 <HAL_RCC_OscConfig+0x270>)
 8006558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e013      	b.n	8006588 <HAL_RCC_OscConfig+0x298>
 8006560:	40021000 	.word	0x40021000
 8006564:	0800d2d4 	.word	0x0800d2d4
 8006568:	20000068 	.word	0x20000068
 800656c:	2000006c 	.word	0x2000006c
 8006570:	4ba2      	ldr	r3, [pc, #648]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4aa1      	ldr	r2, [pc, #644]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4b9f      	ldr	r3, [pc, #636]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a9e      	ldr	r2, [pc, #632]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d015      	beq.n	80065bc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fc f93e 	bl	8002810 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fc f93a 	bl	8002810 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e2c4      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ae:	4b93      	ldr	r3, [pc, #588]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ee      	beq.n	8006598 <HAL_RCC_OscConfig+0x2a8>
 80065ba:	e016      	b.n	80065ea <HAL_RCC_OscConfig+0x2fa>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fc f928 	bl	8002810 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c2:	e00a      	b.n	80065da <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fc f924 	bl	8002810 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e2ae      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065da:	4b88      	ldr	r3, [pc, #544]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1ee      	bne.n	80065c4 <HAL_RCC_OscConfig+0x2d4>
 80065e6:	e000      	b.n	80065ea <HAL_RCC_OscConfig+0x2fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d060      	beq.n	80066b8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d005      	beq.n	8006608 <HAL_RCC_OscConfig+0x318>
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d119      	bne.n	8006636 <HAL_RCC_OscConfig+0x346>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d116      	bne.n	8006636 <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006608:	4b7c      	ldr	r3, [pc, #496]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_OscConfig+0x330>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e28b      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006620:	4b76      	ldr	r3, [pc, #472]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	061b      	lsls	r3, r3, #24
 800662e:	4973      	ldr	r1, [pc, #460]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006634:	e040      	b.n	80066b8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d023      	beq.n	8006686 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800663e:	4b6f      	ldr	r3, [pc, #444]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6e      	ldr	r2, [pc, #440]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7fc f8e1 	bl	8002810 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006652:	f7fc f8dd 	bl	8002810 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e269      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006664:	4b65      	ldr	r3, [pc, #404]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006670:	4b62      	ldr	r3, [pc, #392]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	495f      	ldr	r1, [pc, #380]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006680:	4313      	orrs	r3, r2
 8006682:	604b      	str	r3, [r1, #4]
 8006684:	e018      	b.n	80066b8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006686:	4b5d      	ldr	r3, [pc, #372]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a5c      	ldr	r2, [pc, #368]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fc f8bd 	bl	8002810 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800669a:	f7fc f8b9 	bl	8002810 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e245      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066ac:	4b53      	ldr	r3, [pc, #332]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f0      	bne.n	800669a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d03c      	beq.n	800673e <HAL_RCC_OscConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01c      	beq.n	8006706 <HAL_RCC_OscConfig+0x416>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066cc:	4b4b      	ldr	r3, [pc, #300]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80066ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d2:	4a4a      	ldr	r2, [pc, #296]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066dc:	f7fc f898 	bl	8002810 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e4:	f7fc f894 	bl	8002810 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e220      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f6:	4b41      	ldr	r3, [pc, #260]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80066f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0ef      	beq.n	80066e4 <HAL_RCC_OscConfig+0x3f4>
 8006704:	e01b      	b.n	800673e <HAL_RCC_OscConfig+0x44e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006706:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670c:	4a3b      	ldr	r2, [pc, #236]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006716:	f7fc f87b 	bl	8002810 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x440>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800671e:	f7fc f877 	bl	8002810 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e203      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006730:	4b32      	ldr	r3, [pc, #200]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1ef      	bne.n	800671e <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 80a6 	beq.w	8006898 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800674c:	2300      	movs	r3, #0
 800674e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006750:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <HAL_RCC_OscConfig+0x488>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800675c:	4b27      	ldr	r3, [pc, #156]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	4a26      	ldr	r2, [pc, #152]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 8006762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006766:	6593      	str	r3, [r2, #88]	; 0x58
 8006768:	4b24      	ldr	r3, [pc, #144]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006774:	2301      	movs	r3, #1
 8006776:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006778:	4b21      	ldr	r3, [pc, #132]	; (8006800 <HAL_RCC_OscConfig+0x510>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d118      	bne.n	80067b6 <HAL_RCC_OscConfig+0x4c6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006784:	4b1e      	ldr	r3, [pc, #120]	; (8006800 <HAL_RCC_OscConfig+0x510>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <HAL_RCC_OscConfig+0x510>)
 800678a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006790:	f7fc f83e 	bl	8002810 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x4ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006798:	f7fc f83a 	bl	8002810 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e1c6      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067aa:	4b15      	ldr	r3, [pc, #84]	; (8006800 <HAL_RCC_OscConfig+0x510>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0x4a8>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d108      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4e0>
 80067be:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	4a0d      	ldr	r2, [pc, #52]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067ce:	e029      	b.n	8006824 <HAL_RCC_OscConfig+0x534>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	d115      	bne.n	8006804 <HAL_RCC_OscConfig+0x514>
 80067d8:	4b08      	ldr	r3, [pc, #32]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	4a07      	ldr	r2, [pc, #28]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80067e0:	f043 0304 	orr.w	r3, r3, #4
 80067e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	4a03      	ldr	r2, [pc, #12]	; (80067fc <HAL_RCC_OscConfig+0x50c>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067f8:	e014      	b.n	8006824 <HAL_RCC_OscConfig+0x534>
 80067fa:	bf00      	nop
 80067fc:	40021000 	.word	0x40021000
 8006800:	40007000 	.word	0x40007000
 8006804:	4b9d      	ldr	r3, [pc, #628]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	4a9c      	ldr	r2, [pc, #624]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006814:	4b99      	ldr	r3, [pc, #612]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	4a98      	ldr	r2, [pc, #608]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d016      	beq.n	800685a <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fb fff0 	bl	8002810 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006832:	e00a      	b.n	800684a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fb ffec 	bl	8002810 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e176      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684a:	4b8c      	ldr	r3, [pc, #560]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ed      	beq.n	8006834 <HAL_RCC_OscConfig+0x544>
 8006858:	e015      	b.n	8006886 <HAL_RCC_OscConfig+0x596>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685a:	f7fb ffd9 	bl	8002810 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006860:	e00a      	b.n	8006878 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fb ffd5 	bl	8002810 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e15f      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006878:	4b80      	ldr	r3, [pc, #512]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1ed      	bne.n	8006862 <HAL_RCC_OscConfig+0x572>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b7b      	ldr	r3, [pc, #492]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	4a7a      	ldr	r2, [pc, #488]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006896:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d03c      	beq.n	800691e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01c      	beq.n	80068e6 <HAL_RCC_OscConfig+0x5f6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068ac:	4b73      	ldr	r3, [pc, #460]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80068ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b2:	4a72      	ldr	r2, [pc, #456]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068bc:	f7fb ffa8 	bl	8002810 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x5e6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c4:	f7fb ffa4 	bl	8002810 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e130      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d6:	4b69      	ldr	r3, [pc, #420]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80068d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0ef      	beq.n	80068c4 <HAL_RCC_OscConfig+0x5d4>
 80068e4:	e01b      	b.n	800691e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e6:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80068e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ec:	4a63      	ldr	r2, [pc, #396]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80068ee:	f023 0301 	bic.w	r3, r3, #1
 80068f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fb ff8b 	bl	8002810 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068fe:	f7fb ff87 	bl	8002810 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e113      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006910:	4b5a      	ldr	r3, [pc, #360]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1ef      	bne.n	80068fe <HAL_RCC_OscConfig+0x60e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8107 	beq.w	8006b36 <HAL_RCC_OscConfig+0x846>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	2b02      	cmp	r3, #2
 800692e:	f040 80cf 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x7e0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006932:	4b52      	ldr	r3, [pc, #328]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 0203 	and.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	429a      	cmp	r2, r3
 8006944:	d12c      	bne.n	80069a0 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	3b01      	subs	r3, #1
 8006952:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006954:	429a      	cmp	r2, r3
 8006956:	d123      	bne.n	80069a0 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006962:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d11b      	bne.n	80069a0 <HAL_RCC_OscConfig+0x6b0>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d113      	bne.n	80069a0 <HAL_RCC_OscConfig+0x6b0>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	3b01      	subs	r3, #1
 8006986:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006988:	429a      	cmp	r2, r3
 800698a:	d109      	bne.n	80069a0 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	3b01      	subs	r3, #1
 800699a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d071      	beq.n	8006a84 <HAL_RCC_OscConfig+0x794>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d068      	beq.n	8006a78 <HAL_RCC_OscConfig+0x788>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80069a6:	4b35      	ldr	r3, [pc, #212]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_RCC_OscConfig+0x6ce>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80069b2:	4b32      	ldr	r3, [pc, #200]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_OscConfig+0x6d2>
#endif
            )
          {
            return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0ba      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2d      	ldr	r2, [pc, #180]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80069c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069ce:	f7fb ff1f 	bl	8002810 <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x6f8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d6:	f7fb ff1b 	bl	8002810 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x6f8>
              {
                return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e0a7      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e8:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f0      	bne.n	80069d6 <HAL_RCC_OscConfig+0x6e6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069f4:	4b21      	ldr	r3, [pc, #132]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <HAL_RCC_OscConfig+0x790>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a04:	3a01      	subs	r2, #1
 8006a06:	0112      	lsls	r2, r2, #4
 8006a08:	4311      	orrs	r1, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a0e:	0212      	lsls	r2, r2, #8
 8006a10:	4311      	orrs	r1, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a16:	0852      	lsrs	r2, r2, #1
 8006a18:	3a01      	subs	r2, #1
 8006a1a:	0552      	lsls	r2, r2, #21
 8006a1c:	4311      	orrs	r1, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a22:	0852      	lsrs	r2, r2, #1
 8006a24:	3a01      	subs	r2, #1
 8006a26:	0652      	lsls	r2, r2, #25
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a2e:	06d2      	lsls	r2, r2, #27
 8006a30:	430a      	orrs	r2, r1
 8006a32:	4912      	ldr	r1, [pc, #72]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4a0c      	ldr	r2, [pc, #48]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a50:	f7fb fede 	bl	8002810 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x77a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a58:	f7fb feda 	bl	8002810 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x77a>
              {
                return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e066      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a6a:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <HAL_RCC_OscConfig+0x78c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x768>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a76:	e05e      	b.n	8006b36 <HAL_RCC_OscConfig+0x846>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e05d      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a84:	4b2e      	ldr	r3, [pc, #184]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d152      	bne.n	8006b36 <HAL_RCC_OscConfig+0x846>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a90:	4b2b      	ldr	r3, [pc, #172]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a9c:	4b28      	ldr	r3, [pc, #160]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006aa8:	f7fb feb2 	bl	8002810 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x7d2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab0:	f7fb feae 	bl	8002810 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x7d2>
            {
              return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e03a      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x7c0>
 8006ace:	e032      	b.n	8006b36 <HAL_RCC_OscConfig+0x846>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b0c      	cmp	r3, #12
 8006ad4:	d02d      	beq.n	8006b32 <HAL_RCC_OscConfig+0x842>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ae0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006aee:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006af4:	f023 0303 	bic.w	r3, r3, #3
 8006af8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006b00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0a:	f7fb fe81 	bl	8002810 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x834>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b12:	f7fb fe7d 	bl	8002810 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e009      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <HAL_RCC_OscConfig+0x850>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f0      	bne.n	8006b12 <HAL_RCC_OscConfig+0x822>
 8006b30:	e001      	b.n	8006b36 <HAL_RCC_OscConfig+0x846>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <HAL_RCC_OscConfig+0x848>
      }
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40021000 	.word	0x40021000

08006b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e10f      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b89      	ldr	r3, [pc, #548]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d910      	bls.n	8006b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b86      	ldr	r3, [pc, #536]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f023 020f 	bic.w	r2, r3, #15
 8006b72:	4984      	ldr	r1, [pc, #528]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b82      	ldr	r3, [pc, #520]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0f7      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8089 	beq.w	8006cac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d133      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba2:	4b79      	ldr	r3, [pc, #484]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0e4      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006bb2:	f000 fa17 	bl	8006fe4 <RCC_GetSysClockFreqFromPLLSource>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4a74      	ldr	r2, [pc, #464]	; (8006d8c <HAL_RCC_ClockConfig+0x248>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d955      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006bbe:	4b72      	ldr	r3, [pc, #456]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bca:	4b6f      	ldr	r3, [pc, #444]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd2:	4a6d      	ldr	r2, [pc, #436]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006bda:	2380      	movs	r3, #128	; 0x80
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	e044      	b.n	8006c6a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d03e      	beq.n	8006c6a <HAL_RCC_ClockConfig+0x126>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d13a      	bne.n	8006c6a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bf4:	4b64      	ldr	r3, [pc, #400]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfc:	4a62      	ldr	r2, [pc, #392]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e02f      	b.n	8006c6a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d107      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c12:	4b5d      	ldr	r3, [pc, #372]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d115      	bne.n	8006c4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0ac      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c2a:	4b57      	ldr	r3, [pc, #348]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e0a0      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c3a:	4b53      	ldr	r3, [pc, #332]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e098      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006c4a:	f000 f8db 	bl	8006e04 <HAL_RCC_GetSysClockFreq>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4a4e      	ldr	r2, [pc, #312]	; (8006d8c <HAL_RCC_ClockConfig+0x248>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d909      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c56:	4b4c      	ldr	r3, [pc, #304]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c5e:	4a4a      	ldr	r2, [pc, #296]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006c66:	2380      	movs	r3, #128	; 0x80
 8006c68:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c6a:	4b47      	ldr	r3, [pc, #284]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f023 0203 	bic.w	r2, r3, #3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4944      	ldr	r1, [pc, #272]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7c:	f7fb fdc8 	bl	8002810 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c82:	e00a      	b.n	8006c9a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c84:	f7fb fdc4 	bl	8002810 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e070      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9a:	4b3b      	ldr	r3, [pc, #236]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 020c 	and.w	r2, r3, #12
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d1eb      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cb8:	4b33      	ldr	r3, [pc, #204]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4930      	ldr	r1, [pc, #192]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
 8006cca:	e008      	b.n	8006cde <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d105      	bne.n	8006cde <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006cd2:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cdc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cde:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d210      	bcs.n	8006d0e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cec:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 020f 	bic.w	r2, r3, #15
 8006cf4:	4923      	ldr	r1, [pc, #140]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfc:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <HAL_RCC_ClockConfig+0x240>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d001      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e036      	b.n	8006d7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d1a:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	4918      	ldr	r1, [pc, #96]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d38:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4910      	ldr	r1, [pc, #64]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d4c:	f000 f85a 	bl	8006e04 <HAL_RCC_GetSysClockFreq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	490c      	ldr	r1, [pc, #48]	; (8006d90 <HAL_RCC_ClockConfig+0x24c>)
 8006d5e:	5ccb      	ldrb	r3, [r1, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <HAL_RCC_ClockConfig+0x250>)
 8006d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <HAL_RCC_ClockConfig+0x254>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fb fcfd 	bl	8002770 <HAL_InitTick>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]

  return status;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40022000 	.word	0x40022000
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	04c4b400 	.word	0x04c4b400
 8006d90:	0800d2d4 	.word	0x0800d2d4
 8006d94:	20000068 	.word	0x20000068
 8006d98:	2000006c 	.word	0x2000006c

08006d9c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <HAL_RCC_MCOConfig+0x64>)
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	4a14      	ldr	r2, [pc, #80]	; (8006e00 <HAL_RCC_MCOConfig+0x64>)
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006db4:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <HAL_RCC_MCOConfig+0x64>)
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006dd6:	f107 0314 	add.w	r3, r7, #20
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006de0:	f7fd ff42 	bl	8004c68 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <HAL_RCC_MCOConfig+0x64>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	4903      	ldr	r1, [pc, #12]	; (8006e00 <HAL_RCC_MCOConfig+0x64>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	608b      	str	r3, [r1, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	3728      	adds	r7, #40	; 0x28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40021000 	.word	0x40021000

08006e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	; 0x24
 8006e08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e12:	4b3e      	ldr	r3, [pc, #248]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 030c 	and.w	r3, r3, #12
 8006e1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e1c:	4b3b      	ldr	r3, [pc, #236]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_GetSysClockFreq+0x34>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d121      	bne.n	8006e76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d11e      	bne.n	8006e76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e38:	4b34      	ldr	r3, [pc, #208]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e44:	4b31      	ldr	r3, [pc, #196]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	e005      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e54:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e60:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10d      	bne.n	8006e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d102      	bne.n	8006e82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e7c:	4b25      	ldr	r3, [pc, #148]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	e004      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d101      	bne.n	8006e8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e88:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b0c      	cmp	r3, #12
 8006e90:	d134      	bne.n	8006efc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d003      	beq.n	8006eaa <HAL_RCC_GetSysClockFreq+0xa6>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d003      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0xac>
 8006ea8:	e005      	b.n	8006eb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eac:	617b      	str	r3, [r7, #20]
      break;
 8006eae:	e005      	b.n	8006ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006eb0:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eb2:	617b      	str	r3, [r7, #20]
      break;
 8006eb4:	e002      	b.n	8006ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	617b      	str	r3, [r7, #20]
      break;
 8006eba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ebc:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	091b      	lsrs	r3, r3, #4
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	fb03 f202 	mul.w	r2, r3, r2
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ee2:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	0e5b      	lsrs	r3, r3, #25
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	3301      	adds	r3, #1
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006efc:	69bb      	ldr	r3, [r7, #24]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3724      	adds	r7, #36	; 0x24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	0800d2ec 	.word	0x0800d2ec
 8006f14:	00f42400 	.word	0x00f42400

08006f18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f1c:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000068 	.word	0x20000068

08006f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f3c:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f48:	f7ff f8fe 	bl	8006148 <HAL_PWREx_GetVoltageRange>
 8006f4c:	6178      	str	r0, [r7, #20]
 8006f4e:	e014      	b.n	8006f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f50:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f54:	4a21      	ldr	r2, [pc, #132]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f68:	f7ff f8ee 	bl	8006148 <HAL_PWREx_GetVoltageRange>
 8006f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	4a1a      	ldr	r2, [pc, #104]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f80:	d10b      	bne.n	8006f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d913      	bls.n	8006fb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8006f8c:	d902      	bls.n	8006f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f8e:	2302      	movs	r3, #2
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	e00d      	b.n	8006fb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f94:	2301      	movs	r3, #1
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	e00a      	b.n	8006fb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f9e:	d902      	bls.n	8006fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	e004      	b.n	8006fb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b70      	cmp	r3, #112	; 0x70
 8006faa:	d101      	bne.n	8006fb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fac:	2301      	movs	r3, #1
 8006fae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f023 020f 	bic.w	r2, r3, #15
 8006fb8:	4909      	ldr	r1, [pc, #36]	; (8006fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d001      	beq.n	8006fd2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40022000 	.word	0x40022000

08006fe4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006fee:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d118      	bne.n	800702c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ffa:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d107      	bne.n	8007016 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800700c:	0a1b      	lsrs	r3, r3, #8
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e005      	b.n	8007022 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007016:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007022:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800702c:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b02      	cmp	r3, #2
 800703a:	d003      	beq.n	8007044 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b03      	cmp	r3, #3
 8007040:	d003      	beq.n	800704a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8007042:	e005      	b.n	8007050 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007044:	4b19      	ldr	r3, [pc, #100]	; (80070ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007046:	613b      	str	r3, [r7, #16]
    break;
 8007048:	e005      	b.n	8007056 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800704a:	4b18      	ldr	r3, [pc, #96]	; (80070ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800704c:	613b      	str	r3, [r7, #16]
    break;
 800704e:	e002      	b.n	8007056 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	613b      	str	r3, [r7, #16]
    break;
 8007054:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007056:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	091b      	lsrs	r3, r3, #4
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	3301      	adds	r3, #1
 8007062:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	fb03 f202 	mul.w	r2, r3, r2
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	fbb2 f3f3 	udiv	r3, r2, r3
 800707a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	0e5b      	lsrs	r3, r3, #25
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	3301      	adds	r3, #1
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007096:	683b      	ldr	r3, [r7, #0]
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40021000 	.word	0x40021000
 80070a8:	0800d2ec 	.word	0x0800d2ec
 80070ac:	00f42400 	.word	0x00f42400

080070b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070b8:	2300      	movs	r3, #0
 80070ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070bc:	2300      	movs	r3, #0
 80070be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d040      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d02a      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070d4:	2b80      	cmp	r3, #128	; 0x80
 80070d6:	d825      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80070d8:	2b60      	cmp	r3, #96	; 0x60
 80070da:	d026      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070dc:	2b60      	cmp	r3, #96	; 0x60
 80070de:	d821      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d006      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d81d      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d010      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80070f0:	e018      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070f2:	4b89      	ldr	r3, [pc, #548]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	4a88      	ldr	r2, [pc, #544]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070fe:	e015      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fb62 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007110:	e00c      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3320      	adds	r3, #32
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fc4d 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007122:	e003      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	74fb      	strb	r3, [r7, #19]
      break;
 8007128:	e000      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800712a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712c:	7cfb      	ldrb	r3, [r7, #19]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10b      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007132:	4b79      	ldr	r3, [pc, #484]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007138:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007140:	4975      	ldr	r1, [pc, #468]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007148:	e001      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714a:	7cfb      	ldrb	r3, [r7, #19]
 800714c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d047      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007162:	d030      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007168:	d82a      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800716a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800716e:	d02a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007174:	d824      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717a:	d008      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800717c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007180:	d81e      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718a:	d010      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800718c:	e018      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800718e:	4b62      	ldr	r3, [pc, #392]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	4a61      	ldr	r2, [pc, #388]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007198:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800719a:	e015      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fb14 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071ac:	e00c      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3320      	adds	r3, #32
 80071b2:	2100      	movs	r1, #0
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fbff 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071be:	e003      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	74fb      	strb	r3, [r7, #19]
      break;
 80071c4:	e000      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80071c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071ce:	4b52      	ldr	r3, [pc, #328]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	494e      	ldr	r1, [pc, #312]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80071e4:	e001      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	7cfb      	ldrb	r3, [r7, #19]
 80071e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 809f 	beq.w	8007336 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071f8:	2300      	movs	r3, #0
 80071fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071fc:	4b46      	ldr	r3, [pc, #280]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800720c:	2300      	movs	r3, #0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00d      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007212:	4b41      	ldr	r3, [pc, #260]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	4a40      	ldr	r2, [pc, #256]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800721c:	6593      	str	r3, [r2, #88]	; 0x58
 800721e:	4b3e      	ldr	r3, [pc, #248]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007226:	60bb      	str	r3, [r7, #8]
 8007228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800722a:	2301      	movs	r3, #1
 800722c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800722e:	4b3b      	ldr	r3, [pc, #236]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a3a      	ldr	r2, [pc, #232]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800723a:	f7fb fae9 	bl	8002810 <HAL_GetTick>
 800723e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007240:	e009      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007242:	f7fb fae5 	bl	8002810 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d902      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	74fb      	strb	r3, [r7, #19]
        break;
 8007254:	e005      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007256:	4b31      	ldr	r3, [pc, #196]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0ef      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007262:	7cfb      	ldrb	r3, [r7, #19]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d15b      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007268:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007272:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01f      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	429a      	cmp	r2, r3
 8007284:	d019      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007286:	4b24      	ldr	r3, [pc, #144]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007290:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007292:	4b21      	ldr	r3, [pc, #132]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007298:	4a1f      	ldr	r2, [pc, #124]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800729a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800729e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a8:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072b2:	4a19      	ldr	r2, [pc, #100]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d016      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fb faa4 	bl	8002810 <HAL_GetTick>
 80072c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ca:	e00b      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072cc:	f7fb faa0 	bl	8002810 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072da:	4293      	cmp	r3, r2
 80072dc:	d902      	bls.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	74fb      	strb	r3, [r7, #19]
            break;
 80072e2:	e006      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ec      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007308:	4903      	ldr	r1, [pc, #12]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007310:	e008      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007312:	7cfb      	ldrb	r3, [r7, #19]
 8007314:	74bb      	strb	r3, [r7, #18]
 8007316:	e005      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007318:	40021000 	.word	0x40021000
 800731c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	7cfb      	ldrb	r3, [r7, #19]
 8007322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007324:	7c7b      	ldrb	r3, [r7, #17]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d105      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732a:	4ba0      	ldr	r3, [pc, #640]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	4a9f      	ldr	r2, [pc, #636]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007342:	4b9a      	ldr	r3, [pc, #616]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f023 0203 	bic.w	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	4996      	ldr	r1, [pc, #600]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007364:	4b91      	ldr	r3, [pc, #580]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f023 020c 	bic.w	r2, r3, #12
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	498e      	ldr	r1, [pc, #568]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007386:	4b89      	ldr	r3, [pc, #548]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007394:	4985      	ldr	r1, [pc, #532]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073a8:	4b80      	ldr	r3, [pc, #512]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b6:	497d      	ldr	r1, [pc, #500]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073ca:	4b78      	ldr	r3, [pc, #480]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d8:	4974      	ldr	r1, [pc, #464]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ec:	4b6f      	ldr	r3, [pc, #444]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fa:	496c      	ldr	r1, [pc, #432]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800740e:	4b67      	ldr	r3, [pc, #412]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800741c:	4963      	ldr	r1, [pc, #396]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007430:	4b5e      	ldr	r3, [pc, #376]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743e:	495b      	ldr	r1, [pc, #364]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007452:	4b56      	ldr	r3, [pc, #344]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	4952      	ldr	r1, [pc, #328]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007474:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	494a      	ldr	r1, [pc, #296]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007496:	4b45      	ldr	r3, [pc, #276]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a4:	4941      	ldr	r1, [pc, #260]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074b8:	4b3c      	ldr	r3, [pc, #240]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074be:	f023 0203 	bic.w	r2, r3, #3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c6:	4939      	ldr	r1, [pc, #228]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d028      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074da:	4b34      	ldr	r3, [pc, #208]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e8:	4930      	ldr	r1, [pc, #192]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f8:	d106      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007504:	60d3      	str	r3, [r2, #12]
 8007506:	e011      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007510:	d10c      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3304      	adds	r3, #4
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f959 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007522:	7cfb      	ldrb	r3, [r7, #19]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007528:	7cfb      	ldrb	r3, [r7, #19]
 800752a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d04d      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007540:	d108      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007542:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007548:	4a18      	ldr	r2, [pc, #96]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800754a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800754e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007552:	e012      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007554:	4b15      	ldr	r3, [pc, #84]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800755c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007560:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007564:	4b11      	ldr	r3, [pc, #68]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007572:	490e      	ldr	r1, [pc, #56]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800757e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007582:	d106      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007584:	4b09      	ldr	r3, [pc, #36]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	4a08      	ldr	r2, [pc, #32]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800758a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800758e:	60d3      	str	r3, [r2, #12]
 8007590:	e020      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800759a:	d109      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800759c:	4b03      	ldr	r3, [pc, #12]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	4a02      	ldr	r2, [pc, #8]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a6:	60d3      	str	r3, [r2, #12]
 80075a8:	e014      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80075aa:	bf00      	nop
 80075ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075b8:	d10c      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	2101      	movs	r1, #1
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f905 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075ca:	7cfb      	ldrb	r3, [r7, #19]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80075d0:	7cfb      	ldrb	r3, [r7, #19]
 80075d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d028      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075e0:	4b7a      	ldr	r3, [pc, #488]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ee:	4977      	ldr	r1, [pc, #476]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075fe:	d106      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007600:	4b72      	ldr	r3, [pc, #456]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4a71      	ldr	r2, [pc, #452]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760a:	60d3      	str	r3, [r2, #12]
 800760c:	e011      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007616:	d10c      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3304      	adds	r3, #4
 800761c:	2101      	movs	r1, #1
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f8d6 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007628:	7cfb      	ldrb	r3, [r7, #19]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800762e:	7cfb      	ldrb	r3, [r7, #19]
 8007630:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01e      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800763e:	4b63      	ldr	r3, [pc, #396]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764e:	495f      	ldr	r1, [pc, #380]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007660:	d10c      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	2102      	movs	r1, #2
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f8b1 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007672:	7cfb      	ldrb	r3, [r7, #19]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007678:	7cfb      	ldrb	r3, [r7, #19]
 800767a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007688:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800768a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800768e:	f023 0204 	bic.w	r2, r3, #4
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007698:	494c      	ldr	r1, [pc, #304]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80076ac:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80076ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b2:	f023 0218 	bic.w	r2, r3, #24
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076bc:	4943      	ldr	r1, [pc, #268]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d035      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076d0:	4b3e      	ldr	r3, [pc, #248]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a3d      	ldr	r2, [pc, #244]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80076d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076dc:	f7fb f898 	bl	8002810 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076e2:	e009      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076e4:	f7fb f894 	bl	8002810 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d902      	bls.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	74fb      	strb	r3, [r7, #19]
        break;
 80076f6:	e005      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076f8:	4b34      	ldr	r3, [pc, #208]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1ef      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007704:	7cfb      	ldrb	r3, [r7, #19]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d113      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800770a:	4b30      	ldr	r3, [pc, #192]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800770c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771a:	492c      	ldr	r1, [pc, #176]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3320      	adds	r3, #32
 8007726:	2102      	movs	r1, #2
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f945 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 800772e:	4603      	mov	r3, r0
 8007730:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007732:	7cfb      	ldrb	r3, [r7, #19]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007738:	7cfb      	ldrb	r3, [r7, #19]
 800773a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01e      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007748:	4b20      	ldr	r3, [pc, #128]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800774a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800774e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007758:	491c      	ldr	r1, [pc, #112]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d10c      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3320      	adds	r3, #32
 8007770:	2101      	movs	r1, #1
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f920 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 8007778:	4603      	mov	r3, r0
 800777a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800777c:	7cfb      	ldrb	r3, [r7, #19]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8007782:	7cfb      	ldrb	r3, [r7, #19]
 8007784:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007792:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077a2:	490a      	ldr	r1, [pc, #40]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077b4:	d105      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	4a04      	ldr	r2, [pc, #16]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80077bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40021000 	.word	0x40021000

080077d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077de:	4b72      	ldr	r3, [pc, #456]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00e      	beq.n	8007808 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80077ea:	4b6f      	ldr	r3, [pc, #444]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0203 	and.w	r2, r3, #3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d103      	bne.n	8007802 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
       ||
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d142      	bne.n	8007888 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	73fb      	strb	r3, [r7, #15]
 8007806:	e03f      	b.n	8007888 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d018      	beq.n	8007842 <RCCEx_PLLSAI1_Config+0x72>
 8007810:	2b03      	cmp	r3, #3
 8007812:	d825      	bhi.n	8007860 <RCCEx_PLLSAI1_Config+0x90>
 8007814:	2b01      	cmp	r3, #1
 8007816:	d002      	beq.n	800781e <RCCEx_PLLSAI1_Config+0x4e>
 8007818:	2b02      	cmp	r3, #2
 800781a:	d009      	beq.n	8007830 <RCCEx_PLLSAI1_Config+0x60>
 800781c:	e020      	b.n	8007860 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800781e:	4b62      	ldr	r3, [pc, #392]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d11d      	bne.n	8007866 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800782e:	e01a      	b.n	8007866 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007830:	4b5d      	ldr	r3, [pc, #372]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007838:	2b00      	cmp	r3, #0
 800783a:	d116      	bne.n	800786a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007840:	e013      	b.n	800786a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007842:	4b59      	ldr	r3, [pc, #356]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10f      	bne.n	800786e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800784e:	4b56      	ldr	r3, [pc, #344]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800785e:	e006      	b.n	800786e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
      break;
 8007864:	e004      	b.n	8007870 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007866:	bf00      	nop
 8007868:	e002      	b.n	8007870 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800786e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007876:	4b4c      	ldr	r3, [pc, #304]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f023 0203 	bic.w	r2, r3, #3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4949      	ldr	r1, [pc, #292]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007884:	4313      	orrs	r3, r2
 8007886:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 8086 	bne.w	800799c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007890:	4b45      	ldr	r3, [pc, #276]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a44      	ldr	r2, [pc, #272]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800789a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789c:	f7fa ffb8 	bl	8002810 <HAL_GetTick>
 80078a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078a2:	e009      	b.n	80078b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078a4:	f7fa ffb4 	bl	8002810 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d902      	bls.n	80078b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	73fb      	strb	r3, [r7, #15]
        break;
 80078b6:	e005      	b.n	80078c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078b8:	4b3b      	ldr	r3, [pc, #236]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1ef      	bne.n	80078a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d168      	bne.n	800799c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d113      	bne.n	80078f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078d0:	4b35      	ldr	r3, [pc, #212]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	4b35      	ldr	r3, [pc, #212]	; (80079ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6892      	ldr	r2, [r2, #8]
 80078dc:	0211      	lsls	r1, r2, #8
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68d2      	ldr	r2, [r2, #12]
 80078e2:	06d2      	lsls	r2, r2, #27
 80078e4:	4311      	orrs	r1, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6852      	ldr	r2, [r2, #4]
 80078ea:	3a01      	subs	r2, #1
 80078ec:	0112      	lsls	r2, r2, #4
 80078ee:	430a      	orrs	r2, r1
 80078f0:	492d      	ldr	r1, [pc, #180]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	610b      	str	r3, [r1, #16]
 80078f6:	e02d      	b.n	8007954 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d115      	bne.n	800792a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078fe:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	4b2b      	ldr	r3, [pc, #172]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007904:	4013      	ands	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6892      	ldr	r2, [r2, #8]
 800790a:	0211      	lsls	r1, r2, #8
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6912      	ldr	r2, [r2, #16]
 8007910:	0852      	lsrs	r2, r2, #1
 8007912:	3a01      	subs	r2, #1
 8007914:	0552      	lsls	r2, r2, #21
 8007916:	4311      	orrs	r1, r2
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6852      	ldr	r2, [r2, #4]
 800791c:	3a01      	subs	r2, #1
 800791e:	0112      	lsls	r2, r2, #4
 8007920:	430a      	orrs	r2, r1
 8007922:	4921      	ldr	r1, [pc, #132]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007924:	4313      	orrs	r3, r2
 8007926:	610b      	str	r3, [r1, #16]
 8007928:	e014      	b.n	8007954 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800792a:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6892      	ldr	r2, [r2, #8]
 8007936:	0211      	lsls	r1, r2, #8
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6952      	ldr	r2, [r2, #20]
 800793c:	0852      	lsrs	r2, r2, #1
 800793e:	3a01      	subs	r2, #1
 8007940:	0652      	lsls	r2, r2, #25
 8007942:	4311      	orrs	r1, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6852      	ldr	r2, [r2, #4]
 8007948:	3a01      	subs	r2, #1
 800794a:	0112      	lsls	r2, r2, #4
 800794c:	430a      	orrs	r2, r1
 800794e:	4916      	ldr	r1, [pc, #88]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007950:	4313      	orrs	r3, r2
 8007952:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007954:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800795a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800795e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007960:	f7fa ff56 	bl	8002810 <HAL_GetTick>
 8007964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007966:	e009      	b.n	800797c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007968:	f7fa ff52 	bl	8002810 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d902      	bls.n	800797c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	73fb      	strb	r3, [r7, #15]
          break;
 800797a:	e005      	b.n	8007988 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0ef      	beq.n	8007968 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	4904      	ldr	r1, [pc, #16]	; (80079a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007998:	4313      	orrs	r3, r2
 800799a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40021000 	.word	0x40021000
 80079ac:	07ff800f 	.word	0x07ff800f
 80079b0:	ff9f800f 	.word	0xff9f800f
 80079b4:	f9ff800f 	.word	0xf9ff800f

080079b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079c6:	4b72      	ldr	r3, [pc, #456]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00e      	beq.n	80079f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80079d2:	4b6f      	ldr	r3, [pc, #444]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f003 0203 	and.w	r2, r3, #3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d103      	bne.n	80079ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
       ||
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d142      	bne.n	8007a70 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
 80079ee:	e03f      	b.n	8007a70 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d018      	beq.n	8007a2a <RCCEx_PLLSAI2_Config+0x72>
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d825      	bhi.n	8007a48 <RCCEx_PLLSAI2_Config+0x90>
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d002      	beq.n	8007a06 <RCCEx_PLLSAI2_Config+0x4e>
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d009      	beq.n	8007a18 <RCCEx_PLLSAI2_Config+0x60>
 8007a04:	e020      	b.n	8007a48 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a06:	4b62      	ldr	r3, [pc, #392]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d11d      	bne.n	8007a4e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a16:	e01a      	b.n	8007a4e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a18:	4b5d      	ldr	r3, [pc, #372]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d116      	bne.n	8007a52 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a28:	e013      	b.n	8007a52 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a2a:	4b59      	ldr	r3, [pc, #356]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a36:	4b56      	ldr	r3, [pc, #344]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d109      	bne.n	8007a56 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a46:	e006      	b.n	8007a56 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e004      	b.n	8007a58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e002      	b.n	8007a58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007a52:	bf00      	nop
 8007a54:	e000      	b.n	8007a58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d108      	bne.n	8007a70 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007a5e:	4b4c      	ldr	r3, [pc, #304]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f023 0203 	bic.w	r2, r3, #3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4949      	ldr	r1, [pc, #292]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f040 8086 	bne.w	8007b84 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a78:	4b45      	ldr	r3, [pc, #276]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a44      	ldr	r2, [pc, #272]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a84:	f7fa fec4 	bl	8002810 <HAL_GetTick>
 8007a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a8a:	e009      	b.n	8007aa0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a8c:	f7fa fec0 	bl	8002810 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d902      	bls.n	8007aa0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a9e:	e005      	b.n	8007aac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007aa0:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1ef      	bne.n	8007a8c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d168      	bne.n	8007b84 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d113      	bne.n	8007ae0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ab8:	4b35      	ldr	r3, [pc, #212]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007aba:	695a      	ldr	r2, [r3, #20]
 8007abc:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6892      	ldr	r2, [r2, #8]
 8007ac4:	0211      	lsls	r1, r2, #8
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68d2      	ldr	r2, [r2, #12]
 8007aca:	06d2      	lsls	r2, r2, #27
 8007acc:	4311      	orrs	r1, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6852      	ldr	r2, [r2, #4]
 8007ad2:	3a01      	subs	r2, #1
 8007ad4:	0112      	lsls	r2, r2, #4
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	492d      	ldr	r1, [pc, #180]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	614b      	str	r3, [r1, #20]
 8007ade:	e02d      	b.n	8007b3c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d115      	bne.n	8007b12 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ae6:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ae8:	695a      	ldr	r2, [r3, #20]
 8007aea:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6892      	ldr	r2, [r2, #8]
 8007af2:	0211      	lsls	r1, r2, #8
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6912      	ldr	r2, [r2, #16]
 8007af8:	0852      	lsrs	r2, r2, #1
 8007afa:	3a01      	subs	r2, #1
 8007afc:	0552      	lsls	r2, r2, #21
 8007afe:	4311      	orrs	r1, r2
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6852      	ldr	r2, [r2, #4]
 8007b04:	3a01      	subs	r2, #1
 8007b06:	0112      	lsls	r2, r2, #4
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	4921      	ldr	r1, [pc, #132]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	614b      	str	r3, [r1, #20]
 8007b10:	e014      	b.n	8007b3c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b12:	4b1f      	ldr	r3, [pc, #124]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b14:	695a      	ldr	r2, [r3, #20]
 8007b16:	4b21      	ldr	r3, [pc, #132]	; (8007b9c <RCCEx_PLLSAI2_Config+0x1e4>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6892      	ldr	r2, [r2, #8]
 8007b1e:	0211      	lsls	r1, r2, #8
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6952      	ldr	r2, [r2, #20]
 8007b24:	0852      	lsrs	r2, r2, #1
 8007b26:	3a01      	subs	r2, #1
 8007b28:	0652      	lsls	r2, r2, #25
 8007b2a:	4311      	orrs	r1, r2
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6852      	ldr	r2, [r2, #4]
 8007b30:	3a01      	subs	r2, #1
 8007b32:	0112      	lsls	r2, r2, #4
 8007b34:	430a      	orrs	r2, r1
 8007b36:	4916      	ldr	r1, [pc, #88]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b3c:	4b14      	ldr	r3, [pc, #80]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b48:	f7fa fe62 	bl	8002810 <HAL_GetTick>
 8007b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b4e:	e009      	b.n	8007b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b50:	f7fa fe5e 	bl	8002810 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d902      	bls.n	8007b64 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	73fb      	strb	r3, [r7, #15]
          break;
 8007b62:	e005      	b.n	8007b70 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b64:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0ef      	beq.n	8007b50 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b76:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b78:	695a      	ldr	r2, [r3, #20]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	4904      	ldr	r1, [pc, #16]	; (8007b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40021000 	.word	0x40021000
 8007b94:	07ff800f 	.word	0x07ff800f
 8007b98:	ff9f800f 	.word	0xff9f800f
 8007b9c:	f9ff800f 	.word	0xf9ff800f

08007ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	f107 001c 	add.w	r0, r7, #28
 8007bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fa40 	bl	8009044 <USB_CoreReset>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8007bda:	e005      	b.n	8007be8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bf4:	b004      	add	sp, #16
 8007bf6:	4770      	bx	lr

08007bf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d165      	bne.n	8007cd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a3e      	ldr	r2, [pc, #248]	; (8007d08 <USB_SetTurnaroundTime+0x110>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d906      	bls.n	8007c22 <USB_SetTurnaroundTime+0x2a>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a3d      	ldr	r2, [pc, #244]	; (8007d0c <USB_SetTurnaroundTime+0x114>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d202      	bcs.n	8007c22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c1c:	230f      	movs	r3, #15
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e05c      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a39      	ldr	r2, [pc, #228]	; (8007d0c <USB_SetTurnaroundTime+0x114>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d306      	bcc.n	8007c38 <USB_SetTurnaroundTime+0x40>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4a38      	ldr	r2, [pc, #224]	; (8007d10 <USB_SetTurnaroundTime+0x118>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d202      	bcs.n	8007c38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c32:	230e      	movs	r3, #14
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e051      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a35      	ldr	r2, [pc, #212]	; (8007d10 <USB_SetTurnaroundTime+0x118>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d306      	bcc.n	8007c4e <USB_SetTurnaroundTime+0x56>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a34      	ldr	r2, [pc, #208]	; (8007d14 <USB_SetTurnaroundTime+0x11c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c48:	230d      	movs	r3, #13
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e046      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a30      	ldr	r2, [pc, #192]	; (8007d14 <USB_SetTurnaroundTime+0x11c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d306      	bcc.n	8007c64 <USB_SetTurnaroundTime+0x6c>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4a2f      	ldr	r2, [pc, #188]	; (8007d18 <USB_SetTurnaroundTime+0x120>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d802      	bhi.n	8007c64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c5e:	230c      	movs	r3, #12
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e03b      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a2c      	ldr	r2, [pc, #176]	; (8007d18 <USB_SetTurnaroundTime+0x120>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d906      	bls.n	8007c7a <USB_SetTurnaroundTime+0x82>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <USB_SetTurnaroundTime+0x124>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d802      	bhi.n	8007c7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c74:	230b      	movs	r3, #11
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e030      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a27      	ldr	r2, [pc, #156]	; (8007d1c <USB_SetTurnaroundTime+0x124>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d906      	bls.n	8007c90 <USB_SetTurnaroundTime+0x98>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	4a26      	ldr	r2, [pc, #152]	; (8007d20 <USB_SetTurnaroundTime+0x128>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d802      	bhi.n	8007c90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e025      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a23      	ldr	r2, [pc, #140]	; (8007d20 <USB_SetTurnaroundTime+0x128>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d906      	bls.n	8007ca6 <USB_SetTurnaroundTime+0xae>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4a22      	ldr	r2, [pc, #136]	; (8007d24 <USB_SetTurnaroundTime+0x12c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d202      	bcs.n	8007ca6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ca0:	2309      	movs	r3, #9
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e01a      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <USB_SetTurnaroundTime+0x12c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d306      	bcc.n	8007cbc <USB_SetTurnaroundTime+0xc4>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <USB_SetTurnaroundTime+0x130>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d802      	bhi.n	8007cbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e00f      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4a1a      	ldr	r2, [pc, #104]	; (8007d28 <USB_SetTurnaroundTime+0x130>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d906      	bls.n	8007cd2 <USB_SetTurnaroundTime+0xda>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4a19      	ldr	r2, [pc, #100]	; (8007d2c <USB_SetTurnaroundTime+0x134>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d202      	bcs.n	8007cd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ccc:	2307      	movs	r3, #7
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e004      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e001      	b.n	8007cdc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cd8:	2309      	movs	r3, #9
 8007cda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	00d8acbf 	.word	0x00d8acbf
 8007d0c:	00e4e1c0 	.word	0x00e4e1c0
 8007d10:	00f42400 	.word	0x00f42400
 8007d14:	01067380 	.word	0x01067380
 8007d18:	011a499f 	.word	0x011a499f
 8007d1c:	01312cff 	.word	0x01312cff
 8007d20:	014ca43f 	.word	0x014ca43f
 8007d24:	016e3600 	.word	0x016e3600
 8007d28:	01a6ab1f 	.word	0x01a6ab1f
 8007d2c:	01e84800 	.word	0x01e84800

08007d30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f043 0201 	orr.w	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f023 0201 	bic.w	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d115      	bne.n	8007dc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007da2:	2001      	movs	r0, #1
 8007da4:	f7fa fd40 	bl	8002828 <HAL_Delay>
      ms++;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 f8cf 	bl	8008f52 <USB_GetMode>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d01e      	beq.n	8007df8 <USB_SetCurrentMode+0x84>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b31      	cmp	r3, #49	; 0x31
 8007dbe:	d9f0      	bls.n	8007da2 <USB_SetCurrentMode+0x2e>
 8007dc0:	e01a      	b.n	8007df8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d115      	bne.n	8007df4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	f7fa fd27 	bl	8002828 <HAL_Delay>
      ms++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f8b6 	bl	8008f52 <USB_GetMode>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <USB_SetCurrentMode+0x84>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b31      	cmp	r3, #49	; 0x31
 8007df0:	d9f0      	bls.n	8007dd4 <USB_SetCurrentMode+0x60>
 8007df2:	e001      	b.n	8007df8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e005      	b.n	8007e04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b32      	cmp	r3, #50	; 0x32
 8007dfc:	d101      	bne.n	8007e02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b086      	sub	sp, #24
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e26:	2300      	movs	r3, #0
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	e009      	b.n	8007e40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3340      	adds	r3, #64	; 0x40
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	2b0e      	cmp	r3, #14
 8007e44:	d9f2      	bls.n	8007e2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11c      	bne.n	8007e86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e5a:	f043 0302 	orr.w	r3, r3, #2
 8007e5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e005      	b.n	8007e92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	461a      	mov	r2, r3
 8007eae:	680b      	ldr	r3, [r1, #0]
 8007eb0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eb2:	2103      	movs	r1, #3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f955 	bl	8008164 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007eba:	2110      	movs	r1, #16
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8f1 	bl	80080a4 <USB_FlushTxFifo>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f91b 	bl	8008108 <USB_FlushRxFifo>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eee:	461a      	mov	r2, r3
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	461a      	mov	r2, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	e043      	b.n	8007f8e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1c:	d118      	bne.n	8007f50 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	461a      	mov	r2, r3
 8007f32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	e013      	b.n	8007f62 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	461a      	mov	r2, r3
 8007f48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e008      	b.n	8007f62 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2300      	movs	r3, #0
 8007f72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f80:	461a      	mov	r2, r3
 8007f82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d3b7      	bcc.n	8007f06 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	e043      	b.n	8008024 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb2:	d118      	bne.n	8007fe6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	e013      	b.n	8007ff8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	e008      	b.n	8007ff8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	461a      	mov	r2, r3
 8008006:	2300      	movs	r3, #0
 8008008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	461a      	mov	r2, r3
 8008018:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800801c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3301      	adds	r3, #1
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	429a      	cmp	r2, r3
 800802a:	d3b7      	bcc.n	8007f9c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800803a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800803e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800804c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f043 0210 	orr.w	r2, r3, #16
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <USB_DevInit+0x294>)
 8008060:	4313      	orrs	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f043 0208 	orr.w	r2, r3, #8
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d107      	bne.n	800808e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008086:	f043 0304 	orr.w	r3, r3, #4
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800809a:	b004      	add	sp, #16
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	803c3800 	.word	0x803c3800

080080a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	4a12      	ldr	r2, [pc, #72]	; (8008104 <USB_FlushTxFifo+0x60>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e01a      	b.n	80080f8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	daf3      	bge.n	80080b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	019b      	lsls	r3, r3, #6
 80080d2:	f043 0220 	orr.w	r2, r3, #32
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	4a08      	ldr	r2, [pc, #32]	; (8008104 <USB_FlushTxFifo+0x60>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e006      	b.n	80080f8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d0f1      	beq.n	80080da <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	00030d40 	.word	0x00030d40

08008108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	4a11      	ldr	r2, [pc, #68]	; (8008160 <USB_FlushRxFifo+0x58>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d901      	bls.n	8008124 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e017      	b.n	8008154 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	daf3      	bge.n	8008114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2210      	movs	r2, #16
 8008134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	4a08      	ldr	r2, [pc, #32]	; (8008160 <USB_FlushRxFifo+0x58>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d901      	bls.n	8008146 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e006      	b.n	8008154 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b10      	cmp	r3, #16
 8008150:	d0f1      	beq.n	8008136 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	00030d40 	.word	0x00030d40

08008164 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008184:	4313      	orrs	r3, r2
 8008186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008196:	b480      	push	{r7}
 8008198:	b087      	sub	sp, #28
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 0306 	and.w	r3, r3, #6
 80081ae:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d002      	beq.n	80081bc <USB_GetDevSpeed+0x26>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b06      	cmp	r3, #6
 80081ba:	d102      	bne.n	80081c2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081bc:	2302      	movs	r3, #2
 80081be:	75fb      	strb	r3, [r7, #23]
 80081c0:	e001      	b.n	80081c6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80081c2:	230f      	movs	r3, #15
 80081c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d13a      	bne.n	8008266 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f6:	69da      	ldr	r2, [r3, #28]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	2101      	movs	r1, #1
 8008202:	fa01 f303 	lsl.w	r3, r1, r3
 8008206:	b29b      	uxth	r3, r3
 8008208:	68f9      	ldr	r1, [r7, #12]
 800820a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820e:	4313      	orrs	r3, r2
 8008210:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d155      	bne.n	80082d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	78db      	ldrb	r3, [r3, #3]
 8008242:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008244:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	059b      	lsls	r3, r3, #22
 800824a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800824c:	4313      	orrs	r3, r2
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	440a      	add	r2, r1
 8008256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800825a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e036      	b.n	80082d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826c:	69da      	ldr	r2, [r3, #28]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	2101      	movs	r1, #1
 8008278:	fa01 f303 	lsl.w	r3, r1, r3
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	68f9      	ldr	r1, [r7, #12]
 8008280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008284:	4313      	orrs	r3, r2
 8008286:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d11a      	bne.n	80082d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	78db      	ldrb	r3, [r3, #3]
 80082b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082ba:	430b      	orrs	r3, r1
 80082bc:	4313      	orrs	r3, r2
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
	...

080082e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d161      	bne.n	80083c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008316:	d11f      	bne.n	8008358 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	0151      	lsls	r1, r2, #5
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	440a      	add	r2, r1
 800832e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008336:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	440a      	add	r2, r1
 800834e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	2101      	movs	r1, #1
 800836a:	fa01 f303 	lsl.w	r3, r1, r3
 800836e:	b29b      	uxth	r3, r3
 8008370:	43db      	mvns	r3, r3
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008378:	4013      	ands	r3, r2
 800837a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	2101      	movs	r1, #1
 800838e:	fa01 f303 	lsl.w	r3, r1, r3
 8008392:	b29b      	uxth	r3, r3
 8008394:	43db      	mvns	r3, r3
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800839c:	4013      	ands	r3, r2
 800839e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	0159      	lsls	r1, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	440b      	add	r3, r1
 80083b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ba:	4619      	mov	r1, r3
 80083bc:	4b35      	ldr	r3, [pc, #212]	; (8008494 <USB_DeactivateEndpoint+0x1b0>)
 80083be:	4013      	ands	r3, r2
 80083c0:	600b      	str	r3, [r1, #0]
 80083c2:	e060      	b.n	8008486 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083da:	d11f      	bne.n	800841c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	0151      	lsls	r1, r2, #5
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	440a      	add	r2, r1
 80083f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	440a      	add	r2, r1
 8008412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800841a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	2101      	movs	r1, #1
 800842e:	fa01 f303 	lsl.w	r3, r1, r3
 8008432:	041b      	lsls	r3, r3, #16
 8008434:	43db      	mvns	r3, r3
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800843c:	4013      	ands	r3, r2
 800843e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	2101      	movs	r1, #1
 8008452:	fa01 f303 	lsl.w	r3, r1, r3
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	43db      	mvns	r3, r3
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008460:	4013      	ands	r3, r2
 8008462:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	0159      	lsls	r1, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	440b      	add	r3, r1
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	4619      	mov	r1, r3
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <USB_DeactivateEndpoint+0x1b4>)
 8008482:	4013      	ands	r3, r2
 8008484:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	ec337800 	.word	0xec337800
 8008498:	eff37800 	.word	0xeff37800

0800849c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	f040 810a 	bne.w	80086ce <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d132      	bne.n	8008528 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008520:	0cdb      	lsrs	r3, r3, #19
 8008522:	04db      	lsls	r3, r3, #19
 8008524:	6113      	str	r3, [r2, #16]
 8008526:	e074      	b.n	8008612 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	0cdb      	lsrs	r3, r3, #19
 8008544:	04db      	lsls	r3, r3, #19
 8008546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008562:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008566:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800856a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6959      	ldr	r1, [r3, #20]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	440b      	add	r3, r1
 8008584:	1e59      	subs	r1, r3, #1
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	fbb1 f3f3 	udiv	r3, r1, r3
 800858e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008590:	4baf      	ldr	r3, [pc, #700]	; (8008850 <USB_EPStartXfer+0x3b4>)
 8008592:	400b      	ands	r3, r1
 8008594:	6939      	ldr	r1, [r7, #16]
 8008596:	0148      	lsls	r0, r1, #5
 8008598:	6979      	ldr	r1, [r7, #20]
 800859a:	4401      	add	r1, r0
 800859c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085a0:	4313      	orrs	r3, r2
 80085a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ba:	6939      	ldr	r1, [r7, #16]
 80085bc:	0148      	lsls	r0, r1, #5
 80085be:	6979      	ldr	r1, [r7, #20]
 80085c0:	4401      	add	r1, r0
 80085c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085c6:	4313      	orrs	r3, r2
 80085c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	78db      	ldrb	r3, [r3, #3]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d11f      	bne.n	8008612 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80085f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	440a      	add	r2, r1
 8008608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008610:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008630:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	78db      	ldrb	r3, [r3, #3]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d015      	beq.n	8008666 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8100 	beq.w	8008844 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	2101      	movs	r1, #1
 8008656:	fa01 f303 	lsl.w	r3, r1, r3
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008660:	4313      	orrs	r3, r2
 8008662:	634b      	str	r3, [r1, #52]	; 0x34
 8008664:	e0ee      	b.n	8008844 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d110      	bne.n	8008698 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	440a      	add	r2, r1
 800868c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e00f      	b.n	80086b8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68d9      	ldr	r1, [r3, #12]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781a      	ldrb	r2, [r3, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f9e2 	bl	8008a90 <USB_WritePacket>
 80086cc:	e0ba      	b.n	8008844 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e8:	0cdb      	lsrs	r3, r3, #19
 80086ea:	04db      	lsls	r3, r3, #19
 80086ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	440a      	add	r2, r1
 8008704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800870c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d123      	bne.n	8008762 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008730:	6939      	ldr	r1, [r7, #16]
 8008732:	0148      	lsls	r0, r1, #5
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	4401      	add	r1, r0
 8008738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800873c:	4313      	orrs	r3, r2
 800873e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	440a      	add	r2, r1
 8008756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800875a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800875e:	6113      	str	r3, [r2, #16]
 8008760:	e033      	b.n	80087ca <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695a      	ldr	r2, [r3, #20]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	4413      	add	r3, r2
 800876c:	1e5a      	subs	r2, r3, #1
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	691a      	ldr	r2, [r3, #16]
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	04d9      	lsls	r1, r3, #19
 800878a:	4b31      	ldr	r3, [pc, #196]	; (8008850 <USB_EPStartXfer+0x3b4>)
 800878c:	400b      	ands	r3, r1
 800878e:	6939      	ldr	r1, [r7, #16]
 8008790:	0148      	lsls	r0, r1, #5
 8008792:	6979      	ldr	r1, [r7, #20]
 8008794:	4401      	add	r1, r0
 8008796:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800879a:	4313      	orrs	r3, r2
 800879c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	89f9      	ldrh	r1, [r7, #14]
 80087b2:	fb01 f303 	mul.w	r3, r1, r3
 80087b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ba:	6939      	ldr	r1, [r7, #16]
 80087bc:	0148      	lsls	r0, r1, #5
 80087be:	6979      	ldr	r1, [r7, #20]
 80087c0:	4401      	add	r1, r0
 80087c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087c6:	4313      	orrs	r3, r2
 80087c8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	78db      	ldrb	r3, [r3, #3]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d128      	bne.n	8008824 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d110      	bne.n	8008804 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	e00f      	b.n	8008824 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800881e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008822:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800883e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008842:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	1ff80000 	.word	0x1ff80000

08008854 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 80ab 	bne.w	80089c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d132      	bne.n	80088e0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008894:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008898:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800889c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d8:	0cdb      	lsrs	r3, r3, #19
 80088da:	04db      	lsls	r3, r3, #19
 80088dc:	6113      	str	r3, [r2, #16]
 80088de:	e04e      	b.n	800897e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fa:	0cdb      	lsrs	r3, r3, #19
 80088fc:	04db      	lsls	r3, r3, #19
 80088fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	0151      	lsls	r1, r2, #5
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	440a      	add	r2, r1
 8008916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800891a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800891e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008922:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	695a      	ldr	r2, [r3, #20]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	429a      	cmp	r2, r3
 800892e:	d903      	bls.n	8008938 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	0151      	lsls	r1, r2, #5
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	440a      	add	r2, r1
 800894e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	0148      	lsls	r0, r1, #5
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	4401      	add	r1, r0
 8008976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800897a:	4313      	orrs	r3, r2
 800897c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	0151      	lsls	r1, r2, #5
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	440a      	add	r2, r1
 8008994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800899c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d06d      	beq.n	8008a82 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	2101      	movs	r1, #1
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	68f9      	ldr	r1, [r7, #12]
 80089be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c2:	4313      	orrs	r3, r2
 80089c4:	634b      	str	r3, [r1, #52]	; 0x34
 80089c6:	e05c      	b.n	8008a82 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	0151      	lsls	r1, r2, #5
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	440a      	add	r2, r1
 80089de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e2:	0cdb      	lsrs	r3, r3, #19
 80089e4:	04db      	lsls	r3, r3, #19
 80089e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	0148      	lsls	r0, r1, #5
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	4401      	add	r1, r0
 8008a5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b089      	sub	sp, #36	; 0x24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	71fb      	strb	r3, [r7, #7]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008aae:	88bb      	ldrh	r3, [r7, #4]
 8008ab0:	3303      	adds	r3, #3
 8008ab2:	089b      	lsrs	r3, r3, #2
 8008ab4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	e018      	b.n	8008aee <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	031a      	lsls	r2, r3, #12
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac8:	461a      	mov	r2, r3
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	3301      	adds	r3, #1
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d3e2      	bcc.n	8008abc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3724      	adds	r7, #36	; 0x24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b08b      	sub	sp, #44	; 0x2c
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b1a:	88fb      	ldrh	r3, [r7, #6]
 8008b1c:	089b      	lsrs	r3, r3, #2
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	623b      	str	r3, [r7, #32]
 8008b2e:	e014      	b.n	8008b5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	3301      	adds	r3, #1
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	3301      	adds	r3, #1
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	3301      	adds	r3, #1
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	3301      	adds	r3, #1
 8008b58:	623b      	str	r3, [r7, #32]
 8008b5a:	6a3a      	ldr	r2, [r7, #32]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d3e6      	bcc.n	8008b30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b62:	8bfb      	ldrh	r3, [r7, #30]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01e      	beq.n	8008ba6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b72:	461a      	mov	r2, r3
 8008b74:	f107 0310 	add.w	r3, r7, #16
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	fa22 f303 	lsr.w	r3, r2, r3
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	701a      	strb	r2, [r3, #0]
      i++;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	3301      	adds	r3, #1
 8008b92:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	3301      	adds	r3, #1
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b9a:	8bfb      	ldrh	r3, [r7, #30]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ba0:	8bfb      	ldrh	r3, [r7, #30]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1ea      	bne.n	8008b7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	372c      	adds	r7, #44	; 0x2c
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d12c      	bne.n	8008c2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	db12      	blt.n	8008c08 <USB_EPSetStall+0x54>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00f      	beq.n	8008c08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	e02b      	b.n	8008c82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	db12      	blt.n	8008c62 <USB_EPSetStall+0xae>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00f      	beq.n	8008c62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d128      	bne.n	8008cfe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d003      	beq.n	8008cdc <USB_EPClearStall+0x4c>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	78db      	ldrb	r3, [r3, #3]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d138      	bne.n	8008d4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	e027      	b.n	8008d4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	78db      	ldrb	r3, [r3, #3]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d003      	beq.n	8008d2e <USB_EPClearStall+0x9e>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	78db      	ldrb	r3, [r3, #3]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d10f      	bne.n	8008d4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	0151      	lsls	r1, r2, #5
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	440a      	add	r2, r1
 8008d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d90:	68f9      	ldr	r1, [r7, #12]
 8008d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d96:	4313      	orrs	r3, r2
 8008d98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd6:	f023 0302 	bic.w	r3, r3, #2
 8008dda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e04:	f023 0303 	bic.w	r3, r3, #3
 8008e08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e18:	f043 0302 	orr.w	r3, r3, #2
 8008e1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4013      	ands	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e44:	68fb      	ldr	r3, [r7, #12]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b085      	sub	sp, #20
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	4013      	ands	r3, r2
 8008e74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	0c1b      	lsrs	r3, r3, #16
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	b29b      	uxth	r3, r3
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b087      	sub	sp, #28
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	fa22 f303 	lsr.w	r3, r2, r3
 8008f26:	01db      	lsls	r3, r3, #7
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4013      	ands	r3, r2
 8008f42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f44:	68bb      	ldr	r3, [r7, #8]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f8c:	f023 0307 	bic.w	r3, r3, #7
 8008f90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	333c      	adds	r3, #60	; 0x3c
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	4a1c      	ldr	r2, [pc, #112]	; (8009040 <USB_EP0_OutStart+0x8c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d90a      	bls.n	8008fea <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fe4:	d101      	bne.n	8008fea <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e024      	b.n	8009034 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009018:	f043 0318 	orr.w	r3, r3, #24
 800901c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800902c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009030:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	4f54300a 	.word	0x4f54300a

08009044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <USB_CoreReset+0x60>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d901      	bls.n	8009060 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e01a      	b.n	8009096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	daf3      	bge.n	8009050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f043 0201 	orr.w	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <USB_CoreReset+0x60>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d901      	bls.n	8009088 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e006      	b.n	8009096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b01      	cmp	r3, #1
 8009092:	d0f1      	beq.n	8009078 <USB_CoreReset+0x34>

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	00030d40 	.word	0x00030d40

080090a8 <USBD_AUDIO_Init>:
* @retval status
*/

static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 80090b4:	4b28      	ldr	r3, [pc, #160]	; (8009158 <USBD_AUDIO_Init+0xb0>)
 80090b6:	7d1b      	ldrb	r3, [r3, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <USBD_AUDIO_Init+0x18>
  {
    return USBD_FAIL; 
 80090bc:	2303      	movs	r3, #3
 80090be:	e046      	b.n	800914e <USBD_AUDIO_Init+0xa6>
  }
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  pdev->pClassData = &haudioInstance;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a25      	ldr	r2, [pc, #148]	; (8009158 <USBD_AUDIO_Init+0xb0>)
 80090c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ce:	60fb      	str	r3, [r7, #12]
  uint16_t packet_dim = haudio->paketDimension;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8a5b      	ldrh	r3, [r3, #18]
 80090d4:	817b      	strh	r3, [r7, #10]
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8a1b      	ldrh	r3, [r3, #16]
 80090da:	461a      	mov	r2, r3
 80090dc:	4613      	mov	r3, r2
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	4413      	add	r3, r2
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	8a52      	ldrh	r2, [r2, #18]
 80090e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ea:	813b      	strh	r3, [r7, #8]
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 80090ec:	893a      	ldrh	r2, [r7, #8]
 80090ee:	897b      	ldrh	r3, [r7, #10]
 80090f0:	fb12 f303 	smulbb	r3, r2, r3
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	831a      	strh	r2, [r3, #24]
  haudio->rd_ptr = 0;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	82da      	strh	r2, [r3, #22]
  haudio->timeout = 0;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	819a      	strh	r2, [r3, #12]
  
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	33b0      	adds	r3, #176	; 0xb0
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	6890      	ldr	r0, [r2, #8]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	7912      	ldrb	r2, [r2, #4]
 8009120:	2100      	movs	r1, #0
 8009122:	4798      	blx	r3
  
  USBD_LL_OpenEP(pdev,
 8009124:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009128:	2201      	movs	r2, #1
 800912a:	2181      	movs	r1, #129	; 0x81
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7f8 f872 	bl	8001216 <USBD_LL_OpenEP>
                 AUDIO_IN_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_IN_PACKET);
  
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8009132:	2181      	movs	r1, #129	; 0x81
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7f8 f89b 	bl	8001270 <USBD_LL_FlushEP>
  
  
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 800913a:	897b      	ldrh	r3, [r7, #10]
 800913c:	4a07      	ldr	r2, [pc, #28]	; (800915c <USBD_AUDIO_Init+0xb4>)
 800913e:	2181      	movs	r1, #129	; 0x81
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7f8 f90d 	bl	8001360 <USBD_LL_Transmit>
                   IsocInBuffDummy,                        
                   packet_dim);      
  
  haudio->state=STATE_USB_IDLE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	751a      	strb	r2, [r3, #20]
  return USBD_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200113e8 	.word	0x200113e8
 800915c:	20011264 	.word	0x20011264

08009160 <USBD_AUDIO_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  /* Close EP IN */
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 800916c:	2181      	movs	r1, #129	; 0x81
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7f8 f86b 	bl	800124a <USBD_LL_CloseEP>
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00d      	beq.n	800919a <USBD_AUDIO_DeInit+0x3a>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	33b0      	adds	r3, #176	; 0xb0
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	2000      	movs	r0, #0
 8009192:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 8009194:	4b03      	ldr	r3, [pc, #12]	; (80091a4 <USBD_AUDIO_DeInit+0x44>)
 8009196:	2200      	movs	r2, #0
 8009198:	751a      	strb	r2, [r3, #20]
  }
  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	200113e8 	.word	0x200113e8

080091a8 <USBD_AUDIO_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev, 
                                  USBD_SetupReqTypedef *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75fb      	strb	r3, [r7, #23]
  haudio = pdev->pClassData;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091bc:	613b      	str	r3, [r7, #16]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d03a      	beq.n	8009240 <USBD_AUDIO_Setup+0x98>
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d172      	bne.n	80092b4 <USBD_AUDIO_Setup+0x10c>
  {
    /* AUDIO Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :    
    switch (req->bRequest)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d019      	beq.n	800920a <USBD_AUDIO_Setup+0x62>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dd2b      	ble.n	8009232 <USBD_AUDIO_Setup+0x8a>
 80091da:	2b84      	cmp	r3, #132	; 0x84
 80091dc:	dc29      	bgt.n	8009232 <USBD_AUDIO_Setup+0x8a>
 80091de:	2b81      	cmp	r3, #129	; 0x81
 80091e0:	db27      	blt.n	8009232 <USBD_AUDIO_Setup+0x8a>
 80091e2:	3b81      	subs	r3, #129	; 0x81
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d824      	bhi.n	8009232 <USBD_AUDIO_Setup+0x8a>
 80091e8:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <USBD_AUDIO_Setup+0x48>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	08009201 	.word	0x08009201
 80091f4:	08009215 	.word	0x08009215
 80091f8:	0800921f 	.word	0x0800921f
 80091fc:	08009229 	.word	0x08009229
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa00 	bl	8009608 <AUDIO_REQ_GetCurrent>
      break;
 8009208:	e019      	b.n	800923e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);   
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fa23 	bl	8009658 <AUDIO_REQ_SetCurrent>
      break;
 8009212:	e014      	b.n	800923e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_MIN:
      AUDIO_REQ_GetMinimum(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9be 	bl	8009598 <AUDIO_REQ_GetMinimum>
      break;
 800921c:	e00f      	b.n	800923e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_MAX:
      AUDIO_REQ_GetMaximum(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f99d 	bl	8009560 <AUDIO_REQ_GetMaximum>
      break;
 8009226:	e00a      	b.n	800923e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_RES:
      AUDIO_REQ_GetResolution(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f9d0 	bl	80095d0 <AUDIO_REQ_GetResolution>
      break;
 8009230:	e005      	b.n	800923e <USBD_AUDIO_Setup+0x96>
      
    default:
      USBD_CtlError (pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fff2 	bl	800b21e <USBD_CtlError>
      return USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	e03b      	b.n	80092b6 <USBD_AUDIO_Setup+0x10e>
    }
    break; 
 800923e:	e039      	b.n	80092b4 <USBD_AUDIO_Setup+0x10c>
    
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b0b      	cmp	r3, #11
 8009246:	d023      	beq.n	8009290 <USBD_AUDIO_Setup+0xe8>
 8009248:	2b0b      	cmp	r3, #11
 800924a:	dc33      	bgt.n	80092b4 <USBD_AUDIO_Setup+0x10c>
 800924c:	2b06      	cmp	r3, #6
 800924e:	d002      	beq.n	8009256 <USBD_AUDIO_Setup+0xae>
 8009250:	2b0a      	cmp	r3, #10
 8009252:	d015      	beq.n	8009280 <USBD_AUDIO_Setup+0xd8>
 8009254:	e02e      	b.n	80092b4 <USBD_AUDIO_Setup+0x10c>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	885b      	ldrh	r3, [r3, #2]
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b21      	cmp	r3, #33	; 0x21
 8009260:	d127      	bne.n	80092b2 <USBD_AUDIO_Setup+0x10a>
      {
        
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8009262:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <USBD_AUDIO_Setup+0x118>)
 8009264:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b09      	cmp	r3, #9
 800926c:	bf28      	it	cs
 800926e:	2309      	movcs	r3, #9
 8009270:	817b      	strh	r3, [r7, #10]
        
        USBD_CtlSendData (pdev, 
 8009272:	897b      	ldrh	r3, [r7, #10]
 8009274:	461a      	mov	r2, r3
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f002 f841 	bl	800b300 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
      break;
 800927e:	e018      	b.n	80092b2 <USBD_AUDIO_Setup+0x10a>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)haudio->alt_setting,
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	681b      	ldr	r3, [r3, #0]
      USBD_CtlSendData (pdev,
 8009284:	2201      	movs	r2, #1
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f002 f839 	bl	800b300 <USBD_CtlSendData>
                        1);
      break;
 800928e:	e011      	b.n	80092b4 <USBD_AUDIO_Setup+0x10c>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	885b      	ldrh	r3, [r3, #2]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b01      	cmp	r3, #1
 8009298:	d806      	bhi.n	80092a8 <USBD_AUDIO_Setup+0x100>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	885b      	ldrh	r3, [r3, #2]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 80092a6:	e005      	b.n	80092b4 <USBD_AUDIO_Setup+0x10c>
        USBD_CtlError (pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 ffb7 	bl	800b21e <USBD_CtlError>
      break;
 80092b0:	e000      	b.n	80092b4 <USBD_AUDIO_Setup+0x10c>
      break;
 80092b2:	bf00      	nop
    }
  }
  return ret;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	2001145e 	.word	0x2001145e

080092c4 <USBD_AUDIO_GetCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2276      	movs	r2, #118	; 0x76
 80092d0:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	2001144c 	.word	0x2001144c

080092e4 <USBD_AUDIO_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                  uint8_t epnum)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092f6:	617b      	str	r3, [r7, #20]
  uint32_t length_usb_pck;
  uint16_t app;
  uint16_t IsocInWr_app = haudio->wr_ptr;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	8b1b      	ldrh	r3, [r3, #24]
 80092fc:	827b      	strh	r3, [r7, #18]
  uint16_t true_dim = haudio->buffer_length;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	89db      	ldrh	r3, [r3, #14]
 8009302:	823b      	strh	r3, [r7, #16]
  uint16_t packet_dim = haudio->paketDimension;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	8a5b      	ldrh	r3, [r3, #18]
 8009308:	81fb      	strh	r3, [r7, #14]
  uint16_t channels = haudio->channels;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	791b      	ldrb	r3, [r3, #4]
 800930e:	81bb      	strh	r3, [r7, #12]
  length_usb_pck = packet_dim;  
 8009310:	89fb      	ldrh	r3, [r7, #14]
 8009312:	61fb      	str	r3, [r7, #28]
  haudio->timeout=0;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2200      	movs	r2, #0
 8009318:	819a      	strh	r2, [r3, #12]
  if (epnum == (AUDIO_IN_EP & 0x7F))
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 808f 	bne.w	8009440 <USBD_AUDIO_DataIn+0x15c>
  {    
    if (haudio->state == STATE_USB_IDLE) 
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	7d1b      	ldrb	r3, [r3, #20]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d10c      	bne.n	8009344 <USBD_AUDIO_DataIn+0x60>
    {
      haudio->state=STATE_USB_REQUESTS_STARTED;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2202      	movs	r2, #2
 800932e:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Record();      
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	33b0      	adds	r3, #176	; 0xb0
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	4798      	blx	r3
    }    
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	7d1b      	ldrb	r3, [r3, #20]
 8009348:	2b03      	cmp	r3, #3
 800934a:	d173      	bne.n	8009434 <USBD_AUDIO_DataIn+0x150>
    {      
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	8adb      	ldrh	r3, [r3, #22]
 8009350:	8a3a      	ldrh	r2, [r7, #16]
 8009352:	fbb3 f1f2 	udiv	r1, r3, r2
 8009356:	fb01 f202 	mul.w	r2, r1, r2
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	b29a      	uxth	r2, r3
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	82da      	strh	r2, [r3, #22]
      if(IsocInWr_app<haudio->rd_ptr){
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	8adb      	ldrh	r3, [r3, #22]
 8009366:	8a7a      	ldrh	r2, [r7, #18]
 8009368:	429a      	cmp	r2, r3
 800936a:	d208      	bcs.n	800937e <USBD_AUDIO_DataIn+0x9a>
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	8adb      	ldrh	r3, [r3, #22]
 8009370:	8a3a      	ldrh	r2, [r7, #16]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	b29a      	uxth	r2, r3
 8009376:	8a7b      	ldrh	r3, [r7, #18]
 8009378:	4413      	add	r3, r2
 800937a:	837b      	strh	r3, [r7, #26]
 800937c:	e004      	b.n	8009388 <USBD_AUDIO_DataIn+0xa4>
      }else{
        app = IsocInWr_app - haudio->rd_ptr;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	8adb      	ldrh	r3, [r3, #22]
 8009382:	8a7a      	ldrh	r2, [r7, #18]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	837b      	strh	r3, [r7, #26]
      }        
      if(app >= (packet_dim*haudio->upper_treshold)){       
 8009388:	8b7a      	ldrh	r2, [r7, #26]
 800938a:	89fb      	ldrh	r3, [r7, #14]
 800938c:	6979      	ldr	r1, [r7, #20]
 800938e:	7e89      	ldrb	r1, [r1, #26]
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	429a      	cmp	r2, r3
 8009396:	db06      	blt.n	80093a6 <USBD_AUDIO_DataIn+0xc2>
        length_usb_pck += channels*2;
 8009398:	89bb      	ldrh	r3, [r7, #12]
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	461a      	mov	r2, r3
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	e00d      	b.n	80093c2 <USBD_AUDIO_DataIn+0xde>
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 80093a6:	8b7a      	ldrh	r2, [r7, #26]
 80093a8:	89fb      	ldrh	r3, [r7, #14]
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	7ec9      	ldrb	r1, [r1, #27]
 80093ae:	fb01 f303 	mul.w	r3, r1, r3
 80093b2:	429a      	cmp	r2, r3
 80093b4:	dc05      	bgt.n	80093c2 <USBD_AUDIO_DataIn+0xde>
        length_usb_pck -= channels*2;
 80093b6:	89bb      	ldrh	r3, [r7, #12]
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	461a      	mov	r2, r3
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	61fb      	str	r3, [r7, #28]
      }     
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
                        (uint8_t*)(&haudio->buffer[haudio->rd_ptr]),
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	8ad2      	ldrh	r2, [r2, #22]
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 80093ca:	441a      	add	r2, r3
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	2181      	movs	r1, #129	; 0x81
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7f7 ffc5 	bl	8001360 <USBD_LL_Transmit>
                        length_usb_pck);      
      haudio->rd_ptr += length_usb_pck;      
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	8ada      	ldrh	r2, [r3, #22]
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	4413      	add	r3, r2
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	82da      	strh	r2, [r3, #22]

      if(app < haudio->buffer_length/10)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	89db      	ldrh	r3, [r3, #14]
 80093ea:	4a18      	ldr	r2, [pc, #96]	; (800944c <USBD_AUDIO_DataIn+0x168>)
 80093ec:	fba2 2303 	umull	r2, r3, r2, r3
 80093f0:	08db      	lsrs	r3, r3, #3
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	8b7a      	ldrh	r2, [r7, #26]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d222      	bcs.n	8009440 <USBD_AUDIO_DataIn+0x15c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	33b0      	adds	r3, #176	; 0xb0
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2201      	movs	r2, #1
 8009412:	751a      	strb	r2, [r3, #20]
        haudio->timeout=0;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2200      	movs	r2, #0
 8009418:	819a      	strh	r2, [r3, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	89db      	ldrh	r3, [r3, #14]
 8009422:	461a      	mov	r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	8a1b      	ldrh	r3, [r3, #16]
 8009428:	4413      	add	r3, r2
 800942a:	461a      	mov	r2, r3
 800942c:	2100      	movs	r1, #0
 800942e:	f003 fde7 	bl	800d000 <memset>
 8009432:	e005      	b.n	8009440 <USBD_AUDIO_DataIn+0x15c>
      }       
    }
    else 
    {      
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	4a06      	ldr	r2, [pc, #24]	; (8009450 <USBD_AUDIO_DataIn+0x16c>)
 8009438:	2181      	movs	r1, #129	; 0x81
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7f7 ff90 	bl	8001360 <USBD_LL_Transmit>
                        IsocInBuffDummy,
                        length_usb_pck);      
    }    
  }
  return USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	cccccccd 	.word	0xcccccccd
 8009450:	20011264 	.word	0x20011264

08009454 <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009462:	60fb      	str	r3, [r7, #12]
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	7f1b      	ldrb	r3, [r3, #28]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d123      	bne.n	80094b4 <USBD_AUDIO_EP0_RxReady+0x60>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009472:	2b02      	cmp	r3, #2
 8009474:	d11e      	bne.n	80094b4 <USBD_AUDIO_EP0_RxReady+0x60>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->VolumeCtl(VOL_CUR);    
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	33b0      	adds	r3, #176	; 0xb0
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	4a0d      	ldr	r2, [pc, #52]	; (80094c0 <USBD_AUDIO_EP0_RxReady+0x6c>)
 800948a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800948e:	4610      	mov	r0, r2
 8009490:	4798      	blx	r3
      
      haudio->control.cmd = 0;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	771a      	strb	r2, [r3, #28]
      haudio->control.len = 0;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      haudio->control.unit = 0;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      haudio->control.data[0]=0;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	775a      	strb	r2, [r3, #29]
      haudio->control.data[0]=0;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	775a      	strb	r2, [r3, #29]
    }
  }    
  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200113e4 	.word	0x200113e4

080094c4 <USBD_AUDIO_EP0_TxReady>:
*         handle EP0 TRx Ready event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <USBD_AUDIO_SOF>:
*         handle SOF event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{  
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USBD_AUDIO_IsoINIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USBD_AUDIO_IsoOutIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USBD_AUDIO_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
	...

08009540 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	220a      	movs	r2, #10
 800954c:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 800954e:	4b03      	ldr	r3, [pc, #12]	; (800955c <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009550:	4618      	mov	r0, r3
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	200000ac 	.word	0x200000ac

08009560 <AUDIO_REQ_GetMaximum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMaximum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009570:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MAX & 0xFF00 ) >> 8;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009588:	461a      	mov	r2, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 feb8 	bl	800b300 <USBD_CtlSendData>
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <AUDIO_REQ_GetMinimum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMinimum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095a8:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	22e0      	movs	r2, #224	; 0xe0
 80095ae:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	22db      	movs	r2, #219	; 0xdb
 80095b4:	779a      	strb	r2, [r3, #30]
  /* Send the current mute state */
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);   
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 80095c0:	461a      	mov	r2, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fe9c 	bl	800b300 <USBD_CtlSendData>
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <AUDIO_REQ_GetResolution>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetResolution(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095e0:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2223      	movs	r2, #35	; 0x23
 80095e6:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	779a      	strb	r2, [r3, #30]
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 80095f8:	461a      	mov	r2, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fe80 	bl	800b300 <USBD_CtlSendData>
}
 8009600:	bf00      	nop
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <AUDIO_REQ_GetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009618:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 800961a:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <AUDIO_REQ_GetCurrent+0x4c>)
 800961c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009620:	b2da      	uxtb	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 8009626:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <AUDIO_REQ_GetCurrent+0x4c>)
 8009628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800962c:	b29b      	uxth	r3, r3
 800962e:	0a1b      	lsrs	r3, r3, #8
 8009630:	b29b      	uxth	r3, r3
 8009632:	b2da      	uxtb	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009642:	461a      	mov	r2, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 fe5b 	bl	800b300 <USBD_CtlSendData>
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	200113e4 	.word	0x200113e4

08009658 <AUDIO_REQ_SetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009668:	60fb      	str	r3, [r7, #12]
  if (req->wLength)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	88db      	ldrh	r3, [r3, #6]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d017      	beq.n	80096a2 <AUDIO_REQ_SetCurrent+0x4a>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	88db      	ldrh	r3, [r3, #6]
    USBD_CtlPrepareRx (pdev,
 8009676:	461a      	mov	r2, r3
 8009678:	490c      	ldr	r1, [pc, #48]	; (80096ac <AUDIO_REQ_SetCurrent+0x54>)
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fe6c 	bl	800b358 <USBD_CtlPrepareRx>
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2201      	movs	r2, #1
 8009684:	771a      	strb	r2, [r3, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	88db      	ldrh	r3, [r3, #6]
 800968a:	b2da      	uxtb	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	889b      	ldrh	r3, [r3, #4]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	b29b      	uxth	r3, r3
 800969a:	b2da      	uxtb	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200113e4 	.word	0x200113e4

080096b0 <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80fb      	strh	r3, [r7, #6]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c4:	61fb      	str	r3, [r7, #28]
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 80096c6:	4b63      	ldr	r3, [pc, #396]	; (8009854 <USBD_AUDIO_Data_Transfer+0x1a4>)
 80096c8:	7d1b      	ldrb	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <USBD_AUDIO_Data_Transfer+0x22>
    return USBD_BUSY;    
 80096ce:	2301      	movs	r3, #1
 80096d0:	e0bb      	b.n	800984a <USBD_AUDIO_Data_Transfer+0x19a>
  }  
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 80096d2:	88fb      	ldrh	r3, [r7, #6]
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	837b      	strh	r3, [r7, #26]
  uint16_t true_dim = haudio->buffer_length;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	89db      	ldrh	r3, [r3, #14]
 80096dc:	833b      	strh	r3, [r7, #24]
  uint16_t current_data_Amount = haudio->dataAmount;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	8a1b      	ldrh	r3, [r3, #16]
 80096e2:	82fb      	strh	r3, [r7, #22]
  uint16_t packet_dim = haudio->paketDimension;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	8a5b      	ldrh	r3, [r3, #18]
 80096e8:	82bb      	strh	r3, [r7, #20]
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	7d1b      	ldrb	r3, [r3, #20]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d003      	beq.n	80096fa <USBD_AUDIO_Data_Transfer+0x4a>
 80096f2:	8afa      	ldrh	r2, [r7, #22]
 80096f4:	8b7b      	ldrh	r3, [r7, #26]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d05c      	beq.n	80097b4 <USBD_AUDIO_Data_Transfer+0x104>
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	8b7a      	ldrh	r2, [r7, #26]
 80096fe:	821a      	strh	r2, [r3, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 8009700:	8b7a      	ldrh	r2, [r7, #26]
 8009702:	4613      	mov	r3, r2
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	441a      	add	r2, r3
 8009708:	8abb      	ldrh	r3, [r7, #20]
 800970a:	fb92 f3f3 	sdiv	r3, r2, r3
 800970e:	827b      	strh	r3, [r7, #18]
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 8009710:	8a7a      	ldrh	r2, [r7, #18]
 8009712:	8abb      	ldrh	r3, [r7, #20]
 8009714:	fb12 f303 	smulbb	r3, r2, r3
 8009718:	b29a      	uxth	r2, r3
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	831a      	strh	r2, [r3, #24]
    haudio->rd_ptr = 0;
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	2200      	movs	r2, #0
 8009722:	82da      	strh	r2, [r3, #22]
    haudio->upper_treshold = wr_rd_offset + 1;
 8009724:	8a7b      	ldrh	r3, [r7, #18]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	3301      	adds	r3, #1
 800972a:	b2da      	uxtb	r2, r3
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	769a      	strb	r2, [r3, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 8009730:	8a7b      	ldrh	r3, [r7, #18]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	3b01      	subs	r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	76da      	strb	r2, [r3, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 800973c:	8b7a      	ldrh	r2, [r7, #26]
 800973e:	8abb      	ldrh	r3, [r7, #20]
 8009740:	fbb2 f3f3 	udiv	r3, r2, r3
 8009744:	b29b      	uxth	r3, r3
 8009746:	8aba      	ldrh	r2, [r7, #20]
 8009748:	fb12 f303 	smulbb	r3, r2, r3
 800974c:	b29b      	uxth	r3, r3
 800974e:	461a      	mov	r2, r3
 8009750:	0052      	lsls	r2, r2, #1
 8009752:	4413      	add	r3, r2
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	81da      	strh	r2, [r3, #14]
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <USBD_AUDIO_Data_Transfer+0xbe>
    {
      USBD_free(haudio->buffer);      
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009768:	4618      	mov	r0, r3
 800976a:	f003 fb95 	bl	800ce98 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	89db      	ldrh	r3, [r3, #14]
 8009772:	461a      	mov	r2, r3
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	8a1b      	ldrh	r3, [r3, #16]
 8009778:	4413      	add	r3, r2
 800977a:	4618      	mov	r0, r3
 800977c:	f003 fb84 	bl	800ce88 <malloc>
 8009780:	4603      	mov	r3, r0
 8009782:	461a      	mov	r2, r3
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	661a      	str	r2, [r3, #96]	; 0x60
    if(haudio->buffer == NULL)
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <USBD_AUDIO_Data_Transfer+0xe4>
    {
      return USBD_FAIL;       
 8009790:	2303      	movs	r3, #3
 8009792:	e05a      	b.n	800984a <USBD_AUDIO_Data_Transfer+0x19a>
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	89db      	ldrh	r3, [r3, #14]
 800979c:	461a      	mov	r2, r3
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	8a1b      	ldrh	r3, [r3, #16]
 80097a2:	4413      	add	r3, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	2100      	movs	r1, #0
 80097a8:	f003 fc2a 	bl	800d000 <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	2203      	movs	r2, #3
 80097b0:	751a      	strb	r2, [r3, #20]
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80097b2:	e049      	b.n	8009848 <USBD_AUDIO_Data_Transfer+0x198>
    
    
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d145      	bne.n	8009848 <USBD_AUDIO_Data_Transfer+0x198>
    if(haudio->timeout++==TIMEOUT_VALUE){
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	899b      	ldrh	r3, [r3, #12]
 80097c0:	b21b      	sxth	r3, r3
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	3201      	adds	r2, #1
 80097c6:	b292      	uxth	r2, r2
 80097c8:	b211      	sxth	r1, r2
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	8191      	strh	r1, [r2, #12]
 80097ce:	2bc8      	cmp	r3, #200	; 0xc8
 80097d0:	d10f      	bne.n	80097f2 <USBD_AUDIO_Data_Transfer+0x142>
      haudio->state=STATE_USB_IDLE;
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	2201      	movs	r2, #1
 80097d6:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();   
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	33b0      	adds	r3, #176	; 0xb0
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	4798      	blx	r3
     haudio->timeout=0;
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2200      	movs	r2, #0
 80097f0:	819a      	strh	r2, [r3, #12]
    }
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	8b12      	ldrh	r2, [r2, #24]
 80097fa:	4413      	add	r3, r2
 80097fc:	8b7a      	ldrh	r2, [r7, #26]
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	4618      	mov	r0, r3
 8009802:	f003 fc41 	bl	800d088 <memcpy>
    haudio->wr_ptr += dataAmount;
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	8b1a      	ldrh	r2, [r3, #24]
 800980a:	8b7b      	ldrh	r3, [r7, #26]
 800980c:	4413      	add	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	831a      	strh	r2, [r3, #24]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	8b1b      	ldrh	r3, [r3, #24]
 8009818:	8b3a      	ldrh	r2, [r7, #24]
 800981a:	fbb3 f1f2 	udiv	r1, r3, r2
 800981e:	fb01 f202 	mul.w	r2, r1, r2
 8009822:	1a9b      	subs	r3, r3, r2
 8009824:	b29a      	uxth	r2, r3
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	831a      	strh	r2, [r3, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	8b1b      	ldrh	r3, [r3, #24]
 800982e:	8b7a      	ldrh	r2, [r7, #26]
 8009830:	429a      	cmp	r2, r3
 8009832:	d109      	bne.n	8009848 <USBD_AUDIO_Data_Transfer+0x198>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009838:	8b3b      	ldrh	r3, [r7, #24]
 800983a:	18d0      	adds	r0, r2, r3
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009840:	8b7a      	ldrh	r2, [r7, #26]
 8009842:	4619      	mov	r1, r3
 8009844:	f003 fc20 	bl	800d088 <memcpy>
    }
  }
  return USBD_OK;  
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3720      	adds	r7, #32
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200113e8 	.word	0x200113e8

08009858 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData[0]= fops;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }
  return 0;}
 8009870:	2300      	movs	r3, #0
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <USBD_AUDIO_Init_Microphone_Descriptor>:
* @param  samplingFrequency: sampling frequency
* @param  Channels: number of channels
* @retval status
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	71fb      	strb	r3, [r7, #7]
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 800988e:	4b5c      	ldr	r3, [pc, #368]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009890:	2209      	movs	r2, #9
 8009892:	701a      	strb	r2, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
 8009894:	4b5a      	ldr	r3, [pc, #360]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009896:	2202      	movs	r2, #2
 8009898:	705a      	strb	r2, [r3, #1]
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	336c      	adds	r3, #108	; 0x6c
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	4b57      	ldr	r3, [pc, #348]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098a2:	709a      	strb	r2, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	336c      	adds	r3, #108	; 0x6c
 80098a8:	121b      	asrs	r3, r3, #8
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	4b54      	ldr	r3, [pc, #336]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098ae:	70da      	strb	r2, [r3, #3]
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
 80098b0:	4b53      	ldr	r3, [pc, #332]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098b2:	2202      	movs	r2, #2
 80098b4:	711a      	strb	r2, [r3, #4]
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
 80098b6:	4b52      	ldr	r3, [pc, #328]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098b8:	2201      	movs	r2, #1
 80098ba:	715a      	strb	r2, [r3, #5]
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
 80098bc:	4b50      	ldr	r3, [pc, #320]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098be:	2200      	movs	r2, #0
 80098c0:	719a      	strb	r2, [r3, #6]
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
 80098c2:	4b4f      	ldr	r3, [pc, #316]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098c4:	2280      	movs	r2, #128	; 0x80
 80098c6:	71da      	strb	r2, [r3, #7]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 80098c8:	4b4d      	ldr	r3, [pc, #308]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098ca:	2232      	movs	r2, #50	; 0x32
 80098cc:	721a      	strb	r2, [r3, #8]
  /* USB Microphone Standard interface descriptor */
  USBD_AUDIO_CfgDesc[9] = 9;                                                   /* bLength */
 80098ce:	4b4c      	ldr	r3, [pc, #304]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098d0:	2209      	movs	r2, #9
 80098d2:	725a      	strb	r2, [r3, #9]
  USBD_AUDIO_CfgDesc[10] = USB_INTERFACE_DESCRIPTOR_TYPE;                      /* bDescriptorType */
 80098d4:	4b4a      	ldr	r3, [pc, #296]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098d6:	2204      	movs	r2, #4
 80098d8:	729a      	strb	r2, [r3, #10]
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
 80098da:	4b49      	ldr	r3, [pc, #292]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098dc:	2200      	movs	r2, #0
 80098de:	72da      	strb	r2, [r3, #11]
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
 80098e0:	4b47      	ldr	r3, [pc, #284]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	731a      	strb	r2, [r3, #12]
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
 80098e6:	4b46      	ldr	r3, [pc, #280]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	735a      	strb	r2, [r3, #13]
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
 80098ec:	4b44      	ldr	r3, [pc, #272]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	739a      	strb	r2, [r3, #14]
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
 80098f2:	4b43      	ldr	r3, [pc, #268]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	73da      	strb	r2, [r3, #15]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 80098f8:	4b41      	ldr	r3, [pc, #260]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	741a      	strb	r2, [r3, #16]
  USBD_AUDIO_CfgDesc[17] = 0x00;                                               /* iInterface */   
 80098fe:	4b40      	ldr	r3, [pc, #256]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009900:	2200      	movs	r2, #0
 8009902:	745a      	strb	r2, [r3, #17]
  /* USB Microphone Class-specific AC Interface Descriptor */
  USBD_AUDIO_CfgDesc[18] = 9;                                                  /* bLength */
 8009904:	4b3e      	ldr	r3, [pc, #248]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009906:	2209      	movs	r2, #9
 8009908:	749a      	strb	r2, [r3, #18]
  USBD_AUDIO_CfgDesc[19] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 800990a:	4b3d      	ldr	r3, [pc, #244]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800990c:	2224      	movs	r2, #36	; 0x24
 800990e:	74da      	strb	r2, [r3, #19]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 8009910:	4b3b      	ldr	r3, [pc, #236]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009912:	2201      	movs	r2, #1
 8009914:	751a      	strb	r2, [r3, #20]
  USBD_AUDIO_CfgDesc[21] = 0x00;       /* 1.00 */                              /* bcdADC */
 8009916:	4b3a      	ldr	r3, [pc, #232]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009918:	2200      	movs	r2, #0
 800991a:	755a      	strb	r2, [r3, #21]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 800991c:	4b38      	ldr	r3, [pc, #224]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800991e:	2201      	movs	r2, #1
 8009920:	759a      	strb	r2, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	3325      	adds	r3, #37	; 0x25
 8009926:	b2da      	uxtb	r2, r3
 8009928:	4b35      	ldr	r3, [pc, #212]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800992a:	75da      	strb	r2, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 800992c:	4b34      	ldr	r3, [pc, #208]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800992e:	2200      	movs	r2, #0
 8009930:	761a      	strb	r2, [r3, #24]
  USBD_AUDIO_CfgDesc[25] = 0x01;                                               /* bInCollection */
 8009932:	4b33      	ldr	r3, [pc, #204]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009934:	2201      	movs	r2, #1
 8009936:	765a      	strb	r2, [r3, #25]
  USBD_AUDIO_CfgDesc[26] = 0x01;                                               /* baInterfaceNr */   
 8009938:	4b31      	ldr	r3, [pc, #196]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800993a:	2201      	movs	r2, #1
 800993c:	769a      	strb	r2, [r3, #26]
  /* USB Microphone Input Terminal Descriptor */
  USBD_AUDIO_CfgDesc[27] = AUDIO_INPUT_TERMINAL_DESC_SIZE;                     /* bLength */
 800993e:	4b30      	ldr	r3, [pc, #192]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009940:	220c      	movs	r2, #12
 8009942:	76da      	strb	r2, [r3, #27]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009944:	4b2e      	ldr	r3, [pc, #184]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009946:	2224      	movs	r2, #36	; 0x24
 8009948:	771a      	strb	r2, [r3, #28]
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
 800994a:	4b2d      	ldr	r3, [pc, #180]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800994c:	2202      	movs	r2, #2
 800994e:	775a      	strb	r2, [r3, #29]
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
 8009950:	4b2b      	ldr	r3, [pc, #172]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009952:	2201      	movs	r2, #1
 8009954:	779a      	strb	r2, [r3, #30]
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009958:	2201      	movs	r2, #1
 800995a:	77da      	strb	r2, [r3, #31]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 800995c:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800995e:	2202      	movs	r2, #2
 8009960:	f883 2020 	strb.w	r2, [r3, #32]
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
 8009964:	4b26      	ldr	r3, [pc, #152]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 800996c:	4a24      	ldr	r2, [pc, #144]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if(Channels != 2)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d008      	beq.n	800998c <USBD_AUDIO_Init_Microphone_Descriptor+0x10c>
  {
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 800997a:	4b21      	ldr	r3, [pc, #132]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 8009982:	4b1f      	ldr	r3, [pc, #124]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800998a:	e007      	b.n	800999c <USBD_AUDIO_Init_Microphone_Descriptor+0x11c>
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 800998c:	4b1c      	ldr	r3, [pc, #112]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800998e:	2203      	movs	r2, #3
 8009990:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 8009994:	4b1a      	ldr	r3, [pc, #104]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 800999c:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 80099a4:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 80099ac:	79fb      	ldrb	r3, [r7, #7]
 80099ae:	3308      	adds	r3, #8
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80099b8:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099ba:	2224      	movs	r2, #36	; 0x24
 80099bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
 80099c0:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099c2:	2206      	movs	r2, #6
 80099c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
 80099c8:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 80099d8:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  index = 47;   
 80099e0:	232f      	movs	r3, #47	; 0x2f
 80099e2:	82fb      	strh	r3, [r7, #22]
  if(Channels == 1)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d10c      	bne.n	8009a04 <USBD_AUDIO_Init_Microphone_Descriptor+0x184>
  {
    AUDIO_CONTROLS = (0x02);     
 80099ea:	2302      	movs	r3, #2
 80099ec:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 80099ee:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099f0:	7d7b      	ldrb	r3, [r7, #21]
 80099f2:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 80099f6:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80099fe:	e012      	b.n	8009a26 <USBD_AUDIO_Init_Microphone_Descriptor+0x1a6>
 8009a00:	2001144c 	.word	0x2001144c
  }
  else
  {
    AUDIO_CONTROLS = (0x02);     
 8009a04:	2302      	movs	r3, #2
 8009a06:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8009a08:	4bab      	ldr	r3, [pc, #684]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8009a10:	4aa9      	ldr	r2, [pc, #676]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a12:	7d7b      	ldrb	r3, [r7, #21]
 8009a14:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a18:	8afb      	ldrh	r3, [r7, #22]
 8009a1a:	49a7      	ldr	r1, [pc, #668]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a1c:	7d7a      	ldrb	r2, [r7, #21]
 8009a1e:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a20:	8afb      	ldrh	r3, [r7, #22]
 8009a22:	3301      	adds	r3, #1
 8009a24:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 2)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d906      	bls.n	8009a3a <USBD_AUDIO_Init_Microphone_Descriptor+0x1ba>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	49a2      	ldr	r1, [pc, #648]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a30:	7d7a      	ldrb	r2, [r7, #21]
 8009a32:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a34:	8afb      	ldrh	r3, [r7, #22]
 8009a36:	3301      	adds	r3, #1
 8009a38:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 3)
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d906      	bls.n	8009a4e <USBD_AUDIO_Init_Microphone_Descriptor+0x1ce>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a40:	8afb      	ldrh	r3, [r7, #22]
 8009a42:	499d      	ldr	r1, [pc, #628]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a44:	7d7a      	ldrb	r2, [r7, #21]
 8009a46:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a48:	8afb      	ldrh	r3, [r7, #22]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 4)
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d906      	bls.n	8009a62 <USBD_AUDIO_Init_Microphone_Descriptor+0x1e2>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a54:	8afb      	ldrh	r3, [r7, #22]
 8009a56:	4998      	ldr	r1, [pc, #608]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a58:	7d7a      	ldrb	r2, [r7, #21]
 8009a5a:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a5c:	8afb      	ldrh	r3, [r7, #22]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 5)
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	2b05      	cmp	r3, #5
 8009a66:	d906      	bls.n	8009a76 <USBD_AUDIO_Init_Microphone_Descriptor+0x1f6>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a68:	8afb      	ldrh	r3, [r7, #22]
 8009a6a:	4993      	ldr	r1, [pc, #588]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a6c:	7d7a      	ldrb	r2, [r7, #21]
 8009a6e:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a70:	8afb      	ldrh	r3, [r7, #22]
 8009a72:	3301      	adds	r3, #1
 8009a74:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 6)
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	2b06      	cmp	r3, #6
 8009a7a:	d906      	bls.n	8009a8a <USBD_AUDIO_Init_Microphone_Descriptor+0x20a>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a7c:	8afb      	ldrh	r3, [r7, #22]
 8009a7e:	498e      	ldr	r1, [pc, #568]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a80:	7d7a      	ldrb	r2, [r7, #21]
 8009a82:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a84:	8afb      	ldrh	r3, [r7, #22]
 8009a86:	3301      	adds	r3, #1
 8009a88:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 7)
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	2b07      	cmp	r3, #7
 8009a8e:	d906      	bls.n	8009a9e <USBD_AUDIO_Init_Microphone_Descriptor+0x21e>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a90:	8afb      	ldrh	r3, [r7, #22]
 8009a92:	4989      	ldr	r1, [pc, #548]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a94:	7d7a      	ldrb	r2, [r7, #21]
 8009a96:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a98:	8afb      	ldrh	r3, [r7, #22]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	82fb      	strh	r3, [r7, #22]
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 8009a9e:	8afb      	ldrh	r3, [r7, #22]
 8009aa0:	4a85      	ldr	r2, [pc, #532]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	54d1      	strb	r1, [r2, r3]
  index++;   
 8009aa6:	8afb      	ldrh	r3, [r7, #22]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	82fb      	strh	r3, [r7, #22]
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8009aac:	8afb      	ldrh	r3, [r7, #22]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	82fa      	strh	r2, [r7, #22]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4b80      	ldr	r3, [pc, #512]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ab6:	2109      	movs	r1, #9
 8009ab8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009aba:	8afb      	ldrh	r3, [r7, #22]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	82fa      	strh	r2, [r7, #22]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4b7d      	ldr	r3, [pc, #500]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ac4:	2124      	movs	r1, #36	; 0x24
 8009ac6:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	82fa      	strh	r2, [r7, #22]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4b79      	ldr	r3, [pc, #484]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ad2:	2103      	movs	r1, #3
 8009ad4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 8009ad6:	8afb      	ldrh	r3, [r7, #22]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	82fa      	strh	r2, [r7, #22]
 8009adc:	461a      	mov	r2, r3
 8009ade:	4b76      	ldr	r3, [pc, #472]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ae0:	2103      	movs	r1, #3
 8009ae2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	82fa      	strh	r2, [r7, #22]
 8009aea:	461a      	mov	r2, r3
 8009aec:	4b72      	ldr	r3, [pc, #456]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009aee:	2101      	movs	r1, #1
 8009af0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	82fa      	strh	r2, [r7, #22]
 8009af8:	461a      	mov	r2, r3
 8009afa:	4b6f      	ldr	r3, [pc, #444]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009afc:	2101      	movs	r1, #1
 8009afe:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8009b00:	8afb      	ldrh	r3, [r7, #22]
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	82fa      	strh	r2, [r7, #22]
 8009b06:	461a      	mov	r2, r3
 8009b08:	4b6b      	ldr	r3, [pc, #428]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8009b0e:	8afb      	ldrh	r3, [r7, #22]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	82fa      	strh	r2, [r7, #22]
 8009b14:	461a      	mov	r2, r3
 8009b16:	4b68      	ldr	r3, [pc, #416]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b18:	2102      	movs	r1, #2
 8009b1a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8009b1c:	8afb      	ldrh	r3, [r7, #22]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	82fa      	strh	r2, [r7, #22]
 8009b22:	461a      	mov	r2, r3
 8009b24:	4b64      	ldr	r3, [pc, #400]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b26:	2100      	movs	r1, #0
 8009b28:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8009b2a:	8afb      	ldrh	r3, [r7, #22]
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	82fa      	strh	r2, [r7, #22]
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b61      	ldr	r3, [pc, #388]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b34:	2109      	movs	r1, #9
 8009b36:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8009b38:	8afb      	ldrh	r3, [r7, #22]
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	82fa      	strh	r2, [r7, #22]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4b5d      	ldr	r3, [pc, #372]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b42:	2104      	movs	r1, #4
 8009b44:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009b46:	8afb      	ldrh	r3, [r7, #22]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	82fa      	strh	r2, [r7, #22]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4b5a      	ldr	r3, [pc, #360]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b50:	2101      	movs	r1, #1
 8009b52:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 8009b54:	8afb      	ldrh	r3, [r7, #22]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	82fa      	strh	r2, [r7, #22]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4b56      	ldr	r3, [pc, #344]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b5e:	2100      	movs	r1, #0
 8009b60:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 8009b62:	8afb      	ldrh	r3, [r7, #22]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	82fa      	strh	r2, [r7, #22]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4b53      	ldr	r3, [pc, #332]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8009b70:	8afb      	ldrh	r3, [r7, #22]
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	82fa      	strh	r2, [r7, #22]
 8009b76:	461a      	mov	r2, r3
 8009b78:	4b4f      	ldr	r3, [pc, #316]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8009b7e:	8afb      	ldrh	r3, [r7, #22]
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	82fa      	strh	r2, [r7, #22]
 8009b84:	461a      	mov	r2, r3
 8009b86:	4b4c      	ldr	r3, [pc, #304]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b88:	2102      	movs	r1, #2
 8009b8a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8009b8c:	8afb      	ldrh	r3, [r7, #22]
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	82fa      	strh	r2, [r7, #22]
 8009b92:	461a      	mov	r2, r3
 8009b94:	4b48      	ldr	r3, [pc, #288]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009b96:	2100      	movs	r1, #0
 8009b98:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8009b9a:	8afb      	ldrh	r3, [r7, #22]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	82fa      	strh	r2, [r7, #22]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4b45      	ldr	r3, [pc, #276]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8009ba8:	8afb      	ldrh	r3, [r7, #22]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	82fa      	strh	r2, [r7, #22]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4b41      	ldr	r3, [pc, #260]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009bb2:	2109      	movs	r1, #9
 8009bb4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8009bb6:	8afb      	ldrh	r3, [r7, #22]
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	82fa      	strh	r2, [r7, #22]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4b3e      	ldr	r3, [pc, #248]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009bc4:	8afb      	ldrh	r3, [r7, #22]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	82fa      	strh	r2, [r7, #22]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4b3a      	ldr	r3, [pc, #232]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009bce:	2101      	movs	r1, #1
 8009bd0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 8009bd2:	8afb      	ldrh	r3, [r7, #22]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	82fa      	strh	r2, [r7, #22]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	4b37      	ldr	r3, [pc, #220]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009bdc:	2101      	movs	r1, #1
 8009bde:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 8009be0:	8afb      	ldrh	r3, [r7, #22]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	82fa      	strh	r2, [r7, #22]
 8009be6:	461a      	mov	r2, r3
 8009be8:	4b33      	ldr	r3, [pc, #204]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009bea:	2101      	movs	r1, #1
 8009bec:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8009bee:	8afb      	ldrh	r3, [r7, #22]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	82fa      	strh	r2, [r7, #22]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4b30      	ldr	r3, [pc, #192]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8009bfc:	8afb      	ldrh	r3, [r7, #22]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	82fa      	strh	r2, [r7, #22]
 8009c02:	461a      	mov	r2, r3
 8009c04:	4b2c      	ldr	r3, [pc, #176]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c06:	2102      	movs	r1, #2
 8009c08:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8009c0a:	8afb      	ldrh	r3, [r7, #22]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	82fa      	strh	r2, [r7, #22]
 8009c10:	461a      	mov	r2, r3
 8009c12:	4b29      	ldr	r3, [pc, #164]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c14:	2100      	movs	r1, #0
 8009c16:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 8009c18:	8afb      	ldrh	r3, [r7, #22]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	82fa      	strh	r2, [r7, #22]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	4b25      	ldr	r3, [pc, #148]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c22:	2100      	movs	r1, #0
 8009c24:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8009c26:	8afb      	ldrh	r3, [r7, #22]
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	82fa      	strh	r2, [r7, #22]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4b22      	ldr	r3, [pc, #136]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c30:	2107      	movs	r1, #7
 8009c32:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009c34:	8afb      	ldrh	r3, [r7, #22]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	82fa      	strh	r2, [r7, #22]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	4b1e      	ldr	r3, [pc, #120]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c3e:	2124      	movs	r1, #36	; 0x24
 8009c40:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 8009c42:	8afb      	ldrh	r3, [r7, #22]
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	82fa      	strh	r2, [r7, #22]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	4b1b      	ldr	r3, [pc, #108]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 8009c50:	8afb      	ldrh	r3, [r7, #22]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	82fa      	strh	r2, [r7, #22]
 8009c56:	461a      	mov	r2, r3
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c5a:	2103      	movs	r1, #3
 8009c5c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8009c5e:	8afb      	ldrh	r3, [r7, #22]
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	82fa      	strh	r2, [r7, #22]
 8009c64:	461a      	mov	r2, r3
 8009c66:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c68:	2101      	movs	r1, #1
 8009c6a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8009c6c:	8afb      	ldrh	r3, [r7, #22]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	82fa      	strh	r2, [r7, #22]
 8009c72:	461a      	mov	r2, r3
 8009c74:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c76:	2101      	movs	r1, #1
 8009c78:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 8009c7a:	8afb      	ldrh	r3, [r7, #22]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	82fa      	strh	r2, [r7, #22]
 8009c80:	461a      	mov	r2, r3
 8009c82:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c84:	2100      	movs	r1, #0
 8009c86:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8009c88:	8afb      	ldrh	r3, [r7, #22]
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	82fa      	strh	r2, [r7, #22]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009c92:	210b      	movs	r1, #11
 8009c94:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009c96:	8afb      	ldrh	r3, [r7, #22]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	82fa      	strh	r2, [r7, #22]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ca0:	2124      	movs	r1, #36	; 0x24
 8009ca2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	82fa      	strh	r2, [r7, #22]
 8009caa:	461a      	mov	r2, r3
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009cae:	2102      	movs	r1, #2
 8009cb0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8009cb2:	8afb      	ldrh	r3, [r7, #22]
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	e001      	b.n	8009cbc <USBD_AUDIO_Init_Microphone_Descriptor+0x43c>
 8009cb8:	2001144c 	.word	0x2001144c
 8009cbc:	82fa      	strh	r2, [r7, #22]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4b7e      	ldr	r3, [pc, #504]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8009cc6:	8afb      	ldrh	r3, [r7, #22]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	82fa      	strh	r2, [r7, #22]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4a7b      	ldr	r2, [pc, #492]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	5453      	strb	r3, [r2, r1]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 8009cd4:	8afb      	ldrh	r3, [r7, #22]
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	82fa      	strh	r2, [r7, #22]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4b77      	ldr	r3, [pc, #476]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009cde:	2102      	movs	r1, #2
 8009ce0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 8009ce2:	8afb      	ldrh	r3, [r7, #22]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	82fa      	strh	r2, [r7, #22]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4b74      	ldr	r3, [pc, #464]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009cec:	2110      	movs	r1, #16
 8009cee:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8009cf0:	8afb      	ldrh	r3, [r7, #22]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	82fa      	strh	r2, [r7, #22]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4b70      	ldr	r3, [pc, #448]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8009cfe:	8afb      	ldrh	r3, [r7, #22]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	82fa      	strh	r2, [r7, #22]
 8009d04:	461a      	mov	r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	b2d9      	uxtb	r1, r3
 8009d0a:	4b6c      	ldr	r3, [pc, #432]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d0c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	0a19      	lsrs	r1, r3, #8
 8009d12:	8afb      	ldrh	r3, [r7, #22]
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	82fa      	strh	r2, [r7, #22]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	b2c9      	uxtb	r1, r1
 8009d1c:	4b67      	ldr	r3, [pc, #412]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d1e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	0c19      	lsrs	r1, r3, #16
 8009d24:	8afb      	ldrh	r3, [r7, #22]
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	82fa      	strh	r2, [r7, #22]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	b2c9      	uxtb	r1, r1
 8009d2e:	4b63      	ldr	r3, [pc, #396]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d30:	5499      	strb	r1, [r3, r2]
  /* Endpoint 1 - Standard Descriptor */
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8009d32:	8afb      	ldrh	r3, [r7, #22]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	82fa      	strh	r2, [r7, #22]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4b60      	ldr	r3, [pc, #384]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d3c:	2109      	movs	r1, #9
 8009d3e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8009d40:	8afb      	ldrh	r3, [r7, #22]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	82fa      	strh	r2, [r7, #22]
 8009d46:	461a      	mov	r2, r3
 8009d48:	4b5c      	ldr	r3, [pc, #368]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d4a:	2105      	movs	r1, #5
 8009d4c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8009d4e:	8afb      	ldrh	r3, [r7, #22]
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	82fa      	strh	r2, [r7, #22]
 8009d54:	461a      	mov	r2, r3
 8009d56:	4b59      	ldr	r3, [pc, #356]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d58:	2181      	movs	r1, #129	; 0x81
 8009d5a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8009d5c:	8afb      	ldrh	r3, [r7, #22]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	82fa      	strh	r2, [r7, #22]
 8009d62:	461a      	mov	r2, r3
 8009d64:	4b55      	ldr	r3, [pc, #340]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d66:	2105      	movs	r1, #5
 8009d68:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	4a54      	ldr	r2, [pc, #336]	; (8009ec0 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d72:	099b      	lsrs	r3, r3, #6
 8009d74:	3302      	adds	r3, #2
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	79fa      	ldrb	r2, [r7, #7]
 8009d7a:	fb12 f303 	smulbb	r3, r2, r3
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	8afb      	ldrh	r3, [r7, #22]
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	82f9      	strh	r1, [r7, #22]
 8009d86:	4619      	mov	r1, r3
 8009d88:	0053      	lsls	r3, r2, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	4b4b      	ldr	r3, [pc, #300]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009d8e:	545a      	strb	r2, [r3, r1]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4a4b      	ldr	r2, [pc, #300]	; (8009ec0 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d94:	fba2 2303 	umull	r2, r3, r2, r3
 8009d98:	099b      	lsrs	r3, r3, #6
 8009d9a:	3302      	adds	r3, #2
 8009d9c:	79fa      	ldrb	r2, [r7, #7]
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	0a19      	lsrs	r1, r3, #8
 8009da6:	8afb      	ldrh	r3, [r7, #22]
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	82fa      	strh	r2, [r7, #22]
 8009dac:	461a      	mov	r2, r3
 8009dae:	b2c9      	uxtb	r1, r1
 8009db0:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009db2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8009db4:	8afb      	ldrh	r3, [r7, #22]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	82fa      	strh	r2, [r7, #22]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	4b3f      	ldr	r3, [pc, #252]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8009dc2:	8afb      	ldrh	r3, [r7, #22]
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	82fa      	strh	r2, [r7, #22]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4b3c      	ldr	r3, [pc, #240]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009dcc:	2100      	movs	r1, #0
 8009dce:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8009dd0:	8afb      	ldrh	r3, [r7, #22]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	82fa      	strh	r2, [r7, #22]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4b38      	ldr	r3, [pc, #224]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009dda:	2100      	movs	r1, #0
 8009ddc:	5499      	strb	r1, [r3, r2]
  /* Endpoint - Audio Streaming Descriptor*/
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8009dde:	8afb      	ldrh	r3, [r7, #22]
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	82fa      	strh	r2, [r7, #22]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b35      	ldr	r3, [pc, #212]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009de8:	2107      	movs	r1, #7
 8009dea:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8009dec:	8afb      	ldrh	r3, [r7, #22]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	82fa      	strh	r2, [r7, #22]
 8009df2:	461a      	mov	r2, r3
 8009df4:	4b31      	ldr	r3, [pc, #196]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009df6:	2125      	movs	r1, #37	; 0x25
 8009df8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8009dfa:	8afb      	ldrh	r3, [r7, #22]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	82fa      	strh	r2, [r7, #22]
 8009e00:	461a      	mov	r2, r3
 8009e02:	4b2e      	ldr	r3, [pc, #184]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009e04:	2101      	movs	r1, #1
 8009e06:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8009e08:	8afb      	ldrh	r3, [r7, #22]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	82fa      	strh	r2, [r7, #22]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	4b2a      	ldr	r3, [pc, #168]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009e12:	2100      	movs	r1, #0
 8009e14:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8009e16:	8afb      	ldrh	r3, [r7, #22]
 8009e18:	1c5a      	adds	r2, r3, #1
 8009e1a:	82fa      	strh	r2, [r7, #22]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009e20:	2100      	movs	r1, #0
 8009e22:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8009e24:	8afb      	ldrh	r3, [r7, #22]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	82fa      	strh	r2, [r7, #22]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	4b23      	ldr	r3, [pc, #140]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009e2e:	2100      	movs	r1, #0
 8009e30:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8009e32:	8afb      	ldrh	r3, [r7, #22]
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	82fa      	strh	r2, [r7, #22]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4b20      	ldr	r3, [pc, #128]	; (8009ebc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	5499      	strb	r1, [r3, r2]
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009e44:	fba2 2303 	umull	r2, r3, r2, r3
 8009e48:	099b      	lsrs	r3, r3, #6
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	fb12 f303 	smulbb	r3, r2, r3
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	4b1a      	ldr	r3, [pc, #104]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e5c:	825a      	strh	r2, [r3, #18]
  haudioInstance.frequency=samplingFrequency;
 8009e5e:	4a19      	ldr	r2, [pc, #100]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6093      	str	r3, [r2, #8]
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8009e64:	4b17      	ldr	r3, [pc, #92]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e66:	8a5b      	ldrh	r3, [r3, #18]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	0052      	lsls	r2, r2, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e74:	81da      	strh	r2, [r3, #14]
  haudioInstance.channels=Channels;  
 8009e76:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	7113      	strb	r3, [r2, #4]
  haudioInstance.upper_treshold = 5;
 8009e7c:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e7e:	2205      	movs	r2, #5
 8009e80:	769a      	strb	r2, [r3, #26]
  haudioInstance.lower_treshold = 2;
 8009e82:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e84:	2202      	movs	r2, #2
 8009e86:	76da      	strb	r2, [r3, #27]
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8009e88:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	751a      	strb	r2, [r3, #20]
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e90:	8a5b      	ldrh	r3, [r3, #18]
 8009e92:	461a      	mov	r2, r3
 8009e94:	0052      	lsls	r2, r2, #1
 8009e96:	4413      	add	r3, r2
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009e9c:	831a      	strh	r2, [r3, #24]
  haudioInstance.rd_ptr = 0;  
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	82da      	strh	r2, [r3, #22]
  haudioInstance.dataAmount=0;
 8009ea4:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	821a      	strh	r2, [r3, #16]
  haudioInstance.buffer = 0;
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009eb0:	bf00      	nop
 8009eb2:	371c      	adds	r7, #28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	2001144c 	.word	0x2001144c
 8009ec0:	10624dd3 	.word	0x10624dd3
 8009ec4:	200113e8 	.word	0x200113e8

08009ec8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e01f      	b.n	8009f20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	79fa      	ldrb	r2, [r7, #7]
 8009f12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7f7 f927 	bl	8001168 <USBD_LL_Init>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e025      	b.n	8009f8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	32ae      	adds	r2, #174	; 0xae
 8009f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00f      	beq.n	8009f7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	32ae      	adds	r2, #174	; 0xae
 8009f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	f107 020e 	add.w	r2, r7, #14
 8009f70:	4610      	mov	r0, r2
 8009f72:	4798      	blx	r3
 8009f74:	4602      	mov	r2, r0
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7f7 f92b 	bl	80011f8 <USBD_LL_Start>
 8009fa2:	4603      	mov	r3, r0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	4798      	blx	r3
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	4611      	mov	r1, r2
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	4798      	blx	r3
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a020:	2303      	movs	r3, #3
 800a022:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a024:	7bfb      	ldrb	r3, [r7, #15]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	4618      	mov	r0, r3
 800a042:	f001 f8b2 	bl	800b1aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a062:	f003 031f 	and.w	r3, r3, #31
 800a066:	2b02      	cmp	r3, #2
 800a068:	d01a      	beq.n	800a0a0 <USBD_LL_SetupStage+0x72>
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d822      	bhi.n	800a0b4 <USBD_LL_SetupStage+0x86>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <USBD_LL_SetupStage+0x4a>
 800a072:	2b01      	cmp	r3, #1
 800a074:	d00a      	beq.n	800a08c <USBD_LL_SetupStage+0x5e>
 800a076:	e01d      	b.n	800a0b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb09 	bl	800a698 <USBD_StdDevReq>
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]
      break;
 800a08a:	e020      	b.n	800a0ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fb71 	bl	800a77c <USBD_StdItfReq>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
      break;
 800a09e:	e016      	b.n	800a0ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fbd3 	bl	800a854 <USBD_StdEPReq>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b2:	e00c      	b.n	800a0ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f7 f8e7 	bl	8001296 <USBD_LL_StallEP>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a0cc:	bf00      	nop
  }

  return ret;
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d16e      	bne.n	800a1ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	f040 8098 	bne.w	800a234 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d913      	bls.n	800a138 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	1ad2      	subs	r2, r2, r3
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	4293      	cmp	r3, r2
 800a128:	bf28      	it	cs
 800a12a:	4613      	movcs	r3, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f001 f92e 	bl	800b392 <USBD_CtlContinueRx>
 800a136:	e07d      	b.n	800a234 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a13e:	f003 031f 	and.w	r3, r3, #31
 800a142:	2b02      	cmp	r3, #2
 800a144:	d014      	beq.n	800a170 <USBD_LL_DataOutStage+0x98>
 800a146:	2b02      	cmp	r3, #2
 800a148:	d81d      	bhi.n	800a186 <USBD_LL_DataOutStage+0xae>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <USBD_LL_DataOutStage+0x7c>
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d003      	beq.n	800a15a <USBD_LL_DataOutStage+0x82>
 800a152:	e018      	b.n	800a186 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	75bb      	strb	r3, [r7, #22]
            break;
 800a158:	e018      	b.n	800a18c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a160:	b2db      	uxtb	r3, r3
 800a162:	4619      	mov	r1, r3
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fa5e 	bl	800a626 <USBD_CoreFindIF>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75bb      	strb	r3, [r7, #22]
            break;
 800a16e:	e00d      	b.n	800a18c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a176:	b2db      	uxtb	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fa60 	bl	800a640 <USBD_CoreFindEP>
 800a180:	4603      	mov	r3, r0
 800a182:	75bb      	strb	r3, [r7, #22]
            break;
 800a184:	e002      	b.n	800a18c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a186:	2300      	movs	r3, #0
 800a188:	75bb      	strb	r3, [r7, #22]
            break;
 800a18a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a18c:	7dbb      	ldrb	r3, [r7, #22]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d119      	bne.n	800a1c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d113      	bne.n	800a1c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a19e:	7dba      	ldrb	r2, [r7, #22]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	32ae      	adds	r2, #174	; 0xae
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a1ae:	7dba      	ldrb	r2, [r7, #22]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a1b6:	7dba      	ldrb	r2, [r7, #22]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	32ae      	adds	r2, #174	; 0xae
 800a1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f001 f8f4 	bl	800b3b4 <USBD_CtlSendStatus>
 800a1cc:	e032      	b.n	800a234 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fa31 	bl	800a640 <USBD_CoreFindEP>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1e2:	7dbb      	ldrb	r3, [r7, #22]
 800a1e4:	2bff      	cmp	r3, #255	; 0xff
 800a1e6:	d025      	beq.n	800a234 <USBD_LL_DataOutStage+0x15c>
 800a1e8:	7dbb      	ldrb	r3, [r7, #22]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d122      	bne.n	800a234 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d117      	bne.n	800a22a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a1fa:	7dba      	ldrb	r2, [r7, #22]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	32ae      	adds	r2, #174	; 0xae
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00f      	beq.n	800a22a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a20a:	7dba      	ldrb	r2, [r7, #22]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a212:	7dba      	ldrb	r2, [r7, #22]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	32ae      	adds	r2, #174	; 0xae
 800a218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	7afa      	ldrb	r2, [r7, #11]
 800a220:	4611      	mov	r1, r2
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	4798      	blx	r3
 800a226:	4603      	mov	r3, r0
 800a228:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	e000      	b.n	800a236 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	460b      	mov	r3, r1
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d16f      	bne.n	800a332 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3314      	adds	r3, #20
 800a256:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d15a      	bne.n	800a318 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d914      	bls.n	800a298 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	1ad2      	subs	r2, r2, r3
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	461a      	mov	r2, r3
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f001 f856 	bl	800b336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a28a:	2300      	movs	r3, #0
 800a28c:	2200      	movs	r2, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7f7 f87a 	bl	800138a <USBD_LL_PrepareReceive>
 800a296:	e03f      	b.n	800a318 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d11c      	bne.n	800a2de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d316      	bcc.n	800a2de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d20f      	bcs.n	800a2de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f001 f837 	bl	800b336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7f7 f857 	bl	800138a <USBD_LL_PrepareReceive>
 800a2dc:	e01c      	b.n	800a318 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d10f      	bne.n	800a30a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a30a:	2180      	movs	r1, #128	; 0x80
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7f6 ffc2 	bl	8001296 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f001 f861 	bl	800b3da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d03a      	beq.n	800a398 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff fe42 	bl	8009fac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a330:	e032      	b.n	800a398 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	4619      	mov	r1, r3
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 f97f 	bl	800a640 <USBD_CoreFindEP>
 800a342:	4603      	mov	r3, r0
 800a344:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a346:	7dfb      	ldrb	r3, [r7, #23]
 800a348:	2bff      	cmp	r3, #255	; 0xff
 800a34a:	d025      	beq.n	800a398 <USBD_LL_DataInStage+0x15a>
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d122      	bne.n	800a398 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d11c      	bne.n	800a398 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a35e:	7dfa      	ldrb	r2, [r7, #23]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	32ae      	adds	r2, #174	; 0xae
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d014      	beq.n	800a398 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a36e:	7dfa      	ldrb	r2, [r7, #23]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a376:	7dfa      	ldrb	r2, [r7, #23]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	32ae      	adds	r2, #174	; 0xae
 800a37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	7afa      	ldrb	r2, [r7, #11]
 800a384:	4611      	mov	r1, r2
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	4798      	blx	r3
 800a38a:	4603      	mov	r3, r0
 800a38c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a38e:	7dbb      	ldrb	r3, [r7, #22]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a394:	7dbb      	ldrb	r3, [r7, #22]
 800a396:	e000      	b.n	800a39a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d014      	beq.n	800a408 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00e      	beq.n	800a408 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6852      	ldr	r2, [r2, #4]
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	4798      	blx	r3
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a404:	2303      	movs	r3, #3
 800a406:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	2200      	movs	r2, #0
 800a40c:	2100      	movs	r1, #0
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7f6 ff01 	bl	8001216 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2240      	movs	r2, #64	; 0x40
 800a420:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	2200      	movs	r2, #0
 800a428:	2180      	movs	r1, #128	; 0x80
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7f6 fef3 	bl	8001216 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2240      	movs	r2, #64	; 0x40
 800a43a:	621a      	str	r2, [r3, #32]

  return ret;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a446:	b480      	push	{r7}
 800a448:	b083      	sub	sp, #12
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	460b      	mov	r3, r1
 800a450:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	78fa      	ldrb	r2, [r7, #3]
 800a456:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	b2da      	uxtb	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2204      	movs	r2, #4
 800a480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d106      	bne.n	800a4b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d110      	bne.n	800a4f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	32ae      	adds	r2, #174	; 0xae
 800a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a520:	2303      	movs	r3, #3
 800a522:	e01c      	b.n	800a55e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d115      	bne.n	800a55c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32ae      	adds	r2, #174	; 0xae
 800a53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	32ae      	adds	r2, #174	; 0xae
 800a54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4611      	mov	r1, r2
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	32ae      	adds	r2, #174	; 0xae
 800a57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a584:	2303      	movs	r3, #3
 800a586:	e01c      	b.n	800a5c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b03      	cmp	r3, #3
 800a592:	d115      	bne.n	800a5c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	32ae      	adds	r2, #174	; 0xae
 800a59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00b      	beq.n	800a5c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	32ae      	adds	r2, #174	; 0xae
 800a5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	78fa      	ldrb	r2, [r7, #3]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	6852      	ldr	r2, [r2, #4]
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	4611      	mov	r1, r2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a618:	2303      	movs	r3, #3
 800a61a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	460b      	mov	r3, r1
 800a630:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a632:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a64c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b087      	sub	sp, #28
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	3301      	adds	r3, #1
 800a670:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a678:	8a3b      	ldrh	r3, [r7, #16]
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	b21a      	sxth	r2, r3
 800a67e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a682:	4313      	orrs	r3, r2
 800a684:	b21b      	sxth	r3, r3
 800a686:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a688:	89fb      	ldrh	r3, [r7, #14]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6ae:	2b40      	cmp	r3, #64	; 0x40
 800a6b0:	d005      	beq.n	800a6be <USBD_StdDevReq+0x26>
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	d857      	bhi.n	800a766 <USBD_StdDevReq+0xce>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00f      	beq.n	800a6da <USBD_StdDevReq+0x42>
 800a6ba:	2b20      	cmp	r3, #32
 800a6bc:	d153      	bne.n	800a766 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	32ae      	adds	r2, #174	; 0xae
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d8:	e04a      	b.n	800a770 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	785b      	ldrb	r3, [r3, #1]
 800a6de:	2b09      	cmp	r3, #9
 800a6e0:	d83b      	bhi.n	800a75a <USBD_StdDevReq+0xc2>
 800a6e2:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <USBD_StdDevReq+0x50>)
 800a6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e8:	0800a73d 	.word	0x0800a73d
 800a6ec:	0800a751 	.word	0x0800a751
 800a6f0:	0800a75b 	.word	0x0800a75b
 800a6f4:	0800a747 	.word	0x0800a747
 800a6f8:	0800a75b 	.word	0x0800a75b
 800a6fc:	0800a71b 	.word	0x0800a71b
 800a700:	0800a711 	.word	0x0800a711
 800a704:	0800a75b 	.word	0x0800a75b
 800a708:	0800a733 	.word	0x0800a733
 800a70c:	0800a725 	.word	0x0800a725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa3c 	bl	800ab90 <USBD_GetDescriptor>
          break;
 800a718:	e024      	b.n	800a764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fba1 	bl	800ae64 <USBD_SetAddress>
          break;
 800a722:	e01f      	b.n	800a764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fbe0 	bl	800aeec <USBD_SetConfig>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
          break;
 800a730:	e018      	b.n	800a764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fc83 	bl	800b040 <USBD_GetConfig>
          break;
 800a73a:	e013      	b.n	800a764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fcb4 	bl	800b0ac <USBD_GetStatus>
          break;
 800a744:	e00e      	b.n	800a764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fce3 	bl	800b114 <USBD_SetFeature>
          break;
 800a74e:	e009      	b.n	800a764 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fd07 	bl	800b166 <USBD_ClrFeature>
          break;
 800a758:	e004      	b.n	800a764 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a75a:	6839      	ldr	r1, [r7, #0]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fd5e 	bl	800b21e <USBD_CtlError>
          break;
 800a762:	bf00      	nop
      }
      break;
 800a764:	e004      	b.n	800a770 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fd58 	bl	800b21e <USBD_CtlError>
      break;
 800a76e:	bf00      	nop
  }

  return ret;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop

0800a77c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d005      	beq.n	800a7a2 <USBD_StdItfReq+0x26>
 800a796:	2b40      	cmp	r3, #64	; 0x40
 800a798:	d852      	bhi.n	800a840 <USBD_StdItfReq+0xc4>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <USBD_StdItfReq+0x26>
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	d14e      	bne.n	800a840 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d840      	bhi.n	800a832 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	889b      	ldrh	r3, [r3, #4]
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d836      	bhi.n	800a828 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	889b      	ldrh	r3, [r3, #4]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff ff2f 	bl	800a626 <USBD_CoreFindIF>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	2bff      	cmp	r3, #255	; 0xff
 800a7d0:	d01d      	beq.n	800a80e <USBD_StdItfReq+0x92>
 800a7d2:	7bbb      	ldrb	r3, [r7, #14]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d11a      	bne.n	800a80e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a7d8:	7bba      	ldrb	r2, [r7, #14]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32ae      	adds	r2, #174	; 0xae
 800a7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00f      	beq.n	800a808 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a7e8:	7bba      	ldrb	r2, [r7, #14]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7f0:	7bba      	ldrb	r2, [r7, #14]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	32ae      	adds	r2, #174	; 0xae
 800a7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	4798      	blx	r3
 800a802:	4603      	mov	r3, r0
 800a804:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a806:	e004      	b.n	800a812 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a80c:	e001      	b.n	800a812 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a80e:	2303      	movs	r3, #3
 800a810:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	88db      	ldrh	r3, [r3, #6]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d110      	bne.n	800a83c <USBD_StdItfReq+0xc0>
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10d      	bne.n	800a83c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fdc7 	bl	800b3b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a826:	e009      	b.n	800a83c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fcf7 	bl	800b21e <USBD_CtlError>
          break;
 800a830:	e004      	b.n	800a83c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fcf2 	bl	800b21e <USBD_CtlError>
          break;
 800a83a:	e000      	b.n	800a83e <USBD_StdItfReq+0xc2>
          break;
 800a83c:	bf00      	nop
      }
      break;
 800a83e:	e004      	b.n	800a84a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fceb 	bl	800b21e <USBD_CtlError>
      break;
 800a848:	bf00      	nop
  }

  return ret;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	889b      	ldrh	r3, [r3, #4]
 800a866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a870:	2b40      	cmp	r3, #64	; 0x40
 800a872:	d007      	beq.n	800a884 <USBD_StdEPReq+0x30>
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	f200 817f 	bhi.w	800ab78 <USBD_StdEPReq+0x324>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d02a      	beq.n	800a8d4 <USBD_StdEPReq+0x80>
 800a87e:	2b20      	cmp	r3, #32
 800a880:	f040 817a 	bne.w	800ab78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a884:	7bbb      	ldrb	r3, [r7, #14]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fed9 	bl	800a640 <USBD_CoreFindEP>
 800a88e:	4603      	mov	r3, r0
 800a890:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a892:	7b7b      	ldrb	r3, [r7, #13]
 800a894:	2bff      	cmp	r3, #255	; 0xff
 800a896:	f000 8174 	beq.w	800ab82 <USBD_StdEPReq+0x32e>
 800a89a:	7b7b      	ldrb	r3, [r7, #13]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8170 	bne.w	800ab82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a8a2:	7b7a      	ldrb	r2, [r7, #13]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a8aa:	7b7a      	ldrb	r2, [r7, #13]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	32ae      	adds	r2, #174	; 0xae
 800a8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 8163 	beq.w	800ab82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a8bc:	7b7a      	ldrb	r2, [r7, #13]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	32ae      	adds	r2, #174	; 0xae
 800a8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a8d2:	e156      	b.n	800ab82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	785b      	ldrb	r3, [r3, #1]
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d008      	beq.n	800a8ee <USBD_StdEPReq+0x9a>
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	f300 8145 	bgt.w	800ab6c <USBD_StdEPReq+0x318>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 809b 	beq.w	800aa1e <USBD_StdEPReq+0x1ca>
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d03c      	beq.n	800a966 <USBD_StdEPReq+0x112>
 800a8ec:	e13e      	b.n	800ab6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d002      	beq.n	800a900 <USBD_StdEPReq+0xac>
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d016      	beq.n	800a92c <USBD_StdEPReq+0xd8>
 800a8fe:	e02c      	b.n	800a95a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00d      	beq.n	800a922 <USBD_StdEPReq+0xce>
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b80      	cmp	r3, #128	; 0x80
 800a90a:	d00a      	beq.n	800a922 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7f6 fcc0 	bl	8001296 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a916:	2180      	movs	r1, #128	; 0x80
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7f6 fcbc 	bl	8001296 <USBD_LL_StallEP>
 800a91e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a920:	e020      	b.n	800a964 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fc7a 	bl	800b21e <USBD_CtlError>
              break;
 800a92a:	e01b      	b.n	800a964 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	885b      	ldrh	r3, [r3, #2]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10e      	bne.n	800a952 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00b      	beq.n	800a952 <USBD_StdEPReq+0xfe>
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b80      	cmp	r3, #128	; 0x80
 800a93e:	d008      	beq.n	800a952 <USBD_StdEPReq+0xfe>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	88db      	ldrh	r3, [r3, #6]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d104      	bne.n	800a952 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7f6 fca2 	bl	8001296 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fd2e 	bl	800b3b4 <USBD_CtlSendStatus>

              break;
 800a958:	e004      	b.n	800a964 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fc5e 	bl	800b21e <USBD_CtlError>
              break;
 800a962:	bf00      	nop
          }
          break;
 800a964:	e107      	b.n	800ab76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d002      	beq.n	800a978 <USBD_StdEPReq+0x124>
 800a972:	2b03      	cmp	r3, #3
 800a974:	d016      	beq.n	800a9a4 <USBD_StdEPReq+0x150>
 800a976:	e04b      	b.n	800aa10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00d      	beq.n	800a99a <USBD_StdEPReq+0x146>
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	2b80      	cmp	r3, #128	; 0x80
 800a982:	d00a      	beq.n	800a99a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7f6 fc84 	bl	8001296 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a98e:	2180      	movs	r1, #128	; 0x80
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7f6 fc80 	bl	8001296 <USBD_LL_StallEP>
 800a996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a998:	e040      	b.n	800aa1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc3e 	bl	800b21e <USBD_CtlError>
              break;
 800a9a2:	e03b      	b.n	800aa1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	885b      	ldrh	r3, [r3, #2]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d136      	bne.n	800aa1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7f6 fc7e 	bl	80012bc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fcf7 	bl	800b3b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff fe38 	bl	800a640 <USBD_CoreFindEP>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9d4:	7b7b      	ldrb	r3, [r7, #13]
 800a9d6:	2bff      	cmp	r3, #255	; 0xff
 800a9d8:	d01f      	beq.n	800aa1a <USBD_StdEPReq+0x1c6>
 800a9da:	7b7b      	ldrb	r3, [r7, #13]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d11c      	bne.n	800aa1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a9e0:	7b7a      	ldrb	r2, [r7, #13]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a9e8:	7b7a      	ldrb	r2, [r7, #13]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	32ae      	adds	r2, #174	; 0xae
 800a9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d010      	beq.n	800aa1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9f8:	7b7a      	ldrb	r2, [r7, #13]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	32ae      	adds	r2, #174	; 0xae
 800a9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa0e:	e004      	b.n	800aa1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fc03 	bl	800b21e <USBD_CtlError>
              break;
 800aa18:	e000      	b.n	800aa1c <USBD_StdEPReq+0x1c8>
              break;
 800aa1a:	bf00      	nop
          }
          break;
 800aa1c:	e0ab      	b.n	800ab76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d002      	beq.n	800aa30 <USBD_StdEPReq+0x1dc>
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d032      	beq.n	800aa94 <USBD_StdEPReq+0x240>
 800aa2e:	e097      	b.n	800ab60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <USBD_StdEPReq+0x1f2>
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	2b80      	cmp	r3, #128	; 0x80
 800aa3a:	d004      	beq.n	800aa46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fbed 	bl	800b21e <USBD_CtlError>
                break;
 800aa44:	e091      	b.n	800ab6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	da0b      	bge.n	800aa66 <USBD_StdEPReq+0x212>
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	3310      	adds	r3, #16
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	3304      	adds	r3, #4
 800aa64:	e00b      	b.n	800aa7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fc37 	bl	800b300 <USBD_CtlSendData>
              break;
 800aa92:	e06a      	b.n	800ab6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	da11      	bge.n	800aac0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	f003 020f 	and.w	r2, r3, #15
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	3324      	adds	r3, #36	; 0x24
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d117      	bne.n	800aae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fbb0 	bl	800b21e <USBD_CtlError>
                  break;
 800aabe:	e054      	b.n	800ab6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	f003 020f 	and.w	r2, r3, #15
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	440b      	add	r3, r1
 800aad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d104      	bne.n	800aae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fb9d 	bl	800b21e <USBD_CtlError>
                  break;
 800aae4:	e041      	b.n	800ab6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da0b      	bge.n	800ab06 <USBD_StdEPReq+0x2b2>
 800aaee:	7bbb      	ldrb	r3, [r7, #14]
 800aaf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	3310      	adds	r3, #16
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	4413      	add	r3, r2
 800ab02:	3304      	adds	r3, #4
 800ab04:	e00b      	b.n	800ab1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <USBD_StdEPReq+0x2d8>
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b80      	cmp	r3, #128	; 0x80
 800ab2a:	d103      	bne.n	800ab34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	e00e      	b.n	800ab52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7f6 fbd2 	bl	80012e2 <USBD_LL_IsStallEP>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2201      	movs	r2, #1
 800ab48:	601a      	str	r2, [r3, #0]
 800ab4a:	e002      	b.n	800ab52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2202      	movs	r2, #2
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fbd1 	bl	800b300 <USBD_CtlSendData>
              break;
 800ab5e:	e004      	b.n	800ab6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fb5b 	bl	800b21e <USBD_CtlError>
              break;
 800ab68:	bf00      	nop
          }
          break;
 800ab6a:	e004      	b.n	800ab76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fb55 	bl	800b21e <USBD_CtlError>
          break;
 800ab74:	bf00      	nop
      }
      break;
 800ab76:	e005      	b.n	800ab84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fb4f 	bl	800b21e <USBD_CtlError>
      break;
 800ab80:	e000      	b.n	800ab84 <USBD_StdEPReq+0x330>
      break;
 800ab82:	bf00      	nop
  }

  return ret;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	885b      	ldrh	r3, [r3, #2]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	b29b      	uxth	r3, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	2b06      	cmp	r3, #6
 800abb2:	f200 8128 	bhi.w	800ae06 <USBD_GetDescriptor+0x276>
 800abb6:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <USBD_GetDescriptor+0x2c>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800abd9 	.word	0x0800abd9
 800abc0:	0800abf1 	.word	0x0800abf1
 800abc4:	0800ac31 	.word	0x0800ac31
 800abc8:	0800ae07 	.word	0x0800ae07
 800abcc:	0800ae07 	.word	0x0800ae07
 800abd0:	0800ada7 	.word	0x0800ada7
 800abd4:	0800add3 	.word	0x0800add3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	7c12      	ldrb	r2, [r2, #16]
 800abe4:	f107 0108 	add.w	r1, r7, #8
 800abe8:	4610      	mov	r0, r2
 800abea:	4798      	blx	r3
 800abec:	60f8      	str	r0, [r7, #12]
      break;
 800abee:	e112      	b.n	800ae16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7c1b      	ldrb	r3, [r3, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10d      	bne.n	800ac14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac00:	f107 0208 	add.w	r2, r7, #8
 800ac04:	4610      	mov	r0, r2
 800ac06:	4798      	blx	r3
 800ac08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	2202      	movs	r2, #2
 800ac10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac12:	e100      	b.n	800ae16 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	f107 0208 	add.w	r2, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	701a      	strb	r2, [r3, #0]
      break;
 800ac2e:	e0f2      	b.n	800ae16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	885b      	ldrh	r3, [r3, #2]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b05      	cmp	r3, #5
 800ac38:	f200 80ac 	bhi.w	800ad94 <USBD_GetDescriptor+0x204>
 800ac3c:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <USBD_GetDescriptor+0xb4>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800ac5d 	.word	0x0800ac5d
 800ac48:	0800ac91 	.word	0x0800ac91
 800ac4c:	0800acc5 	.word	0x0800acc5
 800ac50:	0800acf9 	.word	0x0800acf9
 800ac54:	0800ad2d 	.word	0x0800ad2d
 800ac58:	0800ad61 	.word	0x0800ad61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00b      	beq.n	800ac80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	7c12      	ldrb	r2, [r2, #16]
 800ac74:	f107 0108 	add.w	r1, r7, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4798      	blx	r3
 800ac7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac7e:	e091      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 facb 	bl	800b21e <USBD_CtlError>
            err++;
 800ac88:	7afb      	ldrb	r3, [r7, #11]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac8e:	e089      	b.n	800ada4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	f107 0108 	add.w	r1, r7, #8
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb2:	e077      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fab1 	bl	800b21e <USBD_CtlError>
            err++;
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	3301      	adds	r3, #1
 800acc0:	72fb      	strb	r3, [r7, #11]
          break;
 800acc2:	e06f      	b.n	800ada4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	7c12      	ldrb	r2, [r2, #16]
 800acdc:	f107 0108 	add.w	r1, r7, #8
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ace6:	e05d      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa97 	bl	800b21e <USBD_CtlError>
            err++;
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	3301      	adds	r3, #1
 800acf4:	72fb      	strb	r3, [r7, #11]
          break;
 800acf6:	e055      	b.n	800ada4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	7c12      	ldrb	r2, [r2, #16]
 800ad10:	f107 0108 	add.w	r1, r7, #8
 800ad14:	4610      	mov	r0, r2
 800ad16:	4798      	blx	r3
 800ad18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1a:	e043      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa7d 	bl	800b21e <USBD_CtlError>
            err++;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	3301      	adds	r3, #1
 800ad28:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2a:	e03b      	b.n	800ada4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00b      	beq.n	800ad50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	7c12      	ldrb	r2, [r2, #16]
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad4e:	e029      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa63 	bl	800b21e <USBD_CtlError>
            err++;
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad5e:	e021      	b.n	800ada4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad82:	e00f      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa49 	bl	800b21e <USBD_CtlError>
            err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
          break;
 800ad92:	e007      	b.n	800ada4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fa41 	bl	800b21e <USBD_CtlError>
          err++;
 800ad9c:	7afb      	ldrb	r3, [r7, #11]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ada2:	bf00      	nop
      }
      break;
 800ada4:	e037      	b.n	800ae16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	7c1b      	ldrb	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d109      	bne.n	800adc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb6:	f107 0208 	add.w	r2, r7, #8
 800adba:	4610      	mov	r0, r2
 800adbc:	4798      	blx	r3
 800adbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adc0:	e029      	b.n	800ae16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fa2a 	bl	800b21e <USBD_CtlError>
        err++;
 800adca:	7afb      	ldrb	r3, [r7, #11]
 800adcc:	3301      	adds	r3, #1
 800adce:	72fb      	strb	r3, [r7, #11]
      break;
 800add0:	e021      	b.n	800ae16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7c1b      	ldrb	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10d      	bne.n	800adf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade2:	f107 0208 	add.w	r2, r7, #8
 800ade6:	4610      	mov	r0, r2
 800ade8:	4798      	blx	r3
 800adea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3301      	adds	r3, #1
 800adf0:	2207      	movs	r2, #7
 800adf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adf4:	e00f      	b.n	800ae16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fa10 	bl	800b21e <USBD_CtlError>
        err++;
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	3301      	adds	r3, #1
 800ae02:	72fb      	strb	r3, [r7, #11]
      break;
 800ae04:	e007      	b.n	800ae16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fa08 	bl	800b21e <USBD_CtlError>
      err++;
 800ae0e:	7afb      	ldrb	r3, [r7, #11]
 800ae10:	3301      	adds	r3, #1
 800ae12:	72fb      	strb	r3, [r7, #11]
      break;
 800ae14:	bf00      	nop
  }

  if (err != 0U)
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d11e      	bne.n	800ae5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	88db      	ldrh	r3, [r3, #6]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d016      	beq.n	800ae52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae24:	893b      	ldrh	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00e      	beq.n	800ae48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	88da      	ldrh	r2, [r3, #6]
 800ae2e:	893b      	ldrh	r3, [r7, #8]
 800ae30:	4293      	cmp	r3, r2
 800ae32:	bf28      	it	cs
 800ae34:	4613      	movcs	r3, r2
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae3a:	893b      	ldrh	r3, [r7, #8]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	68f9      	ldr	r1, [r7, #12]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fa5d 	bl	800b300 <USBD_CtlSendData>
 800ae46:	e009      	b.n	800ae5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9e7 	bl	800b21e <USBD_CtlError>
 800ae50:	e004      	b.n	800ae5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 faae 	bl	800b3b4 <USBD_CtlSendStatus>
 800ae58:	e000      	b.n	800ae5c <USBD_GetDescriptor+0x2cc>
    return;
 800ae5a:	bf00      	nop
  }
}
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop

0800ae64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	889b      	ldrh	r3, [r3, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d131      	bne.n	800aeda <USBD_SetAddress+0x76>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	88db      	ldrh	r3, [r3, #6]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d12d      	bne.n	800aeda <USBD_SetAddress+0x76>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	885b      	ldrh	r3, [r3, #2]
 800ae82:	2b7f      	cmp	r3, #127	; 0x7f
 800ae84:	d829      	bhi.n	800aeda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	885b      	ldrh	r3, [r3, #2]
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d104      	bne.n	800aea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f9bc 	bl	800b21e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aea6:	e01d      	b.n	800aee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7bfa      	ldrb	r2, [r7, #15]
 800aeac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7f6 fa40 	bl	800133a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa7a 	bl	800b3b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d004      	beq.n	800aed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aece:	e009      	b.n	800aee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed8:	e004      	b.n	800aee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f99e 	bl	800b21e <USBD_CtlError>
  }
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	885b      	ldrh	r3, [r3, #2]
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	4b4e      	ldr	r3, [pc, #312]	; (800b03c <USBD_SetConfig+0x150>)
 800af02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af04:	4b4d      	ldr	r3, [pc, #308]	; (800b03c <USBD_SetConfig+0x150>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d905      	bls.n	800af18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f985 	bl	800b21e <USBD_CtlError>
    return USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	e08c      	b.n	800b032 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b02      	cmp	r3, #2
 800af22:	d002      	beq.n	800af2a <USBD_SetConfig+0x3e>
 800af24:	2b03      	cmp	r3, #3
 800af26:	d029      	beq.n	800af7c <USBD_SetConfig+0x90>
 800af28:	e075      	b.n	800b016 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af2a:	4b44      	ldr	r3, [pc, #272]	; (800b03c <USBD_SetConfig+0x150>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d020      	beq.n	800af74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af32:	4b42      	ldr	r3, [pc, #264]	; (800b03c <USBD_SetConfig+0x150>)
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af3c:	4b3f      	ldr	r3, [pc, #252]	; (800b03c <USBD_SetConfig+0x150>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff f83d 	bl	8009fc2 <USBD_SetClassConfig>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d008      	beq.n	800af64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f962 	bl	800b21e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2202      	movs	r2, #2
 800af5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af62:	e065      	b.n	800b030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fa25 	bl	800b3b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2203      	movs	r2, #3
 800af6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af72:	e05d      	b.n	800b030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa1d 	bl	800b3b4 <USBD_CtlSendStatus>
      break;
 800af7a:	e059      	b.n	800b030 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af7c:	4b2f      	ldr	r3, [pc, #188]	; (800b03c <USBD_SetConfig+0x150>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d112      	bne.n	800afaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af8c:	4b2b      	ldr	r3, [pc, #172]	; (800b03c <USBD_SetConfig+0x150>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	461a      	mov	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af96:	4b29      	ldr	r3, [pc, #164]	; (800b03c <USBD_SetConfig+0x150>)
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff f82c 	bl	8009ffa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa06 	bl	800b3b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afa8:	e042      	b.n	800b030 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afaa:	4b24      	ldr	r3, [pc, #144]	; (800b03c <USBD_SetConfig+0x150>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d02a      	beq.n	800b00e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff f81a 	bl	8009ffa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afc6:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <USBD_SetConfig+0x150>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afd0:	4b1a      	ldr	r3, [pc, #104]	; (800b03c <USBD_SetConfig+0x150>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7fe fff3 	bl	8009fc2 <USBD_SetClassConfig>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00f      	beq.n	800b006 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f918 	bl	800b21e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7fe ffff 	bl	8009ffa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b004:	e014      	b.n	800b030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f9d4 	bl	800b3b4 <USBD_CtlSendStatus>
      break;
 800b00c:	e010      	b.n	800b030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9d0 	bl	800b3b4 <USBD_CtlSendStatus>
      break;
 800b014:	e00c      	b.n	800b030 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f900 	bl	800b21e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b01e:	4b07      	ldr	r3, [pc, #28]	; (800b03c <USBD_SetConfig+0x150>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7fe ffe8 	bl	8009ffa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b02a:	2303      	movs	r3, #3
 800b02c:	73fb      	strb	r3, [r7, #15]
      break;
 800b02e:	bf00      	nop
  }

  return ret;
 800b030:	7bfb      	ldrb	r3, [r7, #15]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	200114c2 	.word	0x200114c2

0800b040 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	88db      	ldrh	r3, [r3, #6]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d004      	beq.n	800b05c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8e2 	bl	800b21e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b05a:	e023      	b.n	800b0a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b02      	cmp	r3, #2
 800b066:	dc02      	bgt.n	800b06e <USBD_GetConfig+0x2e>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dc03      	bgt.n	800b074 <USBD_GetConfig+0x34>
 800b06c:	e015      	b.n	800b09a <USBD_GetConfig+0x5a>
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d00b      	beq.n	800b08a <USBD_GetConfig+0x4a>
 800b072:	e012      	b.n	800b09a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3308      	adds	r3, #8
 800b07e:	2201      	movs	r2, #1
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f93c 	bl	800b300 <USBD_CtlSendData>
        break;
 800b088:	e00c      	b.n	800b0a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3304      	adds	r3, #4
 800b08e:	2201      	movs	r2, #1
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f934 	bl	800b300 <USBD_CtlSendData>
        break;
 800b098:	e004      	b.n	800b0a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f8be 	bl	800b21e <USBD_CtlError>
        break;
 800b0a2:	bf00      	nop
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d81e      	bhi.n	800b102 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	88db      	ldrh	r3, [r3, #6]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d004      	beq.n	800b0d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f8a5 	bl	800b21e <USBD_CtlError>
        break;
 800b0d4:	e01a      	b.n	800b10c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	f043 0202 	orr.w	r2, r3, #2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f900 	bl	800b300 <USBD_CtlSendData>
      break;
 800b100:	e004      	b.n	800b10c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f88a 	bl	800b21e <USBD_CtlError>
      break;
 800b10a:	bf00      	nop
  }
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	885b      	ldrh	r3, [r3, #2]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d107      	bne.n	800b136 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f940 	bl	800b3b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b134:	e013      	b.n	800b15e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	885b      	ldrh	r3, [r3, #2]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d10b      	bne.n	800b156 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	889b      	ldrh	r3, [r3, #4]
 800b142:	0a1b      	lsrs	r3, r3, #8
 800b144:	b29b      	uxth	r3, r3
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f930 	bl	800b3b4 <USBD_CtlSendStatus>
}
 800b154:	e003      	b.n	800b15e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f860 	bl	800b21e <USBD_CtlError>
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b176:	b2db      	uxtb	r3, r3
 800b178:	3b01      	subs	r3, #1
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d80b      	bhi.n	800b196 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	885b      	ldrh	r3, [r3, #2]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d10c      	bne.n	800b1a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f910 	bl	800b3b4 <USBD_CtlSendStatus>
      }
      break;
 800b194:	e004      	b.n	800b1a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f840 	bl	800b21e <USBD_CtlError>
      break;
 800b19e:	e000      	b.n	800b1a2 <USBD_ClrFeature+0x3c>
      break;
 800b1a0:	bf00      	nop
  }
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	781a      	ldrb	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	781a      	ldrb	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7ff fa40 	bl	800a65a <SWAPBYTE>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	461a      	mov	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fa33 	bl	800a65a <SWAPBYTE>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fa26 	bl	800a65a <SWAPBYTE>
 800b20e:	4603      	mov	r3, r0
 800b210:	461a      	mov	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	80da      	strh	r2, [r3, #6]
}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b228:	2180      	movs	r1, #128	; 0x80
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7f6 f833 	bl	8001296 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b230:	2100      	movs	r1, #0
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f6 f82f 	bl	8001296 <USBD_LL_StallEP>
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b24c:	2300      	movs	r3, #0
 800b24e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d036      	beq.n	800b2c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b25a:	6938      	ldr	r0, [r7, #16]
 800b25c:	f000 f836 	bl	800b2cc <USBD_GetLen>
 800b260:	4603      	mov	r3, r0
 800b262:	3301      	adds	r3, #1
 800b264:	b29b      	uxth	r3, r3
 800b266:	005b      	lsls	r3, r3, #1
 800b268:	b29a      	uxth	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	4413      	add	r3, r2
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	7812      	ldrb	r2, [r2, #0]
 800b278:	701a      	strb	r2, [r3, #0]
  idx++;
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	3301      	adds	r3, #1
 800b27e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4413      	add	r3, r2
 800b286:	2203      	movs	r2, #3
 800b288:	701a      	strb	r2, [r3, #0]
  idx++;
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	3301      	adds	r3, #1
 800b28e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b290:	e013      	b.n	800b2ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	4413      	add	r3, r2
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	7812      	ldrb	r2, [r2, #0]
 800b29c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	613b      	str	r3, [r7, #16]
    idx++;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1e7      	bne.n	800b292 <USBD_GetString+0x52>
 800b2c2:	e000      	b.n	800b2c6 <USBD_GetString+0x86>
    return;
 800b2c4:	bf00      	nop
  }
}
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2dc:	e005      	b.n	800b2ea <USBD_GetLen+0x1e>
  {
    len++;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1f5      	bne.n	800b2de <USBD_GetLen+0x12>
  }

  return len;
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2202      	movs	r2, #2
 800b310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	2100      	movs	r1, #0
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7f6 f81a 	bl	8001360 <USBD_LL_Transmit>

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	2100      	movs	r1, #0
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f7f6 f809 	bl	8001360 <USBD_LL_Transmit>

  return USBD_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2203      	movs	r2, #3
 800b368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	2100      	movs	r1, #0
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7f6 f801 	bl	800138a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	60f8      	str	r0, [r7, #12]
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f7f5 fff0 	bl	800138a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2204      	movs	r2, #4
 800b3c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7f5 ffc8 	bl	8001360 <USBD_LL_Transmit>

  return USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2205      	movs	r2, #5
 800b3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7f5 ffca 	bl	800138a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <arm_rfft_32_fast_init_f32>:
 800b400:	b178      	cbz	r0, 800b422 <arm_rfft_32_fast_init_f32+0x22>
 800b402:	b430      	push	{r4, r5}
 800b404:	4908      	ldr	r1, [pc, #32]	; (800b428 <arm_rfft_32_fast_init_f32+0x28>)
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <arm_rfft_32_fast_init_f32+0x2c>)
 800b408:	2310      	movs	r3, #16
 800b40a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b40e:	8003      	strh	r3, [r0, #0]
 800b410:	2520      	movs	r5, #32
 800b412:	2414      	movs	r4, #20
 800b414:	4b06      	ldr	r3, [pc, #24]	; (800b430 <arm_rfft_32_fast_init_f32+0x30>)
 800b416:	8205      	strh	r5, [r0, #16]
 800b418:	8184      	strh	r4, [r0, #12]
 800b41a:	6143      	str	r3, [r0, #20]
 800b41c:	bc30      	pop	{r4, r5}
 800b41e:	2000      	movs	r0, #0
 800b420:	4770      	bx	lr
 800b422:	f04f 30ff 	mov.w	r0, #4294967295
 800b426:	4770      	bx	lr
 800b428:	0800e2cc 	.word	0x0800e2cc
 800b42c:	08012c04 	.word	0x08012c04
 800b430:	0801b984 	.word	0x0801b984

0800b434 <arm_rfft_64_fast_init_f32>:
 800b434:	b178      	cbz	r0, 800b456 <arm_rfft_64_fast_init_f32+0x22>
 800b436:	b430      	push	{r4, r5}
 800b438:	4908      	ldr	r1, [pc, #32]	; (800b45c <arm_rfft_64_fast_init_f32+0x28>)
 800b43a:	4a09      	ldr	r2, [pc, #36]	; (800b460 <arm_rfft_64_fast_init_f32+0x2c>)
 800b43c:	2320      	movs	r3, #32
 800b43e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b442:	8003      	strh	r3, [r0, #0]
 800b444:	2540      	movs	r5, #64	; 0x40
 800b446:	2430      	movs	r4, #48	; 0x30
 800b448:	4b06      	ldr	r3, [pc, #24]	; (800b464 <arm_rfft_64_fast_init_f32+0x30>)
 800b44a:	8205      	strh	r5, [r0, #16]
 800b44c:	8184      	strh	r4, [r0, #12]
 800b44e:	6143      	str	r3, [r0, #20]
 800b450:	bc30      	pop	{r4, r5}
 800b452:	2000      	movs	r0, #0
 800b454:	4770      	bx	lr
 800b456:	f04f 30ff 	mov.w	r0, #4294967295
 800b45a:	4770      	bx	lr
 800b45c:	08010424 	.word	0x08010424
 800b460:	08017484 	.word	0x08017484
 800b464:	08020204 	.word	0x08020204

0800b468 <arm_rfft_256_fast_init_f32>:
 800b468:	b180      	cbz	r0, 800b48c <arm_rfft_256_fast_init_f32+0x24>
 800b46a:	b430      	push	{r4, r5}
 800b46c:	4909      	ldr	r1, [pc, #36]	; (800b494 <arm_rfft_256_fast_init_f32+0x2c>)
 800b46e:	4a0a      	ldr	r2, [pc, #40]	; (800b498 <arm_rfft_256_fast_init_f32+0x30>)
 800b470:	2380      	movs	r3, #128	; 0x80
 800b472:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b476:	8003      	strh	r3, [r0, #0]
 800b478:	f44f 7580 	mov.w	r5, #256	; 0x100
 800b47c:	24d0      	movs	r4, #208	; 0xd0
 800b47e:	4b07      	ldr	r3, [pc, #28]	; (800b49c <arm_rfft_256_fast_init_f32+0x34>)
 800b480:	8205      	strh	r5, [r0, #16]
 800b482:	8184      	strh	r4, [r0, #12]
 800b484:	6143      	str	r3, [r0, #20]
 800b486:	bc30      	pop	{r4, r5}
 800b488:	2000      	movs	r0, #0
 800b48a:	4770      	bx	lr
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	0800e12c 	.word	0x0800e12c
 800b498:	08012804 	.word	0x08012804
 800b49c:	0801b584 	.word	0x0801b584

0800b4a0 <arm_rfft_512_fast_init_f32>:
 800b4a0:	b190      	cbz	r0, 800b4c8 <arm_rfft_512_fast_init_f32+0x28>
 800b4a2:	b430      	push	{r4, r5}
 800b4a4:	490a      	ldr	r1, [pc, #40]	; (800b4d0 <arm_rfft_512_fast_init_f32+0x30>)
 800b4a6:	4a0b      	ldr	r2, [pc, #44]	; (800b4d4 <arm_rfft_512_fast_init_f32+0x34>)
 800b4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4ac:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b4b0:	8003      	strh	r3, [r0, #0]
 800b4b2:	f44f 7500 	mov.w	r5, #512	; 0x200
 800b4b6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b4ba:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <arm_rfft_512_fast_init_f32+0x38>)
 800b4bc:	8205      	strh	r5, [r0, #16]
 800b4be:	8184      	strh	r4, [r0, #12]
 800b4c0:	6143      	str	r3, [r0, #20]
 800b4c2:	bc30      	pop	{r4, r5}
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4770      	bx	lr
 800b4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	080100b4 	.word	0x080100b4
 800b4d4:	08016c84 	.word	0x08016c84
 800b4d8:	0801fa04 	.word	0x0801fa04

0800b4dc <arm_rfft_1024_fast_init_f32>:
 800b4dc:	b190      	cbz	r0, 800b504 <arm_rfft_1024_fast_init_f32+0x28>
 800b4de:	b430      	push	{r4, r5}
 800b4e0:	490a      	ldr	r1, [pc, #40]	; (800b50c <arm_rfft_1024_fast_init_f32+0x30>)
 800b4e2:	4a0b      	ldr	r2, [pc, #44]	; (800b510 <arm_rfft_1024_fast_init_f32+0x34>)
 800b4e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4e8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b4ec:	8003      	strh	r3, [r0, #0]
 800b4ee:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b4f2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <arm_rfft_1024_fast_init_f32+0x38>)
 800b4f8:	8205      	strh	r5, [r0, #16]
 800b4fa:	8184      	strh	r4, [r0, #12]
 800b4fc:	6143      	str	r3, [r0, #20]
 800b4fe:	bc30      	pop	{r4, r5}
 800b500:	2000      	movs	r0, #0
 800b502:	4770      	bx	lr
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	08010484 	.word	0x08010484
 800b510:	08017584 	.word	0x08017584
 800b514:	08018584 	.word	0x08018584

0800b518 <arm_rfft_2048_fast_init_f32>:
 800b518:	b190      	cbz	r0, 800b540 <arm_rfft_2048_fast_init_f32+0x28>
 800b51a:	b430      	push	{r4, r5}
 800b51c:	490a      	ldr	r1, [pc, #40]	; (800b548 <arm_rfft_2048_fast_init_f32+0x30>)
 800b51e:	4a0b      	ldr	r2, [pc, #44]	; (800b54c <arm_rfft_2048_fast_init_f32+0x34>)
 800b520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b524:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b528:	8003      	strh	r3, [r0, #0]
 800b52a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800b52e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b532:	4b07      	ldr	r3, [pc, #28]	; (800b550 <arm_rfft_2048_fast_init_f32+0x38>)
 800b534:	8205      	strh	r5, [r0, #16]
 800b536:	8184      	strh	r4, [r0, #12]
 800b538:	6143      	str	r3, [r0, #20]
 800b53a:	bc30      	pop	{r4, r5}
 800b53c:	2000      	movs	r0, #0
 800b53e:	4770      	bx	lr
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	0800d31c 	.word	0x0800d31c
 800b54c:	08010804 	.word	0x08010804
 800b550:	08019584 	.word	0x08019584

0800b554 <arm_rfft_4096_fast_init_f32>:
 800b554:	b190      	cbz	r0, 800b57c <arm_rfft_4096_fast_init_f32+0x28>
 800b556:	b430      	push	{r4, r5}
 800b558:	490a      	ldr	r1, [pc, #40]	; (800b584 <arm_rfft_4096_fast_init_f32+0x30>)
 800b55a:	4a0b      	ldr	r2, [pc, #44]	; (800b588 <arm_rfft_4096_fast_init_f32+0x34>)
 800b55c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b560:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b564:	8003      	strh	r3, [r0, #0]
 800b566:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800b56a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b56e:	4b07      	ldr	r3, [pc, #28]	; (800b58c <arm_rfft_4096_fast_init_f32+0x38>)
 800b570:	8205      	strh	r5, [r0, #16]
 800b572:	8184      	strh	r4, [r0, #12]
 800b574:	6143      	str	r3, [r0, #20]
 800b576:	bc30      	pop	{r4, r5}
 800b578:	2000      	movs	r0, #0
 800b57a:	4770      	bx	lr
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	0800e2f4 	.word	0x0800e2f4
 800b588:	08012c84 	.word	0x08012c84
 800b58c:	0801ba04 	.word	0x0801ba04

0800b590 <arm_rfft_fast_init_f32>:
 800b590:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b594:	d01f      	beq.n	800b5d6 <arm_rfft_fast_init_f32+0x46>
 800b596:	d90b      	bls.n	800b5b0 <arm_rfft_fast_init_f32+0x20>
 800b598:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b59c:	d019      	beq.n	800b5d2 <arm_rfft_fast_init_f32+0x42>
 800b59e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b5a2:	d012      	beq.n	800b5ca <arm_rfft_fast_init_f32+0x3a>
 800b5a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b5a8:	d00d      	beq.n	800b5c6 <arm_rfft_fast_init_f32+0x36>
 800b5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ae:	4770      	bx	lr
 800b5b0:	2940      	cmp	r1, #64	; 0x40
 800b5b2:	d00c      	beq.n	800b5ce <arm_rfft_fast_init_f32+0x3e>
 800b5b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b5b8:	d003      	beq.n	800b5c2 <arm_rfft_fast_init_f32+0x32>
 800b5ba:	2920      	cmp	r1, #32
 800b5bc:	d1f5      	bne.n	800b5aa <arm_rfft_fast_init_f32+0x1a>
 800b5be:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <arm_rfft_fast_init_f32+0x4c>)
 800b5c0:	4718      	bx	r3
 800b5c2:	4b07      	ldr	r3, [pc, #28]	; (800b5e0 <arm_rfft_fast_init_f32+0x50>)
 800b5c4:	4718      	bx	r3
 800b5c6:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <arm_rfft_fast_init_f32+0x54>)
 800b5c8:	4718      	bx	r3
 800b5ca:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <arm_rfft_fast_init_f32+0x58>)
 800b5cc:	4718      	bx	r3
 800b5ce:	4b07      	ldr	r3, [pc, #28]	; (800b5ec <arm_rfft_fast_init_f32+0x5c>)
 800b5d0:	e7f6      	b.n	800b5c0 <arm_rfft_fast_init_f32+0x30>
 800b5d2:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <arm_rfft_fast_init_f32+0x60>)
 800b5d4:	e7f4      	b.n	800b5c0 <arm_rfft_fast_init_f32+0x30>
 800b5d6:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <arm_rfft_fast_init_f32+0x64>)
 800b5d8:	e7f2      	b.n	800b5c0 <arm_rfft_fast_init_f32+0x30>
 800b5da:	bf00      	nop
 800b5dc:	0800b401 	.word	0x0800b401
 800b5e0:	0800b469 	.word	0x0800b469
 800b5e4:	0800b4dd 	.word	0x0800b4dd
 800b5e8:	0800b555 	.word	0x0800b555
 800b5ec:	0800b435 	.word	0x0800b435
 800b5f0:	0800b519 	.word	0x0800b519
 800b5f4:	0800b4a1 	.word	0x0800b4a1

0800b5f8 <stage_rfft_f32>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	460e      	mov	r6, r1
 800b5fe:	8803      	ldrh	r3, [r0, #0]
 800b600:	6809      	ldr	r1, [r1, #0]
 800b602:	6945      	ldr	r5, [r0, #20]
 800b604:	b087      	sub	sp, #28
 800b606:	3b01      	subs	r3, #1
 800b608:	4608      	mov	r0, r1
 800b60a:	4614      	mov	r4, r2
 800b60c:	9302      	str	r3, [sp, #8]
 800b60e:	f7f4 fdfd 	bl	800020c <__addsf3>
 800b612:	6871      	ldr	r1, [r6, #4]
 800b614:	4607      	mov	r7, r0
 800b616:	4608      	mov	r0, r1
 800b618:	f7f4 fdf8 	bl	800020c <__addsf3>
 800b61c:	4601      	mov	r1, r0
 800b61e:	4680      	mov	r8, r0
 800b620:	4638      	mov	r0, r7
 800b622:	f7f4 fdf3 	bl	800020c <__addsf3>
 800b626:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b62a:	f7f4 fef7 	bl	800041c <__aeabi_fmul>
 800b62e:	4641      	mov	r1, r8
 800b630:	6020      	str	r0, [r4, #0]
 800b632:	4638      	mov	r0, r7
 800b634:	f7f4 fde8 	bl	8000208 <__aeabi_fsub>
 800b638:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b63c:	f7f4 feee 	bl	800041c <__aeabi_fmul>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	6060      	str	r0, [r4, #4]
 800b644:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b648:	3b08      	subs	r3, #8
 800b64a:	3510      	adds	r5, #16
 800b64c:	3410      	adds	r4, #16
 800b64e:	3610      	adds	r6, #16
 800b650:	461f      	mov	r7, r3
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800b658:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b65c:	9101      	str	r1, [sp, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	4611      	mov	r1, r2
 800b662:	9305      	str	r3, [sp, #20]
 800b664:	9204      	str	r2, [sp, #16]
 800b666:	f7f4 fdcf 	bl	8000208 <__aeabi_fsub>
 800b66a:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800b66e:	9901      	ldr	r1, [sp, #4]
 800b670:	f8cd 900c 	str.w	r9, [sp, #12]
 800b674:	4683      	mov	fp, r0
 800b676:	4648      	mov	r0, r9
 800b678:	f7f4 fdc8 	bl	800020c <__addsf3>
 800b67c:	9a04      	ldr	r2, [sp, #16]
 800b67e:	9b05      	ldr	r3, [sp, #20]
 800b680:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800b684:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800b688:	4611      	mov	r1, r2
 800b68a:	4681      	mov	r9, r0
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f4 fdbd 	bl	800020c <__addsf3>
 800b692:	4659      	mov	r1, fp
 800b694:	9004      	str	r0, [sp, #16]
 800b696:	4640      	mov	r0, r8
 800b698:	f7f4 fec0 	bl	800041c <__aeabi_fmul>
 800b69c:	9b04      	ldr	r3, [sp, #16]
 800b69e:	4601      	mov	r1, r0
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f4 fdb3 	bl	800020c <__addsf3>
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	9004      	str	r0, [sp, #16]
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	f7f4 feb6 	bl	800041c <__aeabi_fmul>
 800b6b0:	9b04      	ldr	r3, [sp, #16]
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7f4 fda9 	bl	800020c <__addsf3>
 800b6ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b6be:	f7f4 fead 	bl	800041c <__aeabi_fmul>
 800b6c2:	9903      	ldr	r1, [sp, #12]
 800b6c4:	f844 0c08 	str.w	r0, [r4, #-8]
 800b6c8:	9801      	ldr	r0, [sp, #4]
 800b6ca:	f7f4 fd9d 	bl	8000208 <__aeabi_fsub>
 800b6ce:	4659      	mov	r1, fp
 800b6d0:	9001      	str	r0, [sp, #4]
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	f7f4 fea2 	bl	800041c <__aeabi_fmul>
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	4601      	mov	r1, r0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7f4 fd95 	bl	800020c <__addsf3>
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	f7f4 fe98 	bl	800041c <__aeabi_fmul>
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	f7f4 fd8a 	bl	8000208 <__aeabi_fsub>
 800b6f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b6f8:	f7f4 fe90 	bl	800041c <__aeabi_fmul>
 800b6fc:	9b02      	ldr	r3, [sp, #8]
 800b6fe:	f844 0c04 	str.w	r0, [r4, #-4]
 800b702:	3b01      	subs	r3, #1
 800b704:	f1a7 0708 	sub.w	r7, r7, #8
 800b708:	f106 0608 	add.w	r6, r6, #8
 800b70c:	f105 0508 	add.w	r5, r5, #8
 800b710:	f104 0408 	add.w	r4, r4, #8
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	d19c      	bne.n	800b652 <stage_rfft_f32+0x5a>
 800b718:	b007      	add	sp, #28
 800b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71e:	bf00      	nop

0800b720 <merge_rfft_f32>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	680c      	ldr	r4, [r1, #0]
 800b726:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800b72a:	8803      	ldrh	r3, [r0, #0]
 800b72c:	6945      	ldr	r5, [r0, #20]
 800b72e:	b087      	sub	sp, #28
 800b730:	3b01      	subs	r3, #1
 800b732:	460e      	mov	r6, r1
 800b734:	4620      	mov	r0, r4
 800b736:	4641      	mov	r1, r8
 800b738:	4617      	mov	r7, r2
 800b73a:	9302      	str	r3, [sp, #8]
 800b73c:	f7f4 fd66 	bl	800020c <__addsf3>
 800b740:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b744:	f7f4 fe6a 	bl	800041c <__aeabi_fmul>
 800b748:	4641      	mov	r1, r8
 800b74a:	6038      	str	r0, [r7, #0]
 800b74c:	4620      	mov	r0, r4
 800b74e:	f7f4 fd5b 	bl	8000208 <__aeabi_fsub>
 800b752:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b756:	f7f4 fe61 	bl	800041c <__aeabi_fmul>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d068      	beq.n	800b834 <merge_rfft_f32+0x114>
 800b762:	00dc      	lsls	r4, r3, #3
 800b764:	3c08      	subs	r4, #8
 800b766:	4434      	add	r4, r6
 800b768:	3510      	adds	r5, #16
 800b76a:	3710      	adds	r7, #16
 800b76c:	3610      	adds	r6, #16
 800b76e:	68a3      	ldr	r3, [r4, #8]
 800b770:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800b774:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b778:	9101      	str	r1, [sp, #4]
 800b77a:	4610      	mov	r0, r2
 800b77c:	4619      	mov	r1, r3
 800b77e:	9305      	str	r3, [sp, #20]
 800b780:	9204      	str	r2, [sp, #16]
 800b782:	f7f4 fd41 	bl	8000208 <__aeabi_fsub>
 800b786:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800b78a:	9901      	ldr	r1, [sp, #4]
 800b78c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b790:	4683      	mov	fp, r0
 800b792:	4648      	mov	r0, r9
 800b794:	f7f4 fd3a 	bl	800020c <__addsf3>
 800b798:	9a04      	ldr	r2, [sp, #16]
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800b7a0:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4681      	mov	r9, r0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f4 fd2f 	bl	800020c <__addsf3>
 800b7ae:	4659      	mov	r1, fp
 800b7b0:	9004      	str	r0, [sp, #16]
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	f7f4 fe32 	bl	800041c <__aeabi_fmul>
 800b7b8:	9b04      	ldr	r3, [sp, #16]
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7f4 fd23 	bl	8000208 <__aeabi_fsub>
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	9004      	str	r0, [sp, #16]
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f7f4 fe28 	bl	800041c <__aeabi_fmul>
 800b7cc:	9b04      	ldr	r3, [sp, #16]
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f4 fd19 	bl	8000208 <__aeabi_fsub>
 800b7d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b7da:	f7f4 fe1f 	bl	800041c <__aeabi_fmul>
 800b7de:	9903      	ldr	r1, [sp, #12]
 800b7e0:	f847 0c08 	str.w	r0, [r7, #-8]
 800b7e4:	9801      	ldr	r0, [sp, #4]
 800b7e6:	f7f4 fd0f 	bl	8000208 <__aeabi_fsub>
 800b7ea:	4659      	mov	r1, fp
 800b7ec:	9001      	str	r0, [sp, #4]
 800b7ee:	4650      	mov	r0, sl
 800b7f0:	f7f4 fe14 	bl	800041c <__aeabi_fmul>
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7f4 fd07 	bl	800020c <__addsf3>
 800b7fe:	4649      	mov	r1, r9
 800b800:	4682      	mov	sl, r0
 800b802:	4640      	mov	r0, r8
 800b804:	f7f4 fe0a 	bl	800041c <__aeabi_fmul>
 800b808:	4601      	mov	r1, r0
 800b80a:	4650      	mov	r0, sl
 800b80c:	f7f4 fcfc 	bl	8000208 <__aeabi_fsub>
 800b810:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b814:	f7f4 fe02 	bl	800041c <__aeabi_fmul>
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	f847 0c04 	str.w	r0, [r7, #-4]
 800b81e:	3b01      	subs	r3, #1
 800b820:	f1a4 0408 	sub.w	r4, r4, #8
 800b824:	f106 0608 	add.w	r6, r6, #8
 800b828:	f105 0508 	add.w	r5, r5, #8
 800b82c:	f107 0708 	add.w	r7, r7, #8
 800b830:	9302      	str	r3, [sp, #8]
 800b832:	d19c      	bne.n	800b76e <merge_rfft_f32+0x4e>
 800b834:	b007      	add	sp, #28
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	bf00      	nop

0800b83c <arm_rfft_fast_f32>:
 800b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	8a05      	ldrh	r5, [r0, #16]
 800b842:	086d      	lsrs	r5, r5, #1
 800b844:	8005      	strh	r5, [r0, #0]
 800b846:	4604      	mov	r4, r0
 800b848:	4616      	mov	r6, r2
 800b84a:	461d      	mov	r5, r3
 800b84c:	b14b      	cbz	r3, 800b862 <arm_rfft_fast_f32+0x26>
 800b84e:	f7ff ff67 	bl	800b720 <merge_rfft_f32>
 800b852:	462a      	mov	r2, r5
 800b854:	4631      	mov	r1, r6
 800b856:	4620      	mov	r0, r4
 800b858:	2301      	movs	r3, #1
 800b85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	f000 bcfd 	b.w	800c25c <arm_cfft_f32>
 800b862:	460f      	mov	r7, r1
 800b864:	461a      	mov	r2, r3
 800b866:	2301      	movs	r3, #1
 800b868:	f000 fcf8 	bl	800c25c <arm_cfft_f32>
 800b86c:	4632      	mov	r2, r6
 800b86e:	4639      	mov	r1, r7
 800b870:	4620      	mov	r0, r4
 800b872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b876:	f7ff bebf 	b.w	800b5f8 <stage_rfft_f32>
 800b87a:	bf00      	nop

0800b87c <arm_cfft_radix8by2_f32>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	b093      	sub	sp, #76	; 0x4c
 800b882:	8802      	ldrh	r2, [r0, #0]
 800b884:	900e      	str	r0, [sp, #56]	; 0x38
 800b886:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b88a:	460d      	mov	r5, r1
 800b88c:	9111      	str	r1, [sp, #68]	; 0x44
 800b88e:	6843      	ldr	r3, [r0, #4]
 800b890:	940f      	str	r4, [sp, #60]	; 0x3c
 800b892:	0850      	lsrs	r0, r2, #1
 800b894:	08d1      	lsrs	r1, r2, #3
 800b896:	9010      	str	r0, [sp, #64]	; 0x40
 800b898:	f000 8134 	beq.w	800bb04 <arm_cfft_radix8by2_f32+0x288>
 800b89c:	0080      	lsls	r0, r0, #2
 800b89e:	3010      	adds	r0, #16
 800b8a0:	3310      	adds	r3, #16
 800b8a2:	f105 0610 	add.w	r6, r5, #16
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	1822      	adds	r2, r4, r0
 800b8aa:	eb06 1301 	add.w	r3, r6, r1, lsl #4
 800b8ae:	182f      	adds	r7, r5, r0
 800b8b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b8b2:	f104 0910 	add.w	r9, r4, #16
 800b8b6:	4693      	mov	fp, r2
 800b8b8:	f859 2c10 	ldr.w	r2, [r9, #-16]
 800b8bc:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800b8c0:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 800b8c4:	f859 0c08 	ldr.w	r0, [r9, #-8]
 800b8c8:	f857 cc0c 	ldr.w	ip, [r7, #-12]
 800b8cc:	f857 8c04 	ldr.w	r8, [r7, #-4]
 800b8d0:	9101      	str	r1, [sp, #4]
 800b8d2:	9002      	str	r0, [sp, #8]
 800b8d4:	f85b 1c0c 	ldr.w	r1, [fp, #-12]
 800b8d8:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800b8dc:	f857 ec08 	ldr.w	lr, [r7, #-8]
 800b8e0:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800b8e4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b8e8:	f8cd 8010 	str.w	r8, [sp, #16]
 800b8ec:	f85b cc04 	ldr.w	ip, [fp, #-4]
 800b8f0:	f85b 8c10 	ldr.w	r8, [fp, #-16]
 800b8f4:	9105      	str	r1, [sp, #20]
 800b8f6:	9006      	str	r0, [sp, #24]
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f8cd e00c 	str.w	lr, [sp, #12]
 800b900:	f8cd c01c 	str.w	ip, [sp, #28]
 800b904:	930c      	str	r3, [sp, #48]	; 0x30
 800b906:	9208      	str	r2, [sp, #32]
 800b908:	9409      	str	r4, [sp, #36]	; 0x24
 800b90a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b90e:	f7f4 fc7d 	bl	800020c <__addsf3>
 800b912:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 800b916:	f859 5c04 	ldr.w	r5, [r9, #-4]
 800b91a:	9901      	ldr	r1, [sp, #4]
 800b91c:	f846 0c10 	str.w	r0, [r6, #-16]
 800b920:	4650      	mov	r0, sl
 800b922:	f7f4 fc73 	bl	800020c <__addsf3>
 800b926:	f856 8c08 	ldr.w	r8, [r6, #-8]
 800b92a:	f846 0c0c 	str.w	r0, [r6, #-12]
 800b92e:	9902      	ldr	r1, [sp, #8]
 800b930:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800b934:	4640      	mov	r0, r8
 800b936:	f7f4 fc69 	bl	800020c <__addsf3>
 800b93a:	4629      	mov	r1, r5
 800b93c:	f846 0c08 	str.w	r0, [r6, #-8]
 800b940:	4620      	mov	r0, r4
 800b942:	f7f4 fc63 	bl	800020c <__addsf3>
 800b946:	9a08      	ldr	r2, [sp, #32]
 800b948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b94a:	f846 0c04 	str.w	r0, [r6, #-4]
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f7f4 fc59 	bl	8000208 <__aeabi_fsub>
 800b956:	9901      	ldr	r1, [sp, #4]
 800b958:	9008      	str	r0, [sp, #32]
 800b95a:	4650      	mov	r0, sl
 800b95c:	f7f4 fc54 	bl	8000208 <__aeabi_fsub>
 800b960:	9902      	ldr	r1, [sp, #8]
 800b962:	4682      	mov	sl, r0
 800b964:	4640      	mov	r0, r8
 800b966:	f7f4 fc4f 	bl	8000208 <__aeabi_fsub>
 800b96a:	4629      	mov	r1, r5
 800b96c:	9001      	str	r0, [sp, #4]
 800b96e:	4620      	mov	r0, r4
 800b970:	f7f4 fc4a 	bl	8000208 <__aeabi_fsub>
 800b974:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b978:	900c      	str	r0, [sp, #48]	; 0x30
 800b97a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b97c:	4641      	mov	r1, r8
 800b97e:	4620      	mov	r0, r4
 800b980:	f7f4 fc44 	bl	800020c <__addsf3>
 800b984:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b986:	9905      	ldr	r1, [sp, #20]
 800b988:	f847 0c10 	str.w	r0, [r7, #-16]
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7f4 fc3d 	bl	800020c <__addsf3>
 800b992:	9906      	ldr	r1, [sp, #24]
 800b994:	f847 0c0c 	str.w	r0, [r7, #-12]
 800b998:	9803      	ldr	r0, [sp, #12]
 800b99a:	f7f4 fc37 	bl	800020c <__addsf3>
 800b99e:	9907      	ldr	r1, [sp, #28]
 800b9a0:	f847 0c08 	str.w	r0, [r7, #-8]
 800b9a4:	9804      	ldr	r0, [sp, #16]
 800b9a6:	f7f4 fc31 	bl	800020c <__addsf3>
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f847 0c04 	str.w	r0, [r7, #-4]
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	f7f4 fc29 	bl	8000208 <__aeabi_fsub>
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	9805      	ldr	r0, [sp, #20]
 800b9bc:	f7f4 fc24 	bl	8000208 <__aeabi_fsub>
 800b9c0:	9903      	ldr	r1, [sp, #12]
 800b9c2:	9002      	str	r0, [sp, #8]
 800b9c4:	9806      	ldr	r0, [sp, #24]
 800b9c6:	f7f4 fc1f 	bl	8000208 <__aeabi_fsub>
 800b9ca:	9904      	ldr	r1, [sp, #16]
 800b9cc:	9003      	str	r0, [sp, #12]
 800b9ce:	9807      	ldr	r0, [sp, #28]
 800b9d0:	f7f4 fc1a 	bl	8000208 <__aeabi_fsub>
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	9004      	str	r0, [sp, #16]
 800b9d8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800b9dc:	9808      	ldr	r0, [sp, #32]
 800b9de:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	f7f4 fd1a 	bl	800041c <__aeabi_fmul>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	9005      	str	r0, [sp, #20]
 800b9ec:	4650      	mov	r0, sl
 800b9ee:	f7f4 fd15 	bl	800041c <__aeabi_fmul>
 800b9f2:	9b05      	ldr	r3, [sp, #20]
 800b9f4:	4601      	mov	r1, r0
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f4 fc08 	bl	800020c <__addsf3>
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	f849 0c10 	str.w	r0, [r9, #-16]
 800ba02:	4650      	mov	r0, sl
 800ba04:	f7f4 fd0a 	bl	800041c <__aeabi_fmul>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4682      	mov	sl, r0
 800ba0c:	9808      	ldr	r0, [sp, #32]
 800ba0e:	f7f4 fd05 	bl	800041c <__aeabi_fmul>
 800ba12:	4601      	mov	r1, r0
 800ba14:	4650      	mov	r0, sl
 800ba16:	f7f4 fbf7 	bl	8000208 <__aeabi_fsub>
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f849 0c0c 	str.w	r0, [r9, #-12]
 800ba20:	4640      	mov	r0, r8
 800ba22:	f7f4 fcfb 	bl	800041c <__aeabi_fmul>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4682      	mov	sl, r0
 800ba2a:	9802      	ldr	r0, [sp, #8]
 800ba2c:	f7f4 fcf6 	bl	800041c <__aeabi_fmul>
 800ba30:	4601      	mov	r1, r0
 800ba32:	4650      	mov	r0, sl
 800ba34:	f7f4 fbe8 	bl	8000208 <__aeabi_fsub>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f84b 0c10 	str.w	r0, [fp, #-16]
 800ba3e:	9802      	ldr	r0, [sp, #8]
 800ba40:	f7f4 fcec 	bl	800041c <__aeabi_fmul>
 800ba44:	4621      	mov	r1, r4
 800ba46:	4605      	mov	r5, r0
 800ba48:	4640      	mov	r0, r8
 800ba4a:	f7f4 fce7 	bl	800041c <__aeabi_fmul>
 800ba4e:	4601      	mov	r1, r0
 800ba50:	4628      	mov	r0, r5
 800ba52:	f7f4 fbdb 	bl	800020c <__addsf3>
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	f84b 0c0c 	str.w	r0, [fp, #-12]
 800ba5c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800ba60:	9801      	ldr	r0, [sp, #4]
 800ba62:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800ba66:	4621      	mov	r1, r4
 800ba68:	f7f4 fcd8 	bl	800041c <__aeabi_fmul>
 800ba6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba70:	4680      	mov	r8, r0
 800ba72:	4629      	mov	r1, r5
 800ba74:	4650      	mov	r0, sl
 800ba76:	f7f4 fcd1 	bl	800041c <__aeabi_fmul>
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	f7f4 fbc5 	bl	800020c <__addsf3>
 800ba82:	4621      	mov	r1, r4
 800ba84:	f849 0c08 	str.w	r0, [r9, #-8]
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f7f4 fcc7 	bl	800041c <__aeabi_fmul>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4680      	mov	r8, r0
 800ba92:	9801      	ldr	r0, [sp, #4]
 800ba94:	f7f4 fcc2 	bl	800041c <__aeabi_fmul>
 800ba98:	4601      	mov	r1, r0
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	f7f4 fbb4 	bl	8000208 <__aeabi_fsub>
 800baa0:	4629      	mov	r1, r5
 800baa2:	f849 0c04 	str.w	r0, [r9, #-4]
 800baa6:	9803      	ldr	r0, [sp, #12]
 800baa8:	f7f4 fcb8 	bl	800041c <__aeabi_fmul>
 800baac:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bab0:	4680      	mov	r8, r0
 800bab2:	4621      	mov	r1, r4
 800bab4:	4650      	mov	r0, sl
 800bab6:	f7f4 fcb1 	bl	800041c <__aeabi_fmul>
 800baba:	4601      	mov	r1, r0
 800babc:	4640      	mov	r0, r8
 800babe:	f7f4 fba3 	bl	8000208 <__aeabi_fsub>
 800bac2:	4629      	mov	r1, r5
 800bac4:	f84b 0c08 	str.w	r0, [fp, #-8]
 800bac8:	4650      	mov	r0, sl
 800baca:	f7f4 fca7 	bl	800041c <__aeabi_fmul>
 800bace:	4621      	mov	r1, r4
 800bad0:	4605      	mov	r5, r0
 800bad2:	9803      	ldr	r0, [sp, #12]
 800bad4:	f7f4 fca2 	bl	800041c <__aeabi_fmul>
 800bad8:	4601      	mov	r1, r0
 800bada:	4628      	mov	r0, r5
 800badc:	f7f4 fb96 	bl	800020c <__addsf3>
 800bae0:	9b00      	ldr	r3, [sp, #0]
 800bae2:	f84b 0c04 	str.w	r0, [fp, #-4]
 800bae6:	3310      	adds	r3, #16
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baec:	3610      	adds	r6, #16
 800baee:	429e      	cmp	r6, r3
 800baf0:	f107 0710 	add.w	r7, r7, #16
 800baf4:	f109 0910 	add.w	r9, r9, #16
 800baf8:	f10b 0b10 	add.w	fp, fp, #16
 800bafc:	f47f aedc 	bne.w	800b8b8 <arm_cfft_radix8by2_f32+0x3c>
 800bb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 800bb08:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	2302      	movs	r3, #2
 800bb10:	f000 fd02 	bl	800c518 <arm_radix8_butterfly_f32>
 800bb14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bb18:	685a      	ldr	r2, [r3, #4]
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	b013      	add	sp, #76	; 0x4c
 800bb20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	f000 bcf8 	b.w	800c518 <arm_radix8_butterfly_f32>

0800bb28 <arm_cfft_radix8by4_f32>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	8804      	ldrh	r4, [r0, #0]
 800bb2e:	680e      	ldr	r6, [r1, #0]
 800bb30:	6845      	ldr	r5, [r0, #4]
 800bb32:	b0a7      	sub	sp, #156	; 0x9c
 800bb34:	0864      	lsrs	r4, r4, #1
 800bb36:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800bb3a:	9119      	str	r1, [sp, #100]	; 0x64
 800bb3c:	4451      	add	r1, sl
 800bb3e:	eb01 0c0a 	add.w	ip, r1, sl
 800bb42:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800bb46:	9024      	str	r0, [sp, #144]	; 0x90
 800bb48:	911a      	str	r1, [sp, #104]	; 0x68
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800bb52:	f7f4 fb5b 	bl	800020c <__addsf3>
 800bb56:	4639      	mov	r1, r7
 800bb58:	4683      	mov	fp, r0
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7f4 fb54 	bl	8000208 <__aeabi_fsub>
 800bb60:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800bb62:	9001      	str	r0, [sp, #4]
 800bb64:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bb66:	6877      	ldr	r7, [r6, #4]
 800bb68:	6846      	ldr	r6, [r0, #4]
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7f4 fb4d 	bl	800020c <__addsf3>
 800bb72:	4639      	mov	r1, r7
 800bb74:	9002      	str	r0, [sp, #8]
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7f4 fb46 	bl	8000208 <__aeabi_fsub>
 800bb7c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800bb7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb80:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800bb84:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 800bb88:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb8a:	9003      	str	r0, [sp, #12]
 800bb8c:	4659      	mov	r1, fp
 800bb8e:	4638      	mov	r0, r7
 800bb90:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800bb94:	f7f4 fb3a 	bl	800020c <__addsf3>
 800bb98:	4631      	mov	r1, r6
 800bb9a:	f7f4 fb37 	bl	800020c <__addsf3>
 800bb9e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800bba0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bba2:	468c      	mov	ip, r1
 800bba4:	4453      	add	r3, sl
 800bba6:	931f      	str	r3, [sp, #124]	; 0x7c
 800bba8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800bbac:	f84c 0b08 	str.w	r0, [ip], #8
 800bbb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bbb2:	9802      	ldr	r0, [sp, #8]
 800bbb4:	6859      	ldr	r1, [r3, #4]
 800bbb6:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800bbba:	f7f4 fb27 	bl	800020c <__addsf3>
 800bbbe:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800bbc0:	6849      	ldr	r1, [r1, #4]
 800bbc2:	f7f4 fb23 	bl	800020c <__addsf3>
 800bbc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bbc8:	9901      	ldr	r1, [sp, #4]
 800bbca:	6058      	str	r0, [r3, #4]
 800bbcc:	4648      	mov	r0, r9
 800bbce:	f7f4 fb1d 	bl	800020c <__addsf3>
 800bbd2:	4641      	mov	r1, r8
 800bbd4:	f7f4 fb18 	bl	8000208 <__aeabi_fsub>
 800bbd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800bbe0:	9803      	ldr	r0, [sp, #12]
 800bbe2:	f7f4 fb11 	bl	8000208 <__aeabi_fsub>
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	f7f4 fb10 	bl	800020c <__addsf3>
 800bbec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bbee:	4639      	mov	r1, r7
 800bbf0:	6050      	str	r0, [r2, #4]
 800bbf2:	4658      	mov	r0, fp
 800bbf4:	f7f4 fb08 	bl	8000208 <__aeabi_fsub>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	f7f4 fb05 	bl	8000208 <__aeabi_fsub>
 800bbfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc00:	4649      	mov	r1, r9
 800bc02:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc06:	9802      	ldr	r0, [sp, #8]
 800bc08:	f7f4 fafe 	bl	8000208 <__aeabi_fsub>
 800bc0c:	4641      	mov	r1, r8
 800bc0e:	f7f4 fafb 	bl	8000208 <__aeabi_fsub>
 800bc12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc14:	4649      	mov	r1, r9
 800bc16:	6050      	str	r0, [r2, #4]
 800bc18:	9801      	ldr	r0, [sp, #4]
 800bc1a:	f7f4 faf5 	bl	8000208 <__aeabi_fsub>
 800bc1e:	4641      	mov	r1, r8
 800bc20:	f7f4 faf4 	bl	800020c <__addsf3>
 800bc24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc26:	9903      	ldr	r1, [sp, #12]
 800bc28:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f7f4 faed 	bl	800020c <__addsf3>
 800bc32:	4631      	mov	r1, r6
 800bc34:	f7f4 fae8 	bl	8000208 <__aeabi_fsub>
 800bc38:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800bc3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bc3c:	6070      	str	r0, [r6, #4]
 800bc3e:	0864      	lsrs	r4, r4, #1
 800bc40:	9423      	str	r4, [sp, #140]	; 0x8c
 800bc42:	1ea2      	subs	r2, r4, #2
 800bc44:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bc46:	4634      	mov	r4, r6
 800bc48:	3408      	adds	r4, #8
 800bc4a:	941b      	str	r4, [sp, #108]	; 0x6c
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	3408      	adds	r4, #8
 800bc50:	941d      	str	r4, [sp, #116]	; 0x74
 800bc52:	f101 0408 	add.w	r4, r1, #8
 800bc56:	941e      	str	r4, [sp, #120]	; 0x78
 800bc58:	f105 0408 	add.w	r4, r5, #8
 800bc5c:	9421      	str	r4, [sp, #132]	; 0x84
 800bc5e:	f105 0710 	add.w	r7, r5, #16
 800bc62:	f105 0418 	add.w	r4, r5, #24
 800bc66:	0852      	lsrs	r2, r2, #1
 800bc68:	9722      	str	r7, [sp, #136]	; 0x88
 800bc6a:	9420      	str	r4, [sp, #128]	; 0x80
 800bc6c:	9225      	str	r2, [sp, #148]	; 0x94
 800bc6e:	f000 820b 	beq.w	800c088 <arm_cfft_radix8by4_f32+0x560>
 800bc72:	f1aa 030c 	sub.w	r3, sl, #12
 800bc76:	4634      	mov	r4, r6
 800bc78:	441e      	add	r6, r3
 800bc7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc7c:	9606      	str	r6, [sp, #24]
 800bc7e:	3310      	adds	r3, #16
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	f1a1 030c 	sub.w	r3, r1, #12
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	f105 0320 	add.w	r3, r5, #32
 800bc8c:	9308      	str	r3, [sp, #32]
 800bc8e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bc92:	9307      	str	r3, [sp, #28]
 800bc94:	f100 0310 	add.w	r3, r0, #16
 800bc98:	f101 0810 	add.w	r8, r1, #16
 800bc9c:	9303      	str	r3, [sp, #12]
 800bc9e:	f1a4 030c 	sub.w	r3, r4, #12
 800bca2:	9709      	str	r7, [sp, #36]	; 0x24
 800bca4:	f1a0 0a0c 	sub.w	sl, r0, #12
 800bca8:	9302      	str	r3, [sp, #8]
 800bcaa:	f104 0910 	add.w	r9, r4, #16
 800bcae:	f8cd 8004 	str.w	r8, [sp, #4]
 800bcb2:	9e05      	ldr	r6, [sp, #20]
 800bcb4:	9f03      	ldr	r7, [sp, #12]
 800bcb6:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800bcba:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800bcbe:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f7f4 faa2 	bl	800020c <__addsf3>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4680      	mov	r8, r0
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7f4 fa9b 	bl	8000208 <__aeabi_fsub>
 800bcd2:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800bcd6:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800bcda:	900a      	str	r0, [sp, #40]	; 0x28
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4620      	mov	r0, r4
 800bce0:	9605      	str	r6, [sp, #20]
 800bce2:	9703      	str	r7, [sp, #12]
 800bce4:	f7f4 fa92 	bl	800020c <__addsf3>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4607      	mov	r7, r0
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7f4 fa8b 	bl	8000208 <__aeabi_fsub>
 800bcf2:	9c01      	ldr	r4, [sp, #4]
 800bcf4:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800bcf8:	f854 bc04 	ldr.w	fp, [r4, #-4]
 800bcfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bcfe:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd00:	4658      	mov	r0, fp
 800bd02:	f7f4 fa83 	bl	800020c <__addsf3>
 800bd06:	4631      	mov	r1, r6
 800bd08:	f7f4 fa7e 	bl	8000208 <__aeabi_fsub>
 800bd0c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bd10:	9401      	str	r4, [sp, #4]
 800bd12:	f859 4c08 	ldr.w	r4, [r9, #-8]
 800bd16:	900c      	str	r0, [sp, #48]	; 0x30
 800bd18:	4629      	mov	r1, r5
 800bd1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bd1c:	f7f4 fa74 	bl	8000208 <__aeabi_fsub>
 800bd20:	4621      	mov	r1, r4
 800bd22:	f7f4 fa73 	bl	800020c <__addsf3>
 800bd26:	4629      	mov	r1, r5
 800bd28:	900d      	str	r0, [sp, #52]	; 0x34
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	f7f4 fa6c 	bl	8000208 <__aeabi_fsub>
 800bd30:	4621      	mov	r1, r4
 800bd32:	f7f4 fa69 	bl	8000208 <__aeabi_fsub>
 800bd36:	4659      	mov	r1, fp
 800bd38:	900e      	str	r0, [sp, #56]	; 0x38
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	f7f4 fa64 	bl	8000208 <__aeabi_fsub>
 800bd40:	4631      	mov	r1, r6
 800bd42:	f7f4 fa61 	bl	8000208 <__aeabi_fsub>
 800bd46:	4659      	mov	r1, fp
 800bd48:	9012      	str	r0, [sp, #72]	; 0x48
 800bd4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd4c:	f7f4 fa5c 	bl	8000208 <__aeabi_fsub>
 800bd50:	4631      	mov	r1, r6
 800bd52:	f7f4 fa5b 	bl	800020c <__addsf3>
 800bd56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd58:	900a      	str	r0, [sp, #40]	; 0x28
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f7f4 fa56 	bl	800020c <__addsf3>
 800bd60:	4621      	mov	r1, r4
 800bd62:	f7f4 fa51 	bl	8000208 <__aeabi_fsub>
 800bd66:	4641      	mov	r1, r8
 800bd68:	9013      	str	r0, [sp, #76]	; 0x4c
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f7f4 fa4e 	bl	800020c <__addsf3>
 800bd70:	4621      	mov	r1, r4
 800bd72:	f7f4 fa4b 	bl	800020c <__addsf3>
 800bd76:	9e05      	ldr	r6, [sp, #20]
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	f846 0c08 	str.w	r0, [r6, #-8]
 800bd7e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800bd82:	4638      	mov	r0, r7
 800bd84:	f7f4 fa42 	bl	800020c <__addsf3>
 800bd88:	f859 1c04 	ldr.w	r1, [r9, #-4]
 800bd8c:	f7f4 fa3e 	bl	800020c <__addsf3>
 800bd90:	9f04      	ldr	r7, [sp, #16]
 800bd92:	f846 0c04 	str.w	r0, [r6, #-4]
 800bd96:	9605      	str	r6, [sp, #20]
 800bd98:	9e02      	ldr	r6, [sp, #8]
 800bd9a:	687c      	ldr	r4, [r7, #4]
 800bd9c:	6875      	ldr	r5, [r6, #4]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fa33 	bl	800020c <__addsf3>
 800bda6:	4629      	mov	r1, r5
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7f4 fa2c 	bl	8000208 <__aeabi_fsub>
 800bdb0:	68bc      	ldr	r4, [r7, #8]
 800bdb2:	68b5      	ldr	r5, [r6, #8]
 800bdb4:	9704      	str	r7, [sp, #16]
 800bdb6:	4683      	mov	fp, r0
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4620      	mov	r0, r4
 800bdbc:	9602      	str	r6, [sp, #8]
 800bdbe:	f7f4 fa25 	bl	800020c <__addsf3>
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7f4 fa1e 	bl	8000208 <__aeabi_fsub>
 800bdcc:	9e06      	ldr	r6, [sp, #24]
 800bdce:	f8da 5008 	ldr.w	r5, [sl, #8]
 800bdd2:	68b4      	ldr	r4, [r6, #8]
 800bdd4:	900f      	str	r0, [sp, #60]	; 0x3c
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f7f4 fa15 	bl	8000208 <__aeabi_fsub>
 800bdde:	4659      	mov	r1, fp
 800bde0:	9016      	str	r0, [sp, #88]	; 0x58
 800bde2:	f7f4 fa13 	bl	800020c <__addsf3>
 800bde6:	f8da 7004 	ldr.w	r7, [sl, #4]
 800bdea:	9606      	str	r6, [sp, #24]
 800bdec:	6876      	ldr	r6, [r6, #4]
 800bdee:	9014      	str	r0, [sp, #80]	; 0x50
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bdf4:	f7f4 fa08 	bl	8000208 <__aeabi_fsub>
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	f7f4 fa07 	bl	800020c <__addsf3>
 800bdfe:	4639      	mov	r1, r7
 800be00:	9010      	str	r0, [sp, #64]	; 0x40
 800be02:	4640      	mov	r0, r8
 800be04:	f7f4 fa00 	bl	8000208 <__aeabi_fsub>
 800be08:	4631      	mov	r1, r6
 800be0a:	f7f4 f9fd 	bl	8000208 <__aeabi_fsub>
 800be0e:	4629      	mov	r1, r5
 800be10:	9015      	str	r0, [sp, #84]	; 0x54
 800be12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800be14:	f7f4 f9f8 	bl	8000208 <__aeabi_fsub>
 800be18:	4621      	mov	r1, r4
 800be1a:	f7f4 f9f5 	bl	8000208 <__aeabi_fsub>
 800be1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be20:	9011      	str	r0, [sp, #68]	; 0x44
 800be22:	4659      	mov	r1, fp
 800be24:	4618      	mov	r0, r3
 800be26:	f7f4 f9ef 	bl	8000208 <__aeabi_fsub>
 800be2a:	4639      	mov	r1, r7
 800be2c:	4683      	mov	fp, r0
 800be2e:	4630      	mov	r0, r6
 800be30:	f7f4 f9ea 	bl	8000208 <__aeabi_fsub>
 800be34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be36:	f7f4 f9e7 	bl	8000208 <__aeabi_fsub>
 800be3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be3c:	4606      	mov	r6, r0
 800be3e:	4628      	mov	r0, r5
 800be40:	f7f4 f9e4 	bl	800020c <__addsf3>
 800be44:	4621      	mov	r1, r4
 800be46:	f7f4 f9e1 	bl	800020c <__addsf3>
 800be4a:	9c04      	ldr	r4, [sp, #16]
 800be4c:	60a0      	str	r0, [r4, #8]
 800be4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800be52:	4640      	mov	r0, r8
 800be54:	f7f4 f9da 	bl	800020c <__addsf3>
 800be58:	9a06      	ldr	r2, [sp, #24]
 800be5a:	6851      	ldr	r1, [r2, #4]
 800be5c:	f7f4 f9d6 	bl	800020c <__addsf3>
 800be60:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be62:	6060      	str	r0, [r4, #4]
 800be64:	9404      	str	r4, [sp, #16]
 800be66:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800be6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800be6c:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800be70:	4621      	mov	r1, r4
 800be72:	f7f4 fad3 	bl	800041c <__aeabi_fmul>
 800be76:	4629      	mov	r1, r5
 800be78:	4680      	mov	r8, r0
 800be7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be7c:	f7f4 face 	bl	800041c <__aeabi_fmul>
 800be80:	4601      	mov	r1, r0
 800be82:	4640      	mov	r0, r8
 800be84:	f7f4 f9c2 	bl	800020c <__addsf3>
 800be88:	9f01      	ldr	r7, [sp, #4]
 800be8a:	4621      	mov	r1, r4
 800be8c:	f847 0c08 	str.w	r0, [r7, #-8]
 800be90:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be92:	f7f4 fac3 	bl	800041c <__aeabi_fmul>
 800be96:	4629      	mov	r1, r5
 800be98:	4680      	mov	r8, r0
 800be9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800be9c:	f7f4 fabe 	bl	800041c <__aeabi_fmul>
 800bea0:	4601      	mov	r1, r0
 800bea2:	4640      	mov	r0, r8
 800bea4:	f7f4 f9b0 	bl	8000208 <__aeabi_fsub>
 800bea8:	4629      	mov	r1, r5
 800beaa:	9701      	str	r7, [sp, #4]
 800beac:	f847 0c04 	str.w	r0, [r7, #-4]
 800beb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800beb2:	f7f4 fab3 	bl	800041c <__aeabi_fmul>
 800beb6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800beb8:	4680      	mov	r8, r0
 800beba:	4621      	mov	r1, r4
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7f4 faad 	bl	800041c <__aeabi_fmul>
 800bec2:	4601      	mov	r1, r0
 800bec4:	4640      	mov	r0, r8
 800bec6:	f7f4 f99f 	bl	8000208 <__aeabi_fsub>
 800beca:	4629      	mov	r1, r5
 800becc:	f8ca 0008 	str.w	r0, [sl, #8]
 800bed0:	4638      	mov	r0, r7
 800bed2:	f7f4 faa3 	bl	800041c <__aeabi_fmul>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4605      	mov	r5, r0
 800beda:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bedc:	f7f4 fa9e 	bl	800041c <__aeabi_fmul>
 800bee0:	4601      	mov	r1, r0
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7f4 f992 	bl	800020c <__addsf3>
 800bee8:	9908      	ldr	r1, [sp, #32]
 800beea:	f8ca 0004 	str.w	r0, [sl, #4]
 800beee:	f851 4c10 	ldr.w	r4, [r1, #-16]
 800bef2:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 800bef6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bef8:	4621      	mov	r1, r4
 800befa:	f7f4 fa8f 	bl	800041c <__aeabi_fmul>
 800befe:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800bf02:	4607      	mov	r7, r0
 800bf04:	4629      	mov	r1, r5
 800bf06:	4640      	mov	r0, r8
 800bf08:	f7f4 fa88 	bl	800041c <__aeabi_fmul>
 800bf0c:	4601      	mov	r1, r0
 800bf0e:	4638      	mov	r0, r7
 800bf10:	f7f4 f97c 	bl	800020c <__addsf3>
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	4621      	mov	r1, r4
 800bf18:	f843 0c08 	str.w	r0, [r3, #-8]
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	f7f4 fa7d 	bl	800041c <__aeabi_fmul>
 800bf22:	4629      	mov	r1, r5
 800bf24:	4607      	mov	r7, r0
 800bf26:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bf28:	f7f4 fa78 	bl	800041c <__aeabi_fmul>
 800bf2c:	4601      	mov	r1, r0
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f7f4 f96a 	bl	8000208 <__aeabi_fsub>
 800bf34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf36:	9903      	ldr	r1, [sp, #12]
 800bf38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf3c:	f841 0c04 	str.w	r0, [r1, #-4]
 800bf40:	4618      	mov	r0, r3
 800bf42:	4621      	mov	r1, r4
 800bf44:	f7f4 fa6a 	bl	800041c <__aeabi_fmul>
 800bf48:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	4629      	mov	r1, r5
 800bf50:	4640      	mov	r0, r8
 800bf52:	f7f4 fa63 	bl	800041c <__aeabi_fmul>
 800bf56:	4601      	mov	r1, r0
 800bf58:	4638      	mov	r0, r7
 800bf5a:	f7f4 f955 	bl	8000208 <__aeabi_fsub>
 800bf5e:	9f02      	ldr	r7, [sp, #8]
 800bf60:	4629      	mov	r1, r5
 800bf62:	60b8      	str	r0, [r7, #8]
 800bf64:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bf66:	f7f4 fa59 	bl	800041c <__aeabi_fmul>
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	4640      	mov	r0, r8
 800bf70:	f7f4 fa54 	bl	800041c <__aeabi_fmul>
 800bf74:	4601      	mov	r1, r0
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7f4 f946 	bl	8000208 <__aeabi_fsub>
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	9807      	ldr	r0, [sp, #28]
 800bf80:	9702      	str	r7, [sp, #8]
 800bf82:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800bf86:	f850 5c14 	ldr.w	r5, [r0, #-20]
 800bf8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	f7f4 fa45 	bl	800041c <__aeabi_fmul>
 800bf92:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800bf96:	4607      	mov	r7, r0
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	f7f4 fa3e 	bl	800041c <__aeabi_fmul>
 800bfa0:	4601      	mov	r1, r0
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	f7f4 f932 	bl	800020c <__addsf3>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f849 0c08 	str.w	r0, [r9, #-8]
 800bfae:	4640      	mov	r0, r8
 800bfb0:	f7f4 fa34 	bl	800041c <__aeabi_fmul>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfba:	f7f4 fa2f 	bl	800041c <__aeabi_fmul>
 800bfbe:	4601      	mov	r1, r0
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	f7f4 f921 	bl	8000208 <__aeabi_fsub>
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f849 0c04 	str.w	r0, [r9, #-4]
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f7f4 fa25 	bl	800041c <__aeabi_fmul>
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	4607      	mov	r7, r0
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	f7f4 fa20 	bl	800041c <__aeabi_fmul>
 800bfdc:	4601      	mov	r1, r0
 800bfde:	4638      	mov	r0, r7
 800bfe0:	f7f4 f912 	bl	8000208 <__aeabi_fsub>
 800bfe4:	9f06      	ldr	r7, [sp, #24]
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	60b8      	str	r0, [r7, #8]
 800bfea:	4658      	mov	r0, fp
 800bfec:	f7f4 fa16 	bl	800041c <__aeabi_fmul>
 800bff0:	4621      	mov	r1, r4
 800bff2:	4605      	mov	r5, r0
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7f4 fa11 	bl	800041c <__aeabi_fmul>
 800bffa:	4601      	mov	r1, r0
 800bffc:	4628      	mov	r0, r5
 800bffe:	f7f4 f905 	bl	800020c <__addsf3>
 800c002:	9c04      	ldr	r4, [sp, #16]
 800c004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	9e05      	ldr	r6, [sp, #20]
 800c00a:	9903      	ldr	r1, [sp, #12]
 800c00c:	3c08      	subs	r4, #8
 800c00e:	9404      	str	r4, [sp, #16]
 800c010:	f102 0408 	add.w	r4, r2, #8
 800c014:	9a08      	ldr	r2, [sp, #32]
 800c016:	9409      	str	r4, [sp, #36]	; 0x24
 800c018:	3210      	adds	r2, #16
 800c01a:	461c      	mov	r4, r3
 800c01c:	9208      	str	r2, [sp, #32]
 800c01e:	3608      	adds	r6, #8
 800c020:	f101 0208 	add.w	r2, r1, #8
 800c024:	3408      	adds	r4, #8
 800c026:	9203      	str	r2, [sp, #12]
 800c028:	9605      	str	r6, [sp, #20]
 800c02a:	9401      	str	r4, [sp, #4]
 800c02c:	9d02      	ldr	r5, [sp, #8]
 800c02e:	9b07      	ldr	r3, [sp, #28]
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	f1a5 0208 	sub.w	r2, r5, #8
 800c036:	9202      	str	r2, [sp, #8]
 800c038:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c03a:	3318      	adds	r3, #24
 800c03c:	9307      	str	r3, [sp, #28]
 800c03e:	3a01      	subs	r2, #1
 800c040:	f1a7 0308 	sub.w	r3, r7, #8
 800c044:	f1aa 0a08 	sub.w	sl, sl, #8
 800c048:	f109 0908 	add.w	r9, r9, #8
 800c04c:	9306      	str	r3, [sp, #24]
 800c04e:	f47f ae30 	bne.w	800bcb2 <arm_cfft_radix8by4_f32+0x18a>
 800c052:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c054:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c056:	00cb      	lsls	r3, r1, #3
 800c058:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c05c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c060:	9122      	str	r1, [sp, #136]	; 0x88
 800c062:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c064:	4419      	add	r1, r3
 800c066:	911c      	str	r1, [sp, #112]	; 0x70
 800c068:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c06a:	4419      	add	r1, r3
 800c06c:	9121      	str	r1, [sp, #132]	; 0x84
 800c06e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c070:	4419      	add	r1, r3
 800c072:	911e      	str	r1, [sp, #120]	; 0x78
 800c074:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c076:	4419      	add	r1, r3
 800c078:	911d      	str	r1, [sp, #116]	; 0x74
 800c07a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c07c:	4419      	add	r1, r3
 800c07e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c080:	911b      	str	r1, [sp, #108]	; 0x6c
 800c082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c086:	9320      	str	r3, [sp, #128]	; 0x80
 800c088:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c08a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c08c:	6834      	ldr	r4, [r6, #0]
 800c08e:	683d      	ldr	r5, [r7, #0]
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 f8ba 	bl	800020c <__addsf3>
 800c098:	4629      	mov	r1, r5
 800c09a:	9001      	str	r0, [sp, #4]
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7f4 f8b3 	bl	8000208 <__aeabi_fsub>
 800c0a2:	6874      	ldr	r4, [r6, #4]
 800c0a4:	687d      	ldr	r5, [r7, #4]
 800c0a6:	961c      	str	r6, [sp, #112]	; 0x70
 800c0a8:	4683      	mov	fp, r0
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	971d      	str	r7, [sp, #116]	; 0x74
 800c0b0:	f7f4 f8ac 	bl	800020c <__addsf3>
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	4681      	mov	r9, r0
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7f4 f8a5 	bl	8000208 <__aeabi_fsub>
 800c0be:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c0c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0c2:	6867      	ldr	r7, [r4, #4]
 800c0c4:	685e      	ldr	r6, [r3, #4]
 800c0c6:	4682      	mov	sl, r0
 800c0c8:	4659      	mov	r1, fp
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	f7f4 f89e 	bl	800020c <__addsf3>
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	f7f4 f899 	bl	8000208 <__aeabi_fsub>
 800c0d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c0d8:	6825      	ldr	r5, [r4, #0]
 800c0da:	941e      	str	r4, [sp, #120]	; 0x78
 800c0dc:	6814      	ldr	r4, [r2, #0]
 800c0de:	9002      	str	r0, [sp, #8]
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	f7f4 f890 	bl	8000208 <__aeabi_fsub>
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	f7f4 f88f 	bl	800020c <__addsf3>
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	9801      	ldr	r0, [sp, #4]
 800c0f4:	f7f4 f888 	bl	8000208 <__aeabi_fsub>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	f7f4 f885 	bl	8000208 <__aeabi_fsub>
 800c0fe:	4639      	mov	r1, r7
 800c100:	9003      	str	r0, [sp, #12]
 800c102:	4648      	mov	r0, r9
 800c104:	f7f4 f880 	bl	8000208 <__aeabi_fsub>
 800c108:	4631      	mov	r1, r6
 800c10a:	f7f4 f87d 	bl	8000208 <__aeabi_fsub>
 800c10e:	4639      	mov	r1, r7
 800c110:	9004      	str	r0, [sp, #16]
 800c112:	4658      	mov	r0, fp
 800c114:	f7f4 f878 	bl	8000208 <__aeabi_fsub>
 800c118:	4631      	mov	r1, r6
 800c11a:	f7f4 f877 	bl	800020c <__addsf3>
 800c11e:	4651      	mov	r1, sl
 800c120:	4606      	mov	r6, r0
 800c122:	4628      	mov	r0, r5
 800c124:	f7f4 f872 	bl	800020c <__addsf3>
 800c128:	4621      	mov	r1, r4
 800c12a:	f7f4 f86d 	bl	8000208 <__aeabi_fsub>
 800c12e:	9901      	ldr	r1, [sp, #4]
 800c130:	4682      	mov	sl, r0
 800c132:	4628      	mov	r0, r5
 800c134:	f7f4 f86a 	bl	800020c <__addsf3>
 800c138:	4621      	mov	r1, r4
 800c13a:	f7f4 f867 	bl	800020c <__addsf3>
 800c13e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c140:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c142:	6028      	str	r0, [r5, #0]
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	4648      	mov	r0, r9
 800c148:	f7f4 f860 	bl	800020c <__addsf3>
 800c14c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c14e:	6859      	ldr	r1, [r3, #4]
 800c150:	f7f4 f85c 	bl	800020c <__addsf3>
 800c154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c156:	6068      	str	r0, [r5, #4]
 800c158:	6815      	ldr	r5, [r2, #0]
 800c15a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c15e:	6854      	ldr	r4, [r2, #4]
 800c160:	4629      	mov	r1, r5
 800c162:	4658      	mov	r0, fp
 800c164:	f7f4 f95a 	bl	800041c <__aeabi_fmul>
 800c168:	4621      	mov	r1, r4
 800c16a:	4681      	mov	r9, r0
 800c16c:	4640      	mov	r0, r8
 800c16e:	f7f4 f955 	bl	800041c <__aeabi_fmul>
 800c172:	4601      	mov	r1, r0
 800c174:	4648      	mov	r0, r9
 800c176:	f7f4 f849 	bl	800020c <__addsf3>
 800c17a:	4629      	mov	r1, r5
 800c17c:	6038      	str	r0, [r7, #0]
 800c17e:	4640      	mov	r0, r8
 800c180:	f7f4 f94c 	bl	800041c <__aeabi_fmul>
 800c184:	4621      	mov	r1, r4
 800c186:	4605      	mov	r5, r0
 800c188:	4658      	mov	r0, fp
 800c18a:	f7f4 f947 	bl	800041c <__aeabi_fmul>
 800c18e:	4601      	mov	r1, r0
 800c190:	4628      	mov	r0, r5
 800c192:	f7f4 f839 	bl	8000208 <__aeabi_fsub>
 800c196:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6815      	ldr	r5, [r2, #0]
 800c19c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c1a0:	6854      	ldr	r4, [r2, #4]
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	4658      	mov	r0, fp
 800c1a6:	f7f4 f939 	bl	800041c <__aeabi_fmul>
 800c1aa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800c1ae:	4680      	mov	r8, r0
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4648      	mov	r0, r9
 800c1b4:	f7f4 f932 	bl	800041c <__aeabi_fmul>
 800c1b8:	4601      	mov	r1, r0
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	f7f4 f826 	bl	800020c <__addsf3>
 800c1c0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	6038      	str	r0, [r7, #0]
 800c1c6:	4648      	mov	r0, r9
 800c1c8:	f7f4 f928 	bl	800041c <__aeabi_fmul>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f7f4 f923 	bl	800041c <__aeabi_fmul>
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f7f4 f815 	bl	8000208 <__aeabi_fsub>
 800c1de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6815      	ldr	r5, [r2, #0]
 800c1e4:	6854      	ldr	r4, [r2, #4]
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7f4 f917 	bl	800041c <__aeabi_fmul>
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	f7f4 f912 	bl	800041c <__aeabi_fmul>
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	f7f4 f806 	bl	800020c <__addsf3>
 800c200:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c202:	4629      	mov	r1, r5
 800c204:	6038      	str	r0, [r7, #0]
 800c206:	4650      	mov	r0, sl
 800c208:	f7f4 f908 	bl	800041c <__aeabi_fmul>
 800c20c:	4621      	mov	r1, r4
 800c20e:	4605      	mov	r5, r0
 800c210:	4630      	mov	r0, r6
 800c212:	f7f4 f903 	bl	800041c <__aeabi_fmul>
 800c216:	4601      	mov	r1, r0
 800c218:	4628      	mov	r0, r5
 800c21a:	f7f3 fff5 	bl	8000208 <__aeabi_fsub>
 800c21e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 800c222:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	686a      	ldr	r2, [r5, #4]
 800c228:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c22a:	4621      	mov	r1, r4
 800c22c:	2304      	movs	r3, #4
 800c22e:	f000 f973 	bl	800c518 <arm_radix8_butterfly_f32>
 800c232:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c234:	686a      	ldr	r2, [r5, #4]
 800c236:	4621      	mov	r1, r4
 800c238:	2304      	movs	r3, #4
 800c23a:	f000 f96d 	bl	800c518 <arm_radix8_butterfly_f32>
 800c23e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c240:	686a      	ldr	r2, [r5, #4]
 800c242:	4621      	mov	r1, r4
 800c244:	2304      	movs	r3, #4
 800c246:	f000 f967 	bl	800c518 <arm_radix8_butterfly_f32>
 800c24a:	686a      	ldr	r2, [r5, #4]
 800c24c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c24e:	4621      	mov	r1, r4
 800c250:	2304      	movs	r3, #4
 800c252:	b027      	add	sp, #156	; 0x9c
 800c254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	f000 b95e 	b.w	800c518 <arm_radix8_butterfly_f32>

0800c25c <arm_cfft_f32>:
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	2a01      	cmp	r2, #1
 800c262:	4606      	mov	r6, r0
 800c264:	4617      	mov	r7, r2
 800c266:	460c      	mov	r4, r1
 800c268:	4698      	mov	r8, r3
 800c26a:	8805      	ldrh	r5, [r0, #0]
 800c26c:	d05a      	beq.n	800c324 <arm_cfft_f32+0xc8>
 800c26e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c272:	d064      	beq.n	800c33e <arm_cfft_f32+0xe2>
 800c274:	d916      	bls.n	800c2a4 <arm_cfft_f32+0x48>
 800c276:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c27a:	d01a      	beq.n	800c2b2 <arm_cfft_f32+0x56>
 800c27c:	d94b      	bls.n	800c316 <arm_cfft_f32+0xba>
 800c27e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c282:	d05c      	beq.n	800c33e <arm_cfft_f32+0xe2>
 800c284:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c288:	d105      	bne.n	800c296 <arm_cfft_f32+0x3a>
 800c28a:	2301      	movs	r3, #1
 800c28c:	6872      	ldr	r2, [r6, #4]
 800c28e:	4629      	mov	r1, r5
 800c290:	4620      	mov	r0, r4
 800c292:	f000 f941 	bl	800c518 <arm_radix8_butterfly_f32>
 800c296:	f1b8 0f00 	cmp.w	r8, #0
 800c29a:	d111      	bne.n	800c2c0 <arm_cfft_f32+0x64>
 800c29c:	2f01      	cmp	r7, #1
 800c29e:	d016      	beq.n	800c2ce <arm_cfft_f32+0x72>
 800c2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a4:	2d20      	cmp	r5, #32
 800c2a6:	d04a      	beq.n	800c33e <arm_cfft_f32+0xe2>
 800c2a8:	d939      	bls.n	800c31e <arm_cfft_f32+0xc2>
 800c2aa:	2d40      	cmp	r5, #64	; 0x40
 800c2ac:	d0ed      	beq.n	800c28a <arm_cfft_f32+0x2e>
 800c2ae:	2d80      	cmp	r5, #128	; 0x80
 800c2b0:	d1f1      	bne.n	800c296 <arm_cfft_f32+0x3a>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7ff fae1 	bl	800b87c <arm_cfft_radix8by2_f32>
 800c2ba:	f1b8 0f00 	cmp.w	r8, #0
 800c2be:	d0ed      	beq.n	800c29c <arm_cfft_f32+0x40>
 800c2c0:	68b2      	ldr	r2, [r6, #8]
 800c2c2:	89b1      	ldrh	r1, [r6, #12]
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 f843 	bl	800c350 <arm_bitreversal_32>
 800c2ca:	2f01      	cmp	r7, #1
 800c2cc:	d1e8      	bne.n	800c2a0 <arm_cfft_f32+0x44>
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f7f4 f84c 	bl	800036c <__aeabi_ui2f>
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c2da:	f7f4 f953 	bl	8000584 <__aeabi_fdiv>
 800c2de:	4607      	mov	r7, r0
 800c2e0:	2d00      	cmp	r5, #0
 800c2e2:	d0dd      	beq.n	800c2a0 <arm_cfft_f32+0x44>
 800c2e4:	3408      	adds	r4, #8
 800c2e6:	2600      	movs	r6, #0
 800c2e8:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	f7f4 f895 	bl	800041c <__aeabi_fmul>
 800c2f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c2f6:	f844 0c08 	str.w	r0, [r4, #-8]
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 800c300:	f7f4 f88c 	bl	800041c <__aeabi_fmul>
 800c304:	3601      	adds	r6, #1
 800c306:	42b5      	cmp	r5, r6
 800c308:	f844 0c04 	str.w	r0, [r4, #-4]
 800c30c:	f104 0408 	add.w	r4, r4, #8
 800c310:	d1ea      	bne.n	800c2e8 <arm_cfft_f32+0x8c>
 800c312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c316:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c31a:	d0b6      	beq.n	800c28a <arm_cfft_f32+0x2e>
 800c31c:	e7bb      	b.n	800c296 <arm_cfft_f32+0x3a>
 800c31e:	2d10      	cmp	r5, #16
 800c320:	d0c7      	beq.n	800c2b2 <arm_cfft_f32+0x56>
 800c322:	e7b8      	b.n	800c296 <arm_cfft_f32+0x3a>
 800c324:	3104      	adds	r1, #4
 800c326:	b17d      	cbz	r5, 800c348 <arm_cfft_f32+0xec>
 800c328:	2300      	movs	r3, #0
 800c32a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800c32e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800c332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c336:	3301      	adds	r3, #1
 800c338:	429d      	cmp	r5, r3
 800c33a:	d1f6      	bne.n	800c32a <arm_cfft_f32+0xce>
 800c33c:	e797      	b.n	800c26e <arm_cfft_f32+0x12>
 800c33e:	4621      	mov	r1, r4
 800c340:	4630      	mov	r0, r6
 800c342:	f7ff fbf1 	bl	800bb28 <arm_cfft_radix8by4_f32>
 800c346:	e7a6      	b.n	800c296 <arm_cfft_f32+0x3a>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d0a9      	beq.n	800c2a0 <arm_cfft_f32+0x44>
 800c34c:	e7b8      	b.n	800c2c0 <arm_cfft_f32+0x64>
 800c34e:	bf00      	nop

0800c350 <arm_bitreversal_32>:
 800c350:	b1e9      	cbz	r1, 800c38e <arm_bitreversal_32+0x3e>
 800c352:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c354:	2500      	movs	r5, #0
 800c356:	f102 0e02 	add.w	lr, r2, #2
 800c35a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c35e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c362:	08a4      	lsrs	r4, r4, #2
 800c364:	089b      	lsrs	r3, r3, #2
 800c366:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c36a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c36e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c372:	00a6      	lsls	r6, r4, #2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c37a:	3304      	adds	r3, #4
 800c37c:	1d34      	adds	r4, r6, #4
 800c37e:	3502      	adds	r5, #2
 800c380:	58c6      	ldr	r6, [r0, r3]
 800c382:	5907      	ldr	r7, [r0, r4]
 800c384:	50c7      	str	r7, [r0, r3]
 800c386:	428d      	cmp	r5, r1
 800c388:	5106      	str	r6, [r0, r4]
 800c38a:	d3e6      	bcc.n	800c35a <arm_bitreversal_32+0xa>
 800c38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38e:	4770      	bx	lr

0800c390 <arm_cmplx_mag_f32>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	b083      	sub	sp, #12
 800c396:	ea5f 0b92 	movs.w	fp, r2, lsr #2
 800c39a:	9201      	str	r2, [sp, #4]
 800c39c:	4607      	mov	r7, r0
 800c39e:	4688      	mov	r8, r1
 800c3a0:	d07b      	beq.n	800c49a <arm_cmplx_mag_f32+0x10a>
 800c3a2:	f100 0420 	add.w	r4, r0, #32
 800c3a6:	f101 0510 	add.w	r5, r1, #16
 800c3aa:	465e      	mov	r6, fp
 800c3ac:	f854 1c20 	ldr.w	r1, [r4, #-32]
 800c3b0:	f854 ac1c 	ldr.w	sl, [r4, #-28]
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	f7f4 f831 	bl	800041c <__aeabi_fmul>
 800c3ba:	4651      	mov	r1, sl
 800c3bc:	4681      	mov	r9, r0
 800c3be:	4650      	mov	r0, sl
 800c3c0:	f7f4 f82c 	bl	800041c <__aeabi_fmul>
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	4648      	mov	r0, r9
 800c3c8:	f7f3 ff20 	bl	800020c <__addsf3>
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4681      	mov	r9, r0
 800c3d0:	f7f4 f9d6 	bl	8000780 <__aeabi_fcmpge>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	f000 808b 	beq.w	800c4f0 <arm_cmplx_mag_f32+0x160>
 800c3da:	4648      	mov	r0, r9
 800c3dc:	f000 feae 	bl	800d13c <sqrtf>
 800c3e0:	f845 0c10 	str.w	r0, [r5, #-16]
 800c3e4:	f854 1c18 	ldr.w	r1, [r4, #-24]
 800c3e8:	f854 ac14 	ldr.w	sl, [r4, #-20]
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	f7f4 f815 	bl	800041c <__aeabi_fmul>
 800c3f2:	4651      	mov	r1, sl
 800c3f4:	4681      	mov	r9, r0
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	f7f4 f810 	bl	800041c <__aeabi_fmul>
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	4648      	mov	r0, r9
 800c400:	f7f3 ff04 	bl	800020c <__addsf3>
 800c404:	2100      	movs	r1, #0
 800c406:	4681      	mov	r9, r0
 800c408:	f7f4 f9ba 	bl	8000780 <__aeabi_fcmpge>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d07b      	beq.n	800c508 <arm_cmplx_mag_f32+0x178>
 800c410:	4648      	mov	r0, r9
 800c412:	f000 fe93 	bl	800d13c <sqrtf>
 800c416:	f845 0c0c 	str.w	r0, [r5, #-12]
 800c41a:	f854 1c10 	ldr.w	r1, [r4, #-16]
 800c41e:	f854 ac0c 	ldr.w	sl, [r4, #-12]
 800c422:	4608      	mov	r0, r1
 800c424:	f7f3 fffa 	bl	800041c <__aeabi_fmul>
 800c428:	4651      	mov	r1, sl
 800c42a:	4681      	mov	r9, r0
 800c42c:	4650      	mov	r0, sl
 800c42e:	f7f3 fff5 	bl	800041c <__aeabi_fmul>
 800c432:	4601      	mov	r1, r0
 800c434:	4648      	mov	r0, r9
 800c436:	f7f3 fee9 	bl	800020c <__addsf3>
 800c43a:	2100      	movs	r1, #0
 800c43c:	4681      	mov	r9, r0
 800c43e:	f7f4 f99f 	bl	8000780 <__aeabi_fcmpge>
 800c442:	2800      	cmp	r0, #0
 800c444:	d05c      	beq.n	800c500 <arm_cmplx_mag_f32+0x170>
 800c446:	4648      	mov	r0, r9
 800c448:	f000 fe78 	bl	800d13c <sqrtf>
 800c44c:	f845 0c08 	str.w	r0, [r5, #-8]
 800c450:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800c454:	f854 ac04 	ldr.w	sl, [r4, #-4]
 800c458:	4608      	mov	r0, r1
 800c45a:	f7f3 ffdf 	bl	800041c <__aeabi_fmul>
 800c45e:	4651      	mov	r1, sl
 800c460:	4681      	mov	r9, r0
 800c462:	4650      	mov	r0, sl
 800c464:	f7f3 ffda 	bl	800041c <__aeabi_fmul>
 800c468:	4601      	mov	r1, r0
 800c46a:	4648      	mov	r0, r9
 800c46c:	f7f3 fece 	bl	800020c <__addsf3>
 800c470:	2100      	movs	r1, #0
 800c472:	4681      	mov	r9, r0
 800c474:	f7f4 f984 	bl	8000780 <__aeabi_fcmpge>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d03d      	beq.n	800c4f8 <arm_cmplx_mag_f32+0x168>
 800c47c:	4648      	mov	r0, r9
 800c47e:	f000 fe5d 	bl	800d13c <sqrtf>
 800c482:	f845 0c04 	str.w	r0, [r5, #-4]
 800c486:	3e01      	subs	r6, #1
 800c488:	f104 0420 	add.w	r4, r4, #32
 800c48c:	f105 0510 	add.w	r5, r5, #16
 800c490:	d18c      	bne.n	800c3ac <arm_cmplx_mag_f32+0x1c>
 800c492:	eb07 174b 	add.w	r7, r7, fp, lsl #5
 800c496:	eb08 180b 	add.w	r8, r8, fp, lsl #4
 800c49a:	9b01      	ldr	r3, [sp, #4]
 800c49c:	f013 0a03 	ands.w	sl, r3, #3
 800c4a0:	d023      	beq.n	800c4ea <arm_cmplx_mag_f32+0x15a>
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
 800c4aa:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800c4ae:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	f7f3 ffb2 	bl	800041c <__aeabi_fmul>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f7f3 ffad 	bl	800041c <__aeabi_fmul>
 800c4c2:	4601      	mov	r1, r0
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f7f3 fea1 	bl	800020c <__addsf3>
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	f108 0804 	add.w	r8, r8, #4
 800c4d2:	f7f4 f955 	bl	8000780 <__aeabi_fcmpge>
 800c4d6:	b1d8      	cbz	r0, 800c510 <arm_cmplx_mag_f32+0x180>
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fe2f 	bl	800d13c <sqrtf>
 800c4de:	f848 0c04 	str.w	r0, [r8, #-4]
 800c4e2:	45d0      	cmp	r8, sl
 800c4e4:	f107 0708 	add.w	r7, r7, #8
 800c4e8:	d1df      	bne.n	800c4aa <arm_cmplx_mag_f32+0x11a>
 800c4ea:	b003      	add	sp, #12
 800c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f845 3c10 	str.w	r3, [r5, #-16]
 800c4f6:	e775      	b.n	800c3e4 <arm_cmplx_mag_f32+0x54>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f845 3c04 	str.w	r3, [r5, #-4]
 800c4fe:	e7c2      	b.n	800c486 <arm_cmplx_mag_f32+0xf6>
 800c500:	2300      	movs	r3, #0
 800c502:	f845 3c08 	str.w	r3, [r5, #-8]
 800c506:	e7a3      	b.n	800c450 <arm_cmplx_mag_f32+0xc0>
 800c508:	2300      	movs	r3, #0
 800c50a:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c50e:	e784      	b.n	800c41a <arm_cmplx_mag_f32+0x8a>
 800c510:	f848 6c04 	str.w	r6, [r8, #-4]
 800c514:	e7e5      	b.n	800c4e2 <arm_cmplx_mag_f32+0x152>
 800c516:	bf00      	nop

0800c518 <arm_radix8_butterfly_f32>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	b0b9      	sub	sp, #228	; 0xe4
 800c51e:	e9cd 3236 	strd	r3, r2, [sp, #216]	; 0xd8
 800c522:	4603      	mov	r3, r0
 800c524:	3304      	adds	r3, #4
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	4613      	mov	r3, r2
 800c52a:	3304      	adds	r3, #4
 800c52c:	9116      	str	r1, [sp, #88]	; 0x58
 800c52e:	9334      	str	r3, [sp, #208]	; 0xd0
 800c530:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c532:	9000      	str	r0, [sp, #0]
 800c534:	9118      	str	r1, [sp, #96]	; 0x60
 800c536:	08df      	lsrs	r7, r3, #3
 800c538:	9900      	ldr	r1, [sp, #0]
 800c53a:	00fa      	lsls	r2, r7, #3
 800c53c:	4411      	add	r1, r2
 800c53e:	ebc7 7347 	rsb	r3, r7, r7, lsl #29
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	9107      	str	r1, [sp, #28]
 800c546:	4411      	add	r1, r2
 800c548:	911f      	str	r1, [sp, #124]	; 0x7c
 800c54a:	4419      	add	r1, r3
 800c54c:	911d      	str	r1, [sp, #116]	; 0x74
 800c54e:	4411      	add	r1, r2
 800c550:	911b      	str	r1, [sp, #108]	; 0x6c
 800c552:	4419      	add	r1, r3
 800c554:	188d      	adds	r5, r1, r2
 800c556:	18ec      	adds	r4, r5, r3
 800c558:	eb04 0e02 	add.w	lr, r4, r2
 800c55c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c55e:	eb0e 0103 	add.w	r1, lr, r3
 800c562:	1888      	adds	r0, r1, r2
 800c564:	9020      	str	r0, [sp, #128]	; 0x80
 800c566:	4418      	add	r0, r3
 800c568:	4616      	mov	r6, r2
 800c56a:	9226      	str	r2, [sp, #152]	; 0x98
 800c56c:	1882      	adds	r2, r0, r2
 800c56e:	901e      	str	r0, [sp, #120]	; 0x78
 800c570:	18d0      	adds	r0, r2, r3
 800c572:	900e      	str	r0, [sp, #56]	; 0x38
 800c574:	4430      	add	r0, r6
 800c576:	4403      	add	r3, r0
 800c578:	199e      	adds	r6, r3, r6
 800c57a:	3204      	adds	r2, #4
 800c57c:	3404      	adds	r4, #4
 800c57e:	901c      	str	r0, [sp, #112]	; 0x70
 800c580:	9215      	str	r2, [sp, #84]	; 0x54
 800c582:	4630      	mov	r0, r6
 800c584:	1d1a      	adds	r2, r3, #4
 800c586:	9412      	str	r4, [sp, #72]	; 0x48
 800c588:	9219      	str	r2, [sp, #100]	; 0x64
 800c58a:	f10e 0404 	add.w	r4, lr, #4
 800c58e:	4602      	mov	r2, r0
 800c590:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c592:	9410      	str	r4, [sp, #64]	; 0x40
 800c594:	3204      	adds	r2, #4
 800c596:	1d0c      	adds	r4, r1, #4
 800c598:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c59a:	9621      	str	r6, [sp, #132]	; 0x84
 800c59c:	9211      	str	r2, [sp, #68]	; 0x44
 800c59e:	463e      	mov	r6, r7
 800c5a0:	1d02      	adds	r2, r0, #4
 800c5a2:	9635      	str	r6, [sp, #212]	; 0xd4
 800c5a4:	9213      	str	r2, [sp, #76]	; 0x4c
 800c5a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c5aa:	1d0a      	adds	r2, r1, #4
 800c5ac:	9206      	str	r2, [sp, #24]
 800c5ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c5b0:	941a      	str	r4, [sp, #104]	; 0x68
 800c5b2:	00f2      	lsls	r2, r6, #3
 800c5b4:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 800c5b6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800c5ba:	0131      	lsls	r1, r6, #4
 800c5bc:	3504      	adds	r5, #4
 800c5be:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	2600      	movs	r6, #0
 800c5c6:	9514      	str	r5, [sp, #80]	; 0x50
 800c5c8:	9125      	str	r1, [sp, #148]	; 0x94
 800c5ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5cc:	46b2      	mov	sl, r6
 800c5ce:	4691      	mov	r9, r2
 800c5d0:	46c3      	mov	fp, r8
 800c5d2:	9b07      	ldr	r3, [sp, #28]
 800c5d4:	9f00      	ldr	r7, [sp, #0]
 800c5d6:	f853 6009 	ldr.w	r6, [r3, r9]
 800c5da:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f7f3 fe13 	bl	800020c <__addsf3>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f7f3 fe0c 	bl	8000208 <__aeabi_fsub>
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	9700      	str	r7, [sp, #0]
 800c5f4:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800c5f8:	f857 700b 	ldr.w	r7, [r7, fp]
 800c5fc:	9005      	str	r0, [sp, #20]
 800c5fe:	4639      	mov	r1, r7
 800c600:	4630      	mov	r0, r6
 800c602:	f7f3 fe03 	bl	800020c <__addsf3>
 800c606:	4639      	mov	r1, r7
 800c608:	4605      	mov	r5, r0
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7f3 fdfc 	bl	8000208 <__aeabi_fsub>
 800c610:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c612:	9008      	str	r0, [sp, #32]
 800c614:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800c618:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c61a:	f852 800b 	ldr.w	r8, [r2, fp]
 800c61e:	4630      	mov	r0, r6
 800c620:	4641      	mov	r1, r8
 800c622:	f7f3 fdf3 	bl	800020c <__addsf3>
 800c626:	4641      	mov	r1, r8
 800c628:	4607      	mov	r7, r0
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7f3 fdec 	bl	8000208 <__aeabi_fsub>
 800c630:	9a00      	ldr	r2, [sp, #0]
 800c632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c634:	f852 8009 	ldr.w	r8, [r2, r9]
 800c638:	f853 300b 	ldr.w	r3, [r3, fp]
 800c63c:	9009      	str	r0, [sp, #36]	; 0x24
 800c63e:	4619      	mov	r1, r3
 800c640:	4640      	mov	r0, r8
 800c642:	9302      	str	r3, [sp, #8]
 800c644:	f7f3 fde2 	bl	800020c <__addsf3>
 800c648:	9b02      	ldr	r3, [sp, #8]
 800c64a:	4606      	mov	r6, r0
 800c64c:	4619      	mov	r1, r3
 800c64e:	4640      	mov	r0, r8
 800c650:	f7f3 fdda 	bl	8000208 <__aeabi_fsub>
 800c654:	4639      	mov	r1, r7
 800c656:	900a      	str	r0, [sp, #40]	; 0x28
 800c658:	4620      	mov	r0, r4
 800c65a:	f7f3 fdd5 	bl	8000208 <__aeabi_fsub>
 800c65e:	4639      	mov	r1, r7
 800c660:	900b      	str	r0, [sp, #44]	; 0x2c
 800c662:	4620      	mov	r0, r4
 800c664:	f7f3 fdd2 	bl	800020c <__addsf3>
 800c668:	4631      	mov	r1, r6
 800c66a:	4604      	mov	r4, r0
 800c66c:	4628      	mov	r0, r5
 800c66e:	f7f3 fdcb 	bl	8000208 <__aeabi_fsub>
 800c672:	4631      	mov	r1, r6
 800c674:	900c      	str	r0, [sp, #48]	; 0x30
 800c676:	4628      	mov	r0, r5
 800c678:	f7f3 fdc8 	bl	800020c <__addsf3>
 800c67c:	4605      	mov	r5, r0
 800c67e:	4601      	mov	r1, r0
 800c680:	4620      	mov	r0, r4
 800c682:	f7f3 fdc3 	bl	800020c <__addsf3>
 800c686:	9b00      	ldr	r3, [sp, #0]
 800c688:	4629      	mov	r1, r5
 800c68a:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c68e:	4620      	mov	r0, r4
 800c690:	f7f3 fdba 	bl	8000208 <__aeabi_fsub>
 800c694:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c696:	f841 0009 	str.w	r0, [r1, r9]
 800c69a:	9f01      	ldr	r7, [sp, #4]
 800c69c:	9906      	ldr	r1, [sp, #24]
 800c69e:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800c6a2:	f851 6009 	ldr.w	r6, [r1, r9]
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	f7f3 fdaf 	bl	800020c <__addsf3>
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7f3 fda8 	bl	8000208 <__aeabi_fsub>
 800c6b8:	9906      	ldr	r1, [sp, #24]
 800c6ba:	f857 600b 	ldr.w	r6, [r7, fp]
 800c6be:	f851 403a 	ldr.w	r4, [r1, sl, lsl #3]
 800c6c2:	9002      	str	r0, [sp, #8]
 800c6c4:	4631      	mov	r1, r6
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	9701      	str	r7, [sp, #4]
 800c6ca:	f7f3 fd9f 	bl	800020c <__addsf3>
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f7f3 fd98 	bl	8000208 <__aeabi_fsub>
 800c6d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c6da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c6dc:	f854 403a 	ldr.w	r4, [r4, sl, lsl #3]
 800c6e0:	f856 600b 	ldr.w	r6, [r6, fp]
 800c6e4:	900d      	str	r0, [sp, #52]	; 0x34
 800c6e6:	4631      	mov	r1, r6
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f7f3 fd8f 	bl	800020c <__addsf3>
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f7f3 fd88 	bl	8000208 <__aeabi_fsub>
 800c6f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c6fa:	9c01      	ldr	r4, [sp, #4]
 800c6fc:	f851 600b 	ldr.w	r6, [r1, fp]
 800c700:	f854 4009 	ldr.w	r4, [r4, r9]
 800c704:	9003      	str	r0, [sp, #12]
 800c706:	4631      	mov	r1, r6
 800c708:	4620      	mov	r0, r4
 800c70a:	f7f3 fd7f 	bl	800020c <__addsf3>
 800c70e:	4631      	mov	r1, r6
 800c710:	9004      	str	r0, [sp, #16]
 800c712:	4620      	mov	r0, r4
 800c714:	f7f3 fd78 	bl	8000208 <__aeabi_fsub>
 800c718:	4639      	mov	r1, r7
 800c71a:	4606      	mov	r6, r0
 800c71c:	4628      	mov	r0, r5
 800c71e:	f7f3 fd73 	bl	8000208 <__aeabi_fsub>
 800c722:	4639      	mov	r1, r7
 800c724:	4604      	mov	r4, r0
 800c726:	4628      	mov	r0, r5
 800c728:	f7f3 fd70 	bl	800020c <__addsf3>
 800c72c:	9904      	ldr	r1, [sp, #16]
 800c72e:	4607      	mov	r7, r0
 800c730:	4640      	mov	r0, r8
 800c732:	f7f3 fd69 	bl	8000208 <__aeabi_fsub>
 800c736:	9904      	ldr	r1, [sp, #16]
 800c738:	4605      	mov	r5, r0
 800c73a:	4640      	mov	r0, r8
 800c73c:	f7f3 fd66 	bl	800020c <__addsf3>
 800c740:	4680      	mov	r8, r0
 800c742:	4601      	mov	r1, r0
 800c744:	4638      	mov	r0, r7
 800c746:	f7f3 fd61 	bl	800020c <__addsf3>
 800c74a:	9b01      	ldr	r3, [sp, #4]
 800c74c:	4641      	mov	r1, r8
 800c74e:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c752:	4638      	mov	r0, r7
 800c754:	f7f3 fd58 	bl	8000208 <__aeabi_fsub>
 800c758:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c75c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c75e:	4629      	mov	r1, r5
 800c760:	f847 0009 	str.w	r0, [r7, r9]
 800c764:	4640      	mov	r0, r8
 800c766:	f7f3 fd51 	bl	800020c <__addsf3>
 800c76a:	4629      	mov	r1, r5
 800c76c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c76e:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 800c772:	4640      	mov	r0, r8
 800c774:	f7f3 fd48 	bl	8000208 <__aeabi_fsub>
 800c778:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c77a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c77c:	4639      	mov	r1, r7
 800c77e:	f845 000b 	str.w	r0, [r5, fp]
 800c782:	4620      	mov	r0, r4
 800c784:	f7f3 fd40 	bl	8000208 <__aeabi_fsub>
 800c788:	4621      	mov	r1, r4
 800c78a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c78c:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800c790:	4638      	mov	r0, r7
 800c792:	f7f3 fd3b 	bl	800020c <__addsf3>
 800c796:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800c79a:	9d08      	ldr	r5, [sp, #32]
 800c79c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c79e:	4641      	mov	r1, r8
 800c7a0:	f844 000b 	str.w	r0, [r4, fp]
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f7f3 fd2f 	bl	8000208 <__aeabi_fsub>
 800c7aa:	4986      	ldr	r1, [pc, #536]	; (800c9c4 <arm_radix8_butterfly_f32+0x4ac>)
 800c7ac:	f7f3 fe36 	bl	800041c <__aeabi_fmul>
 800c7b0:	4641      	mov	r1, r8
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f7f3 fd29 	bl	800020c <__addsf3>
 800c7ba:	4982      	ldr	r1, [pc, #520]	; (800c9c4 <arm_radix8_butterfly_f32+0x4ac>)
 800c7bc:	f7f3 fe2e 	bl	800041c <__aeabi_fmul>
 800c7c0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	f7f3 fd1d 	bl	8000208 <__aeabi_fsub>
 800c7ce:	497d      	ldr	r1, [pc, #500]	; (800c9c4 <arm_radix8_butterfly_f32+0x4ac>)
 800c7d0:	f7f3 fe24 	bl	800041c <__aeabi_fmul>
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	4640      	mov	r0, r8
 800c7da:	f7f3 fd17 	bl	800020c <__addsf3>
 800c7de:	4979      	ldr	r1, [pc, #484]	; (800c9c4 <arm_radix8_butterfly_f32+0x4ac>)
 800c7e0:	f7f3 fe1c 	bl	800041c <__aeabi_fmul>
 800c7e4:	9e05      	ldr	r6, [sp, #20]
 800c7e6:	9004      	str	r0, [sp, #16]
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7f3 fd0c 	bl	8000208 <__aeabi_fsub>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4680      	mov	r8, r0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7f3 fd09 	bl	800020c <__addsf3>
 800c7fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c7fc:	9005      	str	r0, [sp, #20]
 800c7fe:	4629      	mov	r1, r5
 800c800:	4630      	mov	r0, r6
 800c802:	f7f3 fd01 	bl	8000208 <__aeabi_fsub>
 800c806:	4629      	mov	r1, r5
 800c808:	4604      	mov	r4, r0
 800c80a:	4630      	mov	r0, r6
 800c80c:	f7f3 fcfe 	bl	800020c <__addsf3>
 800c810:	4639      	mov	r1, r7
 800c812:	4606      	mov	r6, r0
 800c814:	9802      	ldr	r0, [sp, #8]
 800c816:	f7f3 fcf7 	bl	8000208 <__aeabi_fsub>
 800c81a:	4639      	mov	r1, r7
 800c81c:	4605      	mov	r5, r0
 800c81e:	9802      	ldr	r0, [sp, #8]
 800c820:	f7f3 fcf4 	bl	800020c <__addsf3>
 800c824:	9904      	ldr	r1, [sp, #16]
 800c826:	4607      	mov	r7, r0
 800c828:	9803      	ldr	r0, [sp, #12]
 800c82a:	f7f3 fced 	bl	8000208 <__aeabi_fsub>
 800c82e:	9904      	ldr	r1, [sp, #16]
 800c830:	9002      	str	r0, [sp, #8]
 800c832:	9803      	ldr	r0, [sp, #12]
 800c834:	f7f3 fcea 	bl	800020c <__addsf3>
 800c838:	4601      	mov	r1, r0
 800c83a:	9003      	str	r0, [sp, #12]
 800c83c:	9805      	ldr	r0, [sp, #20]
 800c83e:	f7f3 fce5 	bl	800020c <__addsf3>
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c846:	4619      	mov	r1, r3
 800c848:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c84c:	9805      	ldr	r0, [sp, #20]
 800c84e:	f7f3 fcdb 	bl	8000208 <__aeabi_fsub>
 800c852:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c854:	9902      	ldr	r1, [sp, #8]
 800c856:	f842 000b 	str.w	r0, [r2, fp]
 800c85a:	4640      	mov	r0, r8
 800c85c:	f7f3 fcd6 	bl	800020c <__addsf3>
 800c860:	9a00      	ldr	r2, [sp, #0]
 800c862:	9902      	ldr	r1, [sp, #8]
 800c864:	f842 000b 	str.w	r0, [r2, fp]
 800c868:	4640      	mov	r0, r8
 800c86a:	f7f3 fccd 	bl	8000208 <__aeabi_fsub>
 800c86e:	9a00      	ldr	r2, [sp, #0]
 800c870:	4631      	mov	r1, r6
 800c872:	f842 0009 	str.w	r0, [r2, r9]
 800c876:	4638      	mov	r0, r7
 800c878:	f7f3 fcc6 	bl	8000208 <__aeabi_fsub>
 800c87c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c87e:	4639      	mov	r1, r7
 800c880:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c884:	4630      	mov	r0, r6
 800c886:	f7f3 fcc1 	bl	800020c <__addsf3>
 800c88a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c88c:	4621      	mov	r1, r4
 800c88e:	f842 000b 	str.w	r0, [r2, fp]
 800c892:	4628      	mov	r0, r5
 800c894:	f7f3 fcb8 	bl	8000208 <__aeabi_fsub>
 800c898:	9f01      	ldr	r7, [sp, #4]
 800c89a:	4629      	mov	r1, r5
 800c89c:	f847 000b 	str.w	r0, [r7, fp]
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f7f3 fcb3 	bl	800020c <__addsf3>
 800c8a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c8a8:	f847 0009 	str.w	r0, [r7, r9]
 800c8ac:	449a      	add	sl, r3
 800c8ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8b0:	449b      	add	fp, r3
 800c8b2:	4499      	add	r9, r3
 800c8b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c8b6:	4553      	cmp	r3, sl
 800c8b8:	f63f ae8b 	bhi.w	800c5d2 <arm_radix8_butterfly_f32+0xba>
 800c8bc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800c8be:	2b07      	cmp	r3, #7
 800c8c0:	f240 82dc 	bls.w	800ce7c <arm_radix8_butterfly_f32+0x964>
 800c8c4:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c8c6:	015e      	lsls	r6, r3, #5
 800c8c8:	ebc3 62c3 	rsb	r2, r3, r3, lsl #27
 800c8cc:	4431      	add	r1, r6
 800c8ce:	0152      	lsls	r2, r2, #5
 800c8d0:	1888      	adds	r0, r1, r2
 800c8d2:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
 800c8d6:	011b      	lsls	r3, r3, #4
 800c8d8:	902e      	str	r0, [sp, #184]	; 0xb8
 800c8da:	4430      	add	r0, r6
 800c8dc:	18c5      	adds	r5, r0, r3
 800c8de:	902d      	str	r0, [sp, #180]	; 0xb4
 800c8e0:	18e8      	adds	r0, r5, r3
 800c8e2:	1984      	adds	r4, r0, r6
 800c8e4:	4422      	add	r2, r4
 800c8e6:	912f      	str	r1, [sp, #188]	; 0xbc
 800c8e8:	1991      	adds	r1, r2, r6
 800c8ea:	18cf      	adds	r7, r1, r3
 800c8ec:	9724      	str	r7, [sp, #144]	; 0x90
 800c8ee:	441f      	add	r7, r3
 800c8f0:	19be      	adds	r6, r7, r6
 800c8f2:	9723      	str	r7, [sp, #140]	; 0x8c
 800c8f4:	18f7      	adds	r7, r6, r3
 800c8f6:	18fb      	adds	r3, r7, r3
 800c8f8:	9322      	str	r3, [sp, #136]	; 0x88
 800c8fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8fc:	9730      	str	r7, [sp, #192]	; 0xc0
 800c8fe:	3308      	adds	r3, #8
 800c900:	9332      	str	r3, [sp, #200]	; 0xc8
 800c902:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c904:	960d      	str	r6, [sp, #52]	; 0x34
 800c906:	469c      	mov	ip, r3
 800c908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c90a:	449c      	add	ip, r3
 800c90c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c90e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800c912:	3304      	adds	r3, #4
 800c914:	9327      	str	r3, [sp, #156]	; 0x9c
 800c916:	463b      	mov	r3, r7
 800c918:	3304      	adds	r3, #4
 800c91a:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800c91c:	932b      	str	r3, [sp, #172]	; 0xac
 800c91e:	1d33      	adds	r3, r6, #4
 800c920:	930b      	str	r3, [sp, #44]	; 0x2c
 800c922:	1d3b      	adds	r3, r7, #4
 800c924:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800c926:	932a      	str	r3, [sp, #168]	; 0xa8
 800c928:	1d3b      	adds	r3, r7, #4
 800c92a:	3204      	adds	r2, #4
 800c92c:	932c      	str	r3, [sp, #176]	; 0xb0
 800c92e:	2301      	movs	r3, #1
 800c930:	3504      	adds	r5, #4
 800c932:	3404      	adds	r4, #4
 800c934:	3004      	adds	r0, #4
 800c936:	9226      	str	r2, [sp, #152]	; 0x98
 800c938:	9331      	str	r3, [sp, #196]	; 0xc4
 800c93a:	1d0a      	adds	r2, r1, #4
 800c93c:	2300      	movs	r3, #0
 800c93e:	950c      	str	r5, [sp, #48]	; 0x30
 800c940:	9428      	str	r4, [sp, #160]	; 0xa0
 800c942:	9029      	str	r0, [sp, #164]	; 0xa4
 800c944:	9225      	str	r2, [sp, #148]	; 0x94
 800c946:	9333      	str	r3, [sp, #204]	; 0xcc
 800c948:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 800c94a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c94c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 800c94e:	441e      	add	r6, r3
 800c950:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800c954:	011d      	lsls	r5, r3, #4
 800c956:	0134      	lsls	r4, r6, #4
 800c958:	597a      	ldr	r2, [r7, r5]
 800c95a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c95c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c95e:	f857 c033 	ldr.w	ip, [r7, r3, lsl #3]
 800c962:	5955      	ldr	r5, [r2, r5]
 800c964:	951f      	str	r5, [sp, #124]	; 0x7c
 800c966:	463d      	mov	r5, r7
 800c968:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800c96a:	592a      	ldr	r2, [r5, r4]
 800c96c:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 800c970:	9206      	str	r2, [sp, #24]
 800c972:	0170      	lsls	r0, r6, #5
 800c974:	593a      	ldr	r2, [r7, r4]
 800c976:	931d      	str	r3, [sp, #116]	; 0x74
 800c978:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800c97c:	462b      	mov	r3, r5
 800c97e:	921c      	str	r2, [sp, #112]	; 0x70
 800c980:	582a      	ldr	r2, [r5, r0]
 800c982:	9207      	str	r2, [sp, #28]
 800c984:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
 800c988:	583a      	ldr	r2, [r7, r0]
 800c98a:	920a      	str	r2, [sp, #40]	; 0x28
 800c98c:	f853 2031 	ldr.w	r2, [r3, r1, lsl #3]
 800c990:	921a      	str	r2, [sp, #104]	; 0x68
 800c992:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
 800c996:	f857 103e 	ldr.w	r1, [r7, lr, lsl #3]
 800c99a:	9120      	str	r1, [sp, #128]	; 0x80
 800c99c:	4619      	mov	r1, r3
 800c99e:	921e      	str	r2, [sp, #120]	; 0x78
 800c9a0:	f853 203e 	ldr.w	r2, [r3, lr, lsl #3]
 800c9a4:	f851 3036 	ldr.w	r3, [r1, r6, lsl #3]
 800c9a8:	9633      	str	r6, [sp, #204]	; 0xcc
 800c9aa:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c9ae:	9208      	str	r2, [sp, #32]
 800c9b0:	9305      	str	r3, [sp, #20]
 800c9b2:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 800c9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b8:	e9dd 6831 	ldrd	r6, r8, [sp, #196]	; 0xc4
 800c9bc:	46b2      	mov	sl, r6
 800c9be:	46c3      	mov	fp, r8
 800c9c0:	e002      	b.n	800c9c8 <arm_radix8_butterfly_f32+0x4b0>
 800c9c2:	bf00      	nop
 800c9c4:	3f3504f3 	.word	0x3f3504f3
 800c9c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9ca:	9f00      	ldr	r7, [sp, #0]
 800c9cc:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800c9d0:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f7f3 fc18 	bl	800020c <__addsf3>
 800c9dc:	4631      	mov	r1, r6
 800c9de:	4604      	mov	r4, r0
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	f7f3 fc11 	bl	8000208 <__aeabi_fsub>
 800c9e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9e8:	f857 600b 	ldr.w	r6, [r7, fp]
 800c9ec:	9700      	str	r7, [sp, #0]
 800c9ee:	f852 700b 	ldr.w	r7, [r2, fp]
 800c9f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7f3 fc08 	bl	800020c <__addsf3>
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	4605      	mov	r5, r0
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7f3 fc01 	bl	8000208 <__aeabi_fsub>
 800ca06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca08:	9010      	str	r0, [sp, #64]	; 0x40
 800ca0a:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800ca0e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800ca10:	f852 803a 	ldr.w	r8, [r2, sl, lsl #3]
 800ca14:	4630      	mov	r0, r6
 800ca16:	4641      	mov	r1, r8
 800ca18:	f7f3 fbf8 	bl	800020c <__addsf3>
 800ca1c:	4641      	mov	r1, r8
 800ca1e:	4607      	mov	r7, r0
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7f3 fbf1 	bl	8000208 <__aeabi_fsub>
 800ca26:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ca28:	9011      	str	r0, [sp, #68]	; 0x44
 800ca2a:	f852 800b 	ldr.w	r8, [r2, fp]
 800ca2e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ca30:	f852 900b 	ldr.w	r9, [r2, fp]
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fbe8 	bl	800020c <__addsf3>
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	4606      	mov	r6, r0
 800ca40:	4640      	mov	r0, r8
 800ca42:	f7f3 fbe1 	bl	8000208 <__aeabi_fsub>
 800ca46:	4639      	mov	r1, r7
 800ca48:	9012      	str	r0, [sp, #72]	; 0x48
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7f3 fbdc 	bl	8000208 <__aeabi_fsub>
 800ca50:	4639      	mov	r1, r7
 800ca52:	4680      	mov	r8, r0
 800ca54:	4620      	mov	r0, r4
 800ca56:	f7f3 fbd9 	bl	800020c <__addsf3>
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f7f3 fbd2 	bl	8000208 <__aeabi_fsub>
 800ca64:	4631      	mov	r1, r6
 800ca66:	9013      	str	r0, [sp, #76]	; 0x4c
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f7f3 fbcf 	bl	800020c <__addsf3>
 800ca6e:	4605      	mov	r5, r0
 800ca70:	4601      	mov	r1, r0
 800ca72:	4620      	mov	r0, r4
 800ca74:	f7f3 fbca 	bl	800020c <__addsf3>
 800ca78:	9a00      	ldr	r2, [sp, #0]
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800ca80:	4620      	mov	r0, r4
 800ca82:	f7f3 fbc1 	bl	8000208 <__aeabi_fsub>
 800ca86:	9f01      	ldr	r7, [sp, #4]
 800ca88:	9002      	str	r0, [sp, #8]
 800ca8a:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800ca8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca90:	f853 503a 	ldr.w	r5, [r3, sl, lsl #3]
 800ca94:	4620      	mov	r0, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	f7f3 fbb8 	bl	800020c <__addsf3>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4606      	mov	r6, r0
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7f3 fbb1 	bl	8000208 <__aeabi_fsub>
 800caa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800caa8:	f857 500b 	ldr.w	r5, [r7, fp]
 800caac:	9701      	str	r7, [sp, #4]
 800caae:	f851 700b 	ldr.w	r7, [r1, fp]
 800cab2:	9003      	str	r0, [sp, #12]
 800cab4:	4639      	mov	r1, r7
 800cab6:	4628      	mov	r0, r5
 800cab8:	f7f3 fba8 	bl	800020c <__addsf3>
 800cabc:	4639      	mov	r1, r7
 800cabe:	4604      	mov	r4, r0
 800cac0:	4628      	mov	r0, r5
 800cac2:	f7f3 fba1 	bl	8000208 <__aeabi_fsub>
 800cac6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800cac8:	9014      	str	r0, [sp, #80]	; 0x50
 800caca:	f851 503a 	ldr.w	r5, [r1, sl, lsl #3]
 800cace:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800cad0:	f851 703a 	ldr.w	r7, [r1, sl, lsl #3]
 800cad4:	4628      	mov	r0, r5
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7f3 fb98 	bl	800020c <__addsf3>
 800cadc:	4639      	mov	r1, r7
 800cade:	4681      	mov	r9, r0
 800cae0:	4628      	mov	r0, r5
 800cae2:	f7f3 fb91 	bl	8000208 <__aeabi_fsub>
 800cae6:	9926      	ldr	r1, [sp, #152]	; 0x98
 800cae8:	9004      	str	r0, [sp, #16]
 800caea:	f851 500b 	ldr.w	r5, [r1, fp]
 800caee:	9925      	ldr	r1, [sp, #148]	; 0x94
 800caf0:	f851 300b 	ldr.w	r3, [r1, fp]
 800caf4:	9315      	str	r3, [sp, #84]	; 0x54
 800caf6:	4619      	mov	r1, r3
 800caf8:	4628      	mov	r0, r5
 800cafa:	f7f3 fb87 	bl	800020c <__addsf3>
 800cafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb00:	4607      	mov	r7, r0
 800cb02:	4619      	mov	r1, r3
 800cb04:	4628      	mov	r0, r5
 800cb06:	f7f3 fb7f 	bl	8000208 <__aeabi_fsub>
 800cb0a:	4649      	mov	r1, r9
 800cb0c:	9015      	str	r0, [sp, #84]	; 0x54
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f7f3 fb7a 	bl	8000208 <__aeabi_fsub>
 800cb14:	4649      	mov	r1, r9
 800cb16:	4605      	mov	r5, r0
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f7f3 fb77 	bl	800020c <__addsf3>
 800cb1e:	4639      	mov	r1, r7
 800cb20:	4606      	mov	r6, r0
 800cb22:	4620      	mov	r0, r4
 800cb24:	f7f3 fb70 	bl	8000208 <__aeabi_fsub>
 800cb28:	4639      	mov	r1, r7
 800cb2a:	4681      	mov	r9, r0
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7f3 fb6d 	bl	800020c <__addsf3>
 800cb32:	4649      	mov	r1, r9
 800cb34:	4607      	mov	r7, r0
 800cb36:	4640      	mov	r0, r8
 800cb38:	f7f3 fb68 	bl	800020c <__addsf3>
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	4604      	mov	r4, r0
 800cb40:	4640      	mov	r0, r8
 800cb42:	f7f3 fb61 	bl	8000208 <__aeabi_fsub>
 800cb46:	4639      	mov	r1, r7
 800cb48:	4680      	mov	r8, r0
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7f3 fb5e 	bl	800020c <__addsf3>
 800cb50:	9b01      	ldr	r3, [sp, #4]
 800cb52:	4639      	mov	r1, r7
 800cb54:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7f3 fb55 	bl	8000208 <__aeabi_fsub>
 800cb5e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800cb62:	4607      	mov	r7, r0
 800cb64:	4649      	mov	r1, r9
 800cb66:	4628      	mov	r0, r5
 800cb68:	f7f3 fb4e 	bl	8000208 <__aeabi_fsub>
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4606      	mov	r6, r0
 800cb70:	4648      	mov	r0, r9
 800cb72:	f7f3 fb4b 	bl	800020c <__addsf3>
 800cb76:	9902      	ldr	r1, [sp, #8]
 800cb78:	4605      	mov	r5, r0
 800cb7a:	9807      	ldr	r0, [sp, #28]
 800cb7c:	f7f3 fc4e 	bl	800041c <__aeabi_fmul>
 800cb80:	4639      	mov	r1, r7
 800cb82:	4681      	mov	r9, r0
 800cb84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb86:	f7f3 fc49 	bl	800041c <__aeabi_fmul>
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	f7f3 fb3d 	bl	800020c <__addsf3>
 800cb92:	4639      	mov	r1, r7
 800cb94:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800cb96:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 800cb9a:	9807      	ldr	r0, [sp, #28]
 800cb9c:	f7f3 fc3e 	bl	800041c <__aeabi_fmul>
 800cba0:	9902      	ldr	r1, [sp, #8]
 800cba2:	4607      	mov	r7, r0
 800cba4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cba6:	f7f3 fc39 	bl	800041c <__aeabi_fmul>
 800cbaa:	4601      	mov	r1, r0
 800cbac:	4638      	mov	r0, r7
 800cbae:	f7f3 fb2b 	bl	8000208 <__aeabi_fsub>
 800cbb2:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 800cbba:	9806      	ldr	r0, [sp, #24]
 800cbbc:	f7f3 fc2e 	bl	800041c <__aeabi_fmul>
 800cbc0:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800cbc4:	4607      	mov	r7, r0
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4648      	mov	r0, r9
 800cbca:	f7f3 fc27 	bl	800041c <__aeabi_fmul>
 800cbce:	4601      	mov	r1, r0
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7f3 fb1b 	bl	800020c <__addsf3>
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800cbda:	f846 003a 	str.w	r0, [r6, sl, lsl #3]
 800cbde:	9806      	ldr	r0, [sp, #24]
 800cbe0:	f7f3 fc1c 	bl	800041c <__aeabi_fmul>
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	4648      	mov	r0, r9
 800cbea:	f7f3 fc17 	bl	800041c <__aeabi_fmul>
 800cbee:	4601      	mov	r1, r0
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f7f3 fb09 	bl	8000208 <__aeabi_fsub>
 800cbf6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800cbf8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800cbfa:	4641      	mov	r1, r8
 800cbfc:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800cc00:	4630      	mov	r0, r6
 800cc02:	f7f3 fc0b 	bl	800041c <__aeabi_fmul>
 800cc06:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4648      	mov	r0, r9
 800cc10:	f7f3 fc04 	bl	800041c <__aeabi_fmul>
 800cc14:	4601      	mov	r1, r0
 800cc16:	4620      	mov	r0, r4
 800cc18:	f7f3 faf8 	bl	800020c <__addsf3>
 800cc1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800cc24:	4630      	mov	r0, r6
 800cc26:	f7f3 fbf9 	bl	800041c <__aeabi_fmul>
 800cc2a:	4641      	mov	r1, r8
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4648      	mov	r0, r9
 800cc30:	f7f3 fbf4 	bl	800041c <__aeabi_fmul>
 800cc34:	4601      	mov	r1, r0
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7f3 fae6 	bl	8000208 <__aeabi_fsub>
 800cc3c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800cc3e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800cc42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cc44:	4639      	mov	r1, r7
 800cc46:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 800cc4a:	4648      	mov	r0, r9
 800cc4c:	f7f3 fadc 	bl	8000208 <__aeabi_fsub>
 800cc50:	498c      	ldr	r1, [pc, #560]	; (800ce84 <arm_radix8_butterfly_f32+0x96c>)
 800cc52:	f7f3 fbe3 	bl	800041c <__aeabi_fmul>
 800cc56:	4639      	mov	r1, r7
 800cc58:	4604      	mov	r4, r0
 800cc5a:	4648      	mov	r0, r9
 800cc5c:	f7f3 fad6 	bl	800020c <__addsf3>
 800cc60:	4988      	ldr	r1, [pc, #544]	; (800ce84 <arm_radix8_butterfly_f32+0x96c>)
 800cc62:	f7f3 fbdb 	bl	800041c <__aeabi_fmul>
 800cc66:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800cc6a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	4641      	mov	r1, r8
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7f3 fac9 	bl	8000208 <__aeabi_fsub>
 800cc76:	4983      	ldr	r1, [pc, #524]	; (800ce84 <arm_radix8_butterfly_f32+0x96c>)
 800cc78:	f7f3 fbd0 	bl	800041c <__aeabi_fmul>
 800cc7c:	4641      	mov	r1, r8
 800cc7e:	4681      	mov	r9, r0
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7f3 fac3 	bl	800020c <__addsf3>
 800cc86:	497f      	ldr	r1, [pc, #508]	; (800ce84 <arm_radix8_butterfly_f32+0x96c>)
 800cc88:	f7f3 fbc8 	bl	800041c <__aeabi_fmul>
 800cc8c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800cc8e:	4605      	mov	r5, r0
 800cc90:	4621      	mov	r1, r4
 800cc92:	4630      	mov	r0, r6
 800cc94:	f7f3 fab8 	bl	8000208 <__aeabi_fsub>
 800cc98:	4621      	mov	r1, r4
 800cc9a:	9002      	str	r0, [sp, #8]
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f7f3 fab5 	bl	800020c <__addsf3>
 800cca2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800cca6:	4604      	mov	r4, r0
 800cca8:	4639      	mov	r1, r7
 800ccaa:	4640      	mov	r0, r8
 800ccac:	f7f3 faac 	bl	8000208 <__aeabi_fsub>
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	f7f3 faa9 	bl	800020c <__addsf3>
 800ccba:	4649      	mov	r1, r9
 800ccbc:	4680      	mov	r8, r0
 800ccbe:	9803      	ldr	r0, [sp, #12]
 800ccc0:	f7f3 faa2 	bl	8000208 <__aeabi_fsub>
 800ccc4:	4649      	mov	r1, r9
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	9803      	ldr	r0, [sp, #12]
 800ccca:	f7f3 fa9f 	bl	800020c <__addsf3>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4681      	mov	r9, r0
 800ccd2:	9804      	ldr	r0, [sp, #16]
 800ccd4:	f7f3 fa98 	bl	8000208 <__aeabi_fsub>
 800ccd8:	4629      	mov	r1, r5
 800ccda:	9003      	str	r0, [sp, #12]
 800ccdc:	9804      	ldr	r0, [sp, #16]
 800ccde:	f7f3 fa95 	bl	800020c <__addsf3>
 800cce2:	4601      	mov	r1, r0
 800cce4:	9004      	str	r0, [sp, #16]
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7f3 fa90 	bl	800020c <__addsf3>
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	4605      	mov	r5, r0
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7f3 fa88 	bl	8000208 <__aeabi_fsub>
 800ccf8:	9903      	ldr	r1, [sp, #12]
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	9802      	ldr	r0, [sp, #8]
 800ccfe:	f7f3 fa85 	bl	800020c <__addsf3>
 800cd02:	9903      	ldr	r1, [sp, #12]
 800cd04:	9004      	str	r0, [sp, #16]
 800cd06:	9802      	ldr	r0, [sp, #8]
 800cd08:	f7f3 fa7e 	bl	8000208 <__aeabi_fsub>
 800cd0c:	4641      	mov	r1, r8
 800cd0e:	9003      	str	r0, [sp, #12]
 800cd10:	4648      	mov	r0, r9
 800cd12:	f7f3 fa79 	bl	8000208 <__aeabi_fsub>
 800cd16:	4649      	mov	r1, r9
 800cd18:	9002      	str	r0, [sp, #8]
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	f7f3 fa76 	bl	800020c <__addsf3>
 800cd20:	4631      	mov	r1, r6
 800cd22:	4681      	mov	r9, r0
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7f3 fa6f 	bl	8000208 <__aeabi_fsub>
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4680      	mov	r8, r0
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7f3 fa6c 	bl	800020c <__addsf3>
 800cd34:	4629      	mov	r1, r5
 800cd36:	4606      	mov	r6, r0
 800cd38:	9805      	ldr	r0, [sp, #20]
 800cd3a:	f7f3 fb6f 	bl	800041c <__aeabi_fmul>
 800cd3e:	9902      	ldr	r1, [sp, #8]
 800cd40:	4607      	mov	r7, r0
 800cd42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd44:	f7f3 fb6a 	bl	800041c <__aeabi_fmul>
 800cd48:	4601      	mov	r1, r0
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	f7f3 fa5e 	bl	800020c <__addsf3>
 800cd50:	9a00      	ldr	r2, [sp, #0]
 800cd52:	9902      	ldr	r1, [sp, #8]
 800cd54:	f842 000b 	str.w	r0, [r2, fp]
 800cd58:	9805      	ldr	r0, [sp, #20]
 800cd5a:	f7f3 fb5f 	bl	800041c <__aeabi_fmul>
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4607      	mov	r7, r0
 800cd62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd64:	f7f3 fb5a 	bl	800041c <__aeabi_fmul>
 800cd68:	4601      	mov	r1, r0
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	f7f3 fa4c 	bl	8000208 <__aeabi_fsub>
 800cd70:	9b01      	ldr	r3, [sp, #4]
 800cd72:	4621      	mov	r1, r4
 800cd74:	f843 000b 	str.w	r0, [r3, fp]
 800cd78:	9808      	ldr	r0, [sp, #32]
 800cd7a:	f7f3 fb4f 	bl	800041c <__aeabi_fmul>
 800cd7e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800cd80:	4605      	mov	r5, r0
 800cd82:	4649      	mov	r1, r9
 800cd84:	4638      	mov	r0, r7
 800cd86:	f7f3 fb49 	bl	800041c <__aeabi_fmul>
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f7f3 fa3d 	bl	800020c <__addsf3>
 800cd92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd94:	4649      	mov	r1, r9
 800cd96:	f843 000b 	str.w	r0, [r3, fp]
 800cd9a:	9808      	ldr	r0, [sp, #32]
 800cd9c:	f7f3 fb3e 	bl	800041c <__aeabi_fmul>
 800cda0:	4621      	mov	r1, r4
 800cda2:	4605      	mov	r5, r0
 800cda4:	4638      	mov	r0, r7
 800cda6:	f7f3 fb39 	bl	800041c <__aeabi_fmul>
 800cdaa:	4601      	mov	r1, r0
 800cdac:	4628      	mov	r0, r5
 800cdae:	f7f3 fa2b 	bl	8000208 <__aeabi_fsub>
 800cdb2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cdb4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800cdb8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f845 000b 	str.w	r0, [r5, fp]
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f7f3 fb2b 	bl	800041c <__aeabi_fmul>
 800cdc6:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800cdc8:	4604      	mov	r4, r0
 800cdca:	4641      	mov	r1, r8
 800cdcc:	4628      	mov	r0, r5
 800cdce:	f7f3 fb25 	bl	800041c <__aeabi_fmul>
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f7f3 fa19 	bl	800020c <__addsf3>
 800cdda:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800cddc:	4641      	mov	r1, r8
 800cdde:	f843 000b 	str.w	r0, [r3, fp]
 800cde2:	4638      	mov	r0, r7
 800cde4:	f7f3 fb1a 	bl	800041c <__aeabi_fmul>
 800cde8:	4649      	mov	r1, r9
 800cdea:	4604      	mov	r4, r0
 800cdec:	4628      	mov	r0, r5
 800cdee:	f7f3 fb15 	bl	800041c <__aeabi_fmul>
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f7f3 fa07 	bl	8000208 <__aeabi_fsub>
 800cdfa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cdfc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce00:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800ce02:	f843 000b 	str.w	r0, [r3, fp]
 800ce06:	4641      	mov	r1, r8
 800ce08:	4638      	mov	r0, r7
 800ce0a:	f7f3 fb07 	bl	800041c <__aeabi_fmul>
 800ce0e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ce10:	4604      	mov	r4, r0
 800ce12:	4631      	mov	r1, r6
 800ce14:	4628      	mov	r0, r5
 800ce16:	f7f3 fb01 	bl	800041c <__aeabi_fmul>
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f7f3 f9f5 	bl	800020c <__addsf3>
 800ce22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce24:	4631      	mov	r1, r6
 800ce26:	f843 000b 	str.w	r0, [r3, fp]
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	f7f3 faf6 	bl	800041c <__aeabi_fmul>
 800ce30:	4641      	mov	r1, r8
 800ce32:	4604      	mov	r4, r0
 800ce34:	4628      	mov	r0, r5
 800ce36:	f7f3 faf1 	bl	800041c <__aeabi_fmul>
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f7f3 f9e3 	bl	8000208 <__aeabi_fsub>
 800ce42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce44:	449a      	add	sl, r3
 800ce46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ce48:	f843 000b 	str.w	r0, [r3, fp]
 800ce4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce4e:	449b      	add	fp, r3
 800ce50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ce52:	4553      	cmp	r3, sl
 800ce54:	f63f adb8 	bhi.w	800c9c8 <arm_radix8_butterfly_f32+0x4b0>
 800ce58:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ce5a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ce5c:	3208      	adds	r2, #8
 800ce5e:	9232      	str	r2, [sp, #200]	; 0xc8
 800ce60:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800ce62:	3301      	adds	r3, #1
 800ce64:	429a      	cmp	r2, r3
 800ce66:	9331      	str	r3, [sp, #196]	; 0xc4
 800ce68:	f47f ad6e 	bne.w	800c948 <arm_radix8_butterfly_f32+0x430>
 800ce6c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800ce6e:	9216      	str	r2, [sp, #88]	; 0x58
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	9336      	str	r3, [sp, #216]	; 0xd8
 800ce76:	4613      	mov	r3, r2
 800ce78:	f7ff bb5d 	b.w	800c536 <arm_radix8_butterfly_f32+0x1e>
 800ce7c:	b039      	add	sp, #228	; 0xe4
 800ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce82:	bf00      	nop
 800ce84:	3f3504f3 	.word	0x3f3504f3

0800ce88 <malloc>:
 800ce88:	4b02      	ldr	r3, [pc, #8]	; (800ce94 <malloc+0xc>)
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f000 b82b 	b.w	800cee8 <_malloc_r>
 800ce92:	bf00      	nop
 800ce94:	20000104 	.word	0x20000104

0800ce98 <free>:
 800ce98:	4b02      	ldr	r3, [pc, #8]	; (800cea4 <free+0xc>)
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	f000 b901 	b.w	800d0a4 <_free_r>
 800cea2:	bf00      	nop
 800cea4:	20000104 	.word	0x20000104

0800cea8 <sbrk_aligned>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	4e0e      	ldr	r6, [pc, #56]	; (800cee4 <sbrk_aligned+0x3c>)
 800ceac:	460c      	mov	r4, r1
 800ceae:	6831      	ldr	r1, [r6, #0]
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	b911      	cbnz	r1, 800ceba <sbrk_aligned+0x12>
 800ceb4:	f000 f8ac 	bl	800d010 <_sbrk_r>
 800ceb8:	6030      	str	r0, [r6, #0]
 800ceba:	4621      	mov	r1, r4
 800cebc:	4628      	mov	r0, r5
 800cebe:	f000 f8a7 	bl	800d010 <_sbrk_r>
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	d00a      	beq.n	800cedc <sbrk_aligned+0x34>
 800cec6:	1cc4      	adds	r4, r0, #3
 800cec8:	f024 0403 	bic.w	r4, r4, #3
 800cecc:	42a0      	cmp	r0, r4
 800cece:	d007      	beq.n	800cee0 <sbrk_aligned+0x38>
 800ced0:	1a21      	subs	r1, r4, r0
 800ced2:	4628      	mov	r0, r5
 800ced4:	f000 f89c 	bl	800d010 <_sbrk_r>
 800ced8:	3001      	adds	r0, #1
 800ceda:	d101      	bne.n	800cee0 <sbrk_aligned+0x38>
 800cedc:	f04f 34ff 	mov.w	r4, #4294967295
 800cee0:	4620      	mov	r0, r4
 800cee2:	bd70      	pop	{r4, r5, r6, pc}
 800cee4:	200114c8 	.word	0x200114c8

0800cee8 <_malloc_r>:
 800cee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceec:	1ccd      	adds	r5, r1, #3
 800ceee:	f025 0503 	bic.w	r5, r5, #3
 800cef2:	3508      	adds	r5, #8
 800cef4:	2d0c      	cmp	r5, #12
 800cef6:	bf38      	it	cc
 800cef8:	250c      	movcc	r5, #12
 800cefa:	2d00      	cmp	r5, #0
 800cefc:	4607      	mov	r7, r0
 800cefe:	db01      	blt.n	800cf04 <_malloc_r+0x1c>
 800cf00:	42a9      	cmp	r1, r5
 800cf02:	d905      	bls.n	800cf10 <_malloc_r+0x28>
 800cf04:	230c      	movs	r3, #12
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	2600      	movs	r6, #0
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfe4 <_malloc_r+0xfc>
 800cf14:	f000 f868 	bl	800cfe8 <__malloc_lock>
 800cf18:	f8d8 3000 	ldr.w	r3, [r8]
 800cf1c:	461c      	mov	r4, r3
 800cf1e:	bb5c      	cbnz	r4, 800cf78 <_malloc_r+0x90>
 800cf20:	4629      	mov	r1, r5
 800cf22:	4638      	mov	r0, r7
 800cf24:	f7ff ffc0 	bl	800cea8 <sbrk_aligned>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	d155      	bne.n	800cfda <_malloc_r+0xf2>
 800cf2e:	f8d8 4000 	ldr.w	r4, [r8]
 800cf32:	4626      	mov	r6, r4
 800cf34:	2e00      	cmp	r6, #0
 800cf36:	d145      	bne.n	800cfc4 <_malloc_r+0xdc>
 800cf38:	2c00      	cmp	r4, #0
 800cf3a:	d048      	beq.n	800cfce <_malloc_r+0xe6>
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4638      	mov	r0, r7
 800cf42:	eb04 0903 	add.w	r9, r4, r3
 800cf46:	f000 f863 	bl	800d010 <_sbrk_r>
 800cf4a:	4581      	cmp	r9, r0
 800cf4c:	d13f      	bne.n	800cfce <_malloc_r+0xe6>
 800cf4e:	6821      	ldr	r1, [r4, #0]
 800cf50:	1a6d      	subs	r5, r5, r1
 800cf52:	4629      	mov	r1, r5
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7ff ffa7 	bl	800cea8 <sbrk_aligned>
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d037      	beq.n	800cfce <_malloc_r+0xe6>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	442b      	add	r3, r5
 800cf62:	6023      	str	r3, [r4, #0]
 800cf64:	f8d8 3000 	ldr.w	r3, [r8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d038      	beq.n	800cfde <_malloc_r+0xf6>
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	42a2      	cmp	r2, r4
 800cf70:	d12b      	bne.n	800cfca <_malloc_r+0xe2>
 800cf72:	2200      	movs	r2, #0
 800cf74:	605a      	str	r2, [r3, #4]
 800cf76:	e00f      	b.n	800cf98 <_malloc_r+0xb0>
 800cf78:	6822      	ldr	r2, [r4, #0]
 800cf7a:	1b52      	subs	r2, r2, r5
 800cf7c:	d41f      	bmi.n	800cfbe <_malloc_r+0xd6>
 800cf7e:	2a0b      	cmp	r2, #11
 800cf80:	d917      	bls.n	800cfb2 <_malloc_r+0xca>
 800cf82:	1961      	adds	r1, r4, r5
 800cf84:	42a3      	cmp	r3, r4
 800cf86:	6025      	str	r5, [r4, #0]
 800cf88:	bf18      	it	ne
 800cf8a:	6059      	strne	r1, [r3, #4]
 800cf8c:	6863      	ldr	r3, [r4, #4]
 800cf8e:	bf08      	it	eq
 800cf90:	f8c8 1000 	streq.w	r1, [r8]
 800cf94:	5162      	str	r2, [r4, r5]
 800cf96:	604b      	str	r3, [r1, #4]
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f104 060b 	add.w	r6, r4, #11
 800cf9e:	f000 f829 	bl	800cff4 <__malloc_unlock>
 800cfa2:	f026 0607 	bic.w	r6, r6, #7
 800cfa6:	1d23      	adds	r3, r4, #4
 800cfa8:	1af2      	subs	r2, r6, r3
 800cfaa:	d0ae      	beq.n	800cf0a <_malloc_r+0x22>
 800cfac:	1b9b      	subs	r3, r3, r6
 800cfae:	50a3      	str	r3, [r4, r2]
 800cfb0:	e7ab      	b.n	800cf0a <_malloc_r+0x22>
 800cfb2:	42a3      	cmp	r3, r4
 800cfb4:	6862      	ldr	r2, [r4, #4]
 800cfb6:	d1dd      	bne.n	800cf74 <_malloc_r+0x8c>
 800cfb8:	f8c8 2000 	str.w	r2, [r8]
 800cfbc:	e7ec      	b.n	800cf98 <_malloc_r+0xb0>
 800cfbe:	4623      	mov	r3, r4
 800cfc0:	6864      	ldr	r4, [r4, #4]
 800cfc2:	e7ac      	b.n	800cf1e <_malloc_r+0x36>
 800cfc4:	4634      	mov	r4, r6
 800cfc6:	6876      	ldr	r6, [r6, #4]
 800cfc8:	e7b4      	b.n	800cf34 <_malloc_r+0x4c>
 800cfca:	4613      	mov	r3, r2
 800cfcc:	e7cc      	b.n	800cf68 <_malloc_r+0x80>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	603b      	str	r3, [r7, #0]
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	f000 f80e 	bl	800cff4 <__malloc_unlock>
 800cfd8:	e797      	b.n	800cf0a <_malloc_r+0x22>
 800cfda:	6025      	str	r5, [r4, #0]
 800cfdc:	e7dc      	b.n	800cf98 <_malloc_r+0xb0>
 800cfde:	605b      	str	r3, [r3, #4]
 800cfe0:	deff      	udf	#255	; 0xff
 800cfe2:	bf00      	nop
 800cfe4:	200114c4 	.word	0x200114c4

0800cfe8 <__malloc_lock>:
 800cfe8:	4801      	ldr	r0, [pc, #4]	; (800cff0 <__malloc_lock+0x8>)
 800cfea:	f000 b84b 	b.w	800d084 <__retarget_lock_acquire_recursive>
 800cfee:	bf00      	nop
 800cff0:	20011608 	.word	0x20011608

0800cff4 <__malloc_unlock>:
 800cff4:	4801      	ldr	r0, [pc, #4]	; (800cffc <__malloc_unlock+0x8>)
 800cff6:	f000 b846 	b.w	800d086 <__retarget_lock_release_recursive>
 800cffa:	bf00      	nop
 800cffc:	20011608 	.word	0x20011608

0800d000 <memset>:
 800d000:	4402      	add	r2, r0
 800d002:	4603      	mov	r3, r0
 800d004:	4293      	cmp	r3, r2
 800d006:	d100      	bne.n	800d00a <memset+0xa>
 800d008:	4770      	bx	lr
 800d00a:	f803 1b01 	strb.w	r1, [r3], #1
 800d00e:	e7f9      	b.n	800d004 <memset+0x4>

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_sbrk_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f3 fbee 	bl	80007fc <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20011604 	.word	0x20011604

0800d030 <__errno>:
 800d030:	4b01      	ldr	r3, [pc, #4]	; (800d038 <__errno+0x8>)
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	20000104 	.word	0x20000104

0800d03c <__libc_init_array>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	4d0d      	ldr	r5, [pc, #52]	; (800d074 <__libc_init_array+0x38>)
 800d040:	4c0d      	ldr	r4, [pc, #52]	; (800d078 <__libc_init_array+0x3c>)
 800d042:	1b64      	subs	r4, r4, r5
 800d044:	10a4      	asrs	r4, r4, #2
 800d046:	2600      	movs	r6, #0
 800d048:	42a6      	cmp	r6, r4
 800d04a:	d109      	bne.n	800d060 <__libc_init_array+0x24>
 800d04c:	4d0b      	ldr	r5, [pc, #44]	; (800d07c <__libc_init_array+0x40>)
 800d04e:	4c0c      	ldr	r4, [pc, #48]	; (800d080 <__libc_init_array+0x44>)
 800d050:	f000 f89e 	bl	800d190 <_init>
 800d054:	1b64      	subs	r4, r4, r5
 800d056:	10a4      	asrs	r4, r4, #2
 800d058:	2600      	movs	r6, #0
 800d05a:	42a6      	cmp	r6, r4
 800d05c:	d105      	bne.n	800d06a <__libc_init_array+0x2e>
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	f855 3b04 	ldr.w	r3, [r5], #4
 800d064:	4798      	blx	r3
 800d066:	3601      	adds	r6, #1
 800d068:	e7ee      	b.n	800d048 <__libc_init_array+0xc>
 800d06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06e:	4798      	blx	r3
 800d070:	3601      	adds	r6, #1
 800d072:	e7f2      	b.n	800d05a <__libc_init_array+0x1e>
 800d074:	08020308 	.word	0x08020308
 800d078:	08020308 	.word	0x08020308
 800d07c:	08020308 	.word	0x08020308
 800d080:	0802030c 	.word	0x0802030c

0800d084 <__retarget_lock_acquire_recursive>:
 800d084:	4770      	bx	lr

0800d086 <__retarget_lock_release_recursive>:
 800d086:	4770      	bx	lr

0800d088 <memcpy>:
 800d088:	440a      	add	r2, r1
 800d08a:	4291      	cmp	r1, r2
 800d08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d090:	d100      	bne.n	800d094 <memcpy+0xc>
 800d092:	4770      	bx	lr
 800d094:	b510      	push	{r4, lr}
 800d096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d09e:	4291      	cmp	r1, r2
 800d0a0:	d1f9      	bne.n	800d096 <memcpy+0xe>
 800d0a2:	bd10      	pop	{r4, pc}

0800d0a4 <_free_r>:
 800d0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d044      	beq.n	800d134 <_free_r+0x90>
 800d0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ae:	9001      	str	r0, [sp, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f1a1 0404 	sub.w	r4, r1, #4
 800d0b6:	bfb8      	it	lt
 800d0b8:	18e4      	addlt	r4, r4, r3
 800d0ba:	f7ff ff95 	bl	800cfe8 <__malloc_lock>
 800d0be:	4a1e      	ldr	r2, [pc, #120]	; (800d138 <_free_r+0x94>)
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	6813      	ldr	r3, [r2, #0]
 800d0c4:	b933      	cbnz	r3, 800d0d4 <_free_r+0x30>
 800d0c6:	6063      	str	r3, [r4, #4]
 800d0c8:	6014      	str	r4, [r2, #0]
 800d0ca:	b003      	add	sp, #12
 800d0cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0d0:	f7ff bf90 	b.w	800cff4 <__malloc_unlock>
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d908      	bls.n	800d0ea <_free_r+0x46>
 800d0d8:	6825      	ldr	r5, [r4, #0]
 800d0da:	1961      	adds	r1, r4, r5
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	bf01      	itttt	eq
 800d0e0:	6819      	ldreq	r1, [r3, #0]
 800d0e2:	685b      	ldreq	r3, [r3, #4]
 800d0e4:	1949      	addeq	r1, r1, r5
 800d0e6:	6021      	streq	r1, [r4, #0]
 800d0e8:	e7ed      	b.n	800d0c6 <_free_r+0x22>
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	b10b      	cbz	r3, 800d0f4 <_free_r+0x50>
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d9fa      	bls.n	800d0ea <_free_r+0x46>
 800d0f4:	6811      	ldr	r1, [r2, #0]
 800d0f6:	1855      	adds	r5, r2, r1
 800d0f8:	42a5      	cmp	r5, r4
 800d0fa:	d10b      	bne.n	800d114 <_free_r+0x70>
 800d0fc:	6824      	ldr	r4, [r4, #0]
 800d0fe:	4421      	add	r1, r4
 800d100:	1854      	adds	r4, r2, r1
 800d102:	42a3      	cmp	r3, r4
 800d104:	6011      	str	r1, [r2, #0]
 800d106:	d1e0      	bne.n	800d0ca <_free_r+0x26>
 800d108:	681c      	ldr	r4, [r3, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	6053      	str	r3, [r2, #4]
 800d10e:	440c      	add	r4, r1
 800d110:	6014      	str	r4, [r2, #0]
 800d112:	e7da      	b.n	800d0ca <_free_r+0x26>
 800d114:	d902      	bls.n	800d11c <_free_r+0x78>
 800d116:	230c      	movs	r3, #12
 800d118:	6003      	str	r3, [r0, #0]
 800d11a:	e7d6      	b.n	800d0ca <_free_r+0x26>
 800d11c:	6825      	ldr	r5, [r4, #0]
 800d11e:	1961      	adds	r1, r4, r5
 800d120:	428b      	cmp	r3, r1
 800d122:	bf04      	itt	eq
 800d124:	6819      	ldreq	r1, [r3, #0]
 800d126:	685b      	ldreq	r3, [r3, #4]
 800d128:	6063      	str	r3, [r4, #4]
 800d12a:	bf04      	itt	eq
 800d12c:	1949      	addeq	r1, r1, r5
 800d12e:	6021      	streq	r1, [r4, #0]
 800d130:	6054      	str	r4, [r2, #4]
 800d132:	e7ca      	b.n	800d0ca <_free_r+0x26>
 800d134:	b003      	add	sp, #12
 800d136:	bd30      	pop	{r4, r5, pc}
 800d138:	200114c4 	.word	0x200114c4

0800d13c <sqrtf>:
 800d13c:	b508      	push	{r3, lr}
 800d13e:	ed2d 8b02 	vpush	{d8}
 800d142:	ee08 0a10 	vmov	s16, r0
 800d146:	f000 f81b 	bl	800d180 <__ieee754_sqrtf>
 800d14a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d152:	ee07 0a90 	vmov	s15, r0
 800d156:	d60c      	bvs.n	800d172 <sqrtf+0x36>
 800d158:	eddf 8a08 	vldr	s17, [pc, #32]	; 800d17c <sqrtf+0x40>
 800d15c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d164:	d505      	bpl.n	800d172 <sqrtf+0x36>
 800d166:	f7ff ff63 	bl	800d030 <__errno>
 800d16a:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800d16e:	2321      	movs	r3, #33	; 0x21
 800d170:	6003      	str	r3, [r0, #0]
 800d172:	ecbd 8b02 	vpop	{d8}
 800d176:	ee17 0a90 	vmov	r0, s15
 800d17a:	bd08      	pop	{r3, pc}
 800d17c:	00000000 	.word	0x00000000

0800d180 <__ieee754_sqrtf>:
 800d180:	ee07 0a90 	vmov	s15, r0
 800d184:	eef1 7ae7 	vsqrt.f32	s15, s15
 800d188:	ee17 0a90 	vmov	r0, s15
 800d18c:	4770      	bx	lr
	...

0800d190 <_init>:
 800d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d192:	bf00      	nop
 800d194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d196:	bc08      	pop	{r3}
 800d198:	469e      	mov	lr, r3
 800d19a:	4770      	bx	lr

0800d19c <_fini>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr
