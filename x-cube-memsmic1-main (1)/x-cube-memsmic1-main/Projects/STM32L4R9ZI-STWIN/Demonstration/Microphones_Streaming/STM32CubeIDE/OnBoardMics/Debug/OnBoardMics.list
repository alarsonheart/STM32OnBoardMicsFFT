
OnBoardMics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce10  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013160  0800cfd0  0800cfd0  0001cfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020130  08020130  00040120  2**0
                  CONTENTS
  4 .ARM          00000000  08020130  08020130  00040120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08020130  08020130  00040120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020130  08020130  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020138  08020138  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08020140  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  20000120  08020260  00040120  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200016a0  08020260  000416a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a200  00000000  00000000  0004014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00025d3c  00000000  00000000  0006a34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052e3  00000000  00000000  0009008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  00095370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c88c  00000000  00000000  00096ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001788  00000000  00000000  00213530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000412fa  00000000  00000000  00214cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00255fb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab8  00000000  00000000  00256078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004120  00000000  00000000  0025cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000120 	.word	0x20000120
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cfb8 	.word	0x0800cfb8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000124 	.word	0x20000124
 80001fc:	0800cfb8 	.word	0x0800cfb8

08000200 <__aeabi_frsub>:
 8000200:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__addsf3>
 8000206:	bf00      	nop

08000208 <__aeabi_fsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800020c <__addsf3>:
 800020c:	0042      	lsls	r2, r0, #1
 800020e:	bf1f      	itttt	ne
 8000210:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000214:	ea92 0f03 	teqne	r2, r3
 8000218:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800021c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000220:	d06a      	beq.n	80002f8 <__addsf3+0xec>
 8000222:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000226:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022a:	bfc1      	itttt	gt
 800022c:	18d2      	addgt	r2, r2, r3
 800022e:	4041      	eorgt	r1, r0
 8000230:	4048      	eorgt	r0, r1
 8000232:	4041      	eorgt	r1, r0
 8000234:	bfb8      	it	lt
 8000236:	425b      	neglt	r3, r3
 8000238:	2b19      	cmp	r3, #25
 800023a:	bf88      	it	hi
 800023c:	4770      	bxhi	lr
 800023e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000246:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800024a:	bf18      	it	ne
 800024c:	4240      	negne	r0, r0
 800024e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000252:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000256:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4249      	negne	r1, r1
 800025e:	ea92 0f03 	teq	r2, r3
 8000262:	d03f      	beq.n	80002e4 <__addsf3+0xd8>
 8000264:	f1a2 0201 	sub.w	r2, r2, #1
 8000268:	fa41 fc03 	asr.w	ip, r1, r3
 800026c:	eb10 000c 	adds.w	r0, r0, ip
 8000270:	f1c3 0320 	rsb	r3, r3, #32
 8000274:	fa01 f103 	lsl.w	r1, r1, r3
 8000278:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800027c:	d502      	bpl.n	8000284 <__addsf3+0x78>
 800027e:	4249      	negs	r1, r1
 8000280:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000288:	d313      	bcc.n	80002b2 <__addsf3+0xa6>
 800028a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028e:	d306      	bcc.n	800029e <__addsf3+0x92>
 8000290:	0840      	lsrs	r0, r0, #1
 8000292:	ea4f 0131 	mov.w	r1, r1, rrx
 8000296:	f102 0201 	add.w	r2, r2, #1
 800029a:	2afe      	cmp	r2, #254	; 0xfe
 800029c:	d251      	bcs.n	8000342 <__addsf3+0x136>
 800029e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	ea40 0003 	orr.w	r0, r0, r3
 80002b0:	4770      	bx	lr
 80002b2:	0049      	lsls	r1, r1, #1
 80002b4:	eb40 0000 	adc.w	r0, r0, r0
 80002b8:	3a01      	subs	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c0:	d2ed      	bcs.n	800029e <__addsf3+0x92>
 80002c2:	fab0 fc80 	clz	ip, r0
 80002c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ca:	ebb2 020c 	subs.w	r2, r2, ip
 80002ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d2:	bfaa      	itet	ge
 80002d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002d8:	4252      	neglt	r2, r2
 80002da:	4318      	orrge	r0, r3
 80002dc:	bfbc      	itt	lt
 80002de:	40d0      	lsrlt	r0, r2
 80002e0:	4318      	orrlt	r0, r3
 80002e2:	4770      	bx	lr
 80002e4:	f092 0f00 	teq	r2, #0
 80002e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002ec:	bf06      	itte	eq
 80002ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002f2:	3201      	addeq	r2, #1
 80002f4:	3b01      	subne	r3, #1
 80002f6:	e7b5      	b.n	8000264 <__addsf3+0x58>
 80002f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000300:	bf18      	it	ne
 8000302:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000306:	d021      	beq.n	800034c <__addsf3+0x140>
 8000308:	ea92 0f03 	teq	r2, r3
 800030c:	d004      	beq.n	8000318 <__addsf3+0x10c>
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	bf08      	it	eq
 8000314:	4608      	moveq	r0, r1
 8000316:	4770      	bx	lr
 8000318:	ea90 0f01 	teq	r0, r1
 800031c:	bf1c      	itt	ne
 800031e:	2000      	movne	r0, #0
 8000320:	4770      	bxne	lr
 8000322:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000326:	d104      	bne.n	8000332 <__addsf3+0x126>
 8000328:	0040      	lsls	r0, r0, #1
 800032a:	bf28      	it	cs
 800032c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000330:	4770      	bx	lr
 8000332:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000336:	bf3c      	itt	cc
 8000338:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800033c:	4770      	bxcc	lr
 800033e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000342:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000346:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034a:	4770      	bx	lr
 800034c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000350:	bf16      	itet	ne
 8000352:	4608      	movne	r0, r1
 8000354:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000358:	4601      	movne	r1, r0
 800035a:	0242      	lsls	r2, r0, #9
 800035c:	bf06      	itte	eq
 800035e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000362:	ea90 0f01 	teqeq	r0, r1
 8000366:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800036a:	4770      	bx	lr

0800036c <__aeabi_ui2f>:
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e004      	b.n	800037c <__aeabi_i2f+0x8>
 8000372:	bf00      	nop

08000374 <__aeabi_i2f>:
 8000374:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000378:	bf48      	it	mi
 800037a:	4240      	negmi	r0, r0
 800037c:	ea5f 0c00 	movs.w	ip, r0
 8000380:	bf08      	it	eq
 8000382:	4770      	bxeq	lr
 8000384:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000388:	4601      	mov	r1, r0
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	e01c      	b.n	80003ca <__aeabi_l2f+0x2a>

08000390 <__aeabi_ul2f>:
 8000390:	ea50 0201 	orrs.w	r2, r0, r1
 8000394:	bf08      	it	eq
 8000396:	4770      	bxeq	lr
 8000398:	f04f 0300 	mov.w	r3, #0
 800039c:	e00a      	b.n	80003b4 <__aeabi_l2f+0x14>
 800039e:	bf00      	nop

080003a0 <__aeabi_l2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003ac:	d502      	bpl.n	80003b4 <__aeabi_l2f+0x14>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	ea5f 0c01 	movs.w	ip, r1
 80003b8:	bf02      	ittt	eq
 80003ba:	4684      	moveq	ip, r0
 80003bc:	4601      	moveq	r1, r0
 80003be:	2000      	moveq	r0, #0
 80003c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003c4:	bf08      	it	eq
 80003c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ce:	fabc f28c 	clz	r2, ip
 80003d2:	3a08      	subs	r2, #8
 80003d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003d8:	db10      	blt.n	80003fc <__aeabi_l2f+0x5c>
 80003da:	fa01 fc02 	lsl.w	ip, r1, r2
 80003de:	4463      	add	r3, ip
 80003e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	fa20 f202 	lsr.w	r2, r0, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	f020 0001 	biceq.w	r0, r0, #1
 80003fa:	4770      	bx	lr
 80003fc:	f102 0220 	add.w	r2, r2, #32
 8000400:	fa01 fc02 	lsl.w	ip, r1, r2
 8000404:	f1c2 0220 	rsb	r2, r2, #32
 8000408:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800040c:	fa21 f202 	lsr.w	r2, r1, r2
 8000410:	eb43 0002 	adc.w	r0, r3, r2
 8000414:	bf08      	it	eq
 8000416:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041a:	4770      	bx	lr

0800041c <__aeabi_fmul>:
 800041c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000424:	bf1e      	ittt	ne
 8000426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800042a:	ea92 0f0c 	teqne	r2, ip
 800042e:	ea93 0f0c 	teqne	r3, ip
 8000432:	d06f      	beq.n	8000514 <__aeabi_fmul+0xf8>
 8000434:	441a      	add	r2, r3
 8000436:	ea80 0c01 	eor.w	ip, r0, r1
 800043a:	0240      	lsls	r0, r0, #9
 800043c:	bf18      	it	ne
 800043e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000442:	d01e      	beq.n	8000482 <__aeabi_fmul+0x66>
 8000444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000448:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800044c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000450:	fba0 3101 	umull	r3, r1, r0, r1
 8000454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000458:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800045c:	bf3e      	ittt	cc
 800045e:	0049      	lslcc	r1, r1, #1
 8000460:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000464:	005b      	lslcc	r3, r3, #1
 8000466:	ea40 0001 	orr.w	r0, r0, r1
 800046a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800046e:	2afd      	cmp	r2, #253	; 0xfd
 8000470:	d81d      	bhi.n	80004ae <__aeabi_fmul+0x92>
 8000472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000476:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800047a:	bf08      	it	eq
 800047c:	f020 0001 	biceq.w	r0, r0, #1
 8000480:	4770      	bx	lr
 8000482:	f090 0f00 	teq	r0, #0
 8000486:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800048a:	bf08      	it	eq
 800048c:	0249      	lsleq	r1, r1, #9
 800048e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000492:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000496:	3a7f      	subs	r2, #127	; 0x7f
 8000498:	bfc2      	ittt	gt
 800049a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800049e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004a2:	4770      	bxgt	lr
 80004a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	3a01      	subs	r2, #1
 80004ae:	dc5d      	bgt.n	800056c <__aeabi_fmul+0x150>
 80004b0:	f112 0f19 	cmn.w	r2, #25
 80004b4:	bfdc      	itt	le
 80004b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ba:	4770      	bxle	lr
 80004bc:	f1c2 0200 	rsb	r2, r2, #0
 80004c0:	0041      	lsls	r1, r0, #1
 80004c2:	fa21 f102 	lsr.w	r1, r1, r2
 80004c6:	f1c2 0220 	rsb	r2, r2, #32
 80004ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80004d2:	f140 0000 	adc.w	r0, r0, #0
 80004d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004da:	bf08      	it	eq
 80004dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e0:	4770      	bx	lr
 80004e2:	f092 0f00 	teq	r2, #0
 80004e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ea:	bf02      	ittt	eq
 80004ec:	0040      	lsleq	r0, r0, #1
 80004ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004f2:	3a01      	subeq	r2, #1
 80004f4:	d0f9      	beq.n	80004ea <__aeabi_fmul+0xce>
 80004f6:	ea40 000c 	orr.w	r0, r0, ip
 80004fa:	f093 0f00 	teq	r3, #0
 80004fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000502:	bf02      	ittt	eq
 8000504:	0049      	lsleq	r1, r1, #1
 8000506:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800050a:	3b01      	subeq	r3, #1
 800050c:	d0f9      	beq.n	8000502 <__aeabi_fmul+0xe6>
 800050e:	ea41 010c 	orr.w	r1, r1, ip
 8000512:	e78f      	b.n	8000434 <__aeabi_fmul+0x18>
 8000514:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000518:	ea92 0f0c 	teq	r2, ip
 800051c:	bf18      	it	ne
 800051e:	ea93 0f0c 	teqne	r3, ip
 8000522:	d00a      	beq.n	800053a <__aeabi_fmul+0x11e>
 8000524:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000528:	bf18      	it	ne
 800052a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800052e:	d1d8      	bne.n	80004e2 <__aeabi_fmul+0xc6>
 8000530:	ea80 0001 	eor.w	r0, r0, r1
 8000534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f090 0f00 	teq	r0, #0
 800053e:	bf17      	itett	ne
 8000540:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000544:	4608      	moveq	r0, r1
 8000546:	f091 0f00 	teqne	r1, #0
 800054a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800054e:	d014      	beq.n	800057a <__aeabi_fmul+0x15e>
 8000550:	ea92 0f0c 	teq	r2, ip
 8000554:	d101      	bne.n	800055a <__aeabi_fmul+0x13e>
 8000556:	0242      	lsls	r2, r0, #9
 8000558:	d10f      	bne.n	800057a <__aeabi_fmul+0x15e>
 800055a:	ea93 0f0c 	teq	r3, ip
 800055e:	d103      	bne.n	8000568 <__aeabi_fmul+0x14c>
 8000560:	024b      	lsls	r3, r1, #9
 8000562:	bf18      	it	ne
 8000564:	4608      	movne	r0, r1
 8000566:	d108      	bne.n	800057a <__aeabi_fmul+0x15e>
 8000568:	ea80 0001 	eor.w	r0, r0, r1
 800056c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000578:	4770      	bx	lr
 800057a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800057e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000582:	4770      	bx	lr

08000584 <__aeabi_fdiv>:
 8000584:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000588:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800058c:	bf1e      	ittt	ne
 800058e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000592:	ea92 0f0c 	teqne	r2, ip
 8000596:	ea93 0f0c 	teqne	r3, ip
 800059a:	d069      	beq.n	8000670 <__aeabi_fdiv+0xec>
 800059c:	eba2 0203 	sub.w	r2, r2, r3
 80005a0:	ea80 0c01 	eor.w	ip, r0, r1
 80005a4:	0249      	lsls	r1, r1, #9
 80005a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005aa:	d037      	beq.n	800061c <__aeabi_fdiv+0x98>
 80005ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005bc:	428b      	cmp	r3, r1
 80005be:	bf38      	it	cc
 80005c0:	005b      	lslcc	r3, r3, #1
 80005c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ca:	428b      	cmp	r3, r1
 80005cc:	bf24      	itt	cs
 80005ce:	1a5b      	subcs	r3, r3, r1
 80005d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005d8:	bf24      	itt	cs
 80005da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005e6:	bf24      	itt	cs
 80005e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005f4:	bf24      	itt	cs
 80005f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	bf18      	it	ne
 8000602:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000606:	d1e0      	bne.n	80005ca <__aeabi_fdiv+0x46>
 8000608:	2afd      	cmp	r2, #253	; 0xfd
 800060a:	f63f af50 	bhi.w	80004ae <__aeabi_fmul+0x92>
 800060e:	428b      	cmp	r3, r1
 8000610:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000614:	bf08      	it	eq
 8000616:	f020 0001 	biceq.w	r0, r0, #1
 800061a:	4770      	bx	lr
 800061c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000620:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000624:	327f      	adds	r2, #127	; 0x7f
 8000626:	bfc2      	ittt	gt
 8000628:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800062c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000630:	4770      	bxgt	lr
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	3a01      	subs	r2, #1
 800063c:	e737      	b.n	80004ae <__aeabi_fmul+0x92>
 800063e:	f092 0f00 	teq	r2, #0
 8000642:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000646:	bf02      	ittt	eq
 8000648:	0040      	lsleq	r0, r0, #1
 800064a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800064e:	3a01      	subeq	r2, #1
 8000650:	d0f9      	beq.n	8000646 <__aeabi_fdiv+0xc2>
 8000652:	ea40 000c 	orr.w	r0, r0, ip
 8000656:	f093 0f00 	teq	r3, #0
 800065a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800065e:	bf02      	ittt	eq
 8000660:	0049      	lsleq	r1, r1, #1
 8000662:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000666:	3b01      	subeq	r3, #1
 8000668:	d0f9      	beq.n	800065e <__aeabi_fdiv+0xda>
 800066a:	ea41 010c 	orr.w	r1, r1, ip
 800066e:	e795      	b.n	800059c <__aeabi_fdiv+0x18>
 8000670:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000674:	ea92 0f0c 	teq	r2, ip
 8000678:	d108      	bne.n	800068c <__aeabi_fdiv+0x108>
 800067a:	0242      	lsls	r2, r0, #9
 800067c:	f47f af7d 	bne.w	800057a <__aeabi_fmul+0x15e>
 8000680:	ea93 0f0c 	teq	r3, ip
 8000684:	f47f af70 	bne.w	8000568 <__aeabi_fmul+0x14c>
 8000688:	4608      	mov	r0, r1
 800068a:	e776      	b.n	800057a <__aeabi_fmul+0x15e>
 800068c:	ea93 0f0c 	teq	r3, ip
 8000690:	d104      	bne.n	800069c <__aeabi_fdiv+0x118>
 8000692:	024b      	lsls	r3, r1, #9
 8000694:	f43f af4c 	beq.w	8000530 <__aeabi_fmul+0x114>
 8000698:	4608      	mov	r0, r1
 800069a:	e76e      	b.n	800057a <__aeabi_fmul+0x15e>
 800069c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006a0:	bf18      	it	ne
 80006a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006a6:	d1ca      	bne.n	800063e <__aeabi_fdiv+0xba>
 80006a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006ac:	f47f af5c 	bne.w	8000568 <__aeabi_fmul+0x14c>
 80006b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006b4:	f47f af3c 	bne.w	8000530 <__aeabi_fmul+0x114>
 80006b8:	e75f      	b.n	800057a <__aeabi_fmul+0x15e>
 80006ba:	bf00      	nop

080006bc <__gesf2>:
 80006bc:	f04f 3cff 	mov.w	ip, #4294967295
 80006c0:	e006      	b.n	80006d0 <__cmpsf2+0x4>
 80006c2:	bf00      	nop

080006c4 <__lesf2>:
 80006c4:	f04f 0c01 	mov.w	ip, #1
 80006c8:	e002      	b.n	80006d0 <__cmpsf2+0x4>
 80006ca:	bf00      	nop

080006cc <__cmpsf2>:
 80006cc:	f04f 0c01 	mov.w	ip, #1
 80006d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e0:	bf18      	it	ne
 80006e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006e6:	d011      	beq.n	800070c <__cmpsf2+0x40>
 80006e8:	b001      	add	sp, #4
 80006ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006ee:	bf18      	it	ne
 80006f0:	ea90 0f01 	teqne	r0, r1
 80006f4:	bf58      	it	pl
 80006f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80006fa:	bf88      	it	hi
 80006fc:	17c8      	asrhi	r0, r1, #31
 80006fe:	bf38      	it	cc
 8000700:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000704:	bf18      	it	ne
 8000706:	f040 0001 	orrne.w	r0, r0, #1
 800070a:	4770      	bx	lr
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	d102      	bne.n	8000718 <__cmpsf2+0x4c>
 8000712:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000716:	d105      	bne.n	8000724 <__cmpsf2+0x58>
 8000718:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800071c:	d1e4      	bne.n	80006e8 <__cmpsf2+0x1c>
 800071e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000722:	d0e1      	beq.n	80006e8 <__cmpsf2+0x1c>
 8000724:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <__aeabi_cfrcmple>:
 800072c:	4684      	mov	ip, r0
 800072e:	4608      	mov	r0, r1
 8000730:	4661      	mov	r1, ip
 8000732:	e7ff      	b.n	8000734 <__aeabi_cfcmpeq>

08000734 <__aeabi_cfcmpeq>:
 8000734:	b50f      	push	{r0, r1, r2, r3, lr}
 8000736:	f7ff ffc9 	bl	80006cc <__cmpsf2>
 800073a:	2800      	cmp	r0, #0
 800073c:	bf48      	it	mi
 800073e:	f110 0f00 	cmnmi.w	r0, #0
 8000742:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000744 <__aeabi_fcmpeq>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff fff4 	bl	8000734 <__aeabi_cfcmpeq>
 800074c:	bf0c      	ite	eq
 800074e:	2001      	moveq	r0, #1
 8000750:	2000      	movne	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_fcmplt>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff ffea 	bl	8000734 <__aeabi_cfcmpeq>
 8000760:	bf34      	ite	cc
 8000762:	2001      	movcc	r0, #1
 8000764:	2000      	movcs	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_fcmple>:
 800076c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000770:	f7ff ffe0 	bl	8000734 <__aeabi_cfcmpeq>
 8000774:	bf94      	ite	ls
 8000776:	2001      	movls	r0, #1
 8000778:	2000      	movhi	r0, #0
 800077a:	f85d fb08 	ldr.w	pc, [sp], #8
 800077e:	bf00      	nop

08000780 <__aeabi_fcmpge>:
 8000780:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000784:	f7ff ffd2 	bl	800072c <__aeabi_cfrcmple>
 8000788:	bf94      	ite	ls
 800078a:	2001      	movls	r0, #1
 800078c:	2000      	movhi	r0, #0
 800078e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000792:	bf00      	nop

08000794 <__aeabi_fcmpgt>:
 8000794:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000798:	f7ff ffc8 	bl	800072c <__aeabi_cfrcmple>
 800079c:	bf34      	ite	cc
 800079e:	2001      	movcc	r0, #1
 80007a0:	2000      	movcs	r0, #0
 80007a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a6:	bf00      	nop

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ae:	e003      	b.n	80007b8 <LoopCopyDataInit>

080007b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007b6:	3104      	adds	r1, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80007bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007c0:	d3f6      	bcc.n	80007b0 <CopyDataInit>
	ldr	r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c4:	e002      	b.n	80007cc <LoopFillZerobss>

080007c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c8:	f842 3b04 	str.w	r3, [r2], #4

080007cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <LoopForever+0x16>)
	cmp	r2, r3
 80007ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007d0:	d3f9      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f001 feb1 	bl	8002538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f00c fa7d 	bl	800ccd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f000 f96b 	bl	8000ab4 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80007e4:	08020140 	.word	0x08020140
	ldr	r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007ec:	20000120 	.word	0x20000120
	ldr	r2, =_sbss
 80007f0:	20000120 	.word	0x20000120
	ldr	r3, = _ebss
 80007f4:	200016a0 	.word	0x200016a0

080007f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_IRQHandler>
	...

080007fc <_sbrk>:
  }
  return len;
}

caddr_t _sbrk(int incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x50>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x16>
  {
    heap_end = &end;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <_sbrk+0x50>)
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <_sbrk+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  prev_heap_end = heap_end;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <_sbrk+0x50>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	60fb      	str	r3, [r7, #12]
  if (heap_end + incr > stack_ptr)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <_sbrk+0x50>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	466a      	mov	r2, sp
 8000822:	4293      	cmp	r3, r2
 8000824:	d907      	bls.n	8000836 <_sbrk+0x3a>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8000826:	f00c fa4f 	bl	800ccc8 <__errno>
 800082a:	4603      	mov	r3, r0
 800082c:	220c      	movs	r2, #12
 800082e:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	e006      	b.n	8000844 <_sbrk+0x48>
  }

  heap_end += incr;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <_sbrk+0x50>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <_sbrk+0x50>)
 8000840:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000140 	.word	0x20000140
 8000850:	200016a0 	.word	0x200016a0

08000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  */



void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  AudioProcess();
 800085c:	f000 f814 	bl	8000888 <AudioProcess>
  BSP_LED_Off(LED1);
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fe65 	bl	8001530 <BSP_LED_Off>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Transfer Complete user callback, called by BSP functions.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  AudioProcess();
 8000876:	f000 f807 	bl	8000888 <AudioProcess>
  BSP_LED_On(LED1);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fe3e 	bl	80014fc <BSP_LED_On>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <AudioProcess>:
  * @param  none
  * @retval None
  */

void AudioProcess(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
	// Copy the required samples from PCM_Buffer to fftInput (size 64)
	  for (int i = 0; i < FFT_SIZE; i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
 8000892:	e01b      	b.n	80008cc <AudioProcess+0x44>
	    if (i < 64) {
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b3f      	cmp	r3, #63	; 0x3f
 8000898:	dc0e      	bgt.n	80008b8 <AudioProcess+0x30>
	      fftInput[i] = (float32_t)PCM_Buffer[i]; // Convert the PCM_Buffer data to float for the FFT
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <AudioProcess+0x7c>)
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <AudioProcess+0x80>)
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	edc3 7a00 	vstr	s15, [r3]
 80008b6:	e006      	b.n	80008c6 <AudioProcess+0x3e>
	    } else {
	      fftInput[i] = 0.0f; // Zero-pad the remaining elements of fftInput
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <AudioProcess+0x80>)
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < FFT_SIZE; i++) {
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	2b3f      	cmp	r3, #63	; 0x3f
 80008d0:	dde0      	ble.n	8000894 <AudioProcess+0xc>
	    }
	  }

	  // Perform the FFT on the fftInput buffer
	  arm_rfft_fast_instance_f32 fft;
	  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00a fd7a 	bl	800b3d0 <arm_rfft_fast_init_f32>
	  arm_rfft_fast_f32(&fft, fftInput, fftOutput, 0);
 80008dc:	1d38      	adds	r0, r7, #4
 80008de:	2300      	movs	r3, #0
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <AudioProcess+0x84>)
 80008e2:	4909      	ldr	r1, [pc, #36]	; (8000908 <AudioProcess+0x80>)
 80008e4:	f00a feca 	bl	800b67c <arm_rfft_fast_f32>
	  arm_cmplx_mag_f32(fftOutput, fftMagnitude, FFT_SIZE / 2);
 80008e8:	2220      	movs	r2, #32
 80008ea:	4909      	ldr	r1, [pc, #36]	; (8000910 <AudioProcess+0x88>)
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <AudioProcess+0x84>)
 80008ee:	f00b fc6f 	bl	800c1d0 <arm_cmplx_mag_f32>


	  // Send the processed FFT data to USB
	  Send_Audio_to_USB((int16_t *)fftOutput, FFT_SIZE);
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <AudioProcess+0x84>)
 80008f6:	f000 fa11 	bl	8000d1c <Send_Audio_to_USB>
//  Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY / 1000)*AUDIO_IN_CHANNELS * N_MS_PER_INTERRUPT);
}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200003d8 	.word	0x200003d8
 8000908:	20000144 	.word	0x20000144
 800090c:	20000244 	.word	0x20000244
 8000910:	20000344 	.word	0x20000344

08000914 <Init_Acquisition_Peripherals>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Init_Acquisition_Peripherals(uint32_t AudioFreq, uint32_t Device, uint32_t ChnlNbr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  MicParams.BitsPerSample = 16;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <Init_Acquisition_Peripherals+0x44>)
 8000922:	2210      	movs	r2, #16
 8000924:	609a      	str	r2, [r3, #8]
  MicParams.ChannelsNbr = ChnlNbr;
 8000926:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <Init_Acquisition_Peripherals+0x44>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60d3      	str	r3, [r2, #12]
  MicParams.Device = Device;
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <Init_Acquisition_Peripherals+0x44>)
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	6013      	str	r3, [r2, #0]
  MicParams.SampleRate = AudioFreq;
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <Init_Acquisition_Peripherals+0x44>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6053      	str	r3, [r2, #4]
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <Init_Acquisition_Peripherals+0x44>)
 800093a:	2240      	movs	r2, #64	; 0x40
 800093c:	611a      	str	r2, [r3, #16]

  if (BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 800093e:	4906      	ldr	r1, [pc, #24]	; (8000958 <Init_Acquisition_Peripherals+0x44>)
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fe0f 	bl	8001564 <BSP_AUDIO_IN_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <Init_Acquisition_Peripherals+0x3c>
  {
    Error_Handler();
 800094c:	f000 f816 	bl	800097c <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200003c4 	.word	0x200003c4

0800095c <Start_Acquisition>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Start_Acquisition(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  if (BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE) != BSP_ERROR_NONE)
 8000960:	2260      	movs	r2, #96	; 0x60
 8000962:	4905      	ldr	r1, [pc, #20]	; (8000978 <Start_Acquisition+0x1c>)
 8000964:	2001      	movs	r0, #1
 8000966:	f001 f839 	bl	80019dc <BSP_AUDIO_IN_Record>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <Start_Acquisition+0x18>
  {
    Error_Handler();
 8000970:	f000 f804 	bl	800097c <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200003d8 	.word	0x200003d8

0800097c <Error_Handler>:



void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  while (1);
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x4>
	...

08000984 <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0be      	sub	sp, #248	; 0xf8
 8000988:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800098a:	2000      	movs	r0, #0
 800098c:	f005 fb1c 	bl	8005fc8 <HAL_PWREx_ControlVoltageScaling>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }
  /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8000990:	f005 faea 	bl	8005f68 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000994:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <SystemClock_Config+0x124>)
 8000996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800099a:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <SystemClock_Config+0x124>)
 800099c:	f023 0318 	bic.w	r3, r3, #24
 80009a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 80009a4:	2335      	movs	r3, #53	; 0x35
 80009a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                                     | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009c4:	23b0      	movs	r3, #176	; 0xb0
 80009c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d0:	2303      	movs	r3, #3
 80009d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009e2:	233c      	movs	r3, #60	; 0x3c
 80009e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 fb96 	bl	8006130 <HAL_RCC_OscConfig>
//    _Error_Handler(__FILE__, __LINE__);
  }

  /**Initializes the CPU, AHB and APB buses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a26:	2105      	movs	r1, #5
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 ffab 	bl	8006984 <HAL_RCC_ClockConfig>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_DFSDM1
 8000a2e:	f44f 33b4 	mov.w	r3, #92160	; 0x16800
 8000a32:	607b      	str	r3, [r7, #4]
                                       | RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a46:	2300      	movs	r3, #0
 8000a48:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8000a56:	2319      	movs	r3, #25
 8000a58:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK | RCC_PLLSAI1_SAI1CLK;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <SystemClock_Config+0x128>)
 8000a64:	623b      	str	r3, [r7, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 fa41 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
  {
//    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a74:	2000      	movs	r0, #0
 8000a76:	f006 f8b1 	bl	8006bdc <HAL_RCC_MCOConfig>

  /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000a7a:	f006 f96d 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <SystemClock_Config+0x12c>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	099b      	lsrs	r3, r3, #6
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fffc 	bl	8003a86 <HAL_SYSTICK_Config>

  /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f003 f806 	bl	8003aa0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f002 ffc9 	bl	8003a32 <HAL_NVIC_SetPriority>
}
 8000aa0:	bf00      	nop
 8000aa2:	37f8      	adds	r7, #248	; 0xf8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	01010000 	.word	0x01010000
 8000ab0:	10624dd3 	.word	0x10624dd3

08000ab4 <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000aba:	f001 fd4f 	bl	800255c <HAL_Init>

  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <main+0x80>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <main+0x80>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <main+0x80>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  /* enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 8000ad6:	f005 fb1b 	bl	8006110 <HAL_PWREx_EnableVddUSB>

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f7ff ff53 	bl	8000984 <SystemClock_Config>

  BSP_LED_Init(LED2);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 fcca 	bl	8001478 <BSP_LED_Init>
  BSP_LED_Off(LED2);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 fd23 	bl	8001530 <BSP_LED_Off>
  BSP_LED_Init(LED1);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 fcc4 	bl	8001478 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fd1d 	bl	8001530 <BSP_LED_Off>

  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 8000af6:	2202      	movs	r2, #2
 8000af8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000afc:	480e      	ldr	r0, [pc, #56]	; (8000b38 <main+0x84>)
 8000afe:	f008 fddf 	bl	80096c0 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	490d      	ldr	r1, [pc, #52]	; (8000b3c <main+0x88>)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <main+0x84>)
 8000b08:	f009 f8fe 	bl	8009d08 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <main+0x8c>)
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <main+0x84>)
 8000b10:	f009 f92a 	bl	8009d68 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 8000b14:	490b      	ldr	r1, [pc, #44]	; (8000b44 <main+0x90>)
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <main+0x84>)
 8000b18:	f008 fdbe 	bl	8009698 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <main+0x84>)
 8000b1e:	f009 f959 	bl	8009dd4 <USBD_Start>

  /* Start audio acquisition and streaming */

#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, ACTIVE_MICROPHONES_MASK, AUDIO_IN_CHANNELS);
 8000b22:	2202      	movs	r2, #2
 8000b24:	2103      	movs	r1, #3
 8000b26:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000b2a:	f7ff fef3 	bl	8000914 <Init_Acquisition_Peripherals>
  Start_Acquisition();
 8000b2e:	f7ff ff15 	bl	800095c <Start_Acquisition>
//  HAL_Delay(5000);
#endif

  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x7e>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	20000498 	.word	0x20000498
 8000b3c:	20000024 	.word	0x20000024
 8000b40:	20000074 	.word	0x20000074
 8000b44:	20000000 	.word	0x20000000

08000b48 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b8a:	f001 fd4b 	bl	8002624 <HAL_IncTick>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <OTG_FS_IRQHandler+0x10>)
 8000b9a:	f004 fa82 	bl	80050a2 <HAL_PCD_IRQHandler>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000868 	.word	0x20000868

08000ba8 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(ADC1_Handle.DMA_Handle);
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <DMA1_Channel1_IRQHandler+0x14>)
 8000bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fe2a 	bl	800480a <HAL_DMA_IRQHandler>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000dc8 	.word	0x20000dc8

08000bc0 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AMic_OnBoard_DfsdmFilter.hdmaReg);
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <DMA1_Channel4_IRQHandler+0x14>)
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fe1e 	bl	800480a <HAL_DMA_IRQHandler>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000ecc 	.word	0x20000ecc

08000bd8 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&DMic_OnBoard_Dma);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel7_IRQHandler+0x10>)
 8000bde:	f003 fe14 	bl	800480a <HAL_DMA_IRQHandler>

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200011c4 	.word	0x200011c4

08000bec <DFSDM1_FLT0_IRQHandler>:

void DFSDM1_FLT0_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  HAL_DFSDM_IRQHandler(&DMic_OnBoard_DfsdmFilter);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DFSDM1_FLT0_IRQHandler+0x10>)
 8000bf2:	f003 f9fb 	bl	8003fec <HAL_DFSDM_IRQHandler>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20001138 	.word	0x20001138

08000c00 <DFSDM1_FLT1_IRQHandler>:

void DFSDM1_FLT1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  HAL_DFSDM_IRQHandler(&AMic_OnBoard_DfsdmFilter);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <DFSDM1_FLT1_IRQHandler+0x10>)
 8000c06:	f003 f9f1 	bl	8003fec <HAL_DFSDM_IRQHandler>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000ecc 	.word	0x20000ecc

08000c14 <Audio_Init>:
  * @param  BitRes: desired bit resolution
  * @param  ChnlNbr: number of channel to be configured
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  MicParams.SampleRate = AudioFreq;
  MicParams.Volume = AUDIO_VOLUME_INPUT;

  return BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
 8000c20:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <Audio_DeInit>:
  * @brief  De-Initializes the AUDIO media low layer.
  * @param  options: Reserved for future use
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_DeInit(uint32_t options)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_DeInit(BSP_AUDIO_IN_INSTANCE);
#else
  return BSP_ERROR_NONE;
 8000c36:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <Audio_Record>:
/**
  * @brief  Start audio recording engine
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Record(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE);
#else
  return BSP_ERROR_NONE;
 8000c48:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <Audio_VolumeCtl>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: Volume level
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_VolumeCtl(int16_t Volume)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
  /* Call low layer volume setting function */
  uint32_t j = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  uint32_t mic_instance;

  /* Find the setting nearest to the desired setting */
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000c62:	e002      	b.n	8000c6a <Audio_VolumeCtl+0x16>
  {
    j++;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c6e:	d817      	bhi.n	8000ca0 <Audio_VolumeCtl+0x4c>
 8000c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c74:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <Audio_VolumeCtl+0x64>)
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c82:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	3101      	adds	r1, #1
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <Audio_VolumeCtl+0x64>)
 8000c90:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8000c94:	1a5b      	subs	r3, r3, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bfb8      	it	lt
 8000c9a:	425b      	neglt	r3, r3
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dce1      	bgt.n	8000c64 <Audio_VolumeCtl+0x10>
  }
  mic_instance = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  /* Now do the volume adjustment */
  return BSP_AUDIO_IN_SetVolume(mic_instance, j);
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	68b8      	ldr	r0, [r7, #8]
 8000ca8:	f000 ff00 	bl	8001aac <BSP_AUDIO_IN_SetVolume>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b25b      	sxtb	r3, r3


}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0800cfd0 	.word	0x0800cfd0

08000cbc <Audio_MuteCtl>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: Command opcode
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_MuteCtl(uint8_t cmd)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <Audio_Stop>:
  * @brief  Stops audio acquisition
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Stop(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return BSP_AUDIO_IN_Stop(1U);
#else
  return BSP_ERROR_NONE;
 8000cd8:	2300      	movs	r3, #0
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <Audio_Pause>:
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */

static int8_t Audio_Pause(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <Audio_Resume>:
  * @brief  Resumes audio acquisition
  * @param  none
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_Resume(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return BSP_ERROR_NONE;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <Audio_CommandMgr>:
  * @param  None
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */

static int8_t Audio_CommandMgr(uint8_t cmd)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <Send_Audio_to_USB>:
  *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
  *       you can pass 16 PCM samples if the function is called each millisecond,
  *       32 samples if called every 2 milliseconds and so on.
  */
void Send_Audio_to_USB(int16_t *audioData, uint16_t PCMSamples)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <Send_Audio_to_USB+0x20>)
 8000d30:	f008 fbde 	bl	80094f0 <USBD_AUDIO_Data_Transfer>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000498 	.word	0x20000498

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;

  if (hpcd->Instance == USB_OTG_FS)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da4:	d131      	bne.n	8000e0a <HAL_PCD_MspInit+0x76>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_PCD_MspInit+0x80>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <HAL_PCD_MspInit+0x80>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_PCD_MspInit+0x80>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000dbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f003 fe63 	bl	8004aa8 <HAL_GPIO_Init>

    /* Enable USB FS Clocks */
    __USB_OTG_FS_CLK_ENABLE();
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_PCD_MspInit+0x80>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_PCD_MspInit+0x80>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_PCD_MspInit+0x80>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	2043      	movs	r0, #67	; 0x43
 8000e00:	f002 fe17 	bl	8003a32 <HAL_NVIC_SetPriority>

    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000e04:	2043      	movs	r0, #67	; 0x43
 8000e06:	f002 fe30 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_PCD_SetupStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4610      	mov	r0, r2
 8000e30:	f009 f81d 	bl	8009e6e <USBD_LL_SetupStage>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_PCD_DataOutStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f009 f857 	bl	8009f18 <USBD_LL_DataOutStage>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_PCD_DataInStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8000e84:	78fa      	ldrb	r2, [r7, #3]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	1a9b      	subs	r3, r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	3348      	adds	r3, #72	; 0x48
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f009 f8f0 	bl	800a07e <USBD_LL_DataInStage>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f009 fa24 	bl	800a302 <USBD_LL_SOF>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_PCD_ResetCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f009 f986 	bl	800a1e2 <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f009 f9d1 	bl	800a286 <USBD_LL_SetSpeed>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_PCD_SuspendCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000efa:	4618      	mov	r0, r3
 8000efc:	f009 f9d3 	bl	800a2a6 <USBD_LL_Suspend>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_PCD_ResumeCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f16:	4618      	mov	r0, r3
 8000f18:	f009 f9db 	bl	800a2d2 <USBD_LL_Resume>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f36:	78fa      	ldrb	r2, [r7, #3]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f009 fa33 	bl	800a3a6 <USBD_LL_IsoOUTIncomplete>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_PCD_ISOINIncompleteCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f009 f9ef 	bl	800a342 <USBD_LL_IsoINIncomplete>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_PCD_ConnectCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 fa45 	bl	800a40a <USBD_LL_DevConnected>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_PCD_DisconnectCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fa42 	bl	800a420 <USBD_LL_DevDisconnected>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <USBD_LL_Init>:
  *         Initialize the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Change Systick prioity */
  NVIC_SetPriority(SysTick_IRQn, 0);
 8000fac:	2100      	movs	r1, #0
 8000fae:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb2:	f7ff fec5 	bl	8000d40 <__NVIC_SetPriority>

  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fbc:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 8;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <USBD_LL_Init+0x8c>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <USBD_LL_Init+0x8c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <USBD_LL_Init+0x8c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <USBD_LL_Init+0x8c>)
 8001000:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <USBD_LL_Init+0x8c>)
 8001006:	f003 fef9 	bl	8004dfc <HAL_PCD_Init>

  HAL_PCD_SetRxFiFo(&hpcd, 0x36);
 800100a:	2136      	movs	r1, #54	; 0x36
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <USBD_LL_Init+0x8c>)
 800100e:	f004 ff6a 	bl	8005ee6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x32);
 8001012:	2232      	movs	r2, #50	; 0x32
 8001014:	2100      	movs	r1, #0
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <USBD_LL_Init+0x8c>)
 8001018:	f004 ff1e 	bl	8005e58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0xC8);
 800101c:	22c8      	movs	r2, #200	; 0xc8
 800101e:	2101      	movs	r1, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <USBD_LL_Init+0x8c>)
 8001022:	f004 ff19 	bl	8005e58 <HAL_PCDEx_SetTxFiFo>


  return USBD_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000868 	.word	0x20000868

08001034 <USBD_LL_Start>:
  *         Start the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fffe 	bl	8005044 <HAL_PCD_Start>
  return USBD_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint Type
  * @param  ep_mps: Endpoint Max Packet Size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	4608      	mov	r0, r1
 800105c:	4611      	mov	r1, r2
 800105e:	461a      	mov	r2, r3
 8001060:	4603      	mov	r3, r0
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	460b      	mov	r3, r1
 8001066:	70bb      	strb	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	883a      	ldrh	r2, [r7, #0]
 8001076:	78f9      	ldrb	r1, [r7, #3]
 8001078:	f004 fbd1 	bl	800581e <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);

  return USBD_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <USBD_LL_CloseEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f004 fc26 	bl	80058ee <HAL_PCD_EP_Close>
  return USBD_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <USBD_LL_FlushEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fd90 	bl	8005be8 <HAL_PCD_EP_Flush>
  return USBD_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <USBD_LL_StallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80010e4:	78fa      	ldrb	r2, [r7, #3]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 fcc5 	bl	8005a78 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fd14 	bl	8005b3c <HAL_PCD_EP_ClrStall>
  return USBD_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <USBD_LL_IsStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001130:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8001132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001136:	2b00      	cmp	r3, #0
 8001138:	da0b      	bge.n	8001152 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	333e      	adds	r3, #62	; 0x3e
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	e00b      	b.n	800116a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001168:	781b      	ldrb	r3, [r3, #0]
  }
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <USBD_LL_SetUSBAddress>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001188:	78fa      	ldrb	r2, [r7, #3]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fb21 	bl	80057d4 <HAL_PCD_SetAddress>
  return USBD_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <USBD_LL_Transmit>:
  * @param  pbuf:pointer to data to be sent
  * @param  size: data size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80011b2:	7af9      	ldrb	r1, [r7, #11]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	f004 fc21 	bl	80059fe <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf:pointer to data to be received
  * @param  size: data size
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	460b      	mov	r3, r1
 80011d4:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80011dc:	7af9      	ldrb	r1, [r7, #11]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	f004 fbce 	bl	8005982 <HAL_PCD_EP_Receive>
  return USBD_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <USBD_AUDIO_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(hUSBDDeviceDesc);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2212      	movs	r2, #18
 8001200:	801a      	strh	r2, [r3, #0]
  return hUSBDDeviceDesc;
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <USBD_AUDIO_DeviceDescriptor+0x20>)
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000040 	.word	0x20000040

08001214 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2204      	movs	r2, #4
 8001224:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <USBD_AUDIO_LangIDStrDescriptor+0x20>)
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000054 	.word	0x20000054

08001238 <USBD_AUDIO_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if (speed == 0)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <USBD_AUDIO_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <USBD_AUDIO_ProductStrDescriptor+0x38>)
 8001250:	f009 ff16 	bl	800b080 <USBD_GetString>
 8001254:	e004      	b.n	8001260 <USBD_AUDIO_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4904      	ldr	r1, [pc, #16]	; (800126c <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <USBD_AUDIO_ProductStrDescriptor+0x3c>)
 800125c:	f009 ff10 	bl	800b080 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <USBD_AUDIO_ProductStrDescriptor+0x34>)
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000c70 	.word	0x20000c70
 8001270:	0800d054 	.word	0x0800d054
 8001274:	0800d078 	.word	0x0800d078

08001278 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4904      	ldr	r1, [pc, #16]	; (8001298 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <USBD_AUDIO_ManufacturerStrDescriptor+0x24>)
 800128a:	f009 fef9 	bl	800b080 <USBD_GetString>
  return USBD_StrDesc;
 800128e:	4b02      	ldr	r3, [pc, #8]	; (8001298 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000c70 	.word	0x20000c70
 800129c:	0800d09c 	.word	0x0800d09c

080012a0 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <USBD_AUDIO_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <USBD_AUDIO_SerialStrDescriptor+0x38>)
 80012b8:	f009 fee2 	bl	800b080 <USBD_GetString>
 80012bc:	e004      	b.n	80012c8 <USBD_AUDIO_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 80012c4:	f009 fedc 	bl	800b080 <USBD_GetString>
  }
  return USBD_StrDesc;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <USBD_AUDIO_SerialStrDescriptor+0x34>)
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000c70 	.word	0x20000c70
 80012d8:	0800d0b0 	.word	0x0800d0b0
 80012dc:	0800d0c0 	.word	0x0800d0c0

080012e0 <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <USBD_AUDIO_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 80012f6:	4808      	ldr	r0, [pc, #32]	; (8001318 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 80012f8:	f009 fec2 	bl	800b080 <USBD_GetString>
 80012fc:	e004      	b.n	8001308 <USBD_AUDIO_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 8001304:	f009 febc 	bl	800b080 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <USBD_AUDIO_ConfigStrDescriptor+0x34>)
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000c70 	.word	0x20000c70
 8001318:	0800d0d0 	.word	0x0800d0d0

0800131c <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if (speed == 0)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <USBD_AUDIO_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 8001334:	f009 fea4 	bl	800b080 <USBD_GetString>
 8001338:	e004      	b.n	8001344 <USBD_AUDIO_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 8001340:	f009 fe9e 	bl	800b080 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000c70 	.word	0x20000c70
 8001354:	0800d0e0 	.word	0x0800d0e0

08001358 <BSP_ADC1_Initialization>:
  * @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
  * @retval BSP_ERROR_NONE in case of success
  * @retval BSP_ERROR_PERIPH_FAILURE in case of failures
  */
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if (ADC_UsedFor == ADC1_NOT_USED)
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <BSP_ADC1_Initialization+0xd0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d152      	bne.n	8001410 <BSP_ADC1_Initialization+0xb8>
  {

    /**Common config */
    ADC1_Handle.Instance = ADC1;
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 800136c:	4a30      	ldr	r2, [pc, #192]	; (8001430 <BSP_ADC1_Initialization+0xd8>)
 800136e:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 800138a:	2204      	movs	r2, #4
 800138c:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 8001390:	2200      	movs	r2, #0
 8001392:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 8001396:	2201      	movs	r2, #1
 8001398:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 800139c:	2201      	movs	r2, #1
 800139e:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	64da      	str	r2, [r3, #76]	; 0x4c

    if (HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 80013ec:	f001 fb4c 	bl	8002a88 <HAL_ADC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80013f6:	f06f 0303 	mvn.w	r3, #3
 80013fa:	e011      	b.n	8001420 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 80013fc:	217f      	movs	r1, #127	; 0x7f
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <BSP_ADC1_Initialization+0xd4>)
 8001400:	f002 f9dc 	bl	80037bc <HAL_ADCEx_Calibration_Start>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800140a:	f06f 0303 	mvn.w	r3, #3
 800140e:	e007      	b.n	8001420 <BSP_ADC1_Initialization+0xc8>
    }
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <BSP_ADC1_Initialization+0xd0>)
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b03      	ldr	r3, [pc, #12]	; (8001428 <BSP_ADC1_Initialization+0xd0>)
 800141c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000e30 	.word	0x20000e30
 800142c:	20000dc8 	.word	0x20000dc8
 8001430:	50040000 	.word	0x50040000

08001434 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hDfsdmFilter ADC handle
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_ADC_MspInit+0x40>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_ADC_MspInit+0x40>)
 8001442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_ADC_MspInit+0x40>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_ADC_MspInit+0x40>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_ADC_MspInit+0x40>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000

08001478 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <BSP_LED_Init+0x2a>
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <BSP_LED_Init+0x78>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <BSP_LED_Init+0x78>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <BSP_LED_Init+0x78>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	e00b      	b.n	80014ba <BSP_LED_Init+0x42>
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <BSP_LED_Init+0x78>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <BSP_LED_Init+0x78>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <BSP_LED_Init+0x78>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <BSP_LED_Init+0x7c>)
 80014be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <BSP_LED_Init+0x80>)
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	f107 0214 	add.w	r2, r7, #20
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fae2 	bl	8004aa8 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	0800d0f8 	.word	0x0800d0f8
 80014f8:	2000005c 	.word	0x2000005c

080014fc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <BSP_LED_On+0x2c>)
 800150a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <BSP_LED_On+0x30>)
 8001512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	f003 fc57 	bl	8004dcc <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000005c 	.word	0x2000005c
 800152c:	0800d0f8 	.word	0x0800d0f8

08001530 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <BSP_LED_Off+0x2c>)
 800153e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <BSP_LED_Off+0x30>)
 8001546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	f003 fc3d 	bl	8004dcc <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000005c 	.word	0x2000005c
 8001560:	0800d0f8 	.word	0x0800d0f8

08001564 <BSP_AUDIO_IN_Init>:
/** @defgroup STWIN_AUDIO_IN_Exported_Functions
  * @{
  */

__weak int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b090      	sub	sp, #64	; 0x40
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d902      	bls.n	800157a <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001574:	f06f 0301 	mvn.w	r3, #1
 8001578:	e21e      	b.n	80019b8 <BSP_AUDIO_IN_Init+0x454>
  }
  else
  {
    /* Store the audio record context */
    AudioInCtx[Instance].Device          = AudioInit->Device;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	49a7      	ldr	r1, [pc, #668]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	204c      	movs	r0, #76	; 0x4c
 8001584:	fb00 f303 	mul.w	r3, r0, r3
 8001588:	440b      	add	r3, r1
 800158a:	3304      	adds	r3, #4
 800158c:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	49a2      	ldr	r1, [pc, #648]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	204c      	movs	r0, #76	; 0x4c
 8001598:	fb00 f303 	mul.w	r3, r0, r3
 800159c:	440b      	add	r3, r1
 800159e:	3310      	adds	r3, #16
 80015a0:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	499d      	ldr	r1, [pc, #628]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	204c      	movs	r0, #76	; 0x4c
 80015ac:	fb00 f303 	mul.w	r3, r0, r3
 80015b0:	440b      	add	r3, r1
 80015b2:	3308      	adds	r3, #8
 80015b4:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4998      	ldr	r1, [pc, #608]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	204c      	movs	r0, #76	; 0x4c
 80015c0:	fb00 f303 	mul.w	r3, r0, r3
 80015c4:	440b      	add	r3, r1
 80015c6:	330c      	adds	r3, #12
 80015c8:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	4993      	ldr	r1, [pc, #588]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	204c      	movs	r0, #76	; 0x4c
 80015d4:	fb00 f303 	mul.w	r3, r0, r3
 80015d8:	440b      	add	r3, r1
 80015da:	3320      	adds	r3, #32
 80015dc:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80015de:	4a8f      	ldr	r2, [pc, #572]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	214c      	movs	r1, #76	; 0x4c
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	3324      	adds	r3, #36	; 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

    if (Instance == 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <BSP_AUDIO_IN_Init+0x98>
    {
      return BSP_ERROR_WRONG_PARAM;
 80015f6:	f06f 0301 	mvn.w	r3, #1
 80015fa:	e1dd      	b.n	80019b8 <BSP_AUDIO_IN_Init+0x454>
    }
    else
    {
      if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80015fc:	4a87      	ldr	r2, [pc, #540]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	214c      	movs	r1, #76	; 0x4c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8181 	beq.w	8001918 <BSP_AUDIO_IN_Init+0x3b4>
      {
        MX_DFSDM_Config dfsdm_config;

        DMic_OnBoard_DfsdmChannel.Instance = DMIC_ONBOARD_CHANNEL;
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <BSP_AUDIO_IN_Init+0x2bc>)
 8001618:	4a82      	ldr	r2, [pc, #520]	; (8001824 <BSP_AUDIO_IN_Init+0x2c0>)
 800161a:	601a      	str	r2, [r3, #0]
        DMic_OnBoard_DfsdmFilter.Instance  = DMIC_ONBOARD_FILTER;
 800161c:	4b82      	ldr	r3, [pc, #520]	; (8001828 <BSP_AUDIO_IN_Init+0x2c4>)
 800161e:	4a83      	ldr	r2, [pc, #524]	; (800182c <BSP_AUDIO_IN_Init+0x2c8>)
 8001620:	601a      	str	r2, [r3, #0]

        DFSDM_FilterMspInit(&DMic_OnBoard_DfsdmFilter);
 8001622:	4881      	ldr	r0, [pc, #516]	; (8001828 <BSP_AUDIO_IN_Init+0x2c4>)
 8001624:	f000 fe7e 	bl	8002324 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&DMic_OnBoard_DfsdmChannel);
 8001628:	487d      	ldr	r0, [pc, #500]	; (8001820 <BSP_AUDIO_IN_Init+0x2bc>)
 800162a:	f000 fe1f 	bl	800226c <DFSDM_ChannelMspInit>

        dfsdm_config.FilterInstance  = DMIC_ONBOARD_FILTER;
 800162e:	4b7f      	ldr	r3, [pc, #508]	; (800182c <BSP_AUDIO_IN_Init+0x2c8>)
 8001630:	60fb      	str	r3, [r7, #12]
        dfsdm_config.ChannelInstance = DMIC_ONBOARD_CHANNEL;
 8001632:	4b7c      	ldr	r3, [pc, #496]	; (8001824 <BSP_AUDIO_IN_Init+0x2c0>)
 8001634:	61fb      	str	r3, [r7, #28]
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;
 800163a:	2301      	movs	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_5;
 800163e:	4b7c      	ldr	r3, [pc, #496]	; (8001830 <BSP_AUDIO_IN_Init+0x2cc>)
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
        dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
        dfsdm_config.DmaMode         = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        dfsdm_config.Activation      = ENABLE;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001652:	2300      	movs	r3, #0
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 8001656:	4a71      	ldr	r2, [pc, #452]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	214c      	movs	r1, #76	; 0x4c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	3308      	adds	r3, #8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800166a:	d02e      	beq.n	80016ca <BSP_AUDIO_IN_Init+0x166>
 800166c:	4a6b      	ldr	r2, [pc, #428]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	214c      	movs	r1, #76	; 0x4c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	3308      	adds	r3, #8
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001680:	4293      	cmp	r3, r2
 8001682:	d01f      	beq.n	80016c4 <BSP_AUDIO_IN_Init+0x160>
 8001684:	4a65      	ldr	r2, [pc, #404]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	214c      	movs	r1, #76	; 0x4c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3308      	adds	r3, #8
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001698:	d011      	beq.n	80016be <BSP_AUDIO_IN_Init+0x15a>
 800169a:	4a60      	ldr	r2, [pc, #384]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	214c      	movs	r1, #76	; 0x4c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	3308      	adds	r3, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f245 6222 	movw	r2, #22050	; 0x5622
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d102      	bne.n	80016b8 <BSP_AUDIO_IN_Init+0x154>
 80016b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016b6:	e00a      	b.n	80016ce <BSP_AUDIO_IN_Init+0x16a>
 80016b8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80016bc:	e007      	b.n	80016ce <BSP_AUDIO_IN_Init+0x16a>
 80016be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016c2:	e004      	b.n	80016ce <BSP_AUDIO_IN_Init+0x16a>
 80016c4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80016c8:	e001      	b.n	80016ce <BSP_AUDIO_IN_Init+0x16a>
 80016ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016ce:	617b      	str	r3, [r7, #20]
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	214c      	movs	r1, #76	; 0x4c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	3308      	adds	r3, #8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80016e4:	d054      	beq.n	8001790 <BSP_AUDIO_IN_Init+0x22c>
 80016e6:	4a4d      	ldr	r2, [pc, #308]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	214c      	movs	r1, #76	; 0x4c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	3308      	adds	r3, #8
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d045      	beq.n	800178a <BSP_AUDIO_IN_Init+0x226>
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	214c      	movs	r1, #76	; 0x4c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3308      	adds	r3, #8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001712:	d038      	beq.n	8001786 <BSP_AUDIO_IN_Init+0x222>
 8001714:	4a41      	ldr	r2, [pc, #260]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	214c      	movs	r1, #76	; 0x4c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3308      	adds	r3, #8
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f245 6222 	movw	r2, #22050	; 0x5622
 8001728:	4293      	cmp	r3, r2
 800172a:	d02a      	beq.n	8001782 <BSP_AUDIO_IN_Init+0x21e>
 800172c:	4a3b      	ldr	r2, [pc, #236]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	214c      	movs	r1, #76	; 0x4c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	3308      	adds	r3, #8
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001740:	d01d      	beq.n	800177e <BSP_AUDIO_IN_Init+0x21a>
 8001742:	4a36      	ldr	r2, [pc, #216]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	214c      	movs	r1, #76	; 0x4c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3308      	adds	r3, #8
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001756:	4293      	cmp	r3, r2
 8001758:	d00f      	beq.n	800177a <BSP_AUDIO_IN_Init+0x216>
 800175a:	4a30      	ldr	r2, [pc, #192]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	214c      	movs	r1, #76	; 0x4c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3308      	adds	r3, #8
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <BSP_AUDIO_IN_Init+0x212>
 8001772:	2340      	movs	r3, #64	; 0x40
 8001774:	e00e      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 8001776:	2320      	movs	r3, #32
 8001778:	e00c      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 800177a:	2340      	movs	r3, #64	; 0x40
 800177c:	e00a      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	e008      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	e006      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	e004      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	e001      	b.n	8001794 <BSP_AUDIO_IN_Init+0x230>
 8001790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001794:	61bb      	str	r3, [r7, #24]
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 8001796:	4a21      	ldr	r2, [pc, #132]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	214c      	movs	r1, #76	; 0x4c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3308      	adds	r3, #8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80017aa:	d045      	beq.n	8001838 <BSP_AUDIO_IN_Init+0x2d4>
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	214c      	movs	r1, #76	; 0x4c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3308      	adds	r3, #8
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80017c0:	d029      	beq.n	8001816 <BSP_AUDIO_IN_Init+0x2b2>
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	214c      	movs	r1, #76	; 0x4c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80017d6:	d01c      	beq.n	8001812 <BSP_AUDIO_IN_Init+0x2ae>
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	214c      	movs	r1, #76	; 0x4c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3308      	adds	r3, #8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00e      	beq.n	800180e <BSP_AUDIO_IN_Init+0x2aa>
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <BSP_AUDIO_IN_Init+0x2b8>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	214c      	movs	r1, #76	; 0x4c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3308      	adds	r3, #8
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <BSP_AUDIO_IN_Init+0x2d0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <BSP_AUDIO_IN_Init+0x2a6>
 8001806:	2304      	movs	r3, #4
 8001808:	e017      	b.n	800183a <BSP_AUDIO_IN_Init+0x2d6>
 800180a:	2302      	movs	r3, #2
 800180c:	e015      	b.n	800183a <BSP_AUDIO_IN_Init+0x2d6>
 800180e:	2304      	movs	r3, #4
 8001810:	e013      	b.n	800183a <BSP_AUDIO_IN_Init+0x2d6>
 8001812:	2306      	movs	r3, #6
 8001814:	e011      	b.n	800183a <BSP_AUDIO_IN_Init+0x2d6>
 8001816:	2306      	movs	r3, #6
 8001818:	e00f      	b.n	800183a <BSP_AUDIO_IN_Init+0x2d6>
 800181a:	bf00      	nop
 800181c:	20000e34 	.word	0x20000e34
 8001820:	2000118c 	.word	0x2000118c
 8001824:	400160a0 	.word	0x400160a0
 8001828:	20001138 	.word	0x20001138
 800182c:	40016100 	.word	0x40016100
 8001830:	00050020 	.word	0x00050020
 8001834:	00017700 	.word	0x00017700
 8001838:	2306      	movs	r3, #6
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 800183c:	4a60      	ldr	r2, [pc, #384]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	214c      	movs	r1, #76	; 0x4c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3308      	adds	r3, #8
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001850:	d053      	beq.n	80018fa <BSP_AUDIO_IN_Init+0x396>
 8001852:	4a5b      	ldr	r2, [pc, #364]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	214c      	movs	r1, #76	; 0x4c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3308      	adds	r3, #8
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001866:	4293      	cmp	r3, r2
 8001868:	d045      	beq.n	80018f6 <BSP_AUDIO_IN_Init+0x392>
 800186a:	4a55      	ldr	r2, [pc, #340]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	214c      	movs	r1, #76	; 0x4c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3308      	adds	r3, #8
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800187e:	d038      	beq.n	80018f2 <BSP_AUDIO_IN_Init+0x38e>
 8001880:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	214c      	movs	r1, #76	; 0x4c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3308      	adds	r3, #8
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f245 6222 	movw	r2, #22050	; 0x5622
 8001894:	4293      	cmp	r3, r2
 8001896:	d02a      	beq.n	80018ee <BSP_AUDIO_IN_Init+0x38a>
 8001898:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	214c      	movs	r1, #76	; 0x4c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3308      	adds	r3, #8
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80018ac:	d01d      	beq.n	80018ea <BSP_AUDIO_IN_Init+0x386>
 80018ae:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	214c      	movs	r1, #76	; 0x4c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3308      	adds	r3, #8
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f64a 4244 	movw	r2, #44100	; 0xac44
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00f      	beq.n	80018e6 <BSP_AUDIO_IN_Init+0x382>
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	214c      	movs	r1, #76	; 0x4c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3308      	adds	r3, #8
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <BSP_AUDIO_IN_Init+0x37e>
 80018de:	230a      	movs	r3, #10
 80018e0:	e00c      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e00a      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018e6:	230a      	movs	r3, #10
 80018e8:	e008      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018ea:	230a      	movs	r3, #10
 80018ec:	e006      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018ee:	2308      	movs	r3, #8
 80018f0:	e004      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018f2:	2308      	movs	r3, #8
 80018f4:	e002      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e000      	b.n	80018fc <BSP_AUDIO_IN_Init+0x398>
 80018fa:	230c      	movs	r3, #12
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default configuration of DFSDM filters and channels */
        if (MX_DFSDM_Init(&DMic_OnBoard_DfsdmFilter, &DMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	461a      	mov	r2, r3
 8001904:	492f      	ldr	r1, [pc, #188]	; (80019c4 <BSP_AUDIO_IN_Init+0x460>)
 8001906:	4830      	ldr	r0, [pc, #192]	; (80019c8 <BSP_AUDIO_IN_Init+0x464>)
 8001908:	f000 fb8c 	bl	8002024 <MX_DFSDM_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <BSP_AUDIO_IN_Init+0x3b4>
        {
          /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
          return BSP_ERROR_PERIPH_FAILURE;
 8001912:	f06f 0303 	mvn.w	r3, #3
 8001916:	e04f      	b.n	80019b8 <BSP_AUDIO_IN_Init+0x454>
        }

      }
      if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	214c      	movs	r1, #76	; 0x4c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3304      	adds	r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d039      	beq.n	80019a4 <BSP_AUDIO_IN_Init+0x440>
      {
        MX_DFSDM_Config dfsdm_config;

        dfsdm_config.FilterInstance  = AMIC_ONBOARD_FILTER;
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <BSP_AUDIO_IN_Init+0x468>)
 8001932:	60fb      	str	r3, [r7, #12]
        dfsdm_config.ChannelInstance = AMIC_ONBOARD_CHANNEL;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <BSP_AUDIO_IN_Init+0x46c>)
 8001936:	61fb      	str	r3, [r7, #28]
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS; /*NU*/
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;/*NU*/
 800193c:	2301      	movs	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_0;
 8001940:	2301      	movs	r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
        if (AudioInCtx[Instance].ChannelsNbr == 1U)
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	214c      	movs	r1, #76	; 0x4c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3310      	adds	r3, #16
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d102      	bne.n	800195e <BSP_AUDIO_IN_Init+0x3fa>
        {
          dfsdm_config.RegularTrigger = DFSDM_FILTER_SW_TRIGGER;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e001      	b.n	8001962 <BSP_AUDIO_IN_Init+0x3fe>
        }
        else
        {
          dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 800195e:	2301      	movs	r3, #1
 8001960:	613b      	str	r3, [r7, #16]
        }
        dfsdm_config.DmaMode       = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        dfsdm_config.Activation      = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_ADC_OUTPUT;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
        dfsdm_config.SincOrder       = SINC_ORDER;
 8001974:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001978:	617b      	str	r3, [r7, #20]
        dfsdm_config.Oversampling    = DECIMATION_RATIO_DFSDM;
 800197a:	2340      	movs	r3, #64	; 0x40
 800197c:	61bb      	str	r3, [r7, #24]
        dfsdm_config.ClockDivider    = 1;/*NU*/
 800197e:	2301      	movs	r3, #1
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
        dfsdm_config.RightBitShift   = RBITSHIFT;
 8001982:	230a      	movs	r3, #10
 8001984:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default configuration of DFSDM filters and channels */
        if (MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	461a      	mov	r2, r3
 800198c:	4911      	ldr	r1, [pc, #68]	; (80019d4 <BSP_AUDIO_IN_Init+0x470>)
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <BSP_AUDIO_IN_Init+0x474>)
 8001990:	f000 fb48 	bl	8002024 <MX_DFSDM_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <BSP_AUDIO_IN_Init+0x43c>
        {
          /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
          return BSP_ERROR_PERIPH_FAILURE;
 800199a:	f06f 0303 	mvn.w	r3, #3
 800199e:	e00b      	b.n	80019b8 <BSP_AUDIO_IN_Init+0x454>
        }

        /*adc init*/
        MX_ADC1_Init();
 80019a0:	f000 fc38 	bl	8002214 <MX_ADC1_Init>
      }
    }
  }

  /* Update BSP AUDIO IN state */
  AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <BSP_AUDIO_IN_Init+0x45c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	214c      	movs	r1, #76	; 0x4c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3324      	adds	r3, #36	; 0x24
 80019b2:	2202      	movs	r2, #2
 80019b4:	601a      	str	r2, [r3, #0]
  /* Return BSP status */
  return BSP_ERROR_NONE;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3740      	adds	r7, #64	; 0x40
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000e34 	.word	0x20000e34
 80019c4:	2000118c 	.word	0x2000118c
 80019c8:	20001138 	.word	0x20001138
 80019cc:	40016180 	.word	0x40016180
 80019d0:	40016000 	.word	0x40016000
 80019d4:	20000f20 	.word	0x20000f20
 80019d8:	20000ecc 	.word	0x20000ecc

080019dc <BSP_AUDIO_IN_Record>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t *pBuf, uint32_t NbrOfBytes)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  AudioInCtx[Instance].pBuff = (uint16_t *)pBuf;
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <BSP_AUDIO_IN_Record+0xb8>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	214c      	movs	r1, #76	; 0x4c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3314      	adds	r3, #20
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	601a      	str	r2, [r3, #0]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d902      	bls.n	8001a0a <BSP_AUDIO_IN_Record+0x2e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001a04:	f06f 0301 	mvn.w	r3, #1
 8001a08:	e040      	b.n	8001a8c <BSP_AUDIO_IN_Record+0xb0>
  }
  else if (Instance == 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <BSP_AUDIO_IN_Record+0x3a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001a10:	f06f 0301 	mvn.w	r3, #1
 8001a14:	e03a      	b.n	8001a8c <BSP_AUDIO_IN_Record+0xb0>
  }
  else
  {
    if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <BSP_AUDIO_IN_Record+0xb8>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	214c      	movs	r1, #76	; 0x4c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <BSP_AUDIO_IN_Record+0x6e>
    {
      if (HAL_ADC_Start(&ADC1_Handle) != HAL_OK)
 8001a2e:	481a      	ldr	r0, [pc, #104]	; (8001a98 <BSP_AUDIO_IN_Record+0xbc>)
 8001a30:	f001 f976 	bl	8002d20 <HAL_ADC_Start>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <BSP_AUDIO_IN_Record+0x64>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a3a:	f06f 0303 	mvn.w	r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]
      }
      (void)HAL_DFSDM_FilterRegularStart_DMA(&AMic_OnBoard_DfsdmFilter, DFSDM_OUT, NbrOfBytes);
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4916      	ldr	r1, [pc, #88]	; (8001a9c <BSP_AUDIO_IN_Record+0xc0>)
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <BSP_AUDIO_IN_Record+0xc4>)
 8001a46:	f002 fa4f 	bl	8003ee8 <HAL_DFSDM_FilterRegularStart_DMA>
    }

    if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <BSP_AUDIO_IN_Record+0xb8>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	214c      	movs	r1, #76	; 0x4c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <BSP_AUDIO_IN_Record+0x9c>
    {
      if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DMic_OnBoard_DfsdmFilter,
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	490f      	ldr	r1, [pc, #60]	; (8001aa4 <BSP_AUDIO_IN_Record+0xc8>)
 8001a66:	4810      	ldr	r0, [pc, #64]	; (8001aa8 <BSP_AUDIO_IN_Record+0xcc>)
 8001a68:	f002 fa3e 	bl	8003ee8 <HAL_DFSDM_FilterRegularStart_DMA>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <BSP_AUDIO_IN_Record+0x9c>
                                                     (int32_t *) RecBuff,
                                                     NbrOfBytes))
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a72:	f06f 0303 	mvn.w	r3, #3
 8001a76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Update BSP AUDIO IN state */
  AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <BSP_AUDIO_IN_Record+0xb8>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	214c      	movs	r1, #76	; 0x4c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3324      	adds	r3, #36	; 0x24
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
  return ret;
 8001a8a:	697b      	ldr	r3, [r7, #20]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000e34 	.word	0x20000e34
 8001a98:	20000dc8 	.word	0x20000dc8
 8001a9c:	20000fb8 	.word	0x20000fb8
 8001aa0:	20000ecc 	.word	0x20000ecc
 8001aa4:	20001224 	.word	0x20001224
 8001aa8:	20001138 	.word	0x20001138

08001aac <BSP_AUDIO_IN_SetVolume>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when I2S / SPI is used or 1 if DFSDM is used
  * @param  Volume    Volume level to be returnd
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_SetVolume(uint32_t Instance, uint32_t Volume)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d902      	bls.n	8001ac6 <BSP_AUDIO_IN_SetVolume+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001ac0:	f06f 0301 	mvn.w	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <BSP_AUDIO_IN_SetVolume+0x3a>
  }
  else if (Instance == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <BSP_AUDIO_IN_SetVolume+0x26>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001acc:	f06f 0301 	mvn.w	r3, #1
 8001ad0:	e009      	b.n	8001ae6 <BSP_AUDIO_IN_SetVolume+0x3a>
  }
  else
  {
    /* Update AudioIn Context */
    AudioInCtx[Instance].Volume = Volume;
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <BSP_AUDIO_IN_SetVolume+0x48>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	214c      	movs	r1, #76	; 0x4c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3320      	adds	r3, #32
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return ret;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000e34 	.word	0x20000e34

08001af8 <HAL_DFSDM_FilterRegConvCpltCallback>:
using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  uint32_t j;

  if (AudioInCtx[1].IsMultiBuff == 1U)
 8001b00:	4ba3      	ldr	r3, [pc, #652]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d103      	bne.n	8001b10 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7fe feb0 	bl	800086e <BSP_AUDIO_IN_TransferComplete_CallBack>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
      }
    }
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8001b0e:	e13a      	b.n	8001d86 <HAL_DFSDM_FilterRegConvCpltCallback+0x28e>
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80c3 	beq.w	8001ca4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ac>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e0b5      	b.n	8001c90 <HAL_DFSDM_FilterRegConvCpltCallback+0x198>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 128;
 8001b24:	4b9a      	ldr	r3, [pc, #616]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	4a9a      	ldr	r2, [pc, #616]	; (8001d94 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	099a      	lsrs	r2, r3, #6
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a98      	ldr	r2, [pc, #608]	; (8001d98 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	da00      	bge.n	8001b40 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>
 8001b3e:	33ff      	adds	r3, #255	; 0xff
 8001b40:	121b      	asrs	r3, r3, #8
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da00      	bge.n	8001b52 <HAL_DFSDM_FilterRegConvCpltCallback+0x5a>
 8001b50:	337f      	adds	r3, #127	; 0x7f
 8001b52:	11db      	asrs	r3, r3, #7
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b58:	67da      	str	r2, [r3, #124]	; 0x7c
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8001b5a:	4b8d      	ldr	r3, [pc, #564]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b5c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b60:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b64:	441a      	add	r2, r3
 8001b66:	4b8a      	ldr	r3, [pc, #552]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6c:	1ad2      	subs	r2, r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da00      	bge.n	8001b7c <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
 8001b7a:	33ff      	adds	r3, #255	; 0xff
 8001b7c:	121b      	asrs	r3, r3, #8
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b8a:	4a81      	ldr	r2, [pc, #516]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8001b90:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b96:	4a81      	ldr	r2, [pc, #516]	; (8001d9c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	db0e      	blt.n	8001bba <HAL_DFSDM_FilterRegConvCpltCallback+0xc2>
 8001b9c:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba2:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	dc04      	bgt.n	8001bb4 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>
 8001baa:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	e004      	b.n	8001bbe <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8001bb4:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001bb8:	e001      	b.n	8001bbe <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8001bba:	f248 0308 	movw	r3, #32776	; 0x8008
 8001bbe:	4a74      	ldr	r2, [pc, #464]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bc0:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001bc2:	4a73      	ldr	r2, [pc, #460]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bc4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	fb00 f202 	mul.w	r2, r0, r2
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	440a      	add	r2, r1
 8001bd0:	8013      	strh	r3, [r2, #0]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	4a6f      	ldr	r2, [pc, #444]	; (8001d94 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	099a      	lsrs	r2, r3, #6
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a6f      	ldr	r2, [pc, #444]	; (8001da0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8001be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da00      	bge.n	8001bee <HAL_DFSDM_FilterRegConvCpltCallback+0xf6>
 8001bec:	33ff      	adds	r3, #255	; 0xff
 8001bee:	121b      	asrs	r3, r3, #8
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da01      	bge.n	8001c02 <HAL_DFSDM_FilterRegConvCpltCallback+0x10a>
 8001bfe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c02:	125b      	asrs	r3, r3, #9
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001c0c:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c12:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c18:	441a      	add	r2, r3
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	4613      	mov	r3, r2
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da00      	bge.n	8001c30 <HAL_DFSDM_FilterRegConvCpltCallback+0x138>
 8001c2e:	33ff      	adds	r3, #255	; 0xff
 8001c30:	121b      	asrs	r3, r3, #8
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001c3a:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c40:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr * j) + 1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001c46:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c4c:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	db0e      	blt.n	8001c70 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>
 8001c52:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c58:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	dc04      	bgt.n	8001c6a <HAL_DFSDM_FilterRegConvCpltCallback+0x172>
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	e004      	b.n	8001c74 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
 8001c6a:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001c6e:	e001      	b.n	8001c74 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
 8001c70:	f248 0308 	movw	r3, #32776	; 0x8008
 8001c74:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c76:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	fb00 f202 	mul.w	r2, r0, r2
 8001c82:	3201      	adds	r2, #1
 8001c84:	0052      	lsls	r2, r2, #1
 8001c86:	440a      	add	r2, r1
 8001c88:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	4a3f      	ldr	r2, [pc, #252]	; (8001d94 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f4ff af40 	bcc.w	8001b24 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d169      	bne.n	8001d80 <HAL_DFSDM_FilterRegConvCpltCallback+0x288>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e05d      	b.n	8001d6e <HAL_DFSDM_FilterRegConvCpltCallback+0x276>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT)] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	099a      	lsrs	r2, r3, #6
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a37      	ldr	r2, [pc, #220]	; (8001da0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da00      	bge.n	8001cce <HAL_DFSDM_FilterRegConvCpltCallback+0x1d6>
 8001ccc:	33ff      	adds	r3, #255	; 0xff
 8001cce:	121b      	asrs	r3, r3, #8
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da01      	bge.n	8001ce2 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
 8001cde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ce2:	125b      	asrs	r3, r3, #9
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf8:	441a      	add	r2, r3
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	1ad2      	subs	r2, r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da00      	bge.n	8001d10 <HAL_DFSDM_FilterRegConvCpltCallback+0x218>
 8001d0e:	33ff      	adds	r3, #255	; 0xff
 8001d10:	121b      	asrs	r3, r3, #8
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	db0e      	blt.n	8001d50 <HAL_DFSDM_FilterRegConvCpltCallback+0x258>
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d38:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	dc04      	bgt.n	8001d4a <HAL_DFSDM_FilterRegConvCpltCallback+0x252>
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	e004      	b.n	8001d54 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>
 8001d4a:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001d4e:	e001      	b.n	8001d54 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>
 8001d50:	f248 0308 	movw	r3, #32776	; 0x8008
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d56:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	fb00 f202 	mul.w	r2, r0, r2
 8001d62:	0052      	lsls	r2, r2, #1
 8001d64:	440a      	add	r2, r1
 8001d66:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d398      	bcc.n	8001cb2 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ba>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7fe fd74 	bl	800086e <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000e34 	.word	0x20000e34
 8001d94:	10624dd3 	.word	0x10624dd3
 8001d98:	20001224 	.word	0x20001224
 8001d9c:	ffff8008 	.word	0xffff8008
 8001da0:	20000fb8 	.word	0x20000fb8

08001da4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  uint32_t j;

  if (AudioInCtx[1].IsMultiBuff == 1U)
 8001dac:	4b98      	ldr	r3, [pc, #608]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d103      	bne.n	8001dbc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7fe fd4d 	bl	8000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>
      }
    }
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }

}
 8001dba:	e125      	b.n	8002008 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8001dbc:	4b94      	ldr	r3, [pc, #592]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80b5 	beq.w	8001f34 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e0a7      	b.n	8001f20 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17c>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j] / 256) * (int32_t)(AudioInCtx[1].Volume)) / 128;
 8001dd0:	4a90      	ldr	r2, [pc, #576]	; (8002014 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da00      	bge.n	8001dde <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3a>
 8001ddc:	33ff      	adds	r3, #255	; 0xff
 8001dde:	121b      	asrs	r3, r3, #8
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da00      	bge.n	8001df0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4c>
 8001dee:	337f      	adds	r3, #127	; 0x7f
 8001df0:	11db      	asrs	r3, r3, #7
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b86      	ldr	r3, [pc, #536]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001df6:	67da      	str	r2, [r3, #124]	; 0x7c
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8001df8:	4b85      	ldr	r3, [pc, #532]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001dfa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001dfe:	4b84      	ldr	r3, [pc, #528]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e02:	441a      	add	r2, r3
 8001e04:	4b82      	ldr	r3, [pc, #520]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0a:	1ad2      	subs	r2, r2, r3
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	019b      	lsls	r3, r3, #6
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da00      	bge.n	8001e1a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x76>
 8001e18:	33ff      	adds	r3, #255	; 0xff
 8001e1a:	121b      	asrs	r3, r3, #8
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8001e24:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e28:	4a79      	ldr	r2, [pc, #484]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e34:	4a78      	ldr	r2, [pc, #480]	; (8002018 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	db0e      	blt.n	8001e58 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb4>
 8001e3a:	4b75      	ldr	r3, [pc, #468]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e40:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001e44:	4293      	cmp	r3, r2
 8001e46:	dc04      	bgt.n	8001e52 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xae>
 8001e48:	4b71      	ldr	r3, [pc, #452]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	e004      	b.n	8001e5c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>
 8001e52:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001e56:	e001      	b.n	8001e5c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>
 8001e58:	f248 0308 	movw	r3, #32776	; 0x8008
 8001e5c:	4a6c      	ldr	r2, [pc, #432]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e5e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e60:	4a6b      	ldr	r2, [pc, #428]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	fb00 f202 	mul.w	r2, r0, r2
 8001e6a:	0052      	lsls	r2, r2, #1
 8001e6c:	440a      	add	r2, r1
 8001e6e:	8013      	strh	r3, [r2, #0]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da00      	bge.n	8001e7e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xda>
 8001e7c:	33ff      	adds	r3, #255	; 0xff
 8001e7e:	121b      	asrs	r3, r3, #8
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da01      	bge.n	8001e92 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xee>
 8001e8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e92:	125b      	asrs	r3, r3, #9
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001e9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea8:	441a      	add	r2, r3
 8001eaa:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	1ad2      	subs	r2, r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da00      	bge.n	8001ec0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11c>
 8001ebe:	33ff      	adds	r3, #255	; 0xff
 8001ec0:	121b      	asrs	r3, r3, #8
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr * j) + 1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001edc:	4a4e      	ldr	r2, [pc, #312]	; (8002018 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	db0e      	blt.n	8001f00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15c>
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee8:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001eec:	4293      	cmp	r3, r2
 8001eee:	dc04      	bgt.n	8001efa <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x156>
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	e004      	b.n	8001f04 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 8001efa:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001efe:	e001      	b.n	8001f04 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 8001f00:	f248 0308 	movw	r3, #32776	; 0x8008
 8001f04:	4a42      	ldr	r2, [pc, #264]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f06:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001f08:	4a41      	ldr	r2, [pc, #260]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	fb00 f202 	mul.w	r2, r0, r2
 8001f12:	3201      	adds	r2, #1
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	440a      	add	r2, r1
 8001f18:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	f4ff af4e 	bcc.w	8001dd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d162      	bne.n	8002002 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25e>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e056      	b.n	8001ff0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24c>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  / 256) * (int32_t)(AudioInCtx[1].Volume)) / 512;
 8001f42:	4a36      	ldr	r2, [pc, #216]	; (800201c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da00      	bge.n	8001f50 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>
 8001f4e:	33ff      	adds	r3, #255	; 0xff
 8001f50:	121b      	asrs	r3, r3, #8
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da01      	bge.n	8001f64 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 8001f60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f64:	125b      	asrs	r3, r3, #9
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	441a      	add	r2, r3
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	1ad2      	subs	r2, r2, r3
 8001f84:	4613      	mov	r3, r2
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da00      	bge.n	8001f92 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ee>
 8001f90:	33ff      	adds	r3, #255	; 0xff
 8001f92:	121b      	asrs	r3, r3, #8
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	db0e      	blt.n	8001fd2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x22e>
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fba:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	dc04      	bgt.n	8001fcc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x228>
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	e004      	b.n	8001fd6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x232>
 8001fcc:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8001fd0:	e001      	b.n	8001fd6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x232>
 8001fd2:	f248 0308 	movw	r3, #32776	; 0x8008
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fd8:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001fda:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001fdc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	fb00 f202 	mul.w	r2, r0, r2
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	440a      	add	r2, r1
 8001fe8:	8013      	strh	r3, [r2, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d39f      	bcc.n	8001f42 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19e>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8002002:	2001      	movs	r0, #1
 8002004:	f7fe fc26 	bl	8000854 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000e34 	.word	0x20000e34
 8002014:	20001224 	.word	0x20001224
 8002018:	ffff8008 	.word	0xffff8008
 800201c:	20000fb8 	.word	0x20000fb8
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <MX_DFSDM_Init>:
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter,
                                       DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002030:	4b73      	ldr	r3, [pc, #460]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 8002032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002034:	4a72      	ldr	r2, [pc, #456]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6493      	str	r3, [r2, #72]	; 0x48
 800203c:	4b70      	ldr	r3, [pc, #448]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 800203e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8002048:	4b6d      	ldr	r3, [pc, #436]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	4a6c      	ldr	r2, [pc, #432]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	6613      	str	r3, [r2, #96]	; 0x60
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002060:	4b67      	ldr	r3, [pc, #412]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	4a66      	ldr	r2, [pc, #408]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6493      	str	r3, [r2, #72]	; 0x48
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <MX_DFSDM_Init+0x1dc>)
 800206e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697b      	ldr	r3, [r7, #20]

  /* MIC channels initialization */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(hDfsdmChannel);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = MXConfig->Activation;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002098:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = (uint32_t)(MXConfig->ClockDivider);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = MXConfig->Multiplexer;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2204      	movs	r2, #4
 80020b4:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	220a      	movs	r2, #10
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61da      	str	r2, [r3, #28]

  if (HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 80020e0:	68b8      	ldr	r0, [r7, #8]
 80020e2:	f001 fcf9 	bl	8003ad8 <HAL_DFSDM_ChannelInit>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_DFSDM_Init+0xcc>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e083      	b.n	80021f8 <MX_DFSDM_Init+0x1d4>
  }

  /* MIC filters  initialization */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(hDfsdmFilter);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = MXConfig->DmaMode;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002136:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f001 fda0 	bl	8003c94 <HAL_DFSDM_FilterInit>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_DFSDM_Init+0x13a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e04c      	b.n	80021f8 <MX_DFSDM_Init+0x1d4>
  }

  /* Configure injected channel */
  if (HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	2201      	movs	r2, #1
 8002164:	4619      	mov	r1, r3
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f001 fe78 	bl	8003e5c <HAL_DFSDM_FilterConfigRegChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_DFSDM_Init+0x152>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e040      	b.n	80021f8 <MX_DFSDM_Init+0x1d4>
  }

  /* Configure DMA for AMic_Onboard */
  if (MXConfig->FilterInstance == AMIC_ONBOARD_FILTER)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <MX_DFSDM_Init+0x1e0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d13a      	bne.n	80021f6 <MX_DFSDM_Init+0x1d2>
  {
    AMic_OnBoard_Dma.Init.Request = DMA_REQUEST_ANALOG;
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 8002182:	2257      	movs	r2, #87	; 0x57
 8002184:	605a      	str	r2, [r3, #4]
    AMic_OnBoard_Dma.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
    AMic_OnBoard_Dma.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    AMic_OnBoard_Dma.Init.MemInc = DMA_MINC_ENABLE;
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	611a      	str	r2, [r3, #16]
    AMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 800219a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219e:	615a      	str	r2, [r3, #20]
    AMic_OnBoard_Dma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a6:	619a      	str	r2, [r3, #24]
    AMic_OnBoard_Dma.Init.Mode = DMA_CIRCULAR;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021aa:	2220      	movs	r2, #32
 80021ac:	61da      	str	r2, [r3, #28]
    AMic_OnBoard_Dma.Init.Priority = DMA_PRIORITY_HIGH;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b4:	621a      	str	r2, [r3, #32]
    AMic_OnBoard_Dma.Instance = DFSDM_DMA_ANALOG;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <MX_DFSDM_Init+0x1e8>)
 80021ba:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hDfsdmFilter, hdmaReg, AMic_OnBoard_Dma);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
 80021c2:	4a11      	ldr	r2, [pc, #68]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6293      	str	r3, [r2, #40]	; 0x28

    if (AudioInCtx[1].ChannelsNbr == 1U)
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_DFSDM_Init+0x1ec>)
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d103      	bne.n	80021d8 <MX_DFSDM_Init+0x1b4>
    {
      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&AMic_OnBoard_Dma);
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&AMic_OnBoard_Dma);
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <MX_DFSDM_Init+0x1e4>)
 80021da:	f002 f95d 	bl	8004498 <HAL_DMA_Init>

    if (AudioInCtx[1].ChannelsNbr == 1U)
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_DFSDM_Init+0x1ec>)
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <MX_DFSDM_Init+0x1d2>
    {
      HAL_NVIC_SetPriority(DFSDM_DMA_ANALOG_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2106      	movs	r1, #6
 80021ea:	200e      	movs	r0, #14
 80021ec:	f001 fc21 	bl	8003a32 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_ANALOG_IRQn);
 80021f0:	200e      	movs	r0, #14
 80021f2:	f001 fc3a 	bl	8003a6a <HAL_NVIC_EnableIRQ>
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40016180 	.word	0x40016180
 8002208:	20000f58 	.word	0x20000f58
 800220c:	40020044 	.word	0x40020044
 8002210:	20000e34 	.word	0x20000e34

08002214 <MX_ADC1_Init>:
  * @param  None
  * @retval None
  */
/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	615a      	str	r2, [r3, #20]

  /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_AUDIO);
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff f894 	bl	8001358 <BSP_ADC1_Initialization>
  HAL_ADC_Audio_MspInit(&ADC1_Handle);
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <MX_ADC1_Init+0x50>)
 8002232:	f000 f8ed 	bl	8002410 <HAL_ADC_Audio_MspInit>

  /**Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_2;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_ADC1_Init+0x54>)
 8002238:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800223a:	2306      	movs	r3, #6
 800223c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLE_TIME;
 800223e:	2302      	movs	r3, #2
 8002240:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002242:	237f      	movs	r3, #127	; 0x7f
 8002244:	60fb      	str	r3, [r7, #12]

#if (DECIMATION_RATIO_DFSDM != 1)
  sConfig.OffsetNumber = ADC_OFFSET_1;             /* Offset subtraction */
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0x800;                                 /* Parameter discarded because offset correction is disabled */
 800224a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800224e:	617b      	str	r3, [r7, #20]
#endif

  (void)HAL_ADC_ConfigChannel(&ADC1_Handle, &sConfig);
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <MX_ADC1_Init+0x50>)
 8002256:	f000 fdc7 	bl	8002de8 <HAL_ADC_ConfigChannel>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000dc8 	.word	0x20000dc8
 8002268:	08600004 	.word	0x08600004

0800226c <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	6613      	str	r3, [r2, #96]	; 0x60
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]

  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <DFSDM_ChannelMspInit+0xa8>)
 800228e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d037      	beq.n	8002308 <DFSDM_ChannelMspInit+0x9c>
  {
    if (hDfsdmChannel->Instance == DMIC_ONBOARD_CHANNEL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <DFSDM_ChannelMspInit+0xac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d132      	bne.n	8002308 <DFSDM_ChannelMspInit+0x9c>
    {
      /* Enable GPIO clock */
      DMIC_ONBOARD_DATAIN_GPIO_CLK_ENABLE();
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
      DMIC_ONBOARD_CKOUT_GPIO_CLK_ENABLE();
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <DFSDM_ChannelMspInit+0xa4>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]

      /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_CKOUT_PIN;
 80022d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d6:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022dc:	2302      	movs	r3, #2
 80022de:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_CKOUT_DATIN_AF;
 80022e4:	2306      	movs	r3, #6
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(DMIC_ONBOARD_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <DFSDM_ChannelMspInit+0xb0>)
 80022f0:	f002 fbda 	bl	8004aa8 <HAL_GPIO_Init>

      /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_DATIN_PIN;
 80022f4:	2340      	movs	r3, #64	; 0x40
 80022f6:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_DATAIN_DATIN_AF ;
 80022f8:	2306      	movs	r3, #6
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(DMIC_ONBOARD_DATIN_GPIO_PORT, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <DFSDM_ChannelMspInit+0xb4>)
 8002304:	f002 fbd0 	bl	8004aa8 <HAL_GPIO_Init>
    }
  }
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	20000e34 	.word	0x20000e34
 8002318:	400160a0 	.word	0x400160a0
 800231c:	48001000 	.word	0x48001000
 8002320:	48000400 	.word	0x48000400

08002324 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Enable DFSDM clock */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6493      	str	r3, [r2, #72]	; 0x48
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	6613      	str	r3, [r2, #96]	; 0x60
 8002350:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 8002352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]

  /* Enable the DMA clock */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800235c:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 800235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002360:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6493      	str	r3, [r2, #72]	; 0x48
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <DFSDM_FilterMspInit+0xd4>)
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <DFSDM_FilterMspInit+0xd8>)
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d037      	beq.n	80023f0 <DFSDM_FilterMspInit+0xcc>
  {
    if (hDfsdmFilter->Instance == DMIC_ONBOARD_FILTER)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <DFSDM_FilterMspInit+0xdc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d132      	bne.n	80023f0 <DFSDM_FilterMspInit+0xcc>
    {
      /*********** Configure DMA stream for DIGITAL microphone *******************/
      DMic_OnBoard_Dma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
      DMic_OnBoard_Dma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
      DMic_OnBoard_Dma.Init.MemInc              = DMA_MINC_ENABLE;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	611a      	str	r2, [r3, #16]
      DMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 800239e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a2:	615a      	str	r2, [r3, #20]
      DMic_OnBoard_Dma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023aa:	619a      	str	r2, [r3, #24]
      DMic_OnBoard_Dma.Init.Mode                = DMA_CIRCULAR;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023ae:	2220      	movs	r2, #32
 80023b0:	61da      	str	r2, [r3, #28]
      DMic_OnBoard_Dma.Init.Priority            = DMA_PRIORITY_HIGH;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b8:	621a      	str	r2, [r3, #32]
      DMic_OnBoard_Dma.Init.Request             = DMA_REQUEST_DIGITAL;
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023bc:	2256      	movs	r2, #86	; 0x56
 80023be:	605a      	str	r2, [r3, #4]

      DMic_OnBoard_Dma.Instance                 = DFSDM_DMA_DIGITAL;
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023c2:	4a11      	ldr	r2, [pc, #68]	; (8002408 <DFSDM_FilterMspInit+0xe4>)
 80023c4:	601a      	str	r2, [r3, #0]

      /* Associate the DMA handle */
      __HAL_LINKDMA(&DMic_OnBoard_DfsdmFilter, hdmaReg, DMic_OnBoard_Dma);
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <DFSDM_FilterMspInit+0xe8>)
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <DFSDM_FilterMspInit+0xe8>)
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&DMic_OnBoard_Dma);
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Configure the DMA Channel */
      (void)HAL_DMA_Init(&DMic_OnBoard_Dma);
 80023da:	480a      	ldr	r0, [pc, #40]	; (8002404 <DFSDM_FilterMspInit+0xe0>)
 80023dc:	f002 f85c 	bl	8004498 <HAL_DMA_Init>

      /* DMA IRQ Channel configuration */
      HAL_NVIC_SetPriority(DFSDM_DMA_DIGITAL_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2106      	movs	r1, #6
 80023e4:	2011      	movs	r0, #17
 80023e6:	f001 fb24 	bl	8003a32 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_DIGITAL_IRQn);
 80023ea:	2011      	movs	r0, #17
 80023ec:	f001 fb3d 	bl	8003a6a <HAL_NVIC_EnableIRQ>
    }
  }
}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	20000e34 	.word	0x20000e34
 8002400:	40016100 	.word	0x40016100
 8002404:	200011c4 	.word	0x200011c4
 8002408:	40020080 	.word	0x40020080
 800240c:	20001138 	.word	0x20001138

08002410 <HAL_ADC_Audio_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hDfsdmFilter ADC handle
  * @retval None
  */
void HAL_ADC_Audio_MspInit(ADC_HandleTypeDef *hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if (HAL_ADC_Counter == 0)
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HAL_ADC_Audio_MspInit+0x114>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d177      	bne.n	8002510 <HAL_ADC_Audio_MspInit+0x100>
    GPIO_InitTypeDef          GPIO_InitStruct;
    static DMA_HandleTypeDef         DmaHandle;

    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO clock ****************************************/
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	4a40      	ldr	r2, [pc, #256]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242c:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
    /* ADC Periph clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002438:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800243e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002444:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697b      	ldr	r3, [r7, #20]
    /* ADC Periph interface clock configuration */
    __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800245a:	4a33      	ldr	r2, [pc, #204]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Enable DMA clock */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	4a2f      	ldr	r2, [pc, #188]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6493      	str	r3, [r2, #72]	; 0x48
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6493      	str	r3, [r2, #72]	; 0x48
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_ADC_Audio_MspInit+0x118>)
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]

    /*##- 2- Configure peripheral GPIO #########################################*/
    /* ADC Channel GPIO pin configuration */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002494:	2303      	movs	r3, #3
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002498:	230b      	movs	r3, #11
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	4821      	ldr	r0, [pc, #132]	; (800252c <HAL_ADC_Audio_MspInit+0x11c>)
 80024a8:	f002 fafe 	bl	8004aa8 <HAL_GPIO_Init>

    /*##- 3- Configure DMA #####################################################*/

    /*********************** Configure DMA parameters ***************************/
    DmaHandle.Instance                 = DMA1_Channel1;
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_ADC_Audio_MspInit+0x124>)
 80024b0:	601a      	str	r2, [r3, #0]
    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024b4:	2205      	movs	r2, #5
 80024b6:	605a      	str	r2, [r3, #4]
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	611a      	str	r2, [r3, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d0:	615a      	str	r2, [r3, #20]
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d8:	619a      	str	r2, [r3, #24]
    DmaHandle.Init.Mode                = DMA_CIRCULAR;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024dc:	2220      	movs	r2, #32
 80024de:	61da      	str	r2, [r3, #28]
    DmaHandle.Init.Priority            = DMA_PRIORITY_MEDIUM;
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e6:	621a      	str	r2, [r3, #32]
    /* Deinitialize  & Initialize the DMA for new transfer */
    (void)HAL_DMA_DeInit(&DmaHandle);
 80024e8:	4811      	ldr	r0, [pc, #68]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024ea:	f002 f87d 	bl	80045e8 <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&DmaHandle);
 80024ee:	4810      	ldr	r0, [pc, #64]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024f0:	f001 ffd2 	bl	8004498 <HAL_DMA_Init>

    /* Associate the DMA handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024f8:	651a      	str	r2, [r3, #80]	; 0x50
 80024fa:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_ADC_Audio_MspInit+0x120>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* NVIC configuration for DMA Input data interrupt */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2101      	movs	r1, #1
 8002504:	200b      	movs	r0, #11
 8002506:	f001 fa94 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800250a:	200b      	movs	r0, #11
 800250c:	f001 faad 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  }

  HAL_ADC_Counter++;
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <HAL_ADC_Audio_MspInit+0x114>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a03      	ldr	r2, [pc, #12]	; (8002524 <HAL_ADC_Audio_MspInit+0x114>)
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	3730      	adds	r7, #48	; 0x30
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200013a4 	.word	0x200013a4
 8002528:	40021000 	.word	0x40021000
 800252c:	48000800 	.word	0x48000800
 8002530:	200013a8 	.word	0x200013a8
 8002534:	40020008 	.word	0x40020008

08002538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_Init+0x3c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_Init+0x3c>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002572:	2003      	movs	r0, #3
 8002574:	f001 fa52 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002578:	200f      	movs	r0, #15
 800257a:	f000 f817 	bl	80025ac <HAL_InitTick>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	71fb      	strb	r3, [r7, #7]
 8002588:	e001      	b.n	800258e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800258a:	f000 f807 	bl	800259c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800258e:	79fb      	ldrb	r3, [r7, #7]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40022000 	.word	0x40022000

0800259c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_InitTick+0x6c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d023      	beq.n	8002608 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_InitTick+0x70>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_InitTick+0x6c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fa55 	bl	8003a86 <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d809      	bhi.n	80025fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f001 fa1f 	bl	8003a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_InitTick+0x74>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e007      	b.n	800260c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e004      	b.n	800260c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e001      	b.n	800260c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000070 	.word	0x20000070
 800261c:	20000068 	.word	0x20000068
 8002620:	2000006c 	.word	0x2000006c

08002624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x20>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x24>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_IncTick+0x24>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000070 	.word	0x20000070
 8002648:	20001408 	.word	0x20001408

0800264c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_GetTick+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20001408 	.word	0x20001408

08002664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff ffee 	bl	800264c <HAL_GetTick>
 8002670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d005      	beq.n	800268a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_Delay+0x44>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800268a:	bf00      	nop
 800268c:	f7ff ffde 	bl	800264c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d8f7      	bhi.n	800268c <HAL_Delay+0x28>
  {
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000070 	.word	0x20000070

080026ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	609a      	str	r2, [r3, #8]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3360      	adds	r3, #96	; 0x60
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <LL_ADC_SetOffset+0x44>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	03fff000 	.word	0x03fff000

0800275c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3360      	adds	r3, #96	; 0x60
 800276a:	461a      	mov	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3360      	adds	r3, #96	; 0x60
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	615a      	str	r2, [r3, #20]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3330      	adds	r3, #48	; 0x30
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	4413      	add	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	211f      	movs	r1, #31
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	401a      	ands	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 011f 	and.w	r1, r3, #31
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	431a      	orrs	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3314      	adds	r3, #20
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	0e5b      	lsrs	r3, r3, #25
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	4413      	add	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	0d1b      	lsrs	r3, r3, #20
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2107      	movs	r1, #7
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	401a      	ands	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	0d1b      	lsrs	r3, r3, #20
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	431a      	orrs	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002886:	bf00      	nop
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ac:	43db      	mvns	r3, r3
 80028ae:	401a      	ands	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0318 	and.w	r3, r3, #24
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028b8:	40d9      	lsrs	r1, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	400b      	ands	r3, r1
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	0007ffff 	.word	0x0007ffff

080028dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6093      	str	r3, [r2, #8]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002914:	d101      	bne.n	800291a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800293c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002964:	d101      	bne.n	800296a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b4:	f043 0202 	orr.w	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <LL_ADC_IsEnabled+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_IsEnabled+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d101      	bne.n	8002a06 <LL_ADC_IsDisableOngoing+0x18>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <LL_ADC_IsDisableOngoing+0x1a>
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d101      	bne.n	8002a54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12f      	b.n	8002d02 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe fcbf 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff19 	bl	8002900 <LL_ADC_IsDeepPowerDownEnabled>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff feff 	bl	80028dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff34 	bl	8002950 <LL_ADC_IsInternalRegulatorEnabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff18 	bl	8002928 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af8:	4b84      	ldr	r3, [pc, #528]	; (8002d0c <HAL_ADC_Init+0x284>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	4a84      	ldr	r2, [pc, #528]	; (8002d10 <HAL_ADC_Init+0x288>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b0c:	e002      	b.n	8002b14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f9      	bne.n	8002b0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff16 	bl	8002950 <LL_ADC_IsInternalRegulatorEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff76 	bl	8002a3c <LL_ADC_REG_IsConversionOngoing>
 8002b50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80c8 	bne.w	8002cf0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 80c4 	bne.w	8002cf0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b70:	f043 0202 	orr.w	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff23 	bl	80029c8 <LL_ADC_IsEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b88:	4862      	ldr	r0, [pc, #392]	; (8002d14 <HAL_ADC_Init+0x28c>)
 8002b8a:	f7ff ff1d 	bl	80029c8 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	485f      	ldr	r0, [pc, #380]	; (8002d18 <HAL_ADC_Init+0x290>)
 8002b9c:	f7ff fd86 	bl	80026ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7e5b      	ldrb	r3, [r3, #25]
 8002ba4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002baa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002bb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d106      	bne.n	8002bdc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	045b      	lsls	r3, r3, #17
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_ADC_Init+0x294>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	69b9      	ldr	r1, [r7, #24]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff13 	bl	8002a3c <LL_ADC_REG_IsConversionOngoing>
 8002c16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff20 	bl	8002a62 <LL_ADC_INJ_IsConversionOngoing>
 8002c22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d140      	bne.n	8002cac <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d13d      	bne.n	8002cac <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c3a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c42:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c52:	f023 0306 	bic.w	r3, r3, #6
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d118      	bne.n	8002c9c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c80:	4311      	orrs	r1, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	e007      	b.n	8002cac <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10c      	bne.n	8002cce <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f023 010f 	bic.w	r1, r3, #15
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	1e5a      	subs	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
 8002ccc:	e007      	b.n	8002cde <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020f 	bic.w	r2, r2, #15
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58
 8002cee:	e007      	b.n	8002d00 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f043 0210 	orr.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000068 	.word	0x20000068
 8002d10:	053e2d63 	.word	0x053e2d63
 8002d14:	50040000 	.word	0x50040000
 8002d18:	50040300 	.word	0x50040300
 8002d1c:	fff0c007 	.word	0xfff0c007

08002d20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fe85 	bl	8002a3c <LL_ADC_REG_IsConversionOngoing>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d14f      	bne.n	8002dd8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Start+0x26>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e04b      	b.n	8002dde <HAL_ADC_Start+0xbe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fc46 	bl	80035e0 <ADC_Enable>
 8002d54:	4603      	mov	r3, r0
 8002d56:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d137      	bne.n	8002dce <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f023 0206 	bic.w	r2, r3, #6
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d8c:	e002      	b.n	8002d94 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	221c      	movs	r2, #28
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fe24 	bl	8002a14 <LL_ADC_REG_StartConversion>
 8002dcc:	e006      	b.n	8002ddc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002dd6:	e001      	b.n	8002ddc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b0b6      	sub	sp, #216	; 0xd8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x22>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e3d5      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x7ce>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fe10 	bl	8002a3c <LL_ADC_REG_IsConversionOngoing>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 83ba 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d824      	bhi.n	8002e76 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	3b02      	subs	r3, #2
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d81b      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0x86>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_ADC_ConfigChannel+0x54>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e5d 	.word	0x08002e5d
 8002e48:	08002e65 	.word	0x08002e65
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	220c      	movs	r2, #12
 8002e50:	605a      	str	r2, [r3, #4]
          break;
 8002e52:	e011      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2212      	movs	r2, #18
 8002e58:	605a      	str	r2, [r3, #4]
          break;
 8002e5a:	e00d      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2218      	movs	r2, #24
 8002e60:	605a      	str	r2, [r3, #4]
          break;
 8002e62:	e009      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6a:	605a      	str	r2, [r3, #4]
          break;
 8002e6c:	e004      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2206      	movs	r2, #6
 8002e72:	605a      	str	r2, [r3, #4]
          break;
 8002e74:	e000      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002e76:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f7ff fcad 	bl	80027e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fdd4 	bl	8002a3c <LL_ADC_REG_IsConversionOngoing>
 8002e94:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fde0 	bl	8002a62 <LL_ADC_INJ_IsConversionOngoing>
 8002ea2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 81c1 	bne.w	8003232 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 81bc 	bne.w	8003232 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7ff fcb4 	bl	800283c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fc6e 	bl	80027be <LL_ADC_SetSamplingTimeCommonConfig>
 8002ee2:	e00e      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f7ff fca3 	bl	800283c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fc5e 	bl	80027be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d00a      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6919      	ldr	r1, [r3, #16]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f34:	f7ff fbee 	bl	8002714 <LL_ADC_SetOffset>
 8002f38:	e17b      	b.n	8003232 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fc0b 	bl	800275c <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x17e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fc00 	bl	800275c <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	e01e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x1bc>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fbf5 	bl	800275c <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x1d4>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	e018      	b.n	8002fee <HAL_ADC_ConfigChannel+0x206>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fbc4 	bl	8002788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fba8 	bl	800275c <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x244>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fb9d 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	e01e      	b.n	800306a <HAL_ADC_ConfigChannel+0x282>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fb92 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800304a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800304e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e004      	b.n	8003068 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800305e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x29a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	e018      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x2cc>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800309a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800309e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e004      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80030aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d106      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fb61 	bl	8002788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2102      	movs	r1, #2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fb45 	bl	800275c <LL_ADC_GetOffsetChannel>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x30a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2102      	movs	r1, #2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fb3a 	bl	800275c <LL_ADC_GetOffsetChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	e01e      	b.n	8003130 <HAL_ADC_ConfigChannel+0x348>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fb2f 	bl	800275c <LL_ADC_GetOffsetChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e004      	b.n	800312e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x360>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	e016      	b.n	8003176 <HAL_ADC_ConfigChannel+0x38e>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800315a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800315c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003176:	429a      	cmp	r2, r3
 8003178:	d106      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fb00 	bl	8002788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2103      	movs	r1, #3
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fae4 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x3cc>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2103      	movs	r1, #3
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fad9 	bl	800275c <LL_ADC_GetOffsetChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	f003 021f 	and.w	r2, r3, #31
 80031b2:	e017      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x3fc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2103      	movs	r1, #3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff face 	bl	800275c <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e003      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80031da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x414>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	e011      	b.n	8003220 <HAL_ADC_ConfigChannel+0x438>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800320a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	e003      	b.n	8003220 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	2103      	movs	r1, #3
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff faab 	bl	8002788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fbc6 	bl	80029c8 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8140 	bne.w	80034c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	461a      	mov	r2, r3
 8003252:	f7ff fb1f 	bl	8002894 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a8f      	ldr	r2, [pc, #572]	; (8003498 <HAL_ADC_ConfigChannel+0x6b0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	f040 8131 	bne.w	80034c4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_ADC_ConfigChannel+0x4a2>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	3301      	adds	r3, #1
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	2b09      	cmp	r3, #9
 8003280:	bf94      	ite	ls
 8003282:	2301      	movls	r3, #1
 8003284:	2300      	movhi	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e019      	b.n	80032be <HAL_ADC_ConfigChannel+0x4d6>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800329c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e003      	b.n	80032ae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80032a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d079      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_ADC_ConfigChannel+0x4f6>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	3301      	adds	r3, #1
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032dc:	e015      	b.n	800330a <HAL_ADC_ConfigChannel+0x522>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e003      	b.n	8003302 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80032fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3301      	adds	r3, #1
 8003304:	069b      	lsls	r3, r3, #26
 8003306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_ADC_ConfigChannel+0x542>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	3301      	adds	r3, #1
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	e017      	b.n	800335a <HAL_ADC_ConfigChannel+0x572>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800333c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e003      	b.n	800334e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	ea42 0103 	orr.w	r1, r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x598>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	3301      	adds	r3, #1
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	e018      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x5ca>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003398:	2320      	movs	r3, #32
 800339a:	e003      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b2:	430b      	orrs	r3, r1
 80033b4:	e081      	b.n	80034ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x5ea>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0e9b      	lsrs	r3, r3, #26
 80033c8:	3301      	adds	r3, #1
 80033ca:	069b      	lsls	r3, r3, #26
 80033cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d0:	e015      	b.n	80033fe <HAL_ADC_ConfigChannel+0x616>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	069b      	lsls	r3, r3, #26
 80033fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_ADC_ConfigChannel+0x636>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	3301      	adds	r3, #1
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	e017      	b.n	800344e <HAL_ADC_ConfigChannel+0x666>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	61fb      	str	r3, [r7, #28]
  return result;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e003      	b.n	8003442 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	3301      	adds	r3, #1
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	ea42 0103 	orr.w	r1, r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_ADC_ConfigChannel+0x692>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	3301      	adds	r3, #1
 8003466:	f003 021f 	and.w	r2, r3, #31
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	3b1e      	subs	r3, #30
 8003472:	051b      	lsls	r3, r3, #20
 8003474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003478:	e01e      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x6d0>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	613b      	str	r3, [r7, #16]
  return result;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e006      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x6bc>
 8003496:	bf00      	nop
 8003498:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f003 021f 	and.w	r2, r3, #31
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	3b1e      	subs	r3, #30
 80034b2:	051b      	lsls	r3, r3, #20
 80034b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b8:	430b      	orrs	r3, r1
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	4619      	mov	r1, r3
 80034c0:	f7ff f9bc 	bl	800283c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_ADC_ConfigChannel+0x7d8>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d06c      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034d0:	483c      	ldr	r0, [pc, #240]	; (80035c4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034d2:	f7ff f911 	bl	80026f8 <LL_ADC_GetCommonPathInternalCh>
 80034d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3a      	ldr	r2, [pc, #232]	; (80035c8 <HAL_ADC_ConfigChannel+0x7e0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d127      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d121      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a35      	ldr	r2, [pc, #212]	; (80035cc <HAL_ADC_ConfigChannel+0x7e4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d157      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003502:	4619      	mov	r1, r3
 8003504:	482f      	ldr	r0, [pc, #188]	; (80035c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003506:	f7ff f8e4 	bl	80026d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_ADC_ConfigChannel+0x7e8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	099b      	lsrs	r3, r3, #6
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003524:	e002      	b.n	800352c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3b01      	subs	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f9      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003532:	e03a      	b.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_ADC_ConfigChannel+0x7f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d113      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x77e>
 800353e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d12a      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355c:	4619      	mov	r1, r3
 800355e:	4819      	ldr	r0, [pc, #100]	; (80035c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003560:	f7ff f8b7 	bl	80026d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003564:	e021      	b.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_ADC_ConfigChannel+0x7f4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d11c      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d116      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d111      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800358a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800358e:	4619      	mov	r1, r3
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003592:	f7ff f89e 	bl	80026d2 <LL_ADC_SetCommonPathInternalCh>
 8003596:	e008      	b.n	80035aa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80035b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	37d8      	adds	r7, #216	; 0xd8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	80080000 	.word	0x80080000
 80035c4:	50040300 	.word	0x50040300
 80035c8:	c7520000 	.word	0xc7520000
 80035cc:	50040000 	.word	0x50040000
 80035d0:	20000068 	.word	0x20000068
 80035d4:	053e2d63 	.word	0x053e2d63
 80035d8:	cb840000 	.word	0xcb840000
 80035dc:	80000001 	.word	0x80000001

080035e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f9eb 	bl	80029c8 <LL_ADC_IsEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d14d      	bne.n	8003694 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <ADC_Enable+0xc0>)
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	f043 0210 	orr.w	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e039      	b.n	8003696 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f9a6 	bl	8002978 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800362c:	f7ff f80e 	bl	800264c <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003632:	e028      	b.n	8003686 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff f9c5 	bl	80029c8 <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f995 	bl	8002978 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800364e:	f7fe fffd 	bl	800264c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d914      	bls.n	8003686 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d00d      	beq.n	8003686 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d1cf      	bne.n	8003634 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	8000003f 	.word	0x8000003f

080036a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff f99c 	bl	80029ee <LL_ADC_IsDisableOngoing>
 80036b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f983 	bl	80029c8 <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d047      	beq.n	8003758 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d144      	bne.n	8003758 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 030d 	and.w	r3, r3, #13
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d10c      	bne.n	80036f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f95d 	bl	80029a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2203      	movs	r2, #3
 80036ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ee:	f7fe ffad 	bl	800264c <HAL_GetTick>
 80036f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036f4:	e029      	b.n	800374a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e023      	b.n	800375a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003712:	f7fe ff9b 	bl	800264c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d914      	bls.n	800374a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f043 0210 	orr.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e007      	b.n	800375a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1dc      	bne.n	8003712 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <LL_ADC_StartCalibration>:
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800377e:	4313      	orrs	r3, r2
 8003780:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_IsCalibrationOnGoing>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a8:	d101      	bne.n	80037ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e04d      	b.n	8003874 <HAL_ADCEx_Calibration_Start+0xb8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff5f 	bl	80036a4 <ADC_Disable>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d136      	bne.n	800385e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037f8:	f023 0302 	bic.w	r3, r3, #2
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ffa9 	bl	8003762 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003810:	e014      	b.n	800383c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800381e:	d30d      	bcc.n	800383c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	f023 0312 	bic.w	r3, r3, #18
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e01b      	b.n	8003874 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ffa7 	bl	8003794 <LL_ADC_IsCalibrationOnGoing>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e2      	bne.n	8003812 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f023 0303 	bic.w	r3, r3, #3
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	659a      	str	r2, [r3, #88]	; 0x58
 800385c:	e005      	b.n	800386a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	f043 0210 	orr.w	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <__NVIC_SetPriorityGrouping>:
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e8:	d301      	bcc.n	80039ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00f      	b.n	8003a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <SysTick_Config+0x40>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f6:	210f      	movs	r1, #15
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	f7ff ff8e 	bl	800391c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SysTick_Config+0x40>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <SysTick_Config+0x40>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff29 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a44:	f7ff ff3e 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	6978      	ldr	r0, [r7, #20]
 8003a50:	f7ff ff8e 	bl	8003970 <NVIC_EncodePriority>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff5d 	bl	800391c <__NVIC_SetPriority>
}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	4603      	mov	r3, r0
 8003a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff31 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ffa2 	bl	80039d8 <SysTick_Config>
 8003a94:	4603      	mov	r3, r0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d106      	bne.n	8003abc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003aba:	e005      	b.n	8003ac8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ac2:	f023 0304 	bic.w	r3, r3, #4
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0ac      	b.n	8003c44 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fc30 	bl	8004354 <DFSDM_GetChannelFromInstance>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4a55      	ldr	r2, [pc, #340]	; (8003c4c <HAL_DFSDM_ChannelInit+0x174>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e09f      	b.n	8003c44 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8a7 	bl	8003c58 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_DFSDM_ChannelInit+0x178>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	4a4f      	ldr	r2, [pc, #316]	; (8003c50 <HAL_DFSDM_ChannelInit+0x178>)
 8003b12:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b14:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_DFSDM_ChannelInit+0x178>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d125      	bne.n	8003b68 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b26:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4948      	ldr	r1, [pc, #288]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b36:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a46      	ldr	r2, [pc, #280]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b3c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003b40:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	791b      	ldrb	r3, [r3, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d108      	bne.n	8003b5c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b4a:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	493f      	ldr	r1, [pc, #252]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b5c:	4b3d      	ldr	r3, [pc, #244]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b66:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b76:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b86:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b8c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020f 	bic.w	r2, r2, #15
 8003ba4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003bcc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6899      	ldr	r1, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f002 0207 	and.w	r2, r2, #7
 8003bf8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c24:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fb8e 	bl	8004354 <DFSDM_GetChannelFromInstance>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4904      	ldr	r1, [pc, #16]	; (8003c4c <HAL_DFSDM_ChannelInit+0x174>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20001410 	.word	0x20001410
 8003c50:	2000140c 	.word	0x2000140c
 8003c54:	40016000 	.word	0x40016000

08003c58 <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0ca      	b.n	8003e3c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a66      	ldr	r2, [pc, #408]	; (8003e44 <HAL_DFSDM_FilterInit+0x1b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d003      	beq.n	8003cc0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0bb      	b.n	8003e3c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8b3 	bl	8003e48 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003cf0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7a1b      	ldrb	r3, [r3, #8]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d108      	bne.n	8003d0c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e007      	b.n	8003d1c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d1a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7a5b      	ldrb	r3, [r3, #9]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d108      	bne.n	8003d36 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e007      	b.n	8003d46 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d54:	f023 0308 	bic.w	r3, r3, #8
 8003d58:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d108      	bne.n	8003d74 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7c1b      	ldrb	r3, [r3, #16]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d108      	bne.n	8003d8e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0210 	orr.w	r2, r2, #16
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e007      	b.n	8003d9e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0210 	bic.w	r2, r2, #16
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7c5b      	ldrb	r3, [r3, #17]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d108      	bne.n	8003db8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0220 	orr.w	r2, r2, #32
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e007      	b.n	8003dc8 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0220 	bic.w	r2, r2, #32
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003dd6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003dda:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6959      	ldr	r1, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003dee:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003df6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7c1a      	ldrb	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40016100 	.word	0x40016100

08003e48 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02e      	beq.n	8003ed4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003e7c:	2bff      	cmp	r3, #255	; 0xff
 8003e7e:	d029      	beq.n	8003ed4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e92:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10d      	bne.n	8003eb6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e00a      	b.n	8003ecc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed2:	e001      	b.n	8003ed8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
 8003f08:	e064      	b.n	8003fd4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f18:	d002      	beq.n	8003f20 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
 8003f1e:	e059      	b.n	8003fd4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10e      	bne.n	8003f46 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
 8003f44:	e046      	b.n	8003fd4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d102      	bne.n	8003f66 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
 8003f64:	e036      	b.n	8003fd4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d004      	beq.n	8003f7a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d12a      	bne.n	8003fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d101      	bne.n	8003f98 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003f96:	e000      	b.n	8003f9a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003f98:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	331c      	adds	r3, #28
 8003faa:	4619      	mov	r1, r3
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f000 fbb0 	bl	8004714 <HAL_DMA_Start_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003fc6:	e005      	b.n	8003fd4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fa0f 	bl	80043ec <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003fce:	e001      	b.n	8003fd4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	08004315 	.word	0x08004315
 8003fe4:	08004331 	.word	0x08004331
 8003fe8:	080042f9 	.word	0x080042f9

08003fec <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08c      	sub	sp, #48	; 0x30
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00f      	beq.n	800402e <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2208      	movs	r2, #8
 800401e:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f95c 	bl	80042e4 <HAL_DFSDM_FilterErrorCallback>
 800402c:	e13b      	b.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00f      	beq.n	8004058 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2204      	movs	r2, #4
 8004048:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f947 	bl	80042e4 <HAL_DFSDM_FilterErrorCallback>
 8004056:	e126      	b.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d025      	beq.n	80040ae <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fd fd43 	bl	8001af8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 8114 	bne.w	80042a4 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 810f 	bne.w	80042a4 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0202 	bic.w	r2, r2, #2
 8004094:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800409c:	2b02      	cmp	r3, #2
 800409e:	d101      	bne.n	80040a4 <HAL_DFSDM_IRQHandler+0xb8>
 80040a0:	2201      	movs	r2, #1
 80040a2:	e000      	b.n	80040a6 <HAL_DFSDM_IRQHandler+0xba>
 80040a4:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80040ac:	e0fa      	b.n	80042a4 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d034      	beq.n	8004122 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02f      	beq.n	8004122 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8f8 	bl	80042b8 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 80e5 	bne.w	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d112      	bne.n	800410a <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d101      	bne.n	8004102 <HAL_DFSDM_IRQHandler+0x116>
 80040fe:	2201      	movs	r2, #1
 8004100:	e000      	b.n	8004104 <HAL_DFSDM_IRQHandler+0x118>
 8004102:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_DFSDM_IRQHandler+0x12e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	e000      	b.n	800411c <HAL_DFSDM_IRQHandler+0x130>
 800411a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004120:	e0c1      	b.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d03d      	beq.n	80041a8 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004132:	2b00      	cmp	r3, #0
 8004134:	d038      	beq.n	80041a8 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_DFSDM_IRQHandler+0x162>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_DFSDM_IRQHandler+0x164>
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800415e:	e005      	b.n	800416c <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	3301      	adds	r3, #1
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <HAL_DFSDM_IRQHandler+0x190>
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2b06      	cmp	r3, #6
 800417a:	d9f1      	bls.n	8004160 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_DFSDM_IRQHandler+0x1a2>
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	3308      	adds	r3, #8
 8004186:	2201      	movs	r2, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	e003      	b.n	8004196 <HAL_DFSDM_IRQHandler+0x1aa>
 800418e:	2201      	movs	r2, #1
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f893 	bl	80042cc <HAL_DFSDM_FilterAwdCallback>
  {
 80041a6:	e07e      	b.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a40      	ldr	r2, [pc, #256]	; (80042b0 <HAL_DFSDM_IRQHandler+0x2c4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d141      	bne.n	8004236 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d03c      	beq.n	8004236 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d037      	beq.n	8004236 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80041d6:	e02a      	b.n	800422e <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01f      	beq.n	8004222 <HAL_DFSDM_IRQHandler+0x236>
 80041e2:	4a34      	ldr	r2, [pc, #208]	; (80042b4 <HAL_DFSDM_IRQHandler+0x2c8>)
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d019      	beq.n	8004222 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80041ee:	4a31      	ldr	r2, [pc, #196]	; (80042b4 <HAL_DFSDM_IRQHandler+0x2c8>)
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00f      	beq.n	8004222 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f103 0210 	add.w	r2, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f202 	lsl.w	r2, r1, r2
 8004212:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fd25 	bl	8003c6c <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	3301      	adds	r3, #1
 8004226:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2b07      	cmp	r3, #7
 8004232:	d9d1      	bls.n	80041d8 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8004234:	e037      	b.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <HAL_DFSDM_IRQHandler+0x2c4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d132      	bne.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02d      	beq.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004250:	2b00      	cmp	r3, #0
 8004252:	d028      	beq.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0e1b      	lsrs	r3, r3, #24
 8004260:	b2db      	uxtb	r3, r3
 8004262:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004264:	e005      	b.n	8004272 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3301      	adds	r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <HAL_DFSDM_IRQHandler+0x296>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d9f1      	bls.n	8004266 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f103 0218 	add.w	r2, r3, #24
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8004294:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fcef 	bl	8003c80 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80042a2:	e000      	b.n	80042a6 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80042a4:	bf00      	nop
}
 80042a6:	bf00      	nop
 80042a8:	3730      	adds	r7, #48	; 0x30
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40016100 	.word	0x40016100
 80042b4:	20001410 	.word	0x20001410

080042b8 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7fd fd4c 	bl	8001da4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7fd fbe8 	bl	8001af8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2203      	movs	r2, #3
 8004342:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ffcd 	bl	80042e4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d102      	bne.n	800436a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e02b      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <DFSDM_GetChannelFromInstance+0x80>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d102      	bne.n	8004378 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e024      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <DFSDM_GetChannelFromInstance+0x84>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d102      	bne.n	8004386 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004380:	2302      	movs	r3, #2
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e01d      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <DFSDM_GetChannelFromInstance+0x88>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d102      	bne.n	8004394 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800438e:	2304      	movs	r3, #4
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e016      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <DFSDM_GetChannelFromInstance+0x8c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d102      	bne.n	80043a2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800439c:	2305      	movs	r3, #5
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e00f      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <DFSDM_GetChannelFromInstance+0x90>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d102      	bne.n	80043b0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80043aa:	2306      	movs	r3, #6
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e008      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <DFSDM_GetChannelFromInstance+0x94>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d102      	bne.n	80043be <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80043b8:	2307      	movs	r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e001      	b.n	80043c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80043be:	2303      	movs	r3, #3
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40016000 	.word	0x40016000
 80043d4:	40016020 	.word	0x40016020
 80043d8:	40016040 	.word	0x40016040
 80043dc:	40016080 	.word	0x40016080
 80043e0:	400160a0 	.word	0x400160a0
 80043e4:	400160c0 	.word	0x400160c0
 80043e8:	400160e0 	.word	0x400160e0

080043ec <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d108      	bne.n	800440e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e033      	b.n	8004476 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800442c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004444:	2b03      	cmp	r3, #3
 8004446:	d116      	bne.n	8004476 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0202 	orr.w	r2, r2, #2
 800445e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004466:	2b01      	cmp	r3, #1
 8004468:	d102      	bne.n	8004470 <DFSDM_RegConvStart+0x84>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	e000      	b.n	8004472 <DFSDM_RegConvStart+0x86>
 8004470:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <DFSDM_RegConvStart+0x98>
 8004480:	2202      	movs	r2, #2
 8004482:	e000      	b.n	8004486 <DFSDM_RegConvStart+0x9a>
 8004484:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e08d      	b.n	80045c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_DMA_Init+0x138>)
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d80f      	bhi.n	80044d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <HAL_DMA_Init+0x13c>)
 80044be:	4413      	add	r3, r2
 80044c0:	4a45      	ldr	r2, [pc, #276]	; (80045d8 <HAL_DMA_Init+0x140>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	009a      	lsls	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a42      	ldr	r2, [pc, #264]	; (80045dc <HAL_DMA_Init+0x144>)
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
 80044d4:	e00e      	b.n	80044f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_DMA_Init+0x148>)
 80044de:	4413      	add	r3, r2
 80044e0:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <HAL_DMA_Init+0x140>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	009a      	lsls	r2, r3, #2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a3c      	ldr	r2, [pc, #240]	; (80045e4 <HAL_DMA_Init+0x14c>)
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa4c 	bl	80049e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004554:	d102      	bne.n	800455c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004570:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_DMA_Init+0x104>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d80c      	bhi.n	800459c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa6c 	bl	8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	e008      	b.n	80045ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40020407 	.word	0x40020407
 80045d4:	bffdfff8 	.word	0xbffdfff8
 80045d8:	cccccccd 	.word	0xcccccccd
 80045dc:	40020000 	.word	0x40020000
 80045e0:	bffdfbf8 	.word	0xbffdfbf8
 80045e4:	40020400 	.word	0x40020400

080045e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07b      	b.n	80046f2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_DMA_DeInit+0x114>)
 8004612:	429a      	cmp	r2, r3
 8004614:	d80f      	bhi.n	8004636 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_DMA_DeInit+0x118>)
 800461e:	4413      	add	r3, r2
 8004620:	4a38      	ldr	r2, [pc, #224]	; (8004704 <HAL_DMA_DeInit+0x11c>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	009a      	lsls	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a35      	ldr	r2, [pc, #212]	; (8004708 <HAL_DMA_DeInit+0x120>)
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
 8004634:	e00e      	b.n	8004654 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_DMA_DeInit+0x124>)
 800463e:	4413      	add	r3, r2
 8004640:	4a30      	ldr	r2, [pc, #192]	; (8004704 <HAL_DMA_DeInit+0x11c>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	009a      	lsls	r2, r3, #2
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <HAL_DMA_DeInit+0x128>)
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	f003 021c 	and.w	r2, r3, #28
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	2101      	movs	r1, #1
 800466a:	fa01 f202 	lsl.w	r2, r1, r2
 800466e:	605a      	str	r2, [r3, #4]
#if defined(DMAMUX1)

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f9b7 	bl	80049e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004686:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00f      	beq.n	80046b0 <HAL_DMA_DeInit+0xc8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d80b      	bhi.n	80046b0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9e1 	bl	8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046ae:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	65da      	str	r2, [r3, #92]	; 0x5c

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40020407 	.word	0x40020407
 8004700:	bffdfff8 	.word	0xbffdfff8
 8004704:	cccccccd 	.word	0xcccccccd
 8004708:	40020000 	.word	0x40020000
 800470c:	bffdfbf8 	.word	0xbffdfbf8
 8004710:	40020400 	.word	0x40020400

08004714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_DMA_Start_IT+0x20>
 8004730:	2302      	movs	r3, #2
 8004732:	e066      	b.n	8004802 <HAL_DMA_Start_IT+0xee>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d155      	bne.n	80047f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f8fb 	bl	8004968 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 020e 	orr.w	r2, r2, #14
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e00f      	b.n	80047ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0204 	bic.w	r2, r2, #4
 800479a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 020a 	orr.w	r2, r2, #10
 80047aa:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e005      	b.n	8004800 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
 80047fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f003 031c 	and.w	r3, r3, #28
 800482a:	2204      	movs	r2, #4
 800482c:	409a      	lsls	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d026      	beq.n	8004884 <HAL_DMA_IRQHandler+0x7a>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d021      	beq.n	8004884 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d107      	bne.n	800485e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0204 	bic.w	r2, r2, #4
 800485c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f003 021c 	and.w	r2, r3, #28
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2104      	movs	r1, #4
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	2b00      	cmp	r3, #0
 8004878:	d071      	beq.n	800495e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004882:	e06c      	b.n	800495e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f003 031c 	and.w	r3, r3, #28
 800488c:	2202      	movs	r2, #2
 800488e:	409a      	lsls	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02e      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xec>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d029      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 020a 	bic.w	r2, r2, #10
 80048be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f003 021c 	and.w	r2, r3, #28
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	2102      	movs	r1, #2
 80048d6:	fa01 f202 	lsl.w	r2, r1, r2
 80048da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d038      	beq.n	800495e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048f4:	e033      	b.n	800495e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f003 031c 	and.w	r3, r3, #28
 80048fe:	2208      	movs	r2, #8
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02a      	beq.n	8004960 <HAL_DMA_IRQHandler+0x156>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d025      	beq.n	8004960 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 020e 	bic.w	r2, r2, #14
 8004922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f003 021c 	and.w	r2, r3, #28
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f202 	lsl.w	r2, r1, r2
 8004936:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800495e:	bf00      	nop
 8004960:	bf00      	nop
}
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800497e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004990:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f003 021c 	and.w	r2, r3, #28
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f202 	lsl.w	r2, r1, r2
 80049a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d108      	bne.n	80049c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049c6:	e007      	b.n	80049d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d80a      	bhi.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	089b      	lsrs	r3, r3, #2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6493      	str	r3, [r2, #72]	; 0x48
 8004a0c:	e007      	b.n	8004a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	009a      	lsls	r2, r3, #2
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3b08      	subs	r3, #8
 8004a26:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a34:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40020407 	.word	0x40020407
 8004a54:	4002081c 	.word	0x4002081c
 8004a58:	cccccccd 	.word	0xcccccccd
 8004a5c:	40020880 	.word	0x40020880

08004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a82:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	1000823f 	.word	0x1000823f
 8004aa4:	40020940 	.word	0x40020940

08004aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab6:	e166      	b.n	8004d86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2101      	movs	r1, #1
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8158 	beq.w	8004d80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d005      	beq.n	8004ae8 <HAL_GPIO_Init+0x40>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d130      	bne.n	8004b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	2203      	movs	r2, #3
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4013      	ands	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b1e:	2201      	movs	r2, #1
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	f003 0201 	and.w	r2, r3, #1
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d017      	beq.n	8004b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	2203      	movs	r2, #3
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d123      	bne.n	8004bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	08da      	lsrs	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3208      	adds	r2, #8
 8004b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	08da      	lsrs	r2, r3, #3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3208      	adds	r2, #8
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	2203      	movs	r2, #3
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 0203 	and.w	r2, r3, #3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80b2 	beq.w	8004d80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1c:	4b61      	ldr	r3, [pc, #388]	; (8004da4 <HAL_GPIO_Init+0x2fc>)
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	4a60      	ldr	r2, [pc, #384]	; (8004da4 <HAL_GPIO_Init+0x2fc>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6613      	str	r3, [r2, #96]	; 0x60
 8004c28:	4b5e      	ldr	r3, [pc, #376]	; (8004da4 <HAL_GPIO_Init+0x2fc>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c34:	4a5c      	ldr	r2, [pc, #368]	; (8004da8 <HAL_GPIO_Init+0x300>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c5e:	d02b      	beq.n	8004cb8 <HAL_GPIO_Init+0x210>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a52      	ldr	r2, [pc, #328]	; (8004dac <HAL_GPIO_Init+0x304>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d025      	beq.n	8004cb4 <HAL_GPIO_Init+0x20c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a51      	ldr	r2, [pc, #324]	; (8004db0 <HAL_GPIO_Init+0x308>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01f      	beq.n	8004cb0 <HAL_GPIO_Init+0x208>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a50      	ldr	r2, [pc, #320]	; (8004db4 <HAL_GPIO_Init+0x30c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d019      	beq.n	8004cac <HAL_GPIO_Init+0x204>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a4f      	ldr	r2, [pc, #316]	; (8004db8 <HAL_GPIO_Init+0x310>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_GPIO_Init+0x200>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a4e      	ldr	r2, [pc, #312]	; (8004dbc <HAL_GPIO_Init+0x314>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00d      	beq.n	8004ca4 <HAL_GPIO_Init+0x1fc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a4d      	ldr	r2, [pc, #308]	; (8004dc0 <HAL_GPIO_Init+0x318>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <HAL_GPIO_Init+0x1f8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4c      	ldr	r2, [pc, #304]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_GPIO_Init+0x1f4>
 8004c98:	2307      	movs	r3, #7
 8004c9a:	e00e      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	e00c      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	e00a      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004ca4:	2305      	movs	r3, #5
 8004ca6:	e008      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	e006      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004cac:	2303      	movs	r3, #3
 8004cae:	e004      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e002      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_GPIO_Init+0x212>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	f002 0203 	and.w	r2, r2, #3
 8004cc0:	0092      	lsls	r2, r2, #2
 8004cc2:	4093      	lsls	r3, r2
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cca:	4937      	ldr	r1, [pc, #220]	; (8004da8 <HAL_GPIO_Init+0x300>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cfc:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d02:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d26:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d50:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3301      	adds	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f47f ae91 	bne.w	8004ab8 <HAL_GPIO_Init+0x10>
  }
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40010000 	.word	0x40010000
 8004dac:	48000400 	.word	0x48000400
 8004db0:	48000800 	.word	0x48000800
 8004db4:	48000c00 	.word	0x48000c00
 8004db8:	48001000 	.word	0x48001000
 8004dbc:	48001400 	.word	0x48001400
 8004dc0:	48001800 	.word	0x48001800
 8004dc4:	48001c00 	.word	0x48001c00
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004de8:	e002      	b.n	8004df0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b08f      	sub	sp, #60	; 0x3c
 8004e00:	af0a      	add	r7, sp, #40	; 0x28
 8004e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e116      	b.n	800503c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fb ffb3 	bl	8000d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2203      	movs	r2, #3
 8004e32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f002 fea0 	bl	8007b92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	687e      	ldr	r6, [r7, #4]
 8004e5a:	466d      	mov	r5, sp
 8004e5c:	f106 0410 	add.w	r4, r6, #16
 8004e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e70:	1d33      	adds	r3, r6, #4
 8004e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	f002 fdb3 	bl	80079e0 <USB_CoreInit>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0d7      	b.n	800503c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f002 fe8e 	bl	8007bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
 8004e9c:	e04a      	b.n	8004f34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	333d      	adds	r3, #61	; 0x3d
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004eb2:	7bfa      	ldrb	r2, [r7, #15]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	333c      	adds	r3, #60	; 0x3c
 8004ec2:	7bfa      	ldrb	r2, [r7, #15]
 8004ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3342      	adds	r3, #66	; 0x42
 8004eda:	4602      	mov	r2, r0
 8004edc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	333f      	adds	r3, #63	; 0x3f
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3344      	adds	r3, #68	; 0x44
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	3348      	adds	r3, #72	; 0x48
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3350      	adds	r3, #80	; 0x50
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	3301      	adds	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d3af      	bcc.n	8004e9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	e044      	b.n	8004fce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	7bfa      	ldrb	r2, [r7, #15]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d3b5      	bcc.n	8004f44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	687e      	ldr	r6, [r7, #4]
 8004fe0:	466d      	mov	r5, sp
 8004fe2:	f106 0410 	add.w	r4, r6, #16
 8004fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ff6:	1d33      	adds	r3, r6, #4
 8004ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f002 fe26 	bl	8007c4c <USB_DevInit>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e014      	b.n	800503c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b01      	cmp	r3, #1
 8005028:	d102      	bne.n	8005030 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 ff6c 	bl	8005f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f003 fdf8 	bl	8008c2a <USB_DevDisconnect>

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005044 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_PCD_Start+0x1c>
 800505c:	2302      	movs	r3, #2
 800505e:	e01c      	b.n	800509a <HAL_PCD_Start+0x56>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	2b01      	cmp	r3, #1
 800506e:	d105      	bne.n	800507c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f002 fd75 	bl	8007b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f003 fdac 	bl	8008be8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050a2:	b590      	push	{r4, r7, lr}
 80050a4:	b08d      	sub	sp, #52	; 0x34
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f003 fe6a 	bl	8008d92 <USB_GetMode>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 8384 	bne.w	80057ce <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f003 fdce 	bl	8008c6c <USB_ReadInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 837a 	beq.w	80057cc <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f003 fdc5 	bl	8008c6c <USB_ReadInterrupts>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d107      	bne.n	80050fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f002 0202 	and.w	r2, r2, #2
 80050fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f003 fdb3 	bl	8008c6c <USB_ReadInterrupts>
 8005106:	4603      	mov	r3, r0
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	d161      	bne.n	80051d4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0210 	bic.w	r2, r2, #16
 800511e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4413      	add	r3, r2
 800513c:	3304      	adds	r3, #4
 800513e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	0c5b      	lsrs	r3, r3, #17
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	2b02      	cmp	r3, #2
 800514a:	d124      	bne.n	8005196 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d035      	beq.n	80051c4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6a38      	ldr	r0, [r7, #32]
 800516c:	f003 fbea 	bl	8008944 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800517c:	441a      	add	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518e:	441a      	add	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	619a      	str	r2, [r3, #24]
 8005194:	e016      	b.n	80051c4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	0c5b      	lsrs	r3, r3, #17
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d110      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051a8:	2208      	movs	r2, #8
 80051aa:	4619      	mov	r1, r3
 80051ac:	6a38      	ldr	r0, [r7, #32]
 80051ae:	f003 fbc9 	bl	8008944 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051be:	441a      	add	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0210 	orr.w	r2, r2, #16
 80051d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f003 fd47 	bl	8008c6c <USB_ReadInterrupts>
 80051de:	4603      	mov	r3, r0
 80051e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051e8:	d16e      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f003 fd4d 	bl	8008c92 <USB_ReadDevAllOutEpInterrupt>
 80051f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051fa:	e062      	b.n	80052c2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d057      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f003 fd72 	bl	8008cfa <USB_ReadDevOutEPInterrupt>
 8005216:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	2301      	movs	r3, #1
 8005232:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fd8c 	bl	8005d54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00c      	beq.n	8005260 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	2308      	movs	r3, #8
 8005256:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fdc8 	bl	8005df0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	2310      	movs	r3, #16
 800527a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	461a      	mov	r2, r3
 8005294:	2320      	movs	r3, #32
 8005296:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	461a      	mov	r2, r3
 80052b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d199      	bne.n	80051fc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f003 fccd 	bl	8008c6c <USB_ReadInterrupts>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052dc:	f040 808c 	bne.w	80053f8 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f003 fcee 	bl	8008cc6 <USB_ReadDevAllInEpInterrupt>
 80052ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052f0:	e07e      	b.n	80053f0 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d073      	beq.n	80053e4 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f003 fd15 	bl	8008d36 <USB_ReadDevInEPInterrupt>
 800530c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	2201      	movs	r2, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	43db      	mvns	r3, r3
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005338:	4013      	ands	r3, r2
 800533a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	461a      	mov	r2, r3
 800534a:	2301      	movs	r3, #1
 800534c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	b2db      	uxtb	r3, r3
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fb fd8c 	bl	8000e72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	2308      	movs	r3, #8
 8005374:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	461a      	mov	r2, r3
 800538e:	2310      	movs	r3, #16
 8005390:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	461a      	mov	r2, r3
 80053aa:	2340      	movs	r3, #64	; 0x40
 80053ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ba:	6a38      	ldr	r0, [r7, #32]
 80053bc:	f002 fd92 	bl	8007ee4 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	461a      	mov	r2, r3
 80053ce:	2302      	movs	r3, #2
 80053d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fc2f 	bl	8005c42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	3301      	adds	r3, #1
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f af7d 	bne.w	80052f2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f003 fc35 	bl	8008c6c <USB_ReadInterrupts>
 8005402:	4603      	mov	r3, r0
 8005404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d122      	bne.n	8005454 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005428:	2b01      	cmp	r3, #1
 800542a:	d108      	bne.n	800543e <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005434:	2100      	movs	r1, #0
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fd8a 	bl	8005f50 <HAL_PCDEx_LPM_Callback>
 800543c:	e002      	b.n	8005444 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fd62 	bl	8000f08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f003 fc07 	bl	8008c6c <USB_ReadInterrupts>
 800545e:	4603      	mov	r3, r0
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d112      	bne.n	8005490 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fb fd36 	bl	8000eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800548e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f003 fbe9 	bl	8008c6c <USB_ReadInterrupts>
 800549a:	4603      	mov	r3, r0
 800549c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a4:	d121      	bne.n	80054ea <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80054b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d111      	bne.n	80054e4 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	089b      	lsrs	r3, r3, #2
 80054d0:	f003 020f 	and.w	r2, r3, #15
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80054da:	2101      	movs	r1, #1
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fd37 	bl	8005f50 <HAL_PCDEx_LPM_Callback>
 80054e2:	e002      	b.n	80054ea <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fb fd01 	bl	8000eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f003 fbbc 	bl	8008c6c <USB_ReadInterrupts>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	f040 80b5 	bne.w	800566c <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2110      	movs	r1, #16
 800551c:	4618      	mov	r0, r3
 800551e:	f002 fce1 	bl	8007ee4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005526:	e046      	b.n	80055b6 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	461a      	mov	r2, r3
 800556a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800556e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800558e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	3301      	adds	r3, #1
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3b3      	bcc.n	8005528 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d016      	beq.n	800560a <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ec:	f043 030b 	orr.w	r3, r3, #11
 80055f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005602:	f043 030b 	orr.w	r3, r3, #11
 8005606:	6453      	str	r3, [r2, #68]	; 0x44
 8005608:	e015      	b.n	8005636 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800561c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005620:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005630:	f043 030b 	orr.w	r3, r3, #11
 8005634:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005644:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005648:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f003 fbcc 	bl	8008df4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800566a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f003 fafb 	bl	8008c6c <USB_ReadInterrupts>
 8005676:	4603      	mov	r3, r0
 8005678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005680:	d124      	bne.n	80056cc <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f003 fb91 	bl	8008dae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f002 fca0 	bl	8007fd6 <USB_GetDevSpeed>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681c      	ldr	r4, [r3, #0]
 80056a2:	f001 fb59 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 80056a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	4620      	mov	r0, r4
 80056b2:	f002 f9c1 	bl	8007a38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fb fc03 	bl	8000ec2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f003 facb 	bl	8008c6c <USB_ReadInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d10a      	bne.n	80056f6 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fb fbe0 	bl	8000ea6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f002 0208 	and.w	r2, r2, #8
 80056f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f003 fab6 	bl	8008c6c <USB_ReadInterrupts>
 8005700:	4603      	mov	r3, r0
 8005702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570a:	d10f      	bne.n	800572c <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	b2db      	uxtb	r3, r3
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fb fc16 	bl	8000f48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800572a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f003 fa9b 	bl	8008c6c <USB_ReadInterrupts>
 8005736:	4603      	mov	r3, r0
 8005738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005740:	d10f      	bne.n	8005762 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	b2db      	uxtb	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fb fbe9 	bl	8000f24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f003 fa80 	bl	8008c6c <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d10a      	bne.n	800578e <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fb fbf7 	bl	8000f6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800578c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f003 fa6a 	bl	8008c6c <USB_ReadInterrupts>
 8005798:	4603      	mov	r3, r0
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d115      	bne.n	80057ce <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb fbe7 	bl	8000f88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	e000      	b.n	80057ce <HAL_PCD_IRQHandler+0x72c>
      return;
 80057cc:	bf00      	nop
    }
  }
}
 80057ce:	3734      	adds	r7, #52	; 0x34
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd90      	pop	{r4, r7, pc}

080057d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_PCD_SetAddress+0x1a>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e013      	b.n	8005816 <HAL_PCD_SetAddress+0x42>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	4611      	mov	r1, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f003 f9c8 	bl	8008b9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	461a      	mov	r2, r3
 800582c:	4603      	mov	r3, r0
 800582e:	70fb      	strb	r3, [r7, #3]
 8005830:	460b      	mov	r3, r1
 8005832:	803b      	strh	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800583c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005840:	2b00      	cmp	r3, #0
 8005842:	da0f      	bge.n	8005864 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	f003 020f 	and.w	r2, r3, #15
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	3338      	adds	r3, #56	; 0x38
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	705a      	strb	r2, [r3, #1]
 8005862:	e00f      	b.n	8005884 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	f003 020f 	and.w	r2, r3, #15
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	3304      	adds	r3, #4
 800587c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	b2da      	uxtb	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005890:	883a      	ldrh	r2, [r7, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	78ba      	ldrb	r2, [r7, #2]
 800589a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058ae:	78bb      	ldrb	r3, [r7, #2]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d102      	bne.n	80058ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_PCD_EP_Open+0xaa>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e00e      	b.n	80058e6 <HAL_PCD_EP_Open+0xc8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f002 fb9c 	bl	8008014 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80058e4:	7afb      	ldrb	r3, [r7, #11]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da0f      	bge.n	8005922 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	f003 020f 	and.w	r2, r3, #15
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	3338      	adds	r3, #56	; 0x38
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	3304      	adds	r3, #4
 8005918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	705a      	strb	r2, [r3, #1]
 8005920:	e00f      	b.n	8005942 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	f003 020f 	and.w	r2, r3, #15
 8005928:	4613      	mov	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	3304      	adds	r3, #4
 800593a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_PCD_EP_Close+0x6e>
 8005958:	2302      	movs	r3, #2
 800595a:	e00e      	b.n	800597a <HAL_PCD_EP_Close+0x8c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68f9      	ldr	r1, [r7, #12]
 800596a:	4618      	mov	r0, r3
 800596c:	f002 fbda 	bl	8008124 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b086      	sub	sp, #24
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	460b      	mov	r3, r1
 8005990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005992:	7afb      	ldrb	r3, [r7, #11]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	3304      	adds	r3, #4
 80059aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2200      	movs	r2, #0
 80059bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059d0:	7afb      	ldrb	r3, [r7, #11]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fe57 	bl	8008694 <USB_EP0StartXfer>
 80059e6:	e005      	b.n	80059f4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f002 fc74 	bl	80082dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	3338      	adds	r3, #56	; 0x38
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	3304      	adds	r3, #4
 8005a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f002 fe1a 	bl	8008694 <USB_EP0StartXfer>
 8005a60:	e005      	b.n	8005a6e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 fc37 	bl	80082dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d901      	bls.n	8005a96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e04e      	b.n	8005b34 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	da0f      	bge.n	8005abe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 020f 	and.w	r2, r3, #15
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	3338      	adds	r3, #56	; 0x38
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	705a      	strb	r2, [r3, #1]
 8005abc:	e00d      	b.n	8005ada <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_PCD_EP_SetStall+0x82>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e01c      	b.n	8005b34 <HAL_PCD_EP_SetStall+0xbc>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f002 ff73 	bl	80089f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f003 f965 	bl	8008df4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 020f 	and.w	r2, r3, #15
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d901      	bls.n	8005b5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e042      	b.n	8005be0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da0f      	bge.n	8005b82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	3338      	adds	r3, #56	; 0x38
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	705a      	strb	r2, [r3, #1]
 8005b80:	e00f      	b.n	8005ba2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	3304      	adds	r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_PCD_EP_ClrStall+0x86>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e00e      	b.n	8005be0 <HAL_PCD_EP_ClrStall+0xa4>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f002 ff7d 	bl	8008ad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_PCD_EP_Flush+0x1a>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e01b      	b.n	8005c3a <HAL_PCD_EP_Flush+0x52>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da09      	bge.n	8005c26 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f002 f960 	bl	8007ee4 <USB_FlushTxFifo>
 8005c24:	e004      	b.n	8005c30 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f002 f98c 	bl	8007f48 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b088      	sub	sp, #32
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	3338      	adds	r3, #56	; 0x38
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	3304      	adds	r3, #4
 8005c68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d901      	bls.n	8005c7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e067      	b.n	8005d4a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d902      	bls.n	8005c96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3303      	adds	r3, #3
 8005c9a:	089b      	lsrs	r3, r3, #2
 8005c9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c9e:	e026      	b.n	8005cee <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d902      	bls.n	8005cbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3303      	adds	r3, #3
 8005cc0:	089b      	lsrs	r3, r3, #2
 8005cc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68d9      	ldr	r1, [r3, #12]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f002 fdfd 	bl	80088d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	441a      	add	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	441a      	add	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d809      	bhi.n	8005d18 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d203      	bcs.n	8005d18 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1c3      	bne.n	8005ca0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d811      	bhi.n	8005d48 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	6939      	ldr	r1, [r7, #16]
 8005d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d44:	4013      	ands	r3, r2
 8005d46:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	333c      	adds	r3, #60	; 0x3c
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4a19      	ldr	r2, [pc, #100]	; (8005dec <PCD_EP_OutXfrComplete_int+0x98>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d124      	bne.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	461a      	mov	r2, r3
 8005da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da6:	6093      	str	r3, [r2, #8]
 8005da8:	e01a      	b.n	8005de0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2320      	movs	r3, #32
 8005dc4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb f835 	bl	8000e3c <HAL_PCD_DataOutStageCallback>
 8005dd2:	e005      	b.n	8005de0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fb f82e 	bl	8000e3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	4f54310a 	.word	0x4f54310a

08005df0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	333c      	adds	r3, #60	; 0x3c
 8005e08:	3304      	adds	r3, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <PCD_EP_OutSetupPacket_int+0x64>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d90e      	bls.n	8005e44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fa ffe7 	bl	8000e18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	4f54300a 	.word	0x4f54300a

08005e58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
 8005e64:	4613      	mov	r3, r2
 8005e66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e76:	883b      	ldrh	r3, [r7, #0]
 8005e78:	0419      	lsls	r1, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28
 8005e84:	e028      	b.n	8005ed8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
 8005e98:	e00d      	b.n	8005eb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	3340      	adds	r3, #64	; 0x40
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
 8005eb6:	7bfa      	ldrb	r2, [r7, #15]
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d3ec      	bcc.n	8005e9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ec0:	883b      	ldrh	r3, [r7, #0]
 8005ec2:	0418      	lsls	r0, r3, #16
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6819      	ldr	r1, [r3, #0]
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	4302      	orrs	r2, r0
 8005ed0:	3340      	adds	r3, #64	; 0x40
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	f043 0303 	orr.w	r3, r3, #3
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f76:	6013      	str	r3, [r2, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40007000 	.word	0x40007000

08005f88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d102      	bne.n	8005fa0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f9e:	e00b      	b.n	8005fb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005fa0:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d102      	bne.n	8005fb6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb4:	e000      	b.n	8005fb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005fb6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40007000 	.word	0x40007000

08005fc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d141      	bne.n	800605a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fd6:	4b4b      	ldr	r3, [pc, #300]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d131      	bne.n	8006048 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fe4:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fea:	4a46      	ldr	r2, [pc, #280]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ff4:	4b43      	ldr	r3, [pc, #268]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ffc:	4a41      	ldr	r2, [pc, #260]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006002:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006004:	4b40      	ldr	r3, [pc, #256]	; (8006108 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2232      	movs	r2, #50	; 0x32
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	4a3f      	ldr	r2, [pc, #252]	; (800610c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	0c9b      	lsrs	r3, r3, #18
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800601a:	e002      	b.n	8006022 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b01      	subs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006022:	4b38      	ldr	r3, [pc, #224]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602e:	d102      	bne.n	8006036 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f2      	bne.n	800601c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006036:	4b33      	ldr	r3, [pc, #204]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006042:	d158      	bne.n	80060f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e057      	b.n	80060f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006048:	4b2e      	ldr	r3, [pc, #184]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604e:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006058:	e04d      	b.n	80060f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006060:	d141      	bne.n	80060e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006062:	4b28      	ldr	r3, [pc, #160]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606e:	d131      	bne.n	80060d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006070:	4b24      	ldr	r3, [pc, #144]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006076:	4a23      	ldr	r2, [pc, #140]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006080:	4b20      	ldr	r3, [pc, #128]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006088:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800608e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006090:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2232      	movs	r2, #50	; 0x32
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	0c9b      	lsrs	r3, r3, #18
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060a6:	e002      	b.n	80060ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ae:	4b15      	ldr	r3, [pc, #84]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ba:	d102      	bne.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f2      	bne.n	80060a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ce:	d112      	bne.n	80060f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e011      	b.n	80060f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80060e4:	e007      	b.n	80060f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060ee:	4a05      	ldr	r2, [pc, #20]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40007000 	.word	0x40007000
 8006108:	20000068 	.word	0x20000068
 800610c:	431bde83 	.word	0x431bde83

08006110 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <HAL_PWREx_EnableVddUSB+0x1c>)
 800611a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800611e:	6053      	str	r3, [r2, #4]
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40007000 	.word	0x40007000

08006130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f000 bc1a 	b.w	8006978 <HAL_RCC_OscConfig+0x848>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006144:	4b96      	ldr	r3, [pc, #600]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800614e:	4b94      	ldr	r3, [pc, #592]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80e4 	beq.w	800632e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_RCC_OscConfig+0x4c>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b0c      	cmp	r3, #12
 8006170:	f040 808b 	bne.w	800628a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b01      	cmp	r3, #1
 8006178:	f040 8087 	bne.w	800628a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800617c:	4b88      	ldr	r3, [pc, #544]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_OscConfig+0x64>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e3f1      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	4b81      	ldr	r3, [pc, #516]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <HAL_RCC_OscConfig+0x7e>
 80061a4:	4b7e      	ldr	r3, [pc, #504]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ac:	e005      	b.n	80061ba <HAL_RCC_OscConfig+0x8a>
 80061ae:	4b7c      	ldr	r3, [pc, #496]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d223      	bcs.n	8006206 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fdd4 	bl	8006d70 <RCC_SetFlashLatencyFromMSIRange>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e3d2      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061d2:	4b73      	ldr	r3, [pc, #460]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a72      	ldr	r2, [pc, #456]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061d8:	f043 0308 	orr.w	r3, r3, #8
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	4b70      	ldr	r3, [pc, #448]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	496d      	ldr	r1, [pc, #436]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061f0:	4b6b      	ldr	r3, [pc, #428]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	4968      	ldr	r1, [pc, #416]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006200:	4313      	orrs	r3, r2
 8006202:	604b      	str	r3, [r1, #4]
 8006204:	e025      	b.n	8006252 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006206:	4b66      	ldr	r3, [pc, #408]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a65      	ldr	r2, [pc, #404]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 800620c:	f043 0308 	orr.w	r3, r3, #8
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b63      	ldr	r3, [pc, #396]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	4960      	ldr	r1, [pc, #384]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006220:	4313      	orrs	r3, r2
 8006222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006224:	4b5e      	ldr	r3, [pc, #376]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	495b      	ldr	r1, [pc, #364]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fd94 	bl	8006d70 <RCC_SetFlashLatencyFromMSIRange>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e392      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006252:	f000 fcf7 	bl	8006c44 <HAL_RCC_GetSysClockFreq>
 8006256:	4602      	mov	r2, r0
 8006258:	4b51      	ldr	r3, [pc, #324]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4950      	ldr	r1, [pc, #320]	; (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006264:	5ccb      	ldrb	r3, [r1, r3]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	4a4e      	ldr	r2, [pc, #312]	; (80063a8 <HAL_RCC_OscConfig+0x278>)
 8006270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006272:	4b4e      	ldr	r3, [pc, #312]	; (80063ac <HAL_RCC_OscConfig+0x27c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fc f998 	bl	80025ac <HAL_InitTick>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d052      	beq.n	800632c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	e376      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d032      	beq.n	80062f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006292:	4b43      	ldr	r3, [pc, #268]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a42      	ldr	r2, [pc, #264]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800629e:	f7fc f9d5 	bl	800264c <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062a6:	f7fc f9d1 	bl	800264c <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e35f      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062b8:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062c4:	4b36      	ldr	r3, [pc, #216]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a35      	ldr	r2, [pc, #212]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062ca:	f043 0308 	orr.w	r3, r3, #8
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	4b33      	ldr	r3, [pc, #204]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4930      	ldr	r1, [pc, #192]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062e2:	4b2f      	ldr	r3, [pc, #188]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	492b      	ldr	r1, [pc, #172]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	604b      	str	r3, [r1, #4]
 80062f6:	e01a      	b.n	800632e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062f8:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a28      	ldr	r2, [pc, #160]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006304:	f7fc f9a2 	bl	800264c <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800630c:	f7fc f99e 	bl	800264c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e32c      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800631e:	4b20      	ldr	r3, [pc, #128]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x1dc>
 800632a:	e000      	b.n	800632e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800632c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d077      	beq.n	800642a <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d005      	beq.n	800634c <HAL_RCC_OscConfig+0x21c>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d10e      	bne.n	8006364 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d10b      	bne.n	8006364 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d067      	beq.n	8006428 <HAL_RCC_OscConfig+0x2f8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d163      	bne.n	8006428 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e309      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636c:	d106      	bne.n	800637c <HAL_RCC_OscConfig+0x24c>
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a0b      	ldr	r2, [pc, #44]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e025      	b.n	80063c8 <HAL_RCC_OscConfig+0x298>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006384:	d114      	bne.n	80063b0 <HAL_RCC_OscConfig+0x280>
 8006386:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 800638c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a02      	ldr	r2, [pc, #8]	; (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e013      	b.n	80063c8 <HAL_RCC_OscConfig+0x298>
 80063a0:	40021000 	.word	0x40021000
 80063a4:	0800d0fc 	.word	0x0800d0fc
 80063a8:	20000068 	.word	0x20000068
 80063ac:	2000006c 	.word	0x2000006c
 80063b0:	4ba2      	ldr	r3, [pc, #648]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4aa1      	ldr	r2, [pc, #644]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	4b9f      	ldr	r3, [pc, #636]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a9e      	ldr	r2, [pc, #632]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80063c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d015      	beq.n	80063fc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fc f93c 	bl	800264c <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d6:	e00a      	b.n	80063ee <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d8:	f7fc f938 	bl	800264c <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e2c4      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ee:	4b93      	ldr	r3, [pc, #588]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0ee      	beq.n	80063d8 <HAL_RCC_OscConfig+0x2a8>
 80063fa:	e016      	b.n	800642a <HAL_RCC_OscConfig+0x2fa>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fc f926 	bl	800264c <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006402:	e00a      	b.n	800641a <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006404:	f7fc f922 	bl	800264c <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e2ae      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800641a:	4b88      	ldr	r3, [pc, #544]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1ee      	bne.n	8006404 <HAL_RCC_OscConfig+0x2d4>
 8006426:	e000      	b.n	800642a <HAL_RCC_OscConfig+0x2fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d060      	beq.n	80064f8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d005      	beq.n	8006448 <HAL_RCC_OscConfig+0x318>
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d119      	bne.n	8006476 <HAL_RCC_OscConfig+0x346>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d116      	bne.n	8006476 <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006448:	4b7c      	ldr	r3, [pc, #496]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_RCC_OscConfig+0x330>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e28b      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006460:	4b76      	ldr	r3, [pc, #472]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	061b      	lsls	r3, r3, #24
 800646e:	4973      	ldr	r1, [pc, #460]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006474:	e040      	b.n	80064f8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d023      	beq.n	80064c6 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800647e:	4b6f      	ldr	r3, [pc, #444]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a6e      	ldr	r2, [pc, #440]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648a:	f7fc f8df 	bl	800264c <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006492:	f7fc f8db 	bl	800264c <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e269      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064a4:	4b65      	ldr	r3, [pc, #404]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b0:	4b62      	ldr	r3, [pc, #392]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	495f      	ldr	r1, [pc, #380]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	604b      	str	r3, [r1, #4]
 80064c4:	e018      	b.n	80064f8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c6:	4b5d      	ldr	r3, [pc, #372]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5c      	ldr	r2, [pc, #368]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80064cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fc f8bb 	bl	800264c <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064da:	f7fc f8b7 	bl	800264c <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e245      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064ec:	4b53      	ldr	r3, [pc, #332]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f0      	bne.n	80064da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d03c      	beq.n	800657e <HAL_RCC_OscConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01c      	beq.n	8006546 <HAL_RCC_OscConfig+0x416>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800650c:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800650e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006512:	4a4a      	ldr	r2, [pc, #296]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7fc f896 	bl	800264c <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006524:	f7fc f892 	bl	800264c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e220      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006536:	4b41      	ldr	r3, [pc, #260]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0ef      	beq.n	8006524 <HAL_RCC_OscConfig+0x3f4>
 8006544:	e01b      	b.n	800657e <HAL_RCC_OscConfig+0x44e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006546:	4b3d      	ldr	r3, [pc, #244]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654c:	4a3b      	ldr	r2, [pc, #236]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006556:	f7fc f879 	bl	800264c <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x440>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800655e:	f7fc f875 	bl	800264c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e203      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006570:	4b32      	ldr	r3, [pc, #200]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1ef      	bne.n	800655e <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80a6 	beq.w	80066d8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800658c:	2300      	movs	r3, #0
 800658e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006590:	4b2a      	ldr	r3, [pc, #168]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <HAL_RCC_OscConfig+0x488>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800659c:	4b27      	ldr	r3, [pc, #156]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	4a26      	ldr	r2, [pc, #152]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a6:	6593      	str	r3, [r2, #88]	; 0x58
 80065a8:	4b24      	ldr	r3, [pc, #144]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 80065aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b0:	60bb      	str	r3, [r7, #8]
 80065b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b4:	2301      	movs	r3, #1
 80065b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <HAL_RCC_OscConfig+0x510>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d118      	bne.n	80065f6 <HAL_RCC_OscConfig+0x4c6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065c4:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <HAL_RCC_OscConfig+0x510>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <HAL_RCC_OscConfig+0x510>)
 80065ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065d0:	f7fc f83c 	bl	800264c <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x4ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d8:	f7fc f838 	bl	800264c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e1c6      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ea:	4b15      	ldr	r3, [pc, #84]	; (8006640 <HAL_RCC_OscConfig+0x510>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x4a8>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d108      	bne.n	8006610 <HAL_RCC_OscConfig+0x4e0>
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006604:	4a0d      	ldr	r2, [pc, #52]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800660e:	e029      	b.n	8006664 <HAL_RCC_OscConfig+0x534>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b05      	cmp	r3, #5
 8006616:	d115      	bne.n	8006644 <HAL_RCC_OscConfig+0x514>
 8006618:	4b08      	ldr	r3, [pc, #32]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006620:	f043 0304 	orr.w	r3, r3, #4
 8006624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662e:	4a03      	ldr	r2, [pc, #12]	; (800663c <HAL_RCC_OscConfig+0x50c>)
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006638:	e014      	b.n	8006664 <HAL_RCC_OscConfig+0x534>
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000
 8006640:	40007000 	.word	0x40007000
 8006644:	4b9d      	ldr	r3, [pc, #628]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664a:	4a9c      	ldr	r2, [pc, #624]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006654:	4b99      	ldr	r3, [pc, #612]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665a:	4a98      	ldr	r2, [pc, #608]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d016      	beq.n	800669a <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fb ffee 	bl	800264c <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006672:	e00a      	b.n	800668a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006674:	f7fb ffea 	bl	800264c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e176      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668a:	4b8c      	ldr	r3, [pc, #560]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800668c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0ed      	beq.n	8006674 <HAL_RCC_OscConfig+0x544>
 8006698:	e015      	b.n	80066c6 <HAL_RCC_OscConfig+0x596>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669a:	f7fb ffd7 	bl	800264c <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066a0:	e00a      	b.n	80066b8 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a2:	f7fb ffd3 	bl	800264c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e15f      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066b8:	4b80      	ldr	r3, [pc, #512]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ed      	bne.n	80066a2 <HAL_RCC_OscConfig+0x572>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066c6:	7ffb      	ldrb	r3, [r7, #31]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d105      	bne.n	80066d8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066cc:	4b7b      	ldr	r3, [pc, #492]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	4a7a      	ldr	r2, [pc, #488]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d03c      	beq.n	800675e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01c      	beq.n	8006726 <HAL_RCC_OscConfig+0x5f6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066ec:	4b73      	ldr	r3, [pc, #460]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80066ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066f2:	4a72      	ldr	r2, [pc, #456]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fb ffa6 	bl	800264c <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x5e6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006704:	f7fb ffa2 	bl	800264c <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e130      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006716:	4b69      	ldr	r3, [pc, #420]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0ef      	beq.n	8006704 <HAL_RCC_OscConfig+0x5d4>
 8006724:	e01b      	b.n	800675e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006726:	4b65      	ldr	r3, [pc, #404]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800672c:	4a63      	ldr	r2, [pc, #396]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006736:	f7fb ff89 	bl	800264c <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800673e:	f7fb ff85 	bl	800264c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e113      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006750:	4b5a      	ldr	r3, [pc, #360]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ef      	bne.n	800673e <HAL_RCC_OscConfig+0x60e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8107 	beq.w	8006976 <HAL_RCC_OscConfig+0x846>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	2b02      	cmp	r3, #2
 800676e:	f040 80cf 	bne.w	8006910 <HAL_RCC_OscConfig+0x7e0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006772:	4b52      	ldr	r3, [pc, #328]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 0203 	and.w	r2, r3, #3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	429a      	cmp	r2, r3
 8006784:	d12c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	3b01      	subs	r3, #1
 8006792:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d123      	bne.n	80067e0 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d11b      	bne.n	80067e0 <HAL_RCC_OscConfig+0x6b0>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d113      	bne.n	80067e0 <HAL_RCC_OscConfig+0x6b0>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	3b01      	subs	r3, #1
 80067c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d109      	bne.n	80067e0 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	3b01      	subs	r3, #1
 80067da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067dc:	429a      	cmp	r2, r3
 80067de:	d071      	beq.n	80068c4 <HAL_RCC_OscConfig+0x794>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b0c      	cmp	r3, #12
 80067e4:	d068      	beq.n	80068b8 <HAL_RCC_OscConfig+0x788>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067e6:	4b35      	ldr	r3, [pc, #212]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <HAL_RCC_OscConfig+0x6ce>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80067f2:	4b32      	ldr	r3, [pc, #200]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_RCC_OscConfig+0x6d2>
#endif
            )
          {
            return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e0ba      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800680e:	f7fb ff1d 	bl	800264c <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x6f8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006816:	f7fb ff19 	bl	800264c <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x6f8>
              {
                return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e0a7      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006828:	4b24      	ldr	r3, [pc, #144]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f0      	bne.n	8006816 <HAL_RCC_OscConfig+0x6e6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <HAL_RCC_OscConfig+0x790>)
 800683a:	4013      	ands	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006844:	3a01      	subs	r2, #1
 8006846:	0112      	lsls	r2, r2, #4
 8006848:	4311      	orrs	r1, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800684e:	0212      	lsls	r2, r2, #8
 8006850:	4311      	orrs	r1, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006856:	0852      	lsrs	r2, r2, #1
 8006858:	3a01      	subs	r2, #1
 800685a:	0552      	lsls	r2, r2, #21
 800685c:	4311      	orrs	r1, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006862:	0852      	lsrs	r2, r2, #1
 8006864:	3a01      	subs	r2, #1
 8006866:	0652      	lsls	r2, r2, #25
 8006868:	4311      	orrs	r1, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800686e:	06d2      	lsls	r2, r2, #27
 8006870:	430a      	orrs	r2, r1
 8006872:	4912      	ldr	r1, [pc, #72]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006874:	4313      	orrs	r3, r2
 8006876:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006878:	4b10      	ldr	r3, [pc, #64]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a0f      	ldr	r2, [pc, #60]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800687e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006882:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006884:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4a0c      	ldr	r2, [pc, #48]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 800688a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006890:	f7fb fedc 	bl	800264c <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x77a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006898:	f7fb fed8 	bl	800264c <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x77a>
              {
                return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e066      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068aa:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RCC_OscConfig+0x78c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0x768>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068b6:	e05e      	b.n	8006976 <HAL_RCC_OscConfig+0x846>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e05d      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
 80068bc:	40021000 	.word	0x40021000
 80068c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c4:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d152      	bne.n	8006976 <HAL_RCC_OscConfig+0x846>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068d0:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 80068d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068dc:	4b28      	ldr	r3, [pc, #160]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4a27      	ldr	r2, [pc, #156]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 80068e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068e8:	f7fb feb0 	bl	800264c <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x7d2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fb feac 	bl	800264c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x7d2>
            {
              return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e03a      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006902:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0x7c0>
 800690e:	e032      	b.n	8006976 <HAL_RCC_OscConfig+0x846>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b0c      	cmp	r3, #12
 8006914:	d02d      	beq.n	8006972 <HAL_RCC_OscConfig+0x842>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 800691c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006920:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	4a13      	ldr	r2, [pc, #76]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006934:	f023 0303 	bic.w	r3, r3, #3
 8006938:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a10      	ldr	r2, [pc, #64]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006940:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006948:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fb fe7f 	bl	800264c <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x834>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006952:	f7fb fe7b 	bl	800264c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e009      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_RCC_OscConfig+0x850>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f0      	bne.n	8006952 <HAL_RCC_OscConfig+0x822>
 8006970:	e001      	b.n	8006976 <HAL_RCC_OscConfig+0x846>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <HAL_RCC_OscConfig+0x848>
      }
    }
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40021000 	.word	0x40021000

08006984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e10f      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800699c:	4b89      	ldr	r3, [pc, #548]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d910      	bls.n	80069cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069aa:	4b86      	ldr	r3, [pc, #536]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f023 020f 	bic.w	r2, r3, #15
 80069b2:	4984      	ldr	r1, [pc, #528]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ba:	4b82      	ldr	r3, [pc, #520]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0f7      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8089 	beq.w	8006aec <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d133      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e2:	4b79      	ldr	r3, [pc, #484]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0e4      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80069f2:	f000 fa17 	bl	8006e24 <RCC_GetSysClockFreqFromPLLSource>
 80069f6:	4603      	mov	r3, r0
 80069f8:	4a74      	ldr	r2, [pc, #464]	; (8006bcc <HAL_RCC_ClockConfig+0x248>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d955      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80069fe:	4b72      	ldr	r3, [pc, #456]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a0a:	4b6f      	ldr	r3, [pc, #444]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	4a6d      	ldr	r2, [pc, #436]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a1a:	2380      	movs	r3, #128	; 0x80
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e044      	b.n	8006aaa <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d03e      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x126>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d13a      	bne.n	8006aaa <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a34:	4b64      	ldr	r3, [pc, #400]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3c:	4a62      	ldr	r2, [pc, #392]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a42:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e02f      	b.n	8006aaa <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d107      	bne.n	8006a62 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a52:	4b5d      	ldr	r3, [pc, #372]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d115      	bne.n	8006a8a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e0ac      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d107      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a6a:	4b57      	ldr	r3, [pc, #348]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e0a0      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7a:	4b53      	ldr	r3, [pc, #332]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e098      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006a8a:	f000 f8db 	bl	8006c44 <HAL_RCC_GetSysClockFreq>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4a4e      	ldr	r2, [pc, #312]	; (8006bcc <HAL_RCC_ClockConfig+0x248>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d909      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a96:	4b4c      	ldr	r3, [pc, #304]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9e:	4a4a      	ldr	r2, [pc, #296]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006aa6:	2380      	movs	r3, #128	; 0x80
 8006aa8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aaa:	4b47      	ldr	r3, [pc, #284]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f023 0203 	bic.w	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4944      	ldr	r1, [pc, #272]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006abc:	f7fb fdc6 	bl	800264c <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac2:	e00a      	b.n	8006ada <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac4:	f7fb fdc2 	bl	800264c <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e070      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ada:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 020c 	and.w	r2, r3, #12
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d1eb      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af8:	4b33      	ldr	r3, [pc, #204]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4930      	ldr	r1, [pc, #192]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b80      	cmp	r3, #128	; 0x80
 8006b10:	d105      	bne.n	8006b1e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b12:	4b2d      	ldr	r3, [pc, #180]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1e:	4b29      	ldr	r3, [pc, #164]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d210      	bcs.n	8006b4e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2c:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f023 020f 	bic.w	r2, r3, #15
 8006b34:	4923      	ldr	r1, [pc, #140]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3c:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d001      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e036      	b.n	8006bbc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4918      	ldr	r1, [pc, #96]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b78:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4910      	ldr	r1, [pc, #64]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b8c:	f000 f85a 	bl	8006c44 <HAL_RCC_GetSysClockFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	490c      	ldr	r1, [pc, #48]	; (8006bd0 <HAL_RCC_ClockConfig+0x24c>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <HAL_RCC_ClockConfig+0x250>)
 8006baa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bac:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <HAL_RCC_ClockConfig+0x254>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fb fcfb 	bl	80025ac <HAL_InitTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  return status;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40022000 	.word	0x40022000
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	04c4b400 	.word	0x04c4b400
 8006bd0:	0800d0fc 	.word	0x0800d0fc
 8006bd4:	20000068 	.word	0x20000068
 8006bd8:	2000006c 	.word	0x2000006c

08006bdc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8006be8:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <HAL_RCC_MCOConfig+0x64>)
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <HAL_RCC_MCOConfig+0x64>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bf4:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <HAL_RCC_MCOConfig+0x64>)
 8006bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c06:	2302      	movs	r3, #2
 8006c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006c16:	f107 0314 	add.w	r3, r7, #20
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c20:	f7fd ff42 	bl	8004aa8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_RCC_MCOConfig+0x64>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	4903      	ldr	r1, [pc, #12]	; (8006c40 <HAL_RCC_MCOConfig+0x64>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	608b      	str	r3, [r1, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	3728      	adds	r7, #40	; 0x28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000

08006c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b089      	sub	sp, #36	; 0x24
 8006c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c52:	4b3e      	ldr	r3, [pc, #248]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c5c:	4b3b      	ldr	r3, [pc, #236]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x34>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b0c      	cmp	r3, #12
 8006c70:	d121      	bne.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d11e      	bne.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c78:	4b34      	ldr	r3, [pc, #208]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d107      	bne.n	8006c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c84:	4b31      	ldr	r3, [pc, #196]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e005      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c94:	4b2d      	ldr	r3, [pc, #180]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ca0:	4a2b      	ldr	r2, [pc, #172]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cb4:	e00a      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d102      	bne.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cbc:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e004      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cc8:	4b22      	ldr	r3, [pc, #136]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b0c      	cmp	r3, #12
 8006cd0:	d134      	bne.n	8006d3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cd2:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d003      	beq.n	8006cea <HAL_RCC_GetSysClockFreq+0xa6>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d003      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0xac>
 8006ce8:	e005      	b.n	8006cf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006cea:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cec:	617b      	str	r3, [r7, #20]
      break;
 8006cee:	e005      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cf0:	4b18      	ldr	r3, [pc, #96]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cf2:	617b      	str	r3, [r7, #20]
      break;
 8006cf4:	e002      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	617b      	str	r3, [r7, #20]
      break;
 8006cfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cfc:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	3301      	adds	r3, #1
 8006d08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	0a1b      	lsrs	r3, r3, #8
 8006d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	fb03 f202 	mul.w	r2, r3, r2
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	0e5b      	lsrs	r3, r3, #25
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3724      	adds	r7, #36	; 0x24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	0800d114 	.word	0x0800d114
 8006d54:	00f42400 	.word	0x00f42400

08006d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000068 	.word	0x20000068

08006d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d7c:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d88:	f7ff f8fe 	bl	8005f88 <HAL_PWREx_GetVoltageRange>
 8006d8c:	6178      	str	r0, [r7, #20]
 8006d8e:	e014      	b.n	8006dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d90:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006da8:	f7ff f8ee 	bl	8005f88 <HAL_PWREx_GetVoltageRange>
 8006dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dae:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc0:	d10b      	bne.n	8006dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d913      	bls.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2ba0      	cmp	r3, #160	; 0xa0
 8006dcc:	d902      	bls.n	8006dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dce:	2302      	movs	r3, #2
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e00d      	b.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	e00a      	b.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dde:	d902      	bls.n	8006de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006de0:	2302      	movs	r3, #2
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	e004      	b.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b70      	cmp	r3, #112	; 0x70
 8006dea:	d101      	bne.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dec:	2301      	movs	r3, #1
 8006dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f023 020f 	bic.w	r2, r3, #15
 8006df8:	4909      	ldr	r1, [pc, #36]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d001      	beq.n	8006e12 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	40022000 	.word	0x40022000

08006e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d118      	bne.n	8006e6c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e3a:	4b2a      	ldr	r3, [pc, #168]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d107      	bne.n	8006e56 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e46:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e005      	b.n	8006e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e56:	4b23      	ldr	r3, [pc, #140]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	091b      	lsrs	r3, r3, #4
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d003      	beq.n	8006e84 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d003      	beq.n	8006e8a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8006e82:	e005      	b.n	8006e90 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006e86:	613b      	str	r3, [r7, #16]
    break;
 8006e88:	e005      	b.n	8006e96 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006e8a:	4b18      	ldr	r3, [pc, #96]	; (8006eec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006e8c:	613b      	str	r3, [r7, #16]
    break;
 8006e8e:	e002      	b.n	8006e96 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	613b      	str	r3, [r7, #16]
    break;
 8006e94:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	091b      	lsrs	r3, r3, #4
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	fb03 f202 	mul.w	r2, r3, r2
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ebc:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	0e5b      	lsrs	r3, r3, #25
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006ed6:	683b      	ldr	r3, [r7, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	0800d114 	.word	0x0800d114
 8006eec:	00f42400 	.word	0x00f42400

08006ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ef8:	2300      	movs	r3, #0
 8006efa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006efc:	2300      	movs	r3, #0
 8006efe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d040      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d02a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d825      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006f18:	2b60      	cmp	r3, #96	; 0x60
 8006f1a:	d026      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d821      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d006      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d81d      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d010      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006f30:	e018      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f32:	4b89      	ldr	r3, [pc, #548]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	4a88      	ldr	r2, [pc, #544]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f3c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f3e:	e015      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3304      	adds	r3, #4
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fb62 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f50:	e00c      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3320      	adds	r3, #32
 8006f56:	2100      	movs	r1, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fc4d 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f62:	e003      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	74fb      	strb	r3, [r7, #19]
      break;
 8006f68:	e000      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6c:	7cfb      	ldrb	r3, [r7, #19]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10b      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f72:	4b79      	ldr	r3, [pc, #484]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f78:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f80:	4975      	ldr	r1, [pc, #468]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006f88:	e001      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8a:	7cfb      	ldrb	r3, [r7, #19]
 8006f8c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d047      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa2:	d030      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d82a      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fae:	d02a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fb4:	d824      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fba:	d008      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc0:	d81e      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fca:	d010      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006fcc:	e018      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fce:	4b62      	ldr	r3, [pc, #392]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	4a61      	ldr	r2, [pc, #388]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fda:	e015      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fb14 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fec:	e00c      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3320      	adds	r3, #32
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fbff 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ffe:	e003      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	74fb      	strb	r3, [r7, #19]
      break;
 8007004:	e000      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800700e:	4b52      	ldr	r3, [pc, #328]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007010:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	494e      	ldr	r1, [pc, #312]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007024:	e001      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007026:	7cfb      	ldrb	r3, [r7, #19]
 8007028:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 809f 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007038:	2300      	movs	r3, #0
 800703a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800703c:	4b46      	ldr	r3, [pc, #280]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800703e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800704c:	2300      	movs	r3, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00d      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	4b41      	ldr	r3, [pc, #260]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	4a40      	ldr	r2, [pc, #256]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6593      	str	r3, [r2, #88]	; 0x58
 800705e:	4b3e      	ldr	r3, [pc, #248]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800706a:	2301      	movs	r3, #1
 800706c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800706e:	4b3b      	ldr	r3, [pc, #236]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3a      	ldr	r2, [pc, #232]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007078:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800707a:	f7fb fae7 	bl	800264c <HAL_GetTick>
 800707e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007080:	e009      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007082:	f7fb fae3 	bl	800264c <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d902      	bls.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	74fb      	strb	r3, [r7, #19]
        break;
 8007094:	e005      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007096:	4b31      	ldr	r3, [pc, #196]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0ef      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80070a2:	7cfb      	ldrb	r3, [r7, #19]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d15b      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070a8:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01f      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d019      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070c6:	4b24      	ldr	r3, [pc, #144]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070f2:	4a19      	ldr	r2, [pc, #100]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d016      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fb faa2 	bl	800264c <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800710a:	e00b      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710c:	f7fb fa9e 	bl	800264c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d902      	bls.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	74fb      	strb	r3, [r7, #19]
            break;
 8007122:	e006      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0ec      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007132:	7cfb      	ldrb	r3, [r7, #19]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10c      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007148:	4903      	ldr	r1, [pc, #12]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007150:	e008      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007152:	7cfb      	ldrb	r3, [r7, #19]
 8007154:	74bb      	strb	r3, [r7, #18]
 8007156:	e005      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007158:	40021000 	.word	0x40021000
 800715c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	7cfb      	ldrb	r3, [r7, #19]
 8007162:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007164:	7c7b      	ldrb	r3, [r7, #17]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d105      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800716a:	4ba0      	ldr	r3, [pc, #640]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800716c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716e:	4a9f      	ldr	r2, [pc, #636]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007174:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007182:	4b9a      	ldr	r3, [pc, #616]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	f023 0203 	bic.w	r2, r3, #3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	4996      	ldr	r1, [pc, #600]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071a4:	4b91      	ldr	r3, [pc, #580]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071aa:	f023 020c 	bic.w	r2, r3, #12
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	498e      	ldr	r1, [pc, #568]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071c6:	4b89      	ldr	r3, [pc, #548]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	4985      	ldr	r1, [pc, #532]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071e8:	4b80      	ldr	r3, [pc, #512]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f6:	497d      	ldr	r1, [pc, #500]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800720a:	4b78      	ldr	r3, [pc, #480]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007218:	4974      	ldr	r1, [pc, #464]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800722c:	4b6f      	ldr	r3, [pc, #444]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800722e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723a:	496c      	ldr	r1, [pc, #432]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800724e:	4b67      	ldr	r3, [pc, #412]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725c:	4963      	ldr	r1, [pc, #396]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007270:	4b5e      	ldr	r3, [pc, #376]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800727e:	495b      	ldr	r1, [pc, #364]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007292:	4b56      	ldr	r3, [pc, #344]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	4952      	ldr	r1, [pc, #328]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072b4:	4b4d      	ldr	r3, [pc, #308]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	494a      	ldr	r1, [pc, #296]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072d6:	4b45      	ldr	r3, [pc, #276]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e4:	4941      	ldr	r1, [pc, #260]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072f8:	4b3c      	ldr	r3, [pc, #240]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072fe:	f023 0203 	bic.w	r2, r3, #3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007306:	4939      	ldr	r1, [pc, #228]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d028      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800731a:	4b34      	ldr	r3, [pc, #208]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007328:	4930      	ldr	r1, [pc, #192]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007338:	d106      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800733a:	4b2c      	ldr	r3, [pc, #176]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	4a2b      	ldr	r2, [pc, #172]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007344:	60d3      	str	r3, [r2, #12]
 8007346:	e011      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007350:	d10c      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	2101      	movs	r1, #1
 8007358:	4618      	mov	r0, r3
 800735a:	f000 f959 	bl	8007610 <RCCEx_PLLSAI1_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007362:	7cfb      	ldrb	r3, [r7, #19]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007368:	7cfb      	ldrb	r3, [r7, #19]
 800736a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d04d      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800737c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007380:	d108      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007382:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007384:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007388:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800738a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800738e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007392:	e012      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007394:	4b15      	ldr	r3, [pc, #84]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800739a:	4a14      	ldr	r2, [pc, #80]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800739c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b2:	490e      	ldr	r1, [pc, #56]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c2:	d106      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4a08      	ldr	r2, [pc, #32]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ce:	60d3      	str	r3, [r2, #12]
 80073d0:	e020      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073da:	d109      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4a02      	ldr	r2, [pc, #8]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e6:	60d3      	str	r3, [r2, #12]
 80073e8:	e014      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073f8:	d10c      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3304      	adds	r3, #4
 80073fe:	2101      	movs	r1, #1
 8007400:	4618      	mov	r0, r3
 8007402:	f000 f905 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800740a:	7cfb      	ldrb	r3, [r7, #19]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007410:	7cfb      	ldrb	r3, [r7, #19]
 8007412:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d028      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007420:	4b7a      	ldr	r3, [pc, #488]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	4977      	ldr	r1, [pc, #476]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007430:	4313      	orrs	r3, r2
 8007432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800743e:	d106      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007440:	4b72      	ldr	r3, [pc, #456]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4a71      	ldr	r2, [pc, #452]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800744a:	60d3      	str	r3, [r2, #12]
 800744c:	e011      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007456:	d10c      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f8d6 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007468:	7cfb      	ldrb	r3, [r7, #19]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800746e:	7cfb      	ldrb	r3, [r7, #19]
 8007470:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d01e      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800747e:	4b63      	ldr	r3, [pc, #396]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007484:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748e:	495f      	ldr	r1, [pc, #380]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a0:	d10c      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	2102      	movs	r1, #2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f8b1 	bl	8007610 <RCCEx_PLLSAI1_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074b2:	7cfb      	ldrb	r3, [r7, #19]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80074b8:	7cfb      	ldrb	r3, [r7, #19]
 80074ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074c8:	4b50      	ldr	r3, [pc, #320]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ce:	f023 0204 	bic.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d8:	494c      	ldr	r1, [pc, #304]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80074ec:	4b47      	ldr	r3, [pc, #284]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f2:	f023 0218 	bic.w	r2, r3, #24
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fc:	4943      	ldr	r1, [pc, #268]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d035      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007510:	4b3e      	ldr	r3, [pc, #248]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a3d      	ldr	r2, [pc, #244]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751c:	f7fb f896 	bl	800264c <HAL_GetTick>
 8007520:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007522:	e009      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007524:	f7fb f892 	bl	800264c <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d902      	bls.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	74fb      	strb	r3, [r7, #19]
        break;
 8007536:	e005      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007538:	4b34      	ldr	r3, [pc, #208]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ef      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007544:	7cfb      	ldrb	r3, [r7, #19]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d113      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800754a:	4b30      	ldr	r3, [pc, #192]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800754c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800755a:	492c      	ldr	r1, [pc, #176]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800755c:	4313      	orrs	r3, r2
 800755e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3320      	adds	r3, #32
 8007566:	2102      	movs	r1, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f945 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007578:	7cfb      	ldrb	r3, [r7, #19]
 800757a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01e      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007588:	4b20      	ldr	r3, [pc, #128]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800758a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800758e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	491c      	ldr	r1, [pc, #112]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d10c      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3320      	adds	r3, #32
 80075b0:	2101      	movs	r1, #1
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f920 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075bc:	7cfb      	ldrb	r3, [r7, #19]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80075c2:	7cfb      	ldrb	r3, [r7, #19]
 80075c4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d017      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80075d2:	4b0e      	ldr	r3, [pc, #56]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075e2:	490a      	ldr	r1, [pc, #40]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075f4:	d105      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4a04      	ldr	r2, [pc, #16]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80075fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007600:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007602:	7cbb      	ldrb	r3, [r7, #18]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40021000 	.word	0x40021000

08007610 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800761e:	4b72      	ldr	r3, [pc, #456]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00e      	beq.n	8007648 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800762a:	4b6f      	ldr	r3, [pc, #444]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f003 0203 	and.w	r2, r3, #3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d103      	bne.n	8007642 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
       ||
 800763e:	2b00      	cmp	r3, #0
 8007640:	d142      	bne.n	80076c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	73fb      	strb	r3, [r7, #15]
 8007646:	e03f      	b.n	80076c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d018      	beq.n	8007682 <RCCEx_PLLSAI1_Config+0x72>
 8007650:	2b03      	cmp	r3, #3
 8007652:	d825      	bhi.n	80076a0 <RCCEx_PLLSAI1_Config+0x90>
 8007654:	2b01      	cmp	r3, #1
 8007656:	d002      	beq.n	800765e <RCCEx_PLLSAI1_Config+0x4e>
 8007658:	2b02      	cmp	r3, #2
 800765a:	d009      	beq.n	8007670 <RCCEx_PLLSAI1_Config+0x60>
 800765c:	e020      	b.n	80076a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800765e:	4b62      	ldr	r3, [pc, #392]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d11d      	bne.n	80076a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800766e:	e01a      	b.n	80076a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007670:	4b5d      	ldr	r3, [pc, #372]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007678:	2b00      	cmp	r3, #0
 800767a:	d116      	bne.n	80076aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007680:	e013      	b.n	80076aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007682:	4b59      	ldr	r3, [pc, #356]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800768e:	4b56      	ldr	r3, [pc, #344]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800769e:	e006      	b.n	80076ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
      break;
 80076a4:	e004      	b.n	80076b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80076a6:	bf00      	nop
 80076a8:	e002      	b.n	80076b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80076aa:	bf00      	nop
 80076ac:	e000      	b.n	80076b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80076ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d108      	bne.n	80076c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80076b6:	4b4c      	ldr	r3, [pc, #304]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f023 0203 	bic.w	r2, r3, #3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4949      	ldr	r1, [pc, #292]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 8086 	bne.w	80077dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a44      	ldr	r2, [pc, #272]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076dc:	f7fa ffb6 	bl	800264c <HAL_GetTick>
 80076e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076e2:	e009      	b.n	80076f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076e4:	f7fa ffb2 	bl	800264c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d902      	bls.n	80076f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	73fb      	strb	r3, [r7, #15]
        break;
 80076f6:	e005      	b.n	8007704 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076f8:	4b3b      	ldr	r3, [pc, #236]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1ef      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d168      	bne.n	80077dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d113      	bne.n	8007738 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007710:	4b35      	ldr	r3, [pc, #212]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	4b35      	ldr	r3, [pc, #212]	; (80077ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007716:	4013      	ands	r3, r2
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6892      	ldr	r2, [r2, #8]
 800771c:	0211      	lsls	r1, r2, #8
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68d2      	ldr	r2, [r2, #12]
 8007722:	06d2      	lsls	r2, r2, #27
 8007724:	4311      	orrs	r1, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6852      	ldr	r2, [r2, #4]
 800772a:	3a01      	subs	r2, #1
 800772c:	0112      	lsls	r2, r2, #4
 800772e:	430a      	orrs	r2, r1
 8007730:	492d      	ldr	r1, [pc, #180]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007732:	4313      	orrs	r3, r2
 8007734:	610b      	str	r3, [r1, #16]
 8007736:	e02d      	b.n	8007794 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d115      	bne.n	800776a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800773e:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	4b2b      	ldr	r3, [pc, #172]	; (80077f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007744:	4013      	ands	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6892      	ldr	r2, [r2, #8]
 800774a:	0211      	lsls	r1, r2, #8
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6912      	ldr	r2, [r2, #16]
 8007750:	0852      	lsrs	r2, r2, #1
 8007752:	3a01      	subs	r2, #1
 8007754:	0552      	lsls	r2, r2, #21
 8007756:	4311      	orrs	r1, r2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6852      	ldr	r2, [r2, #4]
 800775c:	3a01      	subs	r2, #1
 800775e:	0112      	lsls	r2, r2, #4
 8007760:	430a      	orrs	r2, r1
 8007762:	4921      	ldr	r1, [pc, #132]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007764:	4313      	orrs	r3, r2
 8007766:	610b      	str	r3, [r1, #16]
 8007768:	e014      	b.n	8007794 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800776a:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6892      	ldr	r2, [r2, #8]
 8007776:	0211      	lsls	r1, r2, #8
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6952      	ldr	r2, [r2, #20]
 800777c:	0852      	lsrs	r2, r2, #1
 800777e:	3a01      	subs	r2, #1
 8007780:	0652      	lsls	r2, r2, #25
 8007782:	4311      	orrs	r1, r2
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6852      	ldr	r2, [r2, #4]
 8007788:	3a01      	subs	r2, #1
 800778a:	0112      	lsls	r2, r2, #4
 800778c:	430a      	orrs	r2, r1
 800778e:	4916      	ldr	r1, [pc, #88]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007790:	4313      	orrs	r3, r2
 8007792:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800779a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800779e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a0:	f7fa ff54 	bl	800264c <HAL_GetTick>
 80077a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077a6:	e009      	b.n	80077bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077a8:	f7fa ff50 	bl	800264c <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d902      	bls.n	80077bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	73fb      	strb	r3, [r7, #15]
          break;
 80077ba:	e005      	b.n	80077c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0ef      	beq.n	80077a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	4904      	ldr	r1, [pc, #16]	; (80077e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40021000 	.word	0x40021000
 80077ec:	07ff800f 	.word	0x07ff800f
 80077f0:	ff9f800f 	.word	0xff9f800f
 80077f4:	f9ff800f 	.word	0xf9ff800f

080077f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007806:	4b72      	ldr	r3, [pc, #456]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00e      	beq.n	8007830 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007812:	4b6f      	ldr	r3, [pc, #444]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0203 	and.w	r2, r3, #3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d103      	bne.n	800782a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
       ||
 8007826:	2b00      	cmp	r3, #0
 8007828:	d142      	bne.n	80078b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	73fb      	strb	r3, [r7, #15]
 800782e:	e03f      	b.n	80078b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d018      	beq.n	800786a <RCCEx_PLLSAI2_Config+0x72>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d825      	bhi.n	8007888 <RCCEx_PLLSAI2_Config+0x90>
 800783c:	2b01      	cmp	r3, #1
 800783e:	d002      	beq.n	8007846 <RCCEx_PLLSAI2_Config+0x4e>
 8007840:	2b02      	cmp	r3, #2
 8007842:	d009      	beq.n	8007858 <RCCEx_PLLSAI2_Config+0x60>
 8007844:	e020      	b.n	8007888 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007846:	4b62      	ldr	r3, [pc, #392]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d11d      	bne.n	800788e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007856:	e01a      	b.n	800788e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007858:	4b5d      	ldr	r3, [pc, #372]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007860:	2b00      	cmp	r3, #0
 8007862:	d116      	bne.n	8007892 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007868:	e013      	b.n	8007892 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800786a:	4b59      	ldr	r3, [pc, #356]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10f      	bne.n	8007896 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007876:	4b56      	ldr	r3, [pc, #344]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007886:	e006      	b.n	8007896 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e004      	b.n	8007898 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800788e:	bf00      	nop
 8007890:	e002      	b.n	8007898 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007896:	bf00      	nop
    }

    if(status == HAL_OK)
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d108      	bne.n	80078b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800789e:	4b4c      	ldr	r3, [pc, #304]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f023 0203 	bic.w	r2, r3, #3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4949      	ldr	r1, [pc, #292]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 8086 	bne.w	80079c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80078b8:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a44      	ldr	r2, [pc, #272]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c4:	f7fa fec2 	bl	800264c <HAL_GetTick>
 80078c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078ca:	e009      	b.n	80078e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078cc:	f7fa febe 	bl	800264c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d902      	bls.n	80078e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	73fb      	strb	r3, [r7, #15]
        break;
 80078de:	e005      	b.n	80078ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078e0:	4b3b      	ldr	r3, [pc, #236]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1ef      	bne.n	80078cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d168      	bne.n	80079c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d113      	bne.n	8007920 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80078f8:	4b35      	ldr	r3, [pc, #212]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	4b35      	ldr	r3, [pc, #212]	; (80079d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80078fe:	4013      	ands	r3, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6892      	ldr	r2, [r2, #8]
 8007904:	0211      	lsls	r1, r2, #8
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68d2      	ldr	r2, [r2, #12]
 800790a:	06d2      	lsls	r2, r2, #27
 800790c:	4311      	orrs	r1, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6852      	ldr	r2, [r2, #4]
 8007912:	3a01      	subs	r2, #1
 8007914:	0112      	lsls	r2, r2, #4
 8007916:	430a      	orrs	r2, r1
 8007918:	492d      	ldr	r1, [pc, #180]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800791a:	4313      	orrs	r3, r2
 800791c:	614b      	str	r3, [r1, #20]
 800791e:	e02d      	b.n	800797c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d115      	bne.n	8007952 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007926:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007928:	695a      	ldr	r2, [r3, #20]
 800792a:	4b2b      	ldr	r3, [pc, #172]	; (80079d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800792c:	4013      	ands	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6892      	ldr	r2, [r2, #8]
 8007932:	0211      	lsls	r1, r2, #8
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6912      	ldr	r2, [r2, #16]
 8007938:	0852      	lsrs	r2, r2, #1
 800793a:	3a01      	subs	r2, #1
 800793c:	0552      	lsls	r2, r2, #21
 800793e:	4311      	orrs	r1, r2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6852      	ldr	r2, [r2, #4]
 8007944:	3a01      	subs	r2, #1
 8007946:	0112      	lsls	r2, r2, #4
 8007948:	430a      	orrs	r2, r1
 800794a:	4921      	ldr	r1, [pc, #132]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800794c:	4313      	orrs	r3, r2
 800794e:	614b      	str	r3, [r1, #20]
 8007950:	e014      	b.n	800797c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007952:	4b1f      	ldr	r3, [pc, #124]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	4b21      	ldr	r3, [pc, #132]	; (80079dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8007958:	4013      	ands	r3, r2
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6892      	ldr	r2, [r2, #8]
 800795e:	0211      	lsls	r1, r2, #8
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6952      	ldr	r2, [r2, #20]
 8007964:	0852      	lsrs	r2, r2, #1
 8007966:	3a01      	subs	r2, #1
 8007968:	0652      	lsls	r2, r2, #25
 800796a:	4311      	orrs	r1, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6852      	ldr	r2, [r2, #4]
 8007970:	3a01      	subs	r2, #1
 8007972:	0112      	lsls	r2, r2, #4
 8007974:	430a      	orrs	r2, r1
 8007976:	4916      	ldr	r1, [pc, #88]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007978:	4313      	orrs	r3, r2
 800797a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800797c:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007988:	f7fa fe60 	bl	800264c <HAL_GetTick>
 800798c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800798e:	e009      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007990:	f7fa fe5c 	bl	800264c <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d902      	bls.n	80079a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	73fb      	strb	r3, [r7, #15]
          break;
 80079a2:	e005      	b.n	80079b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ef      	beq.n	8007990 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079b8:	695a      	ldr	r2, [r3, #20]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	4904      	ldr	r1, [pc, #16]	; (80079d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40021000 	.word	0x40021000
 80079d4:	07ff800f 	.word	0x07ff800f
 80079d8:	ff9f800f 	.word	0xff9f800f
 80079dc:	f9ff800f 	.word	0xf9ff800f

080079e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e0:	b084      	sub	sp, #16
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	f107 001c 	add.w	r0, r7, #28
 80079ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 fa40 	bl	8008e84 <USB_CoreReset>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
 8007a1a:	e005      	b.n	8007a28 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a34:	b004      	add	sp, #16
 8007a36:	4770      	bx	lr

08007a38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d165      	bne.n	8007b18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4a3e      	ldr	r2, [pc, #248]	; (8007b48 <USB_SetTurnaroundTime+0x110>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d906      	bls.n	8007a62 <USB_SetTurnaroundTime+0x2a>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4a3d      	ldr	r2, [pc, #244]	; (8007b4c <USB_SetTurnaroundTime+0x114>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d202      	bcs.n	8007a62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a5c:	230f      	movs	r3, #15
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	e05c      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	4a39      	ldr	r2, [pc, #228]	; (8007b4c <USB_SetTurnaroundTime+0x114>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d306      	bcc.n	8007a78 <USB_SetTurnaroundTime+0x40>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4a38      	ldr	r2, [pc, #224]	; (8007b50 <USB_SetTurnaroundTime+0x118>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d202      	bcs.n	8007a78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a72:	230e      	movs	r3, #14
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	e051      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4a35      	ldr	r2, [pc, #212]	; (8007b50 <USB_SetTurnaroundTime+0x118>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d306      	bcc.n	8007a8e <USB_SetTurnaroundTime+0x56>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4a34      	ldr	r2, [pc, #208]	; (8007b54 <USB_SetTurnaroundTime+0x11c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d202      	bcs.n	8007a8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a88:	230d      	movs	r3, #13
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	e046      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	4a30      	ldr	r2, [pc, #192]	; (8007b54 <USB_SetTurnaroundTime+0x11c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d306      	bcc.n	8007aa4 <USB_SetTurnaroundTime+0x6c>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4a2f      	ldr	r2, [pc, #188]	; (8007b58 <USB_SetTurnaroundTime+0x120>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d802      	bhi.n	8007aa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	e03b      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4a2c      	ldr	r2, [pc, #176]	; (8007b58 <USB_SetTurnaroundTime+0x120>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d906      	bls.n	8007aba <USB_SetTurnaroundTime+0x82>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4a2b      	ldr	r2, [pc, #172]	; (8007b5c <USB_SetTurnaroundTime+0x124>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d802      	bhi.n	8007aba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ab4:	230b      	movs	r3, #11
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	e030      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	4a27      	ldr	r2, [pc, #156]	; (8007b5c <USB_SetTurnaroundTime+0x124>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d906      	bls.n	8007ad0 <USB_SetTurnaroundTime+0x98>
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	4a26      	ldr	r2, [pc, #152]	; (8007b60 <USB_SetTurnaroundTime+0x128>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d802      	bhi.n	8007ad0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007aca:	230a      	movs	r3, #10
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	e025      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	4a23      	ldr	r2, [pc, #140]	; (8007b60 <USB_SetTurnaroundTime+0x128>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d906      	bls.n	8007ae6 <USB_SetTurnaroundTime+0xae>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4a22      	ldr	r2, [pc, #136]	; (8007b64 <USB_SetTurnaroundTime+0x12c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d202      	bcs.n	8007ae6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ae0:	2309      	movs	r3, #9
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e01a      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <USB_SetTurnaroundTime+0x12c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d306      	bcc.n	8007afc <USB_SetTurnaroundTime+0xc4>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <USB_SetTurnaroundTime+0x130>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d802      	bhi.n	8007afc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007af6:	2308      	movs	r3, #8
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e00f      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4a1a      	ldr	r2, [pc, #104]	; (8007b68 <USB_SetTurnaroundTime+0x130>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d906      	bls.n	8007b12 <USB_SetTurnaroundTime+0xda>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <USB_SetTurnaroundTime+0x134>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d202      	bcs.n	8007b12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b0c:	2307      	movs	r3, #7
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e004      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b12:	2306      	movs	r3, #6
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	e001      	b.n	8007b1c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b18:	2309      	movs	r3, #9
 8007b1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	00d8acbf 	.word	0x00d8acbf
 8007b4c:	00e4e1c0 	.word	0x00e4e1c0
 8007b50:	00f42400 	.word	0x00f42400
 8007b54:	01067380 	.word	0x01067380
 8007b58:	011a499f 	.word	0x011a499f
 8007b5c:	01312cff 	.word	0x01312cff
 8007b60:	014ca43f 	.word	0x014ca43f
 8007b64:	016e3600 	.word	0x016e3600
 8007b68:	01a6ab1f 	.word	0x01a6ab1f
 8007b6c:	01e84800 	.word	0x01e84800

08007b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f043 0201 	orr.w	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 0201 	bic.w	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d115      	bne.n	8007c02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007be2:	2001      	movs	r0, #1
 8007be4:	f7fa fd3e 	bl	8002664 <HAL_Delay>
      ms++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 f8cf 	bl	8008d92 <USB_GetMode>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d01e      	beq.n	8007c38 <USB_SetCurrentMode+0x84>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b31      	cmp	r3, #49	; 0x31
 8007bfe:	d9f0      	bls.n	8007be2 <USB_SetCurrentMode+0x2e>
 8007c00:	e01a      	b.n	8007c38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d115      	bne.n	8007c34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7fa fd25 	bl	8002664 <HAL_Delay>
      ms++;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f8b6 	bl	8008d92 <USB_GetMode>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <USB_SetCurrentMode+0x84>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b31      	cmp	r3, #49	; 0x31
 8007c30:	d9f0      	bls.n	8007c14 <USB_SetCurrentMode+0x60>
 8007c32:	e001      	b.n	8007c38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e005      	b.n	8007c44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b32      	cmp	r3, #50	; 0x32
 8007c3c:	d101      	bne.n	8007c42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	e009      	b.n	8007c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3340      	adds	r3, #64	; 0x40
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b0e      	cmp	r3, #14
 8007c84:	d9f2      	bls.n	8007c6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11c      	bne.n	8007cc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c9a:	f043 0302 	orr.w	r3, r3, #2
 8007c9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e005      	b.n	8007cd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cd8:	461a      	mov	r2, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	461a      	mov	r2, r3
 8007cee:	680b      	ldr	r3, [r1, #0]
 8007cf0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007cf2:	2103      	movs	r1, #3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f955 	bl	8007fa4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cfa:	2110      	movs	r1, #16
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f8f1 	bl	8007ee4 <USB_FlushTxFifo>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f91b 	bl	8007f48 <USB_FlushRxFifo>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d22:	461a      	mov	r2, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2300      	movs	r3, #0
 8007d32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d40:	2300      	movs	r3, #0
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	e043      	b.n	8007dce <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5c:	d118      	bne.n	8007d90 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	461a      	mov	r2, r3
 8007d72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	e013      	b.n	8007da2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d86:	461a      	mov	r2, r3
 8007d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	e008      	b.n	8007da2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dae:	461a      	mov	r2, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	613b      	str	r3, [r7, #16]
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d3b7      	bcc.n	8007d46 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	e043      	b.n	8007e64 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007df2:	d118      	bne.n	8007e26 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e06:	461a      	mov	r2, r3
 8007e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e013      	b.n	8007e38 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	e008      	b.n	8007e38 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	461a      	mov	r2, r3
 8007e34:	2300      	movs	r3, #0
 8007e36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	461a      	mov	r2, r3
 8007e46:	2300      	movs	r3, #0
 8007e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e56:	461a      	mov	r2, r3
 8007e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	3301      	adds	r3, #1
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d3b7      	bcc.n	8007ddc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f043 0210 	orr.w	r2, r3, #16
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <USB_DevInit+0x294>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f043 0208 	orr.w	r2, r3, #8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d107      	bne.n	8007ece <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ec6:	f043 0304 	orr.w	r3, r3, #4
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eda:	b004      	add	sp, #16
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	803c3800 	.word	0x803c3800

08007ee4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <USB_FlushTxFifo+0x60>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d901      	bls.n	8007f02 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e01a      	b.n	8007f38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	daf3      	bge.n	8007ef2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	019b      	lsls	r3, r3, #6
 8007f12:	f043 0220 	orr.w	r2, r3, #32
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <USB_FlushTxFifo+0x60>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d901      	bls.n	8007f2a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e006      	b.n	8007f38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d0f1      	beq.n	8007f1a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	00030d40 	.word	0x00030d40

08007f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	4a11      	ldr	r2, [pc, #68]	; (8007fa0 <USB_FlushRxFifo+0x58>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d901      	bls.n	8007f64 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e017      	b.n	8007f94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	daf3      	bge.n	8007f54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2210      	movs	r2, #16
 8007f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	4a08      	ldr	r2, [pc, #32]	; (8007fa0 <USB_FlushRxFifo+0x58>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e006      	b.n	8007f94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b10      	cmp	r3, #16
 8007f90:	d0f1      	beq.n	8007f76 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	00030d40 	.word	0x00030d40

08007fa4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0306 	and.w	r3, r3, #6
 8007fee:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d002      	beq.n	8007ffc <USB_GetDevSpeed+0x26>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b06      	cmp	r3, #6
 8007ffa:	d102      	bne.n	8008002 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	75fb      	strb	r3, [r7, #23]
 8008000:	e001      	b.n	8008006 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008002:	230f      	movs	r3, #15
 8008004:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d13a      	bne.n	80080a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	2101      	movs	r1, #1
 8008042:	fa01 f303 	lsl.w	r3, r1, r3
 8008046:	b29b      	uxth	r3, r3
 8008048:	68f9      	ldr	r1, [r7, #12]
 800804a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800804e:	4313      	orrs	r3, r2
 8008050:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d155      	bne.n	8008114 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	78db      	ldrb	r3, [r3, #3]
 8008082:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008084:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	059b      	lsls	r3, r3, #22
 800808a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800808c:	4313      	orrs	r3, r2
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e036      	b.n	8008114 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ac:	69da      	ldr	r2, [r3, #28]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	2101      	movs	r1, #1
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080c4:	4313      	orrs	r3, r2
 80080c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d11a      	bne.n	8008114 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	78db      	ldrb	r3, [r3, #3]
 80080f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080fa:	430b      	orrs	r3, r1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	440a      	add	r2, r1
 8008106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800810a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008112:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d161      	bne.n	8008204 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008156:	d11f      	bne.n	8008198 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	440a      	add	r2, r1
 800816e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008176:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008196:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	2101      	movs	r1, #1
 80081aa:	fa01 f303 	lsl.w	r3, r1, r3
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	43db      	mvns	r3, r3
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b8:	4013      	ands	r3, r2
 80081ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	2101      	movs	r1, #1
 80081ce:	fa01 f303 	lsl.w	r3, r1, r3
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081dc:	4013      	ands	r3, r2
 80081de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	0159      	lsls	r1, r3, #5
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	440b      	add	r3, r1
 80081f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fa:	4619      	mov	r1, r3
 80081fc:	4b35      	ldr	r3, [pc, #212]	; (80082d4 <USB_DeactivateEndpoint+0x1b0>)
 80081fe:	4013      	ands	r3, r2
 8008200:	600b      	str	r3, [r1, #0]
 8008202:	e060      	b.n	80082c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800821a:	d11f      	bne.n	800825c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008236:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800823a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800825a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	2101      	movs	r1, #1
 800826e:	fa01 f303 	lsl.w	r3, r1, r3
 8008272:	041b      	lsls	r3, r3, #16
 8008274:	43db      	mvns	r3, r3
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800827c:	4013      	ands	r3, r2
 800827e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	2101      	movs	r1, #1
 8008292:	fa01 f303 	lsl.w	r3, r1, r3
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	43db      	mvns	r3, r3
 800829a:	68f9      	ldr	r1, [r7, #12]
 800829c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082a0:	4013      	ands	r3, r2
 80082a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	0159      	lsls	r1, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	440b      	add	r3, r1
 80082ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082be:	4619      	mov	r1, r3
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <USB_DeactivateEndpoint+0x1b4>)
 80082c2:	4013      	ands	r3, r2
 80082c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	ec337800 	.word	0xec337800
 80082d8:	eff37800 	.word	0xeff37800

080082dc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	f040 810a 	bne.w	800850e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d132      	bne.n	8008368 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008320:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008360:	0cdb      	lsrs	r3, r3, #19
 8008362:	04db      	lsls	r3, r3, #19
 8008364:	6113      	str	r3, [r2, #16]
 8008366:	e074      	b.n	8008452 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	0cdb      	lsrs	r3, r3, #19
 8008384:	04db      	lsls	r3, r3, #19
 8008386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6959      	ldr	r1, [r3, #20]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	440b      	add	r3, r1
 80083c4:	1e59      	subs	r1, r3, #1
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80083ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083d0:	4baf      	ldr	r3, [pc, #700]	; (8008690 <USB_EPStartXfer+0x3b4>)
 80083d2:	400b      	ands	r3, r1
 80083d4:	6939      	ldr	r1, [r7, #16]
 80083d6:	0148      	lsls	r0, r1, #5
 80083d8:	6979      	ldr	r1, [r7, #20]
 80083da:	4401      	add	r1, r0
 80083dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083e0:	4313      	orrs	r3, r2
 80083e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083fa:	6939      	ldr	r1, [r7, #16]
 80083fc:	0148      	lsls	r0, r1, #5
 80083fe:	6979      	ldr	r1, [r7, #20]
 8008400:	4401      	add	r1, r0
 8008402:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008406:	4313      	orrs	r3, r2
 8008408:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	78db      	ldrb	r3, [r3, #3]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d11f      	bne.n	8008452 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	0151      	lsls	r1, r2, #5
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	440a      	add	r2, r1
 8008428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008430:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008450:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	440a      	add	r2, r1
 8008468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008470:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	78db      	ldrb	r3, [r3, #3]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d015      	beq.n	80084a6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8100 	beq.w	8008684 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	2101      	movs	r1, #1
 8008496:	fa01 f303 	lsl.w	r3, r1, r3
 800849a:	6979      	ldr	r1, [r7, #20]
 800849c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a0:	4313      	orrs	r3, r2
 80084a2:	634b      	str	r3, [r1, #52]	; 0x34
 80084a4:	e0ee      	b.n	8008684 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d110      	bne.n	80084d8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	e00f      	b.n	80084f8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68d9      	ldr	r1, [r3, #12]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781a      	ldrb	r2, [r3, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	b29b      	uxth	r3, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9e2 	bl	80088d0 <USB_WritePacket>
 800850c:	e0ba      	b.n	8008684 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008528:	0cdb      	lsrs	r3, r3, #19
 800852a:	04db      	lsls	r3, r3, #19
 800852c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800854c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008550:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d123      	bne.n	80085a2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008570:	6939      	ldr	r1, [r7, #16]
 8008572:	0148      	lsls	r0, r1, #5
 8008574:	6979      	ldr	r1, [r7, #20]
 8008576:	4401      	add	r1, r0
 8008578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800857c:	4313      	orrs	r3, r2
 800857e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800859e:	6113      	str	r3, [r2, #16]
 80085a0:	e033      	b.n	800860a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	4413      	add	r3, r2
 80085ac:	1e5a      	subs	r2, r3, #1
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c4:	691a      	ldr	r2, [r3, #16]
 80085c6:	89fb      	ldrh	r3, [r7, #14]
 80085c8:	04d9      	lsls	r1, r3, #19
 80085ca:	4b31      	ldr	r3, [pc, #196]	; (8008690 <USB_EPStartXfer+0x3b4>)
 80085cc:	400b      	ands	r3, r1
 80085ce:	6939      	ldr	r1, [r7, #16]
 80085d0:	0148      	lsls	r0, r1, #5
 80085d2:	6979      	ldr	r1, [r7, #20]
 80085d4:	4401      	add	r1, r0
 80085d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085da:	4313      	orrs	r3, r2
 80085dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	89f9      	ldrh	r1, [r7, #14]
 80085f2:	fb01 f303 	mul.w	r3, r1, r3
 80085f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085fa:	6939      	ldr	r1, [r7, #16]
 80085fc:	0148      	lsls	r0, r1, #5
 80085fe:	6979      	ldr	r1, [r7, #20]
 8008600:	4401      	add	r1, r0
 8008602:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008606:	4313      	orrs	r3, r2
 8008608:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d128      	bne.n	8008664 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d110      	bne.n	8008644 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	e00f      	b.n	8008664 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008662:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800867e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	1ff80000 	.word	0x1ff80000

08008694 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	f040 80ab 	bne.w	8008808 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d132      	bne.n	8008720 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	0151      	lsls	r1, r2, #5
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	440a      	add	r2, r1
 8008714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008718:	0cdb      	lsrs	r3, r3, #19
 800871a:	04db      	lsls	r3, r3, #19
 800871c:	6113      	str	r3, [r2, #16]
 800871e:	e04e      	b.n	80087be <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	0151      	lsls	r1, r2, #5
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	440a      	add	r2, r1
 8008736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873a:	0cdb      	lsrs	r3, r3, #19
 800873c:	04db      	lsls	r3, r3, #19
 800873e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	440a      	add	r2, r1
 8008756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800875e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008762:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	695a      	ldr	r2, [r3, #20]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	0151      	lsls	r1, r2, #5
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	440a      	add	r2, r1
 800878e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008792:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a4:	691a      	ldr	r2, [r3, #16]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	0148      	lsls	r0, r1, #5
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	4401      	add	r1, r0
 80087b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087ba:	4313      	orrs	r3, r2
 80087bc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087dc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d06d      	beq.n	80088c2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	2101      	movs	r1, #1
 80087f8:	fa01 f303 	lsl.w	r3, r1, r3
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008802:	4313      	orrs	r3, r2
 8008804:	634b      	str	r3, [r1, #52]	; 0x34
 8008806:	e05c      	b.n	80088c2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008822:	0cdb      	lsrs	r3, r3, #19
 8008824:	04db      	lsls	r3, r3, #19
 8008826:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800884a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800887a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	0148      	lsls	r0, r1, #5
 8008896:	68f9      	ldr	r1, [r7, #12]
 8008898:	4401      	add	r1, r0
 800889a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800889e:	4313      	orrs	r3, r2
 80088a0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	0151      	lsls	r1, r2, #5
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	440a      	add	r2, r1
 80088b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b089      	sub	sp, #36	; 0x24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4611      	mov	r1, r2
 80088dc:	461a      	mov	r2, r3
 80088de:	460b      	mov	r3, r1
 80088e0:	71fb      	strb	r3, [r7, #7]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80088ee:	88bb      	ldrh	r3, [r7, #4]
 80088f0:	3303      	adds	r3, #3
 80088f2:	089b      	lsrs	r3, r3, #2
 80088f4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	61bb      	str	r3, [r7, #24]
 80088fa:	e018      	b.n	800892e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	031a      	lsls	r2, r3, #12
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008908:	461a      	mov	r2, r3
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	3301      	adds	r3, #1
 8008914:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	3301      	adds	r3, #1
 800891a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	3301      	adds	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	3301      	adds	r3, #1
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	429a      	cmp	r2, r3
 8008934:	d3e2      	bcc.n	80088fc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3724      	adds	r7, #36	; 0x24
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008944:	b480      	push	{r7}
 8008946:	b08b      	sub	sp, #44	; 0x2c
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	089b      	lsrs	r3, r3, #2
 800895e:	b29b      	uxth	r3, r3
 8008960:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800896a:	2300      	movs	r3, #0
 800896c:	623b      	str	r3, [r7, #32]
 800896e:	e014      	b.n	800899a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	601a      	str	r2, [r3, #0]
    pDest++;
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	3301      	adds	r3, #1
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	3301      	adds	r3, #1
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	3301      	adds	r3, #1
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	3301      	adds	r3, #1
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	3301      	adds	r3, #1
 8008998:	623b      	str	r3, [r7, #32]
 800899a:	6a3a      	ldr	r2, [r7, #32]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d3e6      	bcc.n	8008970 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089a2:	8bfb      	ldrh	r3, [r7, #30]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01e      	beq.n	80089e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b2:	461a      	mov	r2, r3
 80089b4:	f107 0310 	add.w	r3, r7, #16
 80089b8:	6812      	ldr	r2, [r2, #0]
 80089ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	701a      	strb	r2, [r3, #0]
      i++;
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	3301      	adds	r3, #1
 80089d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	3301      	adds	r3, #1
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80089da:	8bfb      	ldrh	r3, [r7, #30]
 80089dc:	3b01      	subs	r3, #1
 80089de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089e0:	8bfb      	ldrh	r3, [r7, #30]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1ea      	bne.n	80089bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	372c      	adds	r7, #44	; 0x2c
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d12c      	bne.n	8008a6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	db12      	blt.n	8008a48 <USB_EPSetStall+0x54>
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00f      	beq.n	8008a48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	e02b      	b.n	8008ac2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	db12      	blt.n	8008aa2 <USB_EPSetStall+0xae>
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00f      	beq.n	8008aa2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008aa0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ac0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d128      	bne.n	8008b3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	78db      	ldrb	r3, [r3, #3]
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d003      	beq.n	8008b1c <USB_EPClearStall+0x4c>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d138      	bne.n	8008b8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	e027      	b.n	8008b8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	78db      	ldrb	r3, [r3, #3]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d003      	beq.n	8008b6e <USB_EPClearStall+0x9e>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	78db      	ldrb	r3, [r3, #3]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d10f      	bne.n	8008b8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008bbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008bd0:	68f9      	ldr	r1, [r7, #12]
 8008bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c16:	f023 0302 	bic.w	r3, r3, #2
 8008c1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c44:	f023 0303 	bic.w	r3, r3, #3
 8008c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c58:	f043 0302 	orr.w	r3, r3, #2
 8008c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4013      	ands	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c84:	68fb      	ldr	r3, [r7, #12]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	0c1b      	lsrs	r3, r3, #16
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	b29b      	uxth	r3, r3
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	4013      	ands	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d28:	68bb      	ldr	r3, [r7, #8]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b087      	sub	sp, #28
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	01db      	lsls	r3, r3, #7
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4013      	ands	r3, r2
 8008d82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d84:	68bb      	ldr	r3, [r7, #8]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008dcc:	f023 0307 	bic.w	r3, r3, #7
 8008dd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008de4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	333c      	adds	r3, #60	; 0x3c
 8008e06:	3304      	adds	r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <USB_EP0_OutStart+0x8c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d90a      	bls.n	8008e2a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e24:	d101      	bne.n	8008e2a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e024      	b.n	8008e74 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e30:	461a      	mov	r2, r3
 8008e32:	2300      	movs	r3, #0
 8008e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e58:	f043 0318 	orr.w	r3, r3, #24
 8008e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e70:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	4f54300a 	.word	0x4f54300a

08008e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <USB_CoreReset+0x60>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d901      	bls.n	8008ea0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e01a      	b.n	8008ed6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	daf3      	bge.n	8008e90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f043 0201 	orr.w	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <USB_CoreReset+0x60>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d901      	bls.n	8008ec8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e006      	b.n	8008ed6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d0f1      	beq.n	8008eb8 <USB_CoreReset+0x34>

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	00030d40 	.word	0x00030d40

08008ee8 <USBD_AUDIO_Init>:
* @retval status
*/

static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 8008ef4:	4b28      	ldr	r3, [pc, #160]	; (8008f98 <USBD_AUDIO_Init+0xb0>)
 8008ef6:	7d1b      	ldrb	r3, [r3, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <USBD_AUDIO_Init+0x18>
  {
    return USBD_FAIL; 
 8008efc:	2303      	movs	r3, #3
 8008efe:	e046      	b.n	8008f8e <USBD_AUDIO_Init+0xa6>
  }
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  pdev->pClassData = &haudioInstance;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a25      	ldr	r2, [pc, #148]	; (8008f98 <USBD_AUDIO_Init+0xb0>)
 8008f04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0e:	60fb      	str	r3, [r7, #12]
  uint16_t packet_dim = haudio->paketDimension;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8a5b      	ldrh	r3, [r3, #18]
 8008f14:	817b      	strh	r3, [r7, #10]
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8a1b      	ldrh	r3, [r3, #16]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	4413      	add	r3, r2
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	8a52      	ldrh	r2, [r2, #18]
 8008f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2a:	813b      	strh	r3, [r7, #8]
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 8008f2c:	893a      	ldrh	r2, [r7, #8]
 8008f2e:	897b      	ldrh	r3, [r7, #10]
 8008f30:	fb12 f303 	smulbb	r3, r2, r3
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	831a      	strh	r2, [r3, #24]
  haudio->rd_ptr = 0;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	82da      	strh	r2, [r3, #22]
  haudio->timeout = 0;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	819a      	strh	r2, [r3, #12]
  
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	33b0      	adds	r3, #176	; 0xb0
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	6890      	ldr	r0, [r2, #8]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	7912      	ldrb	r2, [r2, #4]
 8008f60:	2100      	movs	r1, #0
 8008f62:	4798      	blx	r3
  
  USBD_LL_OpenEP(pdev,
 8008f64:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008f68:	2201      	movs	r2, #1
 8008f6a:	2181      	movs	r1, #129	; 0x81
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7f8 f870 	bl	8001052 <USBD_LL_OpenEP>
                 AUDIO_IN_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_IN_PACKET);
  
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8008f72:	2181      	movs	r1, #129	; 0x81
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f8 f899 	bl	80010ac <USBD_LL_FlushEP>
  
  
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 8008f7a:	897b      	ldrh	r3, [r7, #10]
 8008f7c:	4a07      	ldr	r2, [pc, #28]	; (8008f9c <USBD_AUDIO_Init+0xb4>)
 8008f7e:	2181      	movs	r1, #129	; 0x81
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7f8 f90b 	bl	800119c <USBD_LL_Transmit>
                   IsocInBuffDummy,                        
                   packet_dim);      
  
  haudio->state=STATE_USB_IDLE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	751a      	strb	r2, [r3, #20]
  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	200015b4 	.word	0x200015b4
 8008f9c:	20001430 	.word	0x20001430

08008fa0 <USBD_AUDIO_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  /* Close EP IN */
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 8008fac:	2181      	movs	r1, #129	; 0x81
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f8 f869 	bl	8001086 <USBD_LL_CloseEP>
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00d      	beq.n	8008fda <USBD_AUDIO_DeInit+0x3a>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	33b0      	adds	r3, #176	; 0xb0
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 8008fd4:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_AUDIO_DeInit+0x44>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	751a      	strb	r2, [r3, #20]
  }
  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	200015b4 	.word	0x200015b4

08008fe8 <USBD_AUDIO_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev, 
                                  USBD_SetupReqTypedef *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	75fb      	strb	r3, [r7, #23]
  haudio = pdev->pClassData;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ffc:	613b      	str	r3, [r7, #16]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03a      	beq.n	8009080 <USBD_AUDIO_Setup+0x98>
 800900a:	2b20      	cmp	r3, #32
 800900c:	d172      	bne.n	80090f4 <USBD_AUDIO_Setup+0x10c>
  {
    /* AUDIO Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :    
    switch (req->bRequest)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d019      	beq.n	800904a <USBD_AUDIO_Setup+0x62>
 8009016:	2b00      	cmp	r3, #0
 8009018:	dd2b      	ble.n	8009072 <USBD_AUDIO_Setup+0x8a>
 800901a:	2b84      	cmp	r3, #132	; 0x84
 800901c:	dc29      	bgt.n	8009072 <USBD_AUDIO_Setup+0x8a>
 800901e:	2b81      	cmp	r3, #129	; 0x81
 8009020:	db27      	blt.n	8009072 <USBD_AUDIO_Setup+0x8a>
 8009022:	3b81      	subs	r3, #129	; 0x81
 8009024:	2b03      	cmp	r3, #3
 8009026:	d824      	bhi.n	8009072 <USBD_AUDIO_Setup+0x8a>
 8009028:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <USBD_AUDIO_Setup+0x48>)
 800902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902e:	bf00      	nop
 8009030:	08009041 	.word	0x08009041
 8009034:	08009055 	.word	0x08009055
 8009038:	0800905f 	.word	0x0800905f
 800903c:	08009069 	.word	0x08009069
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa00 	bl	8009448 <AUDIO_REQ_GetCurrent>
      break;
 8009048:	e019      	b.n	800907e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);   
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa23 	bl	8009498 <AUDIO_REQ_SetCurrent>
      break;
 8009052:	e014      	b.n	800907e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_MIN:
      AUDIO_REQ_GetMinimum(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f9be 	bl	80093d8 <AUDIO_REQ_GetMinimum>
      break;
 800905c:	e00f      	b.n	800907e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_MAX:
      AUDIO_REQ_GetMaximum(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f99d 	bl	80093a0 <AUDIO_REQ_GetMaximum>
      break;
 8009066:	e00a      	b.n	800907e <USBD_AUDIO_Setup+0x96>
      
    case AUDIO_REQ_GET_RES:
      AUDIO_REQ_GetResolution(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9d0 	bl	8009410 <AUDIO_REQ_GetResolution>
      break;
 8009070:	e005      	b.n	800907e <USBD_AUDIO_Setup+0x96>
      
    default:
      USBD_CtlError (pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 fff2 	bl	800b05e <USBD_CtlError>
      return USBD_FAIL;
 800907a:	2303      	movs	r3, #3
 800907c:	e03b      	b.n	80090f6 <USBD_AUDIO_Setup+0x10e>
    }
    break; 
 800907e:	e039      	b.n	80090f4 <USBD_AUDIO_Setup+0x10c>
    
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	2b0b      	cmp	r3, #11
 8009086:	d023      	beq.n	80090d0 <USBD_AUDIO_Setup+0xe8>
 8009088:	2b0b      	cmp	r3, #11
 800908a:	dc33      	bgt.n	80090f4 <USBD_AUDIO_Setup+0x10c>
 800908c:	2b06      	cmp	r3, #6
 800908e:	d002      	beq.n	8009096 <USBD_AUDIO_Setup+0xae>
 8009090:	2b0a      	cmp	r3, #10
 8009092:	d015      	beq.n	80090c0 <USBD_AUDIO_Setup+0xd8>
 8009094:	e02e      	b.n	80090f4 <USBD_AUDIO_Setup+0x10c>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	0a1b      	lsrs	r3, r3, #8
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b21      	cmp	r3, #33	; 0x21
 80090a0:	d127      	bne.n	80090f2 <USBD_AUDIO_Setup+0x10a>
      {
        
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80090a2:	4b17      	ldr	r3, [pc, #92]	; (8009100 <USBD_AUDIO_Setup+0x118>)
 80090a4:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	bf28      	it	cs
 80090ae:	2309      	movcs	r3, #9
 80090b0:	817b      	strh	r3, [r7, #10]
        
        USBD_CtlSendData (pdev, 
 80090b2:	897b      	ldrh	r3, [r7, #10]
 80090b4:	461a      	mov	r2, r3
 80090b6:	68f9      	ldr	r1, [r7, #12]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 f841 	bl	800b140 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
      break;
 80090be:	e018      	b.n	80090f2 <USBD_AUDIO_Setup+0x10a>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)haudio->alt_setting,
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	681b      	ldr	r3, [r3, #0]
      USBD_CtlSendData (pdev,
 80090c4:	2201      	movs	r2, #1
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f002 f839 	bl	800b140 <USBD_CtlSendData>
                        1);
      break;
 80090ce:	e011      	b.n	80090f4 <USBD_AUDIO_Setup+0x10c>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	885b      	ldrh	r3, [r3, #2]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d806      	bhi.n	80090e8 <USBD_AUDIO_Setup+0x100>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	885b      	ldrh	r3, [r3, #2]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 80090e6:	e005      	b.n	80090f4 <USBD_AUDIO_Setup+0x10c>
        USBD_CtlError (pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 ffb7 	bl	800b05e <USBD_CtlError>
      break;
 80090f0:	e000      	b.n	80090f4 <USBD_AUDIO_Setup+0x10c>
      break;
 80090f2:	bf00      	nop
    }
  }
  return ret;
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	2000162a 	.word	0x2000162a

08009104 <USBD_AUDIO_GetCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2276      	movs	r2, #118	; 0x76
 8009110:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 8009112:	4b03      	ldr	r3, [pc, #12]	; (8009120 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20001618 	.word	0x20001618

08009124 <USBD_AUDIO_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                  uint8_t epnum)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009136:	617b      	str	r3, [r7, #20]
  uint32_t length_usb_pck;
  uint16_t app;
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	8b1b      	ldrh	r3, [r3, #24]
 800913c:	827b      	strh	r3, [r7, #18]
  uint16_t true_dim = haudio->buffer_length;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	89db      	ldrh	r3, [r3, #14]
 8009142:	823b      	strh	r3, [r7, #16]
  uint16_t packet_dim = haudio->paketDimension;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	8a5b      	ldrh	r3, [r3, #18]
 8009148:	81fb      	strh	r3, [r7, #14]
  uint16_t channels = haudio->channels;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	791b      	ldrb	r3, [r3, #4]
 800914e:	81bb      	strh	r3, [r7, #12]
  length_usb_pck = packet_dim;  
 8009150:	89fb      	ldrh	r3, [r7, #14]
 8009152:	61fb      	str	r3, [r7, #28]
  haudio->timeout=0;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2200      	movs	r2, #0
 8009158:	819a      	strh	r2, [r3, #12]
  if (epnum == (AUDIO_IN_EP & 0x7F))
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	2b01      	cmp	r3, #1
 800915e:	f040 808f 	bne.w	8009280 <USBD_AUDIO_DataIn+0x15c>
  {    
    if (haudio->state == STATE_USB_IDLE) 
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	7d1b      	ldrb	r3, [r3, #20]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d10c      	bne.n	8009184 <USBD_AUDIO_DataIn+0x60>
    {
      haudio->state=STATE_USB_REQUESTS_STARTED;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2202      	movs	r2, #2
 800916e:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Record();      
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	33b0      	adds	r3, #176	; 0xb0
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	4798      	blx	r3
    }    
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	7d1b      	ldrb	r3, [r3, #20]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d173      	bne.n	8009274 <USBD_AUDIO_DataIn+0x150>
    {      
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	8adb      	ldrh	r3, [r3, #22]
 8009190:	8a3a      	ldrh	r2, [r7, #16]
 8009192:	fbb3 f1f2 	udiv	r1, r3, r2
 8009196:	fb01 f202 	mul.w	r2, r1, r2
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	b29a      	uxth	r2, r3
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	82da      	strh	r2, [r3, #22]
      if(IsocInWr_app<haudio->rd_ptr){
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	8adb      	ldrh	r3, [r3, #22]
 80091a6:	8a7a      	ldrh	r2, [r7, #18]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d208      	bcs.n	80091be <USBD_AUDIO_DataIn+0x9a>
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	8adb      	ldrh	r3, [r3, #22]
 80091b0:	8a3a      	ldrh	r2, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	8a7b      	ldrh	r3, [r7, #18]
 80091b8:	4413      	add	r3, r2
 80091ba:	837b      	strh	r3, [r7, #26]
 80091bc:	e004      	b.n	80091c8 <USBD_AUDIO_DataIn+0xa4>
      }else{
        app = IsocInWr_app - haudio->rd_ptr;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	8adb      	ldrh	r3, [r3, #22]
 80091c2:	8a7a      	ldrh	r2, [r7, #18]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	837b      	strh	r3, [r7, #26]
      }        
      if(app >= (packet_dim*haudio->upper_treshold)){       
 80091c8:	8b7a      	ldrh	r2, [r7, #26]
 80091ca:	89fb      	ldrh	r3, [r7, #14]
 80091cc:	6979      	ldr	r1, [r7, #20]
 80091ce:	7e89      	ldrb	r1, [r1, #26]
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	429a      	cmp	r2, r3
 80091d6:	db06      	blt.n	80091e6 <USBD_AUDIO_DataIn+0xc2>
        length_usb_pck += channels*2;
 80091d8:	89bb      	ldrh	r3, [r7, #12]
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	461a      	mov	r2, r3
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	e00d      	b.n	8009202 <USBD_AUDIO_DataIn+0xde>
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 80091e6:	8b7a      	ldrh	r2, [r7, #26]
 80091e8:	89fb      	ldrh	r3, [r7, #14]
 80091ea:	6979      	ldr	r1, [r7, #20]
 80091ec:	7ec9      	ldrb	r1, [r1, #27]
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	429a      	cmp	r2, r3
 80091f4:	dc05      	bgt.n	8009202 <USBD_AUDIO_DataIn+0xde>
        length_usb_pck -= channels*2;
 80091f6:	89bb      	ldrh	r3, [r7, #12]
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	461a      	mov	r2, r3
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	1a9b      	subs	r3, r3, r2
 8009200:	61fb      	str	r3, [r7, #28]
      }     
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
                        (uint8_t*)(&haudio->buffer[haudio->rd_ptr]),
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	8ad2      	ldrh	r2, [r2, #22]
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 800920a:	441a      	add	r2, r3
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2181      	movs	r1, #129	; 0x81
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7f7 ffc3 	bl	800119c <USBD_LL_Transmit>
                        length_usb_pck);      
      haudio->rd_ptr += length_usb_pck;      
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	8ada      	ldrh	r2, [r3, #22]
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	b29b      	uxth	r3, r3
 800921e:	4413      	add	r3, r2
 8009220:	b29a      	uxth	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	82da      	strh	r2, [r3, #22]

      if(app < haudio->buffer_length/10)
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	89db      	ldrh	r3, [r3, #14]
 800922a:	4a18      	ldr	r2, [pc, #96]	; (800928c <USBD_AUDIO_DataIn+0x168>)
 800922c:	fba2 2303 	umull	r2, r3, r2, r3
 8009230:	08db      	lsrs	r3, r3, #3
 8009232:	b29b      	uxth	r3, r3
 8009234:	8b7a      	ldrh	r2, [r7, #26]
 8009236:	429a      	cmp	r2, r3
 8009238:	d222      	bcs.n	8009280 <USBD_AUDIO_DataIn+0x15c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	33b0      	adds	r3, #176	; 0xb0
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2201      	movs	r2, #1
 8009252:	751a      	strb	r2, [r3, #20]
        haudio->timeout=0;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2200      	movs	r2, #0
 8009258:	819a      	strh	r2, [r3, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	89db      	ldrh	r3, [r3, #14]
 8009262:	461a      	mov	r2, r3
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	8a1b      	ldrh	r3, [r3, #16]
 8009268:	4413      	add	r3, r2
 800926a:	461a      	mov	r2, r3
 800926c:	2100      	movs	r1, #0
 800926e:	f003 fd73 	bl	800cd58 <memset>
 8009272:	e005      	b.n	8009280 <USBD_AUDIO_DataIn+0x15c>
      }       
    }
    else 
    {      
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	4a06      	ldr	r2, [pc, #24]	; (8009290 <USBD_AUDIO_DataIn+0x16c>)
 8009278:	2181      	movs	r1, #129	; 0x81
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f7 ff8e 	bl	800119c <USBD_LL_Transmit>
                        IsocInBuffDummy,
                        length_usb_pck);      
    }    
  }
  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	cccccccd 	.word	0xcccccccd
 8009290:	20001430 	.word	0x20001430

08009294 <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a2:	60fb      	str	r3, [r7, #12]
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	7f1b      	ldrb	r3, [r3, #28]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d123      	bne.n	80092f4 <USBD_AUDIO_EP0_RxReady+0x60>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d11e      	bne.n	80092f4 <USBD_AUDIO_EP0_RxReady+0x60>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->VolumeCtl(VOL_CUR);    
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	33b0      	adds	r3, #176	; 0xb0
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <USBD_AUDIO_EP0_RxReady+0x6c>)
 80092ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80092ce:	4610      	mov	r0, r2
 80092d0:	4798      	blx	r3
      
      haudio->control.cmd = 0;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	771a      	strb	r2, [r3, #28]
      haudio->control.len = 0;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      haudio->control.unit = 0;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      haudio->control.data[0]=0;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	775a      	strb	r2, [r3, #29]
      haudio->control.data[0]=0;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	775a      	strb	r2, [r3, #29]
    }
  }    
  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	200015b0 	.word	0x200015b0

08009304 <USBD_AUDIO_EP0_TxReady>:
*         handle EP0 TRx Ready event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <USBD_AUDIO_SOF>:
*         handle SOF event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{  
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USBD_AUDIO_IsoINIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USBD_AUDIO_IsoOutIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USBD_AUDIO_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	220a      	movs	r2, #10
 800938c:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	200000ac 	.word	0x200000ac

080093a0 <AUDIO_REQ_GetMaximum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMaximum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093b0:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MAX & 0xFF00 ) >> 8;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 80093c8:	461a      	mov	r2, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 feb8 	bl	800b140 <USBD_CtlSendData>
}
 80093d0:	bf00      	nop
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <AUDIO_REQ_GetMinimum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMinimum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093e8:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	22e0      	movs	r2, #224	; 0xe0
 80093ee:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	22db      	movs	r2, #219	; 0xdb
 80093f4:	779a      	strb	r2, [r3, #30]
  /* Send the current mute state */
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);   
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009400:	461a      	mov	r2, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 fe9c 	bl	800b140 <USBD_CtlSendData>
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <AUDIO_REQ_GetResolution>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetResolution(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009420:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2223      	movs	r2, #35	; 0x23
 8009426:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	779a      	strb	r2, [r3, #30]
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009438:	461a      	mov	r2, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fe80 	bl	800b140 <USBD_CtlSendData>
}
 8009440:	bf00      	nop
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <AUDIO_REQ_GetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009458:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 800945a:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <AUDIO_REQ_GetCurrent+0x4c>)
 800945c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <AUDIO_REQ_GetCurrent+0x4c>)
 8009468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800946c:	b29b      	uxth	r3, r3
 800946e:	0a1b      	lsrs	r3, r3, #8
 8009470:	b29b      	uxth	r3, r3
 8009472:	b2da      	uxtb	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009482:	461a      	mov	r2, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 fe5b 	bl	800b140 <USBD_CtlSendData>
}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200015b0 	.word	0x200015b0

08009498 <AUDIO_REQ_SetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094a8:	60fb      	str	r3, [r7, #12]
  if (req->wLength)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	88db      	ldrh	r3, [r3, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d017      	beq.n	80094e2 <AUDIO_REQ_SetCurrent+0x4a>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88db      	ldrh	r3, [r3, #6]
    USBD_CtlPrepareRx (pdev,
 80094b6:	461a      	mov	r2, r3
 80094b8:	490c      	ldr	r1, [pc, #48]	; (80094ec <AUDIO_REQ_SetCurrent+0x54>)
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fe6c 	bl	800b198 <USBD_CtlPrepareRx>
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2201      	movs	r2, #1
 80094c4:	771a      	strb	r2, [r3, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	88db      	ldrh	r3, [r3, #6]
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	889b      	ldrh	r3, [r3, #4]
 80094d6:	0a1b      	lsrs	r3, r3, #8
 80094d8:	b29b      	uxth	r3, r3
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	200015b0 	.word	0x200015b0

080094f0 <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	80fb      	strh	r3, [r7, #6]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009504:	61fb      	str	r3, [r7, #28]
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 8009506:	4b63      	ldr	r3, [pc, #396]	; (8009694 <USBD_AUDIO_Data_Transfer+0x1a4>)
 8009508:	7d1b      	ldrb	r3, [r3, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <USBD_AUDIO_Data_Transfer+0x22>
    return USBD_BUSY;    
 800950e:	2301      	movs	r3, #1
 8009510:	e0bb      	b.n	800968a <USBD_AUDIO_Data_Transfer+0x19a>
  }  
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	837b      	strh	r3, [r7, #26]
  uint16_t true_dim = haudio->buffer_length;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	89db      	ldrh	r3, [r3, #14]
 800951c:	833b      	strh	r3, [r7, #24]
  uint16_t current_data_Amount = haudio->dataAmount;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	8a1b      	ldrh	r3, [r3, #16]
 8009522:	82fb      	strh	r3, [r7, #22]
  uint16_t packet_dim = haudio->paketDimension;
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	8a5b      	ldrh	r3, [r3, #18]
 8009528:	82bb      	strh	r3, [r7, #20]
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	7d1b      	ldrb	r3, [r3, #20]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d003      	beq.n	800953a <USBD_AUDIO_Data_Transfer+0x4a>
 8009532:	8afa      	ldrh	r2, [r7, #22]
 8009534:	8b7b      	ldrh	r3, [r7, #26]
 8009536:	429a      	cmp	r2, r3
 8009538:	d05c      	beq.n	80095f4 <USBD_AUDIO_Data_Transfer+0x104>
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	8b7a      	ldrh	r2, [r7, #26]
 800953e:	821a      	strh	r2, [r3, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 8009540:	8b7a      	ldrh	r2, [r7, #26]
 8009542:	4613      	mov	r3, r2
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	441a      	add	r2, r3
 8009548:	8abb      	ldrh	r3, [r7, #20]
 800954a:	fb92 f3f3 	sdiv	r3, r2, r3
 800954e:	827b      	strh	r3, [r7, #18]
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 8009550:	8a7a      	ldrh	r2, [r7, #18]
 8009552:	8abb      	ldrh	r3, [r7, #20]
 8009554:	fb12 f303 	smulbb	r3, r2, r3
 8009558:	b29a      	uxth	r2, r3
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	831a      	strh	r2, [r3, #24]
    haudio->rd_ptr = 0;
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	2200      	movs	r2, #0
 8009562:	82da      	strh	r2, [r3, #22]
    haudio->upper_treshold = wr_rd_offset + 1;
 8009564:	8a7b      	ldrh	r3, [r7, #18]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	3301      	adds	r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	769a      	strb	r2, [r3, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 8009570:	8a7b      	ldrh	r3, [r7, #18]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	3b01      	subs	r3, #1
 8009576:	b2da      	uxtb	r2, r3
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	76da      	strb	r2, [r3, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 800957c:	8b7a      	ldrh	r2, [r7, #26]
 800957e:	8abb      	ldrh	r3, [r7, #20]
 8009580:	fbb2 f3f3 	udiv	r3, r2, r3
 8009584:	b29b      	uxth	r3, r3
 8009586:	8aba      	ldrh	r2, [r7, #20]
 8009588:	fb12 f303 	smulbb	r3, r2, r3
 800958c:	b29b      	uxth	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	0052      	lsls	r2, r2, #1
 8009592:	4413      	add	r3, r2
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	81da      	strh	r2, [r3, #14]
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <USBD_AUDIO_Data_Transfer+0xbe>
    {
      USBD_free(haudio->buffer);      
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a8:	4618      	mov	r0, r3
 80095aa:	f003 fbbf 	bl	800cd2c <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	89db      	ldrh	r3, [r3, #14]
 80095b2:	461a      	mov	r2, r3
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	8a1b      	ldrh	r3, [r3, #16]
 80095b8:	4413      	add	r3, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f003 fbae 	bl	800cd1c <malloc>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	661a      	str	r2, [r3, #96]	; 0x60
    if(haudio->buffer == NULL)
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <USBD_AUDIO_Data_Transfer+0xe4>
    {
      return USBD_FAIL;       
 80095d0:	2303      	movs	r3, #3
 80095d2:	e05a      	b.n	800968a <USBD_AUDIO_Data_Transfer+0x19a>
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	89db      	ldrh	r3, [r3, #14]
 80095dc:	461a      	mov	r2, r3
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	8a1b      	ldrh	r3, [r3, #16]
 80095e2:	4413      	add	r3, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	2100      	movs	r1, #0
 80095e8:	f003 fbb6 	bl	800cd58 <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	2203      	movs	r2, #3
 80095f0:	751a      	strb	r2, [r3, #20]
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80095f2:	e049      	b.n	8009688 <USBD_AUDIO_Data_Transfer+0x198>
    
    
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	7d1b      	ldrb	r3, [r3, #20]
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d145      	bne.n	8009688 <USBD_AUDIO_Data_Transfer+0x198>
    if(haudio->timeout++==TIMEOUT_VALUE){
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	899b      	ldrh	r3, [r3, #12]
 8009600:	b21b      	sxth	r3, r3
 8009602:	b29a      	uxth	r2, r3
 8009604:	3201      	adds	r2, #1
 8009606:	b292      	uxth	r2, r2
 8009608:	b211      	sxth	r1, r2
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	8191      	strh	r1, [r2, #12]
 800960e:	2bc8      	cmp	r3, #200	; 0xc8
 8009610:	d10f      	bne.n	8009632 <USBD_AUDIO_Data_Transfer+0x142>
      haudio->state=STATE_USB_IDLE;
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	2201      	movs	r2, #1
 8009616:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();   
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	33b0      	adds	r3, #176	; 0xb0
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	4798      	blx	r3
     haudio->timeout=0;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2200      	movs	r2, #0
 8009630:	819a      	strh	r2, [r3, #12]
    }
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	8b12      	ldrh	r2, [r2, #24]
 800963a:	4413      	add	r3, r2
 800963c:	8b7a      	ldrh	r2, [r7, #26]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	4618      	mov	r0, r3
 8009642:	f003 fb7b 	bl	800cd3c <memcpy>
    haudio->wr_ptr += dataAmount;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	8b1a      	ldrh	r2, [r3, #24]
 800964a:	8b7b      	ldrh	r3, [r7, #26]
 800964c:	4413      	add	r3, r2
 800964e:	b29a      	uxth	r2, r3
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	831a      	strh	r2, [r3, #24]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	8b1b      	ldrh	r3, [r3, #24]
 8009658:	8b3a      	ldrh	r2, [r7, #24]
 800965a:	fbb3 f1f2 	udiv	r1, r3, r2
 800965e:	fb01 f202 	mul.w	r2, r1, r2
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	b29a      	uxth	r2, r3
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	831a      	strh	r2, [r3, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	8b1b      	ldrh	r3, [r3, #24]
 800966e:	8b7a      	ldrh	r2, [r7, #26]
 8009670:	429a      	cmp	r2, r3
 8009672:	d109      	bne.n	8009688 <USBD_AUDIO_Data_Transfer+0x198>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009678:	8b3b      	ldrh	r3, [r7, #24]
 800967a:	18d0      	adds	r0, r2, r3
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009680:	8b7a      	ldrh	r2, [r7, #26]
 8009682:	4619      	mov	r1, r3
 8009684:	f003 fb5a 	bl	800cd3c <memcpy>
    }
  }
  return USBD_OK;  
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	200015b4 	.word	0x200015b4

08009698 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData[0]= fops;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }
  return 0;}
 80096b0:	2300      	movs	r3, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
	...

080096c0 <USBD_AUDIO_Init_Microphone_Descriptor>:
* @param  samplingFrequency: sampling frequency
* @param  Channels: number of channels
* @retval status
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	71fb      	strb	r3, [r7, #7]
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 80096ce:	4b5c      	ldr	r3, [pc, #368]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096d0:	2209      	movs	r2, #9
 80096d2:	701a      	strb	r2, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
 80096d4:	4b5a      	ldr	r3, [pc, #360]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096d6:	2202      	movs	r2, #2
 80096d8:	705a      	strb	r2, [r3, #1]
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	336c      	adds	r3, #108	; 0x6c
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	4b57      	ldr	r3, [pc, #348]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096e2:	709a      	strb	r2, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	336c      	adds	r3, #108	; 0x6c
 80096e8:	121b      	asrs	r3, r3, #8
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	4b54      	ldr	r3, [pc, #336]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096ee:	70da      	strb	r2, [r3, #3]
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
 80096f0:	4b53      	ldr	r3, [pc, #332]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096f2:	2202      	movs	r2, #2
 80096f4:	711a      	strb	r2, [r3, #4]
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
 80096f6:	4b52      	ldr	r3, [pc, #328]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	715a      	strb	r2, [r3, #5]
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
 80096fc:	4b50      	ldr	r3, [pc, #320]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80096fe:	2200      	movs	r2, #0
 8009700:	719a      	strb	r2, [r3, #6]
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
 8009702:	4b4f      	ldr	r3, [pc, #316]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009704:	2280      	movs	r2, #128	; 0x80
 8009706:	71da      	strb	r2, [r3, #7]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 8009708:	4b4d      	ldr	r3, [pc, #308]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800970a:	2232      	movs	r2, #50	; 0x32
 800970c:	721a      	strb	r2, [r3, #8]
  /* USB Microphone Standard interface descriptor */
  USBD_AUDIO_CfgDesc[9] = 9;                                                   /* bLength */
 800970e:	4b4c      	ldr	r3, [pc, #304]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009710:	2209      	movs	r2, #9
 8009712:	725a      	strb	r2, [r3, #9]
  USBD_AUDIO_CfgDesc[10] = USB_INTERFACE_DESCRIPTOR_TYPE;                      /* bDescriptorType */
 8009714:	4b4a      	ldr	r3, [pc, #296]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009716:	2204      	movs	r2, #4
 8009718:	729a      	strb	r2, [r3, #10]
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
 800971a:	4b49      	ldr	r3, [pc, #292]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800971c:	2200      	movs	r2, #0
 800971e:	72da      	strb	r2, [r3, #11]
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
 8009720:	4b47      	ldr	r3, [pc, #284]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009722:	2200      	movs	r2, #0
 8009724:	731a      	strb	r2, [r3, #12]
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
 8009726:	4b46      	ldr	r3, [pc, #280]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009728:	2200      	movs	r2, #0
 800972a:	735a      	strb	r2, [r3, #13]
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
 800972c:	4b44      	ldr	r3, [pc, #272]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800972e:	2201      	movs	r2, #1
 8009730:	739a      	strb	r2, [r3, #14]
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
 8009732:	4b43      	ldr	r3, [pc, #268]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009734:	2201      	movs	r2, #1
 8009736:	73da      	strb	r2, [r3, #15]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 8009738:	4b41      	ldr	r3, [pc, #260]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800973a:	2200      	movs	r2, #0
 800973c:	741a      	strb	r2, [r3, #16]
  USBD_AUDIO_CfgDesc[17] = 0x00;                                               /* iInterface */   
 800973e:	4b40      	ldr	r3, [pc, #256]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009740:	2200      	movs	r2, #0
 8009742:	745a      	strb	r2, [r3, #17]
  /* USB Microphone Class-specific AC Interface Descriptor */
  USBD_AUDIO_CfgDesc[18] = 9;                                                  /* bLength */
 8009744:	4b3e      	ldr	r3, [pc, #248]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009746:	2209      	movs	r2, #9
 8009748:	749a      	strb	r2, [r3, #18]
  USBD_AUDIO_CfgDesc[19] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 800974a:	4b3d      	ldr	r3, [pc, #244]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800974c:	2224      	movs	r2, #36	; 0x24
 800974e:	74da      	strb	r2, [r3, #19]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 8009750:	4b3b      	ldr	r3, [pc, #236]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009752:	2201      	movs	r2, #1
 8009754:	751a      	strb	r2, [r3, #20]
  USBD_AUDIO_CfgDesc[21] = 0x00;       /* 1.00 */                              /* bcdADC */
 8009756:	4b3a      	ldr	r3, [pc, #232]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009758:	2200      	movs	r2, #0
 800975a:	755a      	strb	r2, [r3, #21]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 800975c:	4b38      	ldr	r3, [pc, #224]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800975e:	2201      	movs	r2, #1
 8009760:	759a      	strb	r2, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	3325      	adds	r3, #37	; 0x25
 8009766:	b2da      	uxtb	r2, r3
 8009768:	4b35      	ldr	r3, [pc, #212]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800976a:	75da      	strb	r2, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 800976c:	4b34      	ldr	r3, [pc, #208]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800976e:	2200      	movs	r2, #0
 8009770:	761a      	strb	r2, [r3, #24]
  USBD_AUDIO_CfgDesc[25] = 0x01;                                               /* bInCollection */
 8009772:	4b33      	ldr	r3, [pc, #204]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009774:	2201      	movs	r2, #1
 8009776:	765a      	strb	r2, [r3, #25]
  USBD_AUDIO_CfgDesc[26] = 0x01;                                               /* baInterfaceNr */   
 8009778:	4b31      	ldr	r3, [pc, #196]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800977a:	2201      	movs	r2, #1
 800977c:	769a      	strb	r2, [r3, #26]
  /* USB Microphone Input Terminal Descriptor */
  USBD_AUDIO_CfgDesc[27] = AUDIO_INPUT_TERMINAL_DESC_SIZE;                     /* bLength */
 800977e:	4b30      	ldr	r3, [pc, #192]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009780:	220c      	movs	r2, #12
 8009782:	76da      	strb	r2, [r3, #27]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009784:	4b2e      	ldr	r3, [pc, #184]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009786:	2224      	movs	r2, #36	; 0x24
 8009788:	771a      	strb	r2, [r3, #28]
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
 800978a:	4b2d      	ldr	r3, [pc, #180]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800978c:	2202      	movs	r2, #2
 800978e:	775a      	strb	r2, [r3, #29]
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
 8009790:	4b2b      	ldr	r3, [pc, #172]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009792:	2201      	movs	r2, #1
 8009794:	779a      	strb	r2, [r3, #30]
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
 8009796:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009798:	2201      	movs	r2, #1
 800979a:	77da      	strb	r2, [r3, #31]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 800979c:	4b28      	ldr	r3, [pc, #160]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 2020 	strb.w	r2, [r3, #32]
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
 80097a4:	4b26      	ldr	r3, [pc, #152]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 80097ac:	4a24      	ldr	r2, [pc, #144]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if(Channels != 2)
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d008      	beq.n	80097cc <USBD_AUDIO_Init_Microphone_Descriptor+0x10c>
  {
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 80097ba:	4b21      	ldr	r3, [pc, #132]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80097c2:	4b1f      	ldr	r3, [pc, #124]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80097ca:	e007      	b.n	80097dc <USBD_AUDIO_Init_Microphone_Descriptor+0x11c>
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 80097cc:	4b1c      	ldr	r3, [pc, #112]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097ce:	2203      	movs	r2, #3
 80097d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80097d4:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 80097dc:	4b18      	ldr	r3, [pc, #96]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 80097e4:	4b16      	ldr	r3, [pc, #88]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	3308      	adds	r3, #8
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	4b13      	ldr	r3, [pc, #76]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80097f8:	4b11      	ldr	r3, [pc, #68]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80097fa:	2224      	movs	r2, #36	; 0x24
 80097fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009802:	2206      	movs	r2, #6
 8009804:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800980a:	2202      	movs	r2, #2
 800980c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
 8009810:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009812:	2201      	movs	r2, #1
 8009814:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8009818:	4b09      	ldr	r3, [pc, #36]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800981a:	2201      	movs	r2, #1
 800981c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  index = 47;   
 8009820:	232f      	movs	r3, #47	; 0x2f
 8009822:	82fb      	strh	r3, [r7, #22]
  if(Channels == 1)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d10c      	bne.n	8009844 <USBD_AUDIO_Init_Microphone_Descriptor+0x184>
  {
    AUDIO_CONTROLS = (0x02);     
 800982a:	2302      	movs	r3, #2
 800982c:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 800982e:	4a04      	ldr	r2, [pc, #16]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009830:	7d7b      	ldrb	r3, [r7, #21]
 8009832:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 8009836:	4b02      	ldr	r3, [pc, #8]	; (8009840 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009838:	2200      	movs	r2, #0
 800983a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800983e:	e012      	b.n	8009866 <USBD_AUDIO_Init_Microphone_Descriptor+0x1a6>
 8009840:	20001618 	.word	0x20001618
  }
  else
  {
    AUDIO_CONTROLS = (0x02);     
 8009844:	2302      	movs	r3, #2
 8009846:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8009848:	4bab      	ldr	r3, [pc, #684]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800984a:	2200      	movs	r2, #0
 800984c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8009850:	4aa9      	ldr	r2, [pc, #676]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009852:	7d7b      	ldrb	r3, [r7, #21]
 8009854:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009858:	8afb      	ldrh	r3, [r7, #22]
 800985a:	49a7      	ldr	r1, [pc, #668]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800985c:	7d7a      	ldrb	r2, [r7, #21]
 800985e:	54ca      	strb	r2, [r1, r3]
    index++;
 8009860:	8afb      	ldrh	r3, [r7, #22]
 8009862:	3301      	adds	r3, #1
 8009864:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 2)
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d906      	bls.n	800987a <USBD_AUDIO_Init_Microphone_Descriptor+0x1ba>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 800986c:	8afb      	ldrh	r3, [r7, #22]
 800986e:	49a2      	ldr	r1, [pc, #648]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009870:	7d7a      	ldrb	r2, [r7, #21]
 8009872:	54ca      	strb	r2, [r1, r3]
    index++;
 8009874:	8afb      	ldrh	r3, [r7, #22]
 8009876:	3301      	adds	r3, #1
 8009878:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 3)
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d906      	bls.n	800988e <USBD_AUDIO_Init_Microphone_Descriptor+0x1ce>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009880:	8afb      	ldrh	r3, [r7, #22]
 8009882:	499d      	ldr	r1, [pc, #628]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009884:	7d7a      	ldrb	r2, [r7, #21]
 8009886:	54ca      	strb	r2, [r1, r3]
    index++;
 8009888:	8afb      	ldrh	r3, [r7, #22]
 800988a:	3301      	adds	r3, #1
 800988c:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 4)
 800988e:	79fb      	ldrb	r3, [r7, #7]
 8009890:	2b04      	cmp	r3, #4
 8009892:	d906      	bls.n	80098a2 <USBD_AUDIO_Init_Microphone_Descriptor+0x1e2>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009894:	8afb      	ldrh	r3, [r7, #22]
 8009896:	4998      	ldr	r1, [pc, #608]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009898:	7d7a      	ldrb	r2, [r7, #21]
 800989a:	54ca      	strb	r2, [r1, r3]
    index++;
 800989c:	8afb      	ldrh	r3, [r7, #22]
 800989e:	3301      	adds	r3, #1
 80098a0:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 5)
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d906      	bls.n	80098b6 <USBD_AUDIO_Init_Microphone_Descriptor+0x1f6>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098a8:	8afb      	ldrh	r3, [r7, #22]
 80098aa:	4993      	ldr	r1, [pc, #588]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098ac:	7d7a      	ldrb	r2, [r7, #21]
 80098ae:	54ca      	strb	r2, [r1, r3]
    index++;
 80098b0:	8afb      	ldrh	r3, [r7, #22]
 80098b2:	3301      	adds	r3, #1
 80098b4:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 6)
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	2b06      	cmp	r3, #6
 80098ba:	d906      	bls.n	80098ca <USBD_AUDIO_Init_Microphone_Descriptor+0x20a>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098bc:	8afb      	ldrh	r3, [r7, #22]
 80098be:	498e      	ldr	r1, [pc, #568]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098c0:	7d7a      	ldrb	r2, [r7, #21]
 80098c2:	54ca      	strb	r2, [r1, r3]
    index++;
 80098c4:	8afb      	ldrh	r3, [r7, #22]
 80098c6:	3301      	adds	r3, #1
 80098c8:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 7)
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	2b07      	cmp	r3, #7
 80098ce:	d906      	bls.n	80098de <USBD_AUDIO_Init_Microphone_Descriptor+0x21e>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80098d0:	8afb      	ldrh	r3, [r7, #22]
 80098d2:	4989      	ldr	r1, [pc, #548]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098d4:	7d7a      	ldrb	r2, [r7, #21]
 80098d6:	54ca      	strb	r2, [r1, r3]
    index++;
 80098d8:	8afb      	ldrh	r3, [r7, #22]
 80098da:	3301      	adds	r3, #1
 80098dc:	82fb      	strh	r3, [r7, #22]
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 80098de:	8afb      	ldrh	r3, [r7, #22]
 80098e0:	4a85      	ldr	r2, [pc, #532]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098e2:	2100      	movs	r1, #0
 80098e4:	54d1      	strb	r1, [r2, r3]
  index++;   
 80098e6:	8afb      	ldrh	r3, [r7, #22]
 80098e8:	3301      	adds	r3, #1
 80098ea:	82fb      	strh	r3, [r7, #22]
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 80098ec:	8afb      	ldrh	r3, [r7, #22]
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	82fa      	strh	r2, [r7, #22]
 80098f2:	461a      	mov	r2, r3
 80098f4:	4b80      	ldr	r3, [pc, #512]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80098f6:	2109      	movs	r1, #9
 80098f8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 80098fa:	8afb      	ldrh	r3, [r7, #22]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	82fa      	strh	r2, [r7, #22]
 8009900:	461a      	mov	r2, r3
 8009902:	4b7d      	ldr	r3, [pc, #500]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009904:	2124      	movs	r1, #36	; 0x24
 8009906:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 8009908:	8afb      	ldrh	r3, [r7, #22]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	82fa      	strh	r2, [r7, #22]
 800990e:	461a      	mov	r2, r3
 8009910:	4b79      	ldr	r3, [pc, #484]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009912:	2103      	movs	r1, #3
 8009914:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 8009916:	8afb      	ldrh	r3, [r7, #22]
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	82fa      	strh	r2, [r7, #22]
 800991c:	461a      	mov	r2, r3
 800991e:	4b76      	ldr	r3, [pc, #472]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009920:	2103      	movs	r1, #3
 8009922:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 8009924:	8afb      	ldrh	r3, [r7, #22]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	82fa      	strh	r2, [r7, #22]
 800992a:	461a      	mov	r2, r3
 800992c:	4b72      	ldr	r3, [pc, #456]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800992e:	2101      	movs	r1, #1
 8009930:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 8009932:	8afb      	ldrh	r3, [r7, #22]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	82fa      	strh	r2, [r7, #22]
 8009938:	461a      	mov	r2, r3
 800993a:	4b6f      	ldr	r3, [pc, #444]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800993c:	2101      	movs	r1, #1
 800993e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8009940:	8afb      	ldrh	r3, [r7, #22]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	82fa      	strh	r2, [r7, #22]
 8009946:	461a      	mov	r2, r3
 8009948:	4b6b      	ldr	r3, [pc, #428]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800994a:	2100      	movs	r1, #0
 800994c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 800994e:	8afb      	ldrh	r3, [r7, #22]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	82fa      	strh	r2, [r7, #22]
 8009954:	461a      	mov	r2, r3
 8009956:	4b68      	ldr	r3, [pc, #416]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009958:	2102      	movs	r1, #2
 800995a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 800995c:	8afb      	ldrh	r3, [r7, #22]
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	82fa      	strh	r2, [r7, #22]
 8009962:	461a      	mov	r2, r3
 8009964:	4b64      	ldr	r3, [pc, #400]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009966:	2100      	movs	r1, #0
 8009968:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 800996a:	8afb      	ldrh	r3, [r7, #22]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	82fa      	strh	r2, [r7, #22]
 8009970:	461a      	mov	r2, r3
 8009972:	4b61      	ldr	r3, [pc, #388]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009974:	2109      	movs	r1, #9
 8009976:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8009978:	8afb      	ldrh	r3, [r7, #22]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	82fa      	strh	r2, [r7, #22]
 800997e:	461a      	mov	r2, r3
 8009980:	4b5d      	ldr	r3, [pc, #372]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009982:	2104      	movs	r1, #4
 8009984:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009986:	8afb      	ldrh	r3, [r7, #22]
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	82fa      	strh	r2, [r7, #22]
 800998c:	461a      	mov	r2, r3
 800998e:	4b5a      	ldr	r3, [pc, #360]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009990:	2101      	movs	r1, #1
 8009992:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 8009994:	8afb      	ldrh	r3, [r7, #22]
 8009996:	1c5a      	adds	r2, r3, #1
 8009998:	82fa      	strh	r2, [r7, #22]
 800999a:	461a      	mov	r2, r3
 800999c:	4b56      	ldr	r3, [pc, #344]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 800999e:	2100      	movs	r1, #0
 80099a0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 80099a2:	8afb      	ldrh	r3, [r7, #22]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	82fa      	strh	r2, [r7, #22]
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b53      	ldr	r3, [pc, #332]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099ac:	2100      	movs	r1, #0
 80099ae:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 80099b0:	8afb      	ldrh	r3, [r7, #22]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	82fa      	strh	r2, [r7, #22]
 80099b6:	461a      	mov	r2, r3
 80099b8:	4b4f      	ldr	r3, [pc, #316]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099ba:	2101      	movs	r1, #1
 80099bc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 80099be:	8afb      	ldrh	r3, [r7, #22]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	82fa      	strh	r2, [r7, #22]
 80099c4:	461a      	mov	r2, r3
 80099c6:	4b4c      	ldr	r3, [pc, #304]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099c8:	2102      	movs	r1, #2
 80099ca:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 80099cc:	8afb      	ldrh	r3, [r7, #22]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	82fa      	strh	r2, [r7, #22]
 80099d2:	461a      	mov	r2, r3
 80099d4:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099d6:	2100      	movs	r1, #0
 80099d8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 80099da:	8afb      	ldrh	r3, [r7, #22]
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	82fa      	strh	r2, [r7, #22]
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b45      	ldr	r3, [pc, #276]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099e4:	2100      	movs	r1, #0
 80099e6:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 80099e8:	8afb      	ldrh	r3, [r7, #22]
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	82fa      	strh	r2, [r7, #22]
 80099ee:	461a      	mov	r2, r3
 80099f0:	4b41      	ldr	r3, [pc, #260]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 80099f2:	2109      	movs	r1, #9
 80099f4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 80099f6:	8afb      	ldrh	r3, [r7, #22]
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	82fa      	strh	r2, [r7, #22]
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b3e      	ldr	r3, [pc, #248]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a00:	2104      	movs	r1, #4
 8009a02:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009a04:	8afb      	ldrh	r3, [r7, #22]
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	82fa      	strh	r2, [r7, #22]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b3a      	ldr	r3, [pc, #232]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a0e:	2101      	movs	r1, #1
 8009a10:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 8009a12:	8afb      	ldrh	r3, [r7, #22]
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	82fa      	strh	r2, [r7, #22]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 8009a20:	8afb      	ldrh	r3, [r7, #22]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	82fa      	strh	r2, [r7, #22]
 8009a26:	461a      	mov	r2, r3
 8009a28:	4b33      	ldr	r3, [pc, #204]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8009a2e:	8afb      	ldrh	r3, [r7, #22]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	82fa      	strh	r2, [r7, #22]
 8009a34:	461a      	mov	r2, r3
 8009a36:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a38:	2101      	movs	r1, #1
 8009a3a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8009a3c:	8afb      	ldrh	r3, [r7, #22]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	82fa      	strh	r2, [r7, #22]
 8009a42:	461a      	mov	r2, r3
 8009a44:	4b2c      	ldr	r3, [pc, #176]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a46:	2102      	movs	r1, #2
 8009a48:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8009a4a:	8afb      	ldrh	r3, [r7, #22]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	82fa      	strh	r2, [r7, #22]
 8009a50:	461a      	mov	r2, r3
 8009a52:	4b29      	ldr	r3, [pc, #164]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a54:	2100      	movs	r1, #0
 8009a56:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 8009a58:	8afb      	ldrh	r3, [r7, #22]
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	82fa      	strh	r2, [r7, #22]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4b25      	ldr	r3, [pc, #148]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a62:	2100      	movs	r1, #0
 8009a64:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8009a66:	8afb      	ldrh	r3, [r7, #22]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	82fa      	strh	r2, [r7, #22]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	4b22      	ldr	r3, [pc, #136]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a70:	2107      	movs	r1, #7
 8009a72:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009a74:	8afb      	ldrh	r3, [r7, #22]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	82fa      	strh	r2, [r7, #22]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	4b1e      	ldr	r3, [pc, #120]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a7e:	2124      	movs	r1, #36	; 0x24
 8009a80:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 8009a82:	8afb      	ldrh	r3, [r7, #22]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	82fa      	strh	r2, [r7, #22]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4b1b      	ldr	r3, [pc, #108]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 8009a90:	8afb      	ldrh	r3, [r7, #22]
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	82fa      	strh	r2, [r7, #22]
 8009a96:	461a      	mov	r2, r3
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009a9a:	2103      	movs	r1, #3
 8009a9c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8009a9e:	8afb      	ldrh	r3, [r7, #22]
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	82fa      	strh	r2, [r7, #22]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8009aac:	8afb      	ldrh	r3, [r7, #22]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	82fa      	strh	r2, [r7, #22]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4b10      	ldr	r3, [pc, #64]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 8009aba:	8afb      	ldrh	r3, [r7, #22]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	82fa      	strh	r2, [r7, #22]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	82fa      	strh	r2, [r7, #22]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ad2:	210b      	movs	r1, #11
 8009ad4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009ad6:	8afb      	ldrh	r3, [r7, #22]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	82fa      	strh	r2, [r7, #22]
 8009adc:	461a      	mov	r2, r3
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009ae0:	2124      	movs	r1, #36	; 0x24
 8009ae2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	82fa      	strh	r2, [r7, #22]
 8009aea:	461a      	mov	r2, r3
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <USBD_AUDIO_Init_Microphone_Descriptor+0x438>)
 8009aee:	2102      	movs	r1, #2
 8009af0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	e001      	b.n	8009afc <USBD_AUDIO_Init_Microphone_Descriptor+0x43c>
 8009af8:	20001618 	.word	0x20001618
 8009afc:	82fa      	strh	r2, [r7, #22]
 8009afe:	461a      	mov	r2, r3
 8009b00:	4b7e      	ldr	r3, [pc, #504]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b02:	2101      	movs	r1, #1
 8009b04:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8009b06:	8afb      	ldrh	r3, [r7, #22]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	82fa      	strh	r2, [r7, #22]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4a7b      	ldr	r2, [pc, #492]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	5453      	strb	r3, [r2, r1]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 8009b14:	8afb      	ldrh	r3, [r7, #22]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	82fa      	strh	r2, [r7, #22]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4b77      	ldr	r3, [pc, #476]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b1e:	2102      	movs	r1, #2
 8009b20:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 8009b22:	8afb      	ldrh	r3, [r7, #22]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	82fa      	strh	r2, [r7, #22]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4b74      	ldr	r3, [pc, #464]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b2c:	2110      	movs	r1, #16
 8009b2e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8009b30:	8afb      	ldrh	r3, [r7, #22]
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	82fa      	strh	r2, [r7, #22]
 8009b36:	461a      	mov	r2, r3
 8009b38:	4b70      	ldr	r3, [pc, #448]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8009b3e:	8afb      	ldrh	r3, [r7, #22]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	82fa      	strh	r2, [r7, #22]
 8009b44:	461a      	mov	r2, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	b2d9      	uxtb	r1, r3
 8009b4a:	4b6c      	ldr	r3, [pc, #432]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b4c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	0a19      	lsrs	r1, r3, #8
 8009b52:	8afb      	ldrh	r3, [r7, #22]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	82fa      	strh	r2, [r7, #22]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	b2c9      	uxtb	r1, r1
 8009b5c:	4b67      	ldr	r3, [pc, #412]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b5e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	0c19      	lsrs	r1, r3, #16
 8009b64:	8afb      	ldrh	r3, [r7, #22]
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	82fa      	strh	r2, [r7, #22]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	b2c9      	uxtb	r1, r1
 8009b6e:	4b63      	ldr	r3, [pc, #396]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b70:	5499      	strb	r1, [r3, r2]
  /* Endpoint 1 - Standard Descriptor */
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8009b72:	8afb      	ldrh	r3, [r7, #22]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	82fa      	strh	r2, [r7, #22]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4b60      	ldr	r3, [pc, #384]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b7c:	2109      	movs	r1, #9
 8009b7e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8009b80:	8afb      	ldrh	r3, [r7, #22]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	82fa      	strh	r2, [r7, #22]
 8009b86:	461a      	mov	r2, r3
 8009b88:	4b5c      	ldr	r3, [pc, #368]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b8a:	2105      	movs	r1, #5
 8009b8c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8009b8e:	8afb      	ldrh	r3, [r7, #22]
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	82fa      	strh	r2, [r7, #22]
 8009b94:	461a      	mov	r2, r3
 8009b96:	4b59      	ldr	r3, [pc, #356]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009b98:	2181      	movs	r1, #129	; 0x81
 8009b9a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8009b9c:	8afb      	ldrh	r3, [r7, #22]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	82fa      	strh	r2, [r7, #22]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4b55      	ldr	r3, [pc, #340]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009ba6:	2105      	movs	r1, #5
 8009ba8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	4a54      	ldr	r2, [pc, #336]	; (8009d00 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009bae:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb2:	099b      	lsrs	r3, r3, #6
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	79fa      	ldrb	r2, [r7, #7]
 8009bba:	fb12 f303 	smulbb	r3, r2, r3
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	8afb      	ldrh	r3, [r7, #22]
 8009bc2:	1c59      	adds	r1, r3, #1
 8009bc4:	82f9      	strh	r1, [r7, #22]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	0053      	lsls	r3, r2, #1
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	4b4b      	ldr	r3, [pc, #300]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bce:	545a      	strb	r2, [r3, r1]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a4b      	ldr	r2, [pc, #300]	; (8009d00 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd8:	099b      	lsrs	r3, r3, #6
 8009bda:	3302      	adds	r3, #2
 8009bdc:	79fa      	ldrb	r2, [r7, #7]
 8009bde:	fb02 f303 	mul.w	r3, r2, r3
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	0a19      	lsrs	r1, r3, #8
 8009be6:	8afb      	ldrh	r3, [r7, #22]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	82fa      	strh	r2, [r7, #22]
 8009bec:	461a      	mov	r2, r3
 8009bee:	b2c9      	uxtb	r1, r1
 8009bf0:	4b42      	ldr	r3, [pc, #264]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bf2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8009bf4:	8afb      	ldrh	r3, [r7, #22]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	82fa      	strh	r2, [r7, #22]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4b3f      	ldr	r3, [pc, #252]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009bfe:	2101      	movs	r1, #1
 8009c00:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8009c02:	8afb      	ldrh	r3, [r7, #22]
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	82fa      	strh	r2, [r7, #22]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	4b3c      	ldr	r3, [pc, #240]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8009c10:	8afb      	ldrh	r3, [r7, #22]
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	82fa      	strh	r2, [r7, #22]
 8009c16:	461a      	mov	r2, r3
 8009c18:	4b38      	ldr	r3, [pc, #224]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	5499      	strb	r1, [r3, r2]
  /* Endpoint - Audio Streaming Descriptor*/
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8009c1e:	8afb      	ldrh	r3, [r7, #22]
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	82fa      	strh	r2, [r7, #22]
 8009c24:	461a      	mov	r2, r3
 8009c26:	4b35      	ldr	r3, [pc, #212]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c28:	2107      	movs	r1, #7
 8009c2a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8009c2c:	8afb      	ldrh	r3, [r7, #22]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	82fa      	strh	r2, [r7, #22]
 8009c32:	461a      	mov	r2, r3
 8009c34:	4b31      	ldr	r3, [pc, #196]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c36:	2125      	movs	r1, #37	; 0x25
 8009c38:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8009c3a:	8afb      	ldrh	r3, [r7, #22]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	82fa      	strh	r2, [r7, #22]
 8009c40:	461a      	mov	r2, r3
 8009c42:	4b2e      	ldr	r3, [pc, #184]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c44:	2101      	movs	r1, #1
 8009c46:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8009c48:	8afb      	ldrh	r3, [r7, #22]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	82fa      	strh	r2, [r7, #22]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c52:	2100      	movs	r1, #0
 8009c54:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8009c56:	8afb      	ldrh	r3, [r7, #22]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	82fa      	strh	r2, [r7, #22]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c60:	2100      	movs	r1, #0
 8009c62:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8009c64:	8afb      	ldrh	r3, [r7, #22]
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	82fa      	strh	r2, [r7, #22]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4b23      	ldr	r3, [pc, #140]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c6e:	2100      	movs	r1, #0
 8009c70:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8009c72:	8afb      	ldrh	r3, [r7, #22]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	82fa      	strh	r2, [r7, #22]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4b20      	ldr	r3, [pc, #128]	; (8009cfc <USBD_AUDIO_Init_Microphone_Descriptor+0x63c>)
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	5499      	strb	r1, [r3, r2]
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	4a1f      	ldr	r2, [pc, #124]	; (8009d00 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c84:	fba2 2303 	umull	r2, r3, r2, r3
 8009c88:	099b      	lsrs	r3, r3, #6
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	fb12 f303 	smulbb	r3, r2, r3
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	4b1a      	ldr	r3, [pc, #104]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009c9c:	825a      	strh	r2, [r3, #18]
  haudioInstance.frequency=samplingFrequency;
 8009c9e:	4a19      	ldr	r2, [pc, #100]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6093      	str	r3, [r2, #8]
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8009ca4:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ca6:	8a5b      	ldrh	r3, [r3, #18]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	0052      	lsls	r2, r2, #1
 8009cac:	4413      	add	r3, r2
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cb4:	81da      	strh	r2, [r3, #14]
  haudioInstance.channels=Channels;  
 8009cb6:	4a13      	ldr	r2, [pc, #76]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	7113      	strb	r3, [r2, #4]
  haudioInstance.upper_treshold = 5;
 8009cbc:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cbe:	2205      	movs	r2, #5
 8009cc0:	769a      	strb	r2, [r3, #26]
  haudioInstance.lower_treshold = 2;
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	76da      	strb	r2, [r3, #27]
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	751a      	strb	r2, [r3, #20]
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8009cce:	4b0d      	ldr	r3, [pc, #52]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cd0:	8a5b      	ldrh	r3, [r3, #18]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	0052      	lsls	r2, r2, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cdc:	831a      	strh	r2, [r3, #24]
  haudioInstance.rd_ptr = 0;  
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	82da      	strh	r2, [r3, #22]
  haudioInstance.dataAmount=0;
 8009ce4:	4b07      	ldr	r3, [pc, #28]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	821a      	strh	r2, [r3, #16]
  haudioInstance.buffer = 0;
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	20001618 	.word	0x20001618
 8009d00:	10624dd3 	.word	0x10624dd3
 8009d04:	200015b4 	.word	0x200015b4

08009d08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e01f      	b.n	8009d60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	79fa      	ldrb	r2, [r7, #7]
 8009d52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7f7 f925 	bl	8000fa4 <USBD_LL_Init>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e025      	b.n	8009dcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32ae      	adds	r2, #174	; 0xae
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00f      	beq.n	8009dbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	32ae      	adds	r2, #174	; 0xae
 8009da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	f107 020e 	add.w	r2, r7, #14
 8009db0:	4610      	mov	r0, r2
 8009db2:	4798      	blx	r3
 8009db4:	4602      	mov	r2, r0
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7f7 f929 	bl	8001034 <USBD_LL_Start>
 8009de2:	4603      	mov	r3, r0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009df4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d009      	beq.n	8009e30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	4611      	mov	r1, r2
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	4798      	blx	r3
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	4611      	mov	r1, r2
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e60:	2303      	movs	r3, #3
 8009e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f001 f8b2 	bl	800afea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e94:	461a      	mov	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ea2:	f003 031f 	and.w	r3, r3, #31
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d01a      	beq.n	8009ee0 <USBD_LL_SetupStage+0x72>
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d822      	bhi.n	8009ef4 <USBD_LL_SetupStage+0x86>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <USBD_LL_SetupStage+0x4a>
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d00a      	beq.n	8009ecc <USBD_LL_SetupStage+0x5e>
 8009eb6:	e01d      	b.n	8009ef4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fb09 	bl	800a4d8 <USBD_StdDevReq>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8009eca:	e020      	b.n	8009f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fb71 	bl	800a5bc <USBD_StdItfReq>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ede:	e016      	b.n	8009f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fbd3 	bl	800a694 <USBD_StdEPReq>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef2:	e00c      	b.n	8009f0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009efa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7f7 f8e5 	bl	80010d2 <USBD_LL_StallEP>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f0c:	bf00      	nop
  }

  return ret;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	460b      	mov	r3, r1
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d16e      	bne.n	800a00e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	f040 8098 	bne.w	800a074 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d913      	bls.n	8009f78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	1ad2      	subs	r2, r2, r3
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	4293      	cmp	r3, r2
 8009f68:	bf28      	it	cs
 8009f6a:	4613      	movcs	r3, r2
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f001 f92e 	bl	800b1d2 <USBD_CtlContinueRx>
 8009f76:	e07d      	b.n	800a074 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f7e:	f003 031f 	and.w	r3, r3, #31
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d014      	beq.n	8009fb0 <USBD_LL_DataOutStage+0x98>
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d81d      	bhi.n	8009fc6 <USBD_LL_DataOutStage+0xae>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <USBD_LL_DataOutStage+0x7c>
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d003      	beq.n	8009f9a <USBD_LL_DataOutStage+0x82>
 8009f92:	e018      	b.n	8009fc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	75bb      	strb	r3, [r7, #22]
            break;
 8009f98:	e018      	b.n	8009fcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fa5e 	bl	800a466 <USBD_CoreFindIF>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75bb      	strb	r3, [r7, #22]
            break;
 8009fae:	e00d      	b.n	8009fcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	4619      	mov	r1, r3
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 fa60 	bl	800a480 <USBD_CoreFindEP>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75bb      	strb	r3, [r7, #22]
            break;
 8009fc4:	e002      	b.n	8009fcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75bb      	strb	r3, [r7, #22]
            break;
 8009fca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009fcc:	7dbb      	ldrb	r3, [r7, #22]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d119      	bne.n	800a006 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d113      	bne.n	800a006 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009fde:	7dba      	ldrb	r2, [r7, #22]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	32ae      	adds	r2, #174	; 0xae
 8009fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00b      	beq.n	800a006 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009fee:	7dba      	ldrb	r2, [r7, #22]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ff6:	7dba      	ldrb	r2, [r7, #22]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	32ae      	adds	r2, #174	; 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 f8f4 	bl	800b1f4 <USBD_CtlSendStatus>
 800a00c:	e032      	b.n	800a074 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a014:	b2db      	uxtb	r3, r3
 800a016:	4619      	mov	r1, r3
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fa31 	bl	800a480 <USBD_CoreFindEP>
 800a01e:	4603      	mov	r3, r0
 800a020:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a022:	7dbb      	ldrb	r3, [r7, #22]
 800a024:	2bff      	cmp	r3, #255	; 0xff
 800a026:	d025      	beq.n	800a074 <USBD_LL_DataOutStage+0x15c>
 800a028:	7dbb      	ldrb	r3, [r7, #22]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d122      	bne.n	800a074 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b03      	cmp	r3, #3
 800a038:	d117      	bne.n	800a06a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a03a:	7dba      	ldrb	r2, [r7, #22]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	32ae      	adds	r2, #174	; 0xae
 800a040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00f      	beq.n	800a06a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a04a:	7dba      	ldrb	r2, [r7, #22]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a052:	7dba      	ldrb	r2, [r7, #22]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	32ae      	adds	r2, #174	; 0xae
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	7afa      	ldrb	r2, [r7, #11]
 800a060:	4611      	mov	r1, r2
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	4798      	blx	r3
 800a066:	4603      	mov	r3, r0
 800a068:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	e000      	b.n	800a076 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b086      	sub	sp, #24
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	460b      	mov	r3, r1
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a08c:	7afb      	ldrb	r3, [r7, #11]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d16f      	bne.n	800a172 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3314      	adds	r3, #20
 800a096:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d15a      	bne.n	800a158 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	689a      	ldr	r2, [r3, #8]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d914      	bls.n	800a0d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	1ad2      	subs	r2, r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f001 f856 	bl	800b176 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7f7 f878 	bl	80011c6 <USBD_LL_PrepareReceive>
 800a0d6:	e03f      	b.n	800a158 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d11c      	bne.n	800a11e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d316      	bcc.n	800a11e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d20f      	bcs.n	800a11e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f001 f837 	bl	800b176 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a110:	2300      	movs	r3, #0
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7f7 f855 	bl	80011c6 <USBD_LL_PrepareReceive>
 800a11c:	e01c      	b.n	800a158 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b03      	cmp	r3, #3
 800a128:	d10f      	bne.n	800a14a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a14a:	2180      	movs	r1, #128	; 0x80
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7f6 ffc0 	bl	80010d2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f001 f861 	bl	800b21a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d03a      	beq.n	800a1d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff fe42 	bl	8009dec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a170:	e032      	b.n	800a1d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a172:	7afb      	ldrb	r3, [r7, #11]
 800a174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	4619      	mov	r1, r3
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f97f 	bl	800a480 <USBD_CoreFindEP>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	2bff      	cmp	r3, #255	; 0xff
 800a18a:	d025      	beq.n	800a1d8 <USBD_LL_DataInStage+0x15a>
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d122      	bne.n	800a1d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d11c      	bne.n	800a1d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a19e:	7dfa      	ldrb	r2, [r7, #23]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	32ae      	adds	r2, #174	; 0xae
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d014      	beq.n	800a1d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1ae:	7dfa      	ldrb	r2, [r7, #23]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1b6:	7dfa      	ldrb	r2, [r7, #23]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	32ae      	adds	r2, #174	; 0xae
 800a1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	7afa      	ldrb	r2, [r7, #11]
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	4798      	blx	r3
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a1ce:	7dbb      	ldrb	r3, [r7, #22]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a1d4:	7dbb      	ldrb	r3, [r7, #22]
 800a1d6:	e000      	b.n	800a1da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d014      	beq.n	800a248 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00e      	beq.n	800a248 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	6852      	ldr	r2, [r2, #4]
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	4611      	mov	r1, r2
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	4798      	blx	r3
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a244:	2303      	movs	r3, #3
 800a246:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a248:	2340      	movs	r3, #64	; 0x40
 800a24a:	2200      	movs	r2, #0
 800a24c:	2100      	movs	r1, #0
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7f6 feff 	bl	8001052 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2240      	movs	r2, #64	; 0x40
 800a260:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a264:	2340      	movs	r3, #64	; 0x40
 800a266:	2200      	movs	r2, #0
 800a268:	2180      	movs	r1, #128	; 0x80
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7f6 fef1 	bl	8001052 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2240      	movs	r2, #64	; 0x40
 800a27a:	621a      	str	r2, [r3, #32]

  return ret;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	78fa      	ldrb	r2, [r7, #3]
 800a296:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2204      	movs	r2, #4
 800a2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d106      	bne.n	800a2f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b03      	cmp	r3, #3
 800a314:	d110      	bne.n	800a338 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d005      	beq.n	800a338 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	32ae      	adds	r2, #174	; 0xae
 800a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a360:	2303      	movs	r3, #3
 800a362:	e01c      	b.n	800a39e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d115      	bne.n	800a39c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32ae      	adds	r2, #174	; 0xae
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32ae      	adds	r2, #174	; 0xae
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	4611      	mov	r1, r2
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	32ae      	adds	r2, #174	; 0xae
 800a3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e01c      	b.n	800a402 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d115      	bne.n	800a400 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	32ae      	adds	r2, #174	; 0xae
 800a3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32ae      	adds	r2, #174	; 0xae
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	78fa      	ldrb	r2, [r7, #3]
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b083      	sub	sp, #12
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00e      	beq.n	800a45c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6852      	ldr	r2, [r2, #4]
 800a44a:	b2d2      	uxtb	r2, r2
 800a44c:	4611      	mov	r1, r2
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	4798      	blx	r3
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a458:	2303      	movs	r3, #3
 800a45a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a472:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a48c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b087      	sub	sp, #28
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4b8:	8a3b      	ldrh	r3, [r7, #16]
 800a4ba:	021b      	lsls	r3, r3, #8
 800a4bc:	b21a      	sxth	r2, r3
 800a4be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b21b      	sxth	r3, r3
 800a4c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4c8:	89fb      	ldrh	r3, [r7, #14]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4ee:	2b40      	cmp	r3, #64	; 0x40
 800a4f0:	d005      	beq.n	800a4fe <USBD_StdDevReq+0x26>
 800a4f2:	2b40      	cmp	r3, #64	; 0x40
 800a4f4:	d857      	bhi.n	800a5a6 <USBD_StdDevReq+0xce>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00f      	beq.n	800a51a <USBD_StdDevReq+0x42>
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	d153      	bne.n	800a5a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	32ae      	adds	r2, #174	; 0xae
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e04a      	b.n	800a5b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b09      	cmp	r3, #9
 800a520:	d83b      	bhi.n	800a59a <USBD_StdDevReq+0xc2>
 800a522:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <USBD_StdDevReq+0x50>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a57d 	.word	0x0800a57d
 800a52c:	0800a591 	.word	0x0800a591
 800a530:	0800a59b 	.word	0x0800a59b
 800a534:	0800a587 	.word	0x0800a587
 800a538:	0800a59b 	.word	0x0800a59b
 800a53c:	0800a55b 	.word	0x0800a55b
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a59b 	.word	0x0800a59b
 800a548:	0800a573 	.word	0x0800a573
 800a54c:	0800a565 	.word	0x0800a565
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fa3c 	bl	800a9d0 <USBD_GetDescriptor>
          break;
 800a558:	e024      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fba1 	bl	800aca4 <USBD_SetAddress>
          break;
 800a562:	e01f      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fbe0 	bl	800ad2c <USBD_SetConfig>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
          break;
 800a570:	e018      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fc83 	bl	800ae80 <USBD_GetConfig>
          break;
 800a57a:	e013      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fcb4 	bl	800aeec <USBD_GetStatus>
          break;
 800a584:	e00e      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fce3 	bl	800af54 <USBD_SetFeature>
          break;
 800a58e:	e009      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fd07 	bl	800afa6 <USBD_ClrFeature>
          break;
 800a598:	e004      	b.n	800a5a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fd5e 	bl	800b05e <USBD_CtlError>
          break;
 800a5a2:	bf00      	nop
      }
      break;
 800a5a4:	e004      	b.n	800a5b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fd58 	bl	800b05e <USBD_CtlError>
      break;
 800a5ae:	bf00      	nop
  }

  return ret;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop

0800a5bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5d2:	2b40      	cmp	r3, #64	; 0x40
 800a5d4:	d005      	beq.n	800a5e2 <USBD_StdItfReq+0x26>
 800a5d6:	2b40      	cmp	r3, #64	; 0x40
 800a5d8:	d852      	bhi.n	800a680 <USBD_StdItfReq+0xc4>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <USBD_StdItfReq+0x26>
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d14e      	bne.n	800a680 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d840      	bhi.n	800a672 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	889b      	ldrh	r3, [r3, #4]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d836      	bhi.n	800a668 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	889b      	ldrh	r3, [r3, #4]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff ff2f 	bl	800a466 <USBD_CoreFindIF>
 800a608:	4603      	mov	r3, r0
 800a60a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2bff      	cmp	r3, #255	; 0xff
 800a610:	d01d      	beq.n	800a64e <USBD_StdItfReq+0x92>
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d11a      	bne.n	800a64e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a618:	7bba      	ldrb	r2, [r7, #14]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32ae      	adds	r2, #174	; 0xae
 800a61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00f      	beq.n	800a648 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a628:	7bba      	ldrb	r2, [r7, #14]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a630:	7bba      	ldrb	r2, [r7, #14]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32ae      	adds	r2, #174	; 0xae
 800a636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	4798      	blx	r3
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a646:	e004      	b.n	800a652 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a648:	2303      	movs	r3, #3
 800a64a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a64c:	e001      	b.n	800a652 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a64e:	2303      	movs	r3, #3
 800a650:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	88db      	ldrh	r3, [r3, #6]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d110      	bne.n	800a67c <USBD_StdItfReq+0xc0>
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10d      	bne.n	800a67c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fdc7 	bl	800b1f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a666:	e009      	b.n	800a67c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fcf7 	bl	800b05e <USBD_CtlError>
          break;
 800a670:	e004      	b.n	800a67c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fcf2 	bl	800b05e <USBD_CtlError>
          break;
 800a67a:	e000      	b.n	800a67e <USBD_StdItfReq+0xc2>
          break;
 800a67c:	bf00      	nop
      }
      break;
 800a67e:	e004      	b.n	800a68a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fceb 	bl	800b05e <USBD_CtlError>
      break;
 800a688:	bf00      	nop
  }

  return ret;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	889b      	ldrh	r3, [r3, #4]
 800a6a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6b0:	2b40      	cmp	r3, #64	; 0x40
 800a6b2:	d007      	beq.n	800a6c4 <USBD_StdEPReq+0x30>
 800a6b4:	2b40      	cmp	r3, #64	; 0x40
 800a6b6:	f200 817f 	bhi.w	800a9b8 <USBD_StdEPReq+0x324>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d02a      	beq.n	800a714 <USBD_StdEPReq+0x80>
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	f040 817a 	bne.w	800a9b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff fed9 	bl	800a480 <USBD_CoreFindEP>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6d2:	7b7b      	ldrb	r3, [r7, #13]
 800a6d4:	2bff      	cmp	r3, #255	; 0xff
 800a6d6:	f000 8174 	beq.w	800a9c2 <USBD_StdEPReq+0x32e>
 800a6da:	7b7b      	ldrb	r3, [r7, #13]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f040 8170 	bne.w	800a9c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a6e2:	7b7a      	ldrb	r2, [r7, #13]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a6ea:	7b7a      	ldrb	r2, [r7, #13]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	32ae      	adds	r2, #174	; 0xae
 800a6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8163 	beq.w	800a9c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a6fc:	7b7a      	ldrb	r2, [r7, #13]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	32ae      	adds	r2, #174	; 0xae
 800a702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
 800a70e:	4603      	mov	r3, r0
 800a710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a712:	e156      	b.n	800a9c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d008      	beq.n	800a72e <USBD_StdEPReq+0x9a>
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	f300 8145 	bgt.w	800a9ac <USBD_StdEPReq+0x318>
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 809b 	beq.w	800a85e <USBD_StdEPReq+0x1ca>
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d03c      	beq.n	800a7a6 <USBD_StdEPReq+0x112>
 800a72c:	e13e      	b.n	800a9ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d002      	beq.n	800a740 <USBD_StdEPReq+0xac>
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d016      	beq.n	800a76c <USBD_StdEPReq+0xd8>
 800a73e:	e02c      	b.n	800a79a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00d      	beq.n	800a762 <USBD_StdEPReq+0xce>
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b80      	cmp	r3, #128	; 0x80
 800a74a:	d00a      	beq.n	800a762 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	4619      	mov	r1, r3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7f6 fcbe 	bl	80010d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a756:	2180      	movs	r1, #128	; 0x80
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7f6 fcba 	bl	80010d2 <USBD_LL_StallEP>
 800a75e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a760:	e020      	b.n	800a7a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fc7a 	bl	800b05e <USBD_CtlError>
              break;
 800a76a:	e01b      	b.n	800a7a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	885b      	ldrh	r3, [r3, #2]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10e      	bne.n	800a792 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00b      	beq.n	800a792 <USBD_StdEPReq+0xfe>
 800a77a:	7bbb      	ldrb	r3, [r7, #14]
 800a77c:	2b80      	cmp	r3, #128	; 0x80
 800a77e:	d008      	beq.n	800a792 <USBD_StdEPReq+0xfe>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	88db      	ldrh	r3, [r3, #6]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d104      	bne.n	800a792 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a788:	7bbb      	ldrb	r3, [r7, #14]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7f6 fca0 	bl	80010d2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fd2e 	bl	800b1f4 <USBD_CtlSendStatus>

              break;
 800a798:	e004      	b.n	800a7a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fc5e 	bl	800b05e <USBD_CtlError>
              break;
 800a7a2:	bf00      	nop
          }
          break;
 800a7a4:	e107      	b.n	800a9b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d002      	beq.n	800a7b8 <USBD_StdEPReq+0x124>
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d016      	beq.n	800a7e4 <USBD_StdEPReq+0x150>
 800a7b6:	e04b      	b.n	800a850 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00d      	beq.n	800a7da <USBD_StdEPReq+0x146>
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b80      	cmp	r3, #128	; 0x80
 800a7c2:	d00a      	beq.n	800a7da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7f6 fc82 	bl	80010d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ce:	2180      	movs	r1, #128	; 0x80
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7f6 fc7e 	bl	80010d2 <USBD_LL_StallEP>
 800a7d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7d8:	e040      	b.n	800a85c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fc3e 	bl	800b05e <USBD_CtlError>
              break;
 800a7e2:	e03b      	b.n	800a85c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	885b      	ldrh	r3, [r3, #2]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d136      	bne.n	800a85a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d004      	beq.n	800a800 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7f6 fc7c 	bl	80010f8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fcf7 	bl	800b1f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fe38 	bl	800a480 <USBD_CoreFindEP>
 800a810:	4603      	mov	r3, r0
 800a812:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a814:	7b7b      	ldrb	r3, [r7, #13]
 800a816:	2bff      	cmp	r3, #255	; 0xff
 800a818:	d01f      	beq.n	800a85a <USBD_StdEPReq+0x1c6>
 800a81a:	7b7b      	ldrb	r3, [r7, #13]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11c      	bne.n	800a85a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a820:	7b7a      	ldrb	r2, [r7, #13]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a828:	7b7a      	ldrb	r2, [r7, #13]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	32ae      	adds	r2, #174	; 0xae
 800a82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d010      	beq.n	800a85a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a838:	7b7a      	ldrb	r2, [r7, #13]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	32ae      	adds	r2, #174	; 0xae
 800a83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a84e:	e004      	b.n	800a85a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fc03 	bl	800b05e <USBD_CtlError>
              break;
 800a858:	e000      	b.n	800a85c <USBD_StdEPReq+0x1c8>
              break;
 800a85a:	bf00      	nop
          }
          break;
 800a85c:	e0ab      	b.n	800a9b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d002      	beq.n	800a870 <USBD_StdEPReq+0x1dc>
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d032      	beq.n	800a8d4 <USBD_StdEPReq+0x240>
 800a86e:	e097      	b.n	800a9a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d007      	beq.n	800a886 <USBD_StdEPReq+0x1f2>
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	2b80      	cmp	r3, #128	; 0x80
 800a87a:	d004      	beq.n	800a886 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fbed 	bl	800b05e <USBD_CtlError>
                break;
 800a884:	e091      	b.n	800a9aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	da0b      	bge.n	800a8a6 <USBD_StdEPReq+0x212>
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	3310      	adds	r3, #16
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	e00b      	b.n	800a8be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	3304      	adds	r3, #4
 800a8be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fc37 	bl	800b140 <USBD_CtlSendData>
              break;
 800a8d2:	e06a      	b.n	800a9aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da11      	bge.n	800a900 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	f003 020f 	and.w	r2, r3, #15
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	440b      	add	r3, r1
 800a8ee:	3324      	adds	r3, #36	; 0x24
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d117      	bne.n	800a926 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fbb0 	bl	800b05e <USBD_CtlError>
                  break;
 800a8fe:	e054      	b.n	800a9aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	f003 020f 	and.w	r2, r3, #15
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	440b      	add	r3, r1
 800a912:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d104      	bne.n	800a926 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fb9d 	bl	800b05e <USBD_CtlError>
                  break;
 800a924:	e041      	b.n	800a9aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da0b      	bge.n	800a946 <USBD_StdEPReq+0x2b2>
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	3310      	adds	r3, #16
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4413      	add	r3, r2
 800a942:	3304      	adds	r3, #4
 800a944:	e00b      	b.n	800a95e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	4413      	add	r3, r2
 800a95c:	3304      	adds	r3, #4
 800a95e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <USBD_StdEPReq+0x2d8>
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b80      	cmp	r3, #128	; 0x80
 800a96a:	d103      	bne.n	800a974 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	e00e      	b.n	800a992 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7f6 fbd0 	bl	800111e <USBD_LL_IsStallEP>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d003      	beq.n	800a98c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2201      	movs	r2, #1
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	e002      	b.n	800a992 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2202      	movs	r2, #2
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fbd1 	bl	800b140 <USBD_CtlSendData>
              break;
 800a99e:	e004      	b.n	800a9aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fb5b 	bl	800b05e <USBD_CtlError>
              break;
 800a9a8:	bf00      	nop
          }
          break;
 800a9aa:	e004      	b.n	800a9b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fb55 	bl	800b05e <USBD_CtlError>
          break;
 800a9b4:	bf00      	nop
      }
      break;
 800a9b6:	e005      	b.n	800a9c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fb4f 	bl	800b05e <USBD_CtlError>
      break;
 800a9c0:	e000      	b.n	800a9c4 <USBD_StdEPReq+0x330>
      break;
 800a9c2:	bf00      	nop
  }

  return ret;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	2b06      	cmp	r3, #6
 800a9f2:	f200 8128 	bhi.w	800ac46 <USBD_GetDescriptor+0x276>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <USBD_GetDescriptor+0x2c>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa19 	.word	0x0800aa19
 800aa00:	0800aa31 	.word	0x0800aa31
 800aa04:	0800aa71 	.word	0x0800aa71
 800aa08:	0800ac47 	.word	0x0800ac47
 800aa0c:	0800ac47 	.word	0x0800ac47
 800aa10:	0800abe7 	.word	0x0800abe7
 800aa14:	0800ac13 	.word	0x0800ac13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7c12      	ldrb	r2, [r2, #16]
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
      break;
 800aa2e:	e112      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	7c1b      	ldrb	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10d      	bne.n	800aa54 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa40:	f107 0208 	add.w	r2, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	2202      	movs	r2, #2
 800aa50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa52:	e100      	b.n	800ac56 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	f107 0208 	add.w	r2, r7, #8
 800aa60:	4610      	mov	r0, r2
 800aa62:	4798      	blx	r3
 800aa64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	701a      	strb	r2, [r3, #0]
      break;
 800aa6e:	e0f2      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	885b      	ldrh	r3, [r3, #2]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	f200 80ac 	bhi.w	800abd4 <USBD_GetDescriptor+0x204>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <USBD_GetDescriptor+0xb4>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aa9d 	.word	0x0800aa9d
 800aa88:	0800aad1 	.word	0x0800aad1
 800aa8c:	0800ab05 	.word	0x0800ab05
 800aa90:	0800ab39 	.word	0x0800ab39
 800aa94:	0800ab6d 	.word	0x0800ab6d
 800aa98:	0800aba1 	.word	0x0800aba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7c12      	ldrb	r2, [r2, #16]
 800aab4:	f107 0108 	add.w	r1, r7, #8
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aabe:	e091      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 facb 	bl	800b05e <USBD_CtlError>
            err++;
 800aac8:	7afb      	ldrb	r3, [r7, #11]
 800aaca:	3301      	adds	r3, #1
 800aacc:	72fb      	strb	r3, [r7, #11]
          break;
 800aace:	e089      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	7c12      	ldrb	r2, [r2, #16]
 800aae8:	f107 0108 	add.w	r1, r7, #8
 800aaec:	4610      	mov	r0, r2
 800aaee:	4798      	blx	r3
 800aaf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaf2:	e077      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fab1 	bl	800b05e <USBD_CtlError>
            err++;
 800aafc:	7afb      	ldrb	r3, [r7, #11]
 800aafe:	3301      	adds	r3, #1
 800ab00:	72fb      	strb	r3, [r7, #11]
          break;
 800ab02:	e06f      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	7c12      	ldrb	r2, [r2, #16]
 800ab1c:	f107 0108 	add.w	r1, r7, #8
 800ab20:	4610      	mov	r0, r2
 800ab22:	4798      	blx	r3
 800ab24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab26:	e05d      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fa97 	bl	800b05e <USBD_CtlError>
            err++;
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	3301      	adds	r3, #1
 800ab34:	72fb      	strb	r3, [r7, #11]
          break;
 800ab36:	e055      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	7c12      	ldrb	r2, [r2, #16]
 800ab50:	f107 0108 	add.w	r1, r7, #8
 800ab54:	4610      	mov	r0, r2
 800ab56:	4798      	blx	r3
 800ab58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab5a:	e043      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fa7d 	bl	800b05e <USBD_CtlError>
            err++;
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	3301      	adds	r3, #1
 800ab68:	72fb      	strb	r3, [r7, #11]
          break;
 800ab6a:	e03b      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	7c12      	ldrb	r2, [r2, #16]
 800ab84:	f107 0108 	add.w	r1, r7, #8
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
 800ab8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8e:	e029      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa63 	bl	800b05e <USBD_CtlError>
            err++;
 800ab98:	7afb      	ldrb	r3, [r7, #11]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9e:	e021      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	7c12      	ldrb	r2, [r2, #16]
 800abb8:	f107 0108 	add.w	r1, r7, #8
 800abbc:	4610      	mov	r0, r2
 800abbe:	4798      	blx	r3
 800abc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abc2:	e00f      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fa49 	bl	800b05e <USBD_CtlError>
            err++;
 800abcc:	7afb      	ldrb	r3, [r7, #11]
 800abce:	3301      	adds	r3, #1
 800abd0:	72fb      	strb	r3, [r7, #11]
          break;
 800abd2:	e007      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa41 	bl	800b05e <USBD_CtlError>
          err++;
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	3301      	adds	r3, #1
 800abe0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800abe2:	bf00      	nop
      }
      break;
 800abe4:	e037      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7c1b      	ldrb	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d109      	bne.n	800ac02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf6:	f107 0208 	add.w	r2, r7, #8
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
 800abfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac00:	e029      	b.n	800ac56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fa2a 	bl	800b05e <USBD_CtlError>
        err++;
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac10:	e021      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7c1b      	ldrb	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	f107 0208 	add.w	r2, r7, #8
 800ac26:	4610      	mov	r0, r2
 800ac28:	4798      	blx	r3
 800ac2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	2207      	movs	r2, #7
 800ac32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac34:	e00f      	b.n	800ac56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fa10 	bl	800b05e <USBD_CtlError>
        err++;
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	3301      	adds	r3, #1
 800ac42:	72fb      	strb	r3, [r7, #11]
      break;
 800ac44:	e007      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fa08 	bl	800b05e <USBD_CtlError>
      err++;
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	3301      	adds	r3, #1
 800ac52:	72fb      	strb	r3, [r7, #11]
      break;
 800ac54:	bf00      	nop
  }

  if (err != 0U)
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11e      	bne.n	800ac9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	88db      	ldrh	r3, [r3, #6]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d016      	beq.n	800ac92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac64:	893b      	ldrh	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00e      	beq.n	800ac88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	88da      	ldrh	r2, [r3, #6]
 800ac6e:	893b      	ldrh	r3, [r7, #8]
 800ac70:	4293      	cmp	r3, r2
 800ac72:	bf28      	it	cs
 800ac74:	4613      	movcs	r3, r2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac7a:	893b      	ldrh	r3, [r7, #8]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	68f9      	ldr	r1, [r7, #12]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa5d 	bl	800b140 <USBD_CtlSendData>
 800ac86:	e009      	b.n	800ac9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9e7 	bl	800b05e <USBD_CtlError>
 800ac90:	e004      	b.n	800ac9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 faae 	bl	800b1f4 <USBD_CtlSendStatus>
 800ac98:	e000      	b.n	800ac9c <USBD_GetDescriptor+0x2cc>
    return;
 800ac9a:	bf00      	nop
  }
}
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop

0800aca4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	889b      	ldrh	r3, [r3, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d131      	bne.n	800ad1a <USBD_SetAddress+0x76>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	88db      	ldrh	r3, [r3, #6]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d12d      	bne.n	800ad1a <USBD_SetAddress+0x76>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	885b      	ldrh	r3, [r3, #2]
 800acc2:	2b7f      	cmp	r3, #127	; 0x7f
 800acc4:	d829      	bhi.n	800ad1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d104      	bne.n	800ace8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f9bc 	bl	800b05e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace6:	e01d      	b.n	800ad24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	7bfa      	ldrb	r2, [r7, #15]
 800acec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7f6 fa3e 	bl	8001176 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fa7a 	bl	800b1f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d004      	beq.n	800ad10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad0e:	e009      	b.n	800ad24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad18:	e004      	b.n	800ad24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f99e 	bl	800b05e <USBD_CtlError>
  }
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	885b      	ldrh	r3, [r3, #2]
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	4b4e      	ldr	r3, [pc, #312]	; (800ae7c <USBD_SetConfig+0x150>)
 800ad42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad44:	4b4d      	ldr	r3, [pc, #308]	; (800ae7c <USBD_SetConfig+0x150>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d905      	bls.n	800ad58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f985 	bl	800b05e <USBD_CtlError>
    return USBD_FAIL;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e08c      	b.n	800ae72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d002      	beq.n	800ad6a <USBD_SetConfig+0x3e>
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	d029      	beq.n	800adbc <USBD_SetConfig+0x90>
 800ad68:	e075      	b.n	800ae56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad6a:	4b44      	ldr	r3, [pc, #272]	; (800ae7c <USBD_SetConfig+0x150>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d020      	beq.n	800adb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad72:	4b42      	ldr	r3, [pc, #264]	; (800ae7c <USBD_SetConfig+0x150>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad7c:	4b3f      	ldr	r3, [pc, #252]	; (800ae7c <USBD_SetConfig+0x150>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff f83d 	bl	8009e02 <USBD_SetClassConfig>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d008      	beq.n	800ada4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f962 	bl	800b05e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ada2:	e065      	b.n	800ae70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fa25 	bl	800b1f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2203      	movs	r2, #3
 800adae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adb2:	e05d      	b.n	800ae70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa1d 	bl	800b1f4 <USBD_CtlSendStatus>
      break;
 800adba:	e059      	b.n	800ae70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800adbc:	4b2f      	ldr	r3, [pc, #188]	; (800ae7c <USBD_SetConfig+0x150>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d112      	bne.n	800adea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800adcc:	4b2b      	ldr	r3, [pc, #172]	; (800ae7c <USBD_SetConfig+0x150>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	461a      	mov	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800add6:	4b29      	ldr	r3, [pc, #164]	; (800ae7c <USBD_SetConfig+0x150>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff f82c 	bl	8009e3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa06 	bl	800b1f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ade8:	e042      	b.n	800ae70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800adea:	4b24      	ldr	r3, [pc, #144]	; (800ae7c <USBD_SetConfig+0x150>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d02a      	beq.n	800ae4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff f81a 	bl	8009e3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae06:	4b1d      	ldr	r3, [pc, #116]	; (800ae7c <USBD_SetConfig+0x150>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae10:	4b1a      	ldr	r3, [pc, #104]	; (800ae7c <USBD_SetConfig+0x150>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7fe fff3 	bl	8009e02 <USBD_SetClassConfig>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00f      	beq.n	800ae46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f918 	bl	800b05e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fe ffff 	bl	8009e3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae44:	e014      	b.n	800ae70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f9d4 	bl	800b1f4 <USBD_CtlSendStatus>
      break;
 800ae4c:	e010      	b.n	800ae70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f9d0 	bl	800b1f4 <USBD_CtlSendStatus>
      break;
 800ae54:	e00c      	b.n	800ae70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f900 	bl	800b05e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae5e:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <USBD_SetConfig+0x150>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe ffe8 	bl	8009e3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6e:	bf00      	nop
  }

  return ret;
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	2000168e 	.word	0x2000168e

0800ae80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	88db      	ldrh	r3, [r3, #6]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d004      	beq.n	800ae9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f8e2 	bl	800b05e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae9a:	e023      	b.n	800aee4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	dc02      	bgt.n	800aeae <USBD_GetConfig+0x2e>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc03      	bgt.n	800aeb4 <USBD_GetConfig+0x34>
 800aeac:	e015      	b.n	800aeda <USBD_GetConfig+0x5a>
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d00b      	beq.n	800aeca <USBD_GetConfig+0x4a>
 800aeb2:	e012      	b.n	800aeda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3308      	adds	r3, #8
 800aebe:	2201      	movs	r2, #1
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f93c 	bl	800b140 <USBD_CtlSendData>
        break;
 800aec8:	e00c      	b.n	800aee4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	2201      	movs	r2, #1
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f934 	bl	800b140 <USBD_CtlSendData>
        break;
 800aed8:	e004      	b.n	800aee4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f8be 	bl	800b05e <USBD_CtlError>
        break;
 800aee2:	bf00      	nop
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	3b01      	subs	r3, #1
 800af00:	2b02      	cmp	r3, #2
 800af02:	d81e      	bhi.n	800af42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	88db      	ldrh	r3, [r3, #6]
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d004      	beq.n	800af16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8a5 	bl	800b05e <USBD_CtlError>
        break;
 800af14:	e01a      	b.n	800af4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	f043 0202 	orr.w	r2, r3, #2
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	330c      	adds	r3, #12
 800af36:	2202      	movs	r2, #2
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f900 	bl	800b140 <USBD_CtlSendData>
      break;
 800af40:	e004      	b.n	800af4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f88a 	bl	800b05e <USBD_CtlError>
      break;
 800af4a:	bf00      	nop
  }
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	885b      	ldrh	r3, [r3, #2]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d107      	bne.n	800af76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f940 	bl	800b1f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af74:	e013      	b.n	800af9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	885b      	ldrh	r3, [r3, #2]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d10b      	bne.n	800af96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	889b      	ldrh	r3, [r3, #4]
 800af82:	0a1b      	lsrs	r3, r3, #8
 800af84:	b29b      	uxth	r3, r3
 800af86:	b2da      	uxtb	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f930 	bl	800b1f4 <USBD_CtlSendStatus>
}
 800af94:	e003      	b.n	800af9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f860 	bl	800b05e <USBD_CtlError>
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b082      	sub	sp, #8
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	3b01      	subs	r3, #1
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d80b      	bhi.n	800afd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	885b      	ldrh	r3, [r3, #2]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d10c      	bne.n	800afe0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f910 	bl	800b1f4 <USBD_CtlSendStatus>
      }
      break;
 800afd4:	e004      	b.n	800afe0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f840 	bl	800b05e <USBD_CtlError>
      break;
 800afde:	e000      	b.n	800afe2 <USBD_ClrFeature+0x3c>
      break;
 800afe0:	bf00      	nop
  }
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3301      	adds	r3, #1
 800b004:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7ff fa40 	bl	800a49a <SWAPBYTE>
 800b01a:	4603      	mov	r3, r0
 800b01c:	461a      	mov	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3301      	adds	r3, #1
 800b026:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff fa33 	bl	800a49a <SWAPBYTE>
 800b034:	4603      	mov	r3, r0
 800b036:	461a      	mov	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3301      	adds	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3301      	adds	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff fa26 	bl	800a49a <SWAPBYTE>
 800b04e:	4603      	mov	r3, r0
 800b050:	461a      	mov	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	80da      	strh	r2, [r3, #6]
}
 800b056:	bf00      	nop
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b068:	2180      	movs	r1, #128	; 0x80
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7f6 f831 	bl	80010d2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b070:	2100      	movs	r1, #0
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7f6 f82d 	bl	80010d2 <USBD_LL_StallEP>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b08c:	2300      	movs	r3, #0
 800b08e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d036      	beq.n	800b104 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b09a:	6938      	ldr	r0, [r7, #16]
 800b09c:	f000 f836 	bl	800b10c <USBD_GetLen>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	7812      	ldrb	r2, [r2, #0]
 800b0b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0d0:	e013      	b.n	800b0fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	7812      	ldrb	r2, [r2, #0]
 800b0dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	613b      	str	r3, [r7, #16]
    idx++;
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e7      	bne.n	800b0d2 <USBD_GetString+0x52>
 800b102:	e000      	b.n	800b106 <USBD_GetString+0x86>
    return;
 800b104:	bf00      	nop
  }
}
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b11c:	e005      	b.n	800b12a <USBD_GetLen+0x1e>
  {
    len++;
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	3301      	adds	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3301      	adds	r3, #1
 800b128:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1f5      	bne.n	800b11e <USBD_GetLen+0x12>
  }

  return len;
 800b132:	7bfb      	ldrb	r3, [r7, #15]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2202      	movs	r2, #2
 800b150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	2100      	movs	r1, #0
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7f6 f818 	bl	800119c <USBD_LL_Transmit>

  return USBD_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	2100      	movs	r1, #0
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7f6 f807 	bl	800119c <USBD_LL_Transmit>

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7f5 ffff 	bl	80011c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7f5 ffee 	bl	80011c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2204      	movs	r2, #4
 800b200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b204:	2300      	movs	r3, #0
 800b206:	2200      	movs	r2, #0
 800b208:	2100      	movs	r1, #0
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7f5 ffc6 	bl	800119c <USBD_LL_Transmit>

  return USBD_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2205      	movs	r2, #5
 800b226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b22a:	2300      	movs	r3, #0
 800b22c:	2200      	movs	r2, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7f5 ffc8 	bl	80011c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <arm_rfft_32_fast_init_f32>:
 800b240:	b178      	cbz	r0, 800b262 <arm_rfft_32_fast_init_f32+0x22>
 800b242:	b430      	push	{r4, r5}
 800b244:	4908      	ldr	r1, [pc, #32]	; (800b268 <arm_rfft_32_fast_init_f32+0x28>)
 800b246:	4a09      	ldr	r2, [pc, #36]	; (800b26c <arm_rfft_32_fast_init_f32+0x2c>)
 800b248:	2310      	movs	r3, #16
 800b24a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b24e:	8003      	strh	r3, [r0, #0]
 800b250:	2520      	movs	r5, #32
 800b252:	2414      	movs	r4, #20
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <arm_rfft_32_fast_init_f32+0x30>)
 800b256:	8205      	strh	r5, [r0, #16]
 800b258:	8184      	strh	r4, [r0, #12]
 800b25a:	6143      	str	r3, [r0, #20]
 800b25c:	bc30      	pop	{r4, r5}
 800b25e:	2000      	movs	r0, #0
 800b260:	4770      	bx	lr
 800b262:	f04f 30ff 	mov.w	r0, #4294967295
 800b266:	4770      	bx	lr
 800b268:	0800e0f4 	.word	0x0800e0f4
 800b26c:	08012a2c 	.word	0x08012a2c
 800b270:	0801b7ac 	.word	0x0801b7ac

0800b274 <arm_rfft_64_fast_init_f32>:
 800b274:	b178      	cbz	r0, 800b296 <arm_rfft_64_fast_init_f32+0x22>
 800b276:	b430      	push	{r4, r5}
 800b278:	4908      	ldr	r1, [pc, #32]	; (800b29c <arm_rfft_64_fast_init_f32+0x28>)
 800b27a:	4a09      	ldr	r2, [pc, #36]	; (800b2a0 <arm_rfft_64_fast_init_f32+0x2c>)
 800b27c:	2320      	movs	r3, #32
 800b27e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b282:	8003      	strh	r3, [r0, #0]
 800b284:	2540      	movs	r5, #64	; 0x40
 800b286:	2430      	movs	r4, #48	; 0x30
 800b288:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <arm_rfft_64_fast_init_f32+0x30>)
 800b28a:	8205      	strh	r5, [r0, #16]
 800b28c:	8184      	strh	r4, [r0, #12]
 800b28e:	6143      	str	r3, [r0, #20]
 800b290:	bc30      	pop	{r4, r5}
 800b292:	2000      	movs	r0, #0
 800b294:	4770      	bx	lr
 800b296:	f04f 30ff 	mov.w	r0, #4294967295
 800b29a:	4770      	bx	lr
 800b29c:	0801024c 	.word	0x0801024c
 800b2a0:	080172ac 	.word	0x080172ac
 800b2a4:	0802002c 	.word	0x0802002c

0800b2a8 <arm_rfft_256_fast_init_f32>:
 800b2a8:	b180      	cbz	r0, 800b2cc <arm_rfft_256_fast_init_f32+0x24>
 800b2aa:	b430      	push	{r4, r5}
 800b2ac:	4909      	ldr	r1, [pc, #36]	; (800b2d4 <arm_rfft_256_fast_init_f32+0x2c>)
 800b2ae:	4a0a      	ldr	r2, [pc, #40]	; (800b2d8 <arm_rfft_256_fast_init_f32+0x30>)
 800b2b0:	2380      	movs	r3, #128	; 0x80
 800b2b2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b2b6:	8003      	strh	r3, [r0, #0]
 800b2b8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800b2bc:	24d0      	movs	r4, #208	; 0xd0
 800b2be:	4b07      	ldr	r3, [pc, #28]	; (800b2dc <arm_rfft_256_fast_init_f32+0x34>)
 800b2c0:	8205      	strh	r5, [r0, #16]
 800b2c2:	8184      	strh	r4, [r0, #12]
 800b2c4:	6143      	str	r3, [r0, #20]
 800b2c6:	bc30      	pop	{r4, r5}
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	4770      	bx	lr
 800b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	0800df54 	.word	0x0800df54
 800b2d8:	0801262c 	.word	0x0801262c
 800b2dc:	0801b3ac 	.word	0x0801b3ac

0800b2e0 <arm_rfft_512_fast_init_f32>:
 800b2e0:	b190      	cbz	r0, 800b308 <arm_rfft_512_fast_init_f32+0x28>
 800b2e2:	b430      	push	{r4, r5}
 800b2e4:	490a      	ldr	r1, [pc, #40]	; (800b310 <arm_rfft_512_fast_init_f32+0x30>)
 800b2e6:	4a0b      	ldr	r2, [pc, #44]	; (800b314 <arm_rfft_512_fast_init_f32+0x34>)
 800b2e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2ec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b2f0:	8003      	strh	r3, [r0, #0]
 800b2f2:	f44f 7500 	mov.w	r5, #512	; 0x200
 800b2f6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b2fa:	4b07      	ldr	r3, [pc, #28]	; (800b318 <arm_rfft_512_fast_init_f32+0x38>)
 800b2fc:	8205      	strh	r5, [r0, #16]
 800b2fe:	8184      	strh	r4, [r0, #12]
 800b300:	6143      	str	r3, [r0, #20]
 800b302:	bc30      	pop	{r4, r5}
 800b304:	2000      	movs	r0, #0
 800b306:	4770      	bx	lr
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	0800fedc 	.word	0x0800fedc
 800b314:	08016aac 	.word	0x08016aac
 800b318:	0801f82c 	.word	0x0801f82c

0800b31c <arm_rfft_1024_fast_init_f32>:
 800b31c:	b190      	cbz	r0, 800b344 <arm_rfft_1024_fast_init_f32+0x28>
 800b31e:	b430      	push	{r4, r5}
 800b320:	490a      	ldr	r1, [pc, #40]	; (800b34c <arm_rfft_1024_fast_init_f32+0x30>)
 800b322:	4a0b      	ldr	r2, [pc, #44]	; (800b350 <arm_rfft_1024_fast_init_f32+0x34>)
 800b324:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b328:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b32c:	8003      	strh	r3, [r0, #0]
 800b32e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b332:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b336:	4b07      	ldr	r3, [pc, #28]	; (800b354 <arm_rfft_1024_fast_init_f32+0x38>)
 800b338:	8205      	strh	r5, [r0, #16]
 800b33a:	8184      	strh	r4, [r0, #12]
 800b33c:	6143      	str	r3, [r0, #20]
 800b33e:	bc30      	pop	{r4, r5}
 800b340:	2000      	movs	r0, #0
 800b342:	4770      	bx	lr
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	080102ac 	.word	0x080102ac
 800b350:	080173ac 	.word	0x080173ac
 800b354:	080183ac 	.word	0x080183ac

0800b358 <arm_rfft_2048_fast_init_f32>:
 800b358:	b190      	cbz	r0, 800b380 <arm_rfft_2048_fast_init_f32+0x28>
 800b35a:	b430      	push	{r4, r5}
 800b35c:	490a      	ldr	r1, [pc, #40]	; (800b388 <arm_rfft_2048_fast_init_f32+0x30>)
 800b35e:	4a0b      	ldr	r2, [pc, #44]	; (800b38c <arm_rfft_2048_fast_init_f32+0x34>)
 800b360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b364:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b368:	8003      	strh	r3, [r0, #0]
 800b36a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800b36e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <arm_rfft_2048_fast_init_f32+0x38>)
 800b374:	8205      	strh	r5, [r0, #16]
 800b376:	8184      	strh	r4, [r0, #12]
 800b378:	6143      	str	r3, [r0, #20]
 800b37a:	bc30      	pop	{r4, r5}
 800b37c:	2000      	movs	r0, #0
 800b37e:	4770      	bx	lr
 800b380:	f04f 30ff 	mov.w	r0, #4294967295
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	0800d144 	.word	0x0800d144
 800b38c:	0801062c 	.word	0x0801062c
 800b390:	080193ac 	.word	0x080193ac

0800b394 <arm_rfft_4096_fast_init_f32>:
 800b394:	b190      	cbz	r0, 800b3bc <arm_rfft_4096_fast_init_f32+0x28>
 800b396:	b430      	push	{r4, r5}
 800b398:	490a      	ldr	r1, [pc, #40]	; (800b3c4 <arm_rfft_4096_fast_init_f32+0x30>)
 800b39a:	4a0b      	ldr	r2, [pc, #44]	; (800b3c8 <arm_rfft_4096_fast_init_f32+0x34>)
 800b39c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3a0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b3a4:	8003      	strh	r3, [r0, #0]
 800b3a6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800b3aa:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b3ae:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <arm_rfft_4096_fast_init_f32+0x38>)
 800b3b0:	8205      	strh	r5, [r0, #16]
 800b3b2:	8184      	strh	r4, [r0, #12]
 800b3b4:	6143      	str	r3, [r0, #20]
 800b3b6:	bc30      	pop	{r4, r5}
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	4770      	bx	lr
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	0800e11c 	.word	0x0800e11c
 800b3c8:	08012aac 	.word	0x08012aac
 800b3cc:	0801b82c 	.word	0x0801b82c

0800b3d0 <arm_rfft_fast_init_f32>:
 800b3d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b3d4:	d01f      	beq.n	800b416 <arm_rfft_fast_init_f32+0x46>
 800b3d6:	d90b      	bls.n	800b3f0 <arm_rfft_fast_init_f32+0x20>
 800b3d8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b3dc:	d019      	beq.n	800b412 <arm_rfft_fast_init_f32+0x42>
 800b3de:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b3e2:	d012      	beq.n	800b40a <arm_rfft_fast_init_f32+0x3a>
 800b3e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b3e8:	d00d      	beq.n	800b406 <arm_rfft_fast_init_f32+0x36>
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	4770      	bx	lr
 800b3f0:	2940      	cmp	r1, #64	; 0x40
 800b3f2:	d00c      	beq.n	800b40e <arm_rfft_fast_init_f32+0x3e>
 800b3f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b3f8:	d003      	beq.n	800b402 <arm_rfft_fast_init_f32+0x32>
 800b3fa:	2920      	cmp	r1, #32
 800b3fc:	d1f5      	bne.n	800b3ea <arm_rfft_fast_init_f32+0x1a>
 800b3fe:	4b07      	ldr	r3, [pc, #28]	; (800b41c <arm_rfft_fast_init_f32+0x4c>)
 800b400:	4718      	bx	r3
 800b402:	4b07      	ldr	r3, [pc, #28]	; (800b420 <arm_rfft_fast_init_f32+0x50>)
 800b404:	4718      	bx	r3
 800b406:	4b07      	ldr	r3, [pc, #28]	; (800b424 <arm_rfft_fast_init_f32+0x54>)
 800b408:	4718      	bx	r3
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <arm_rfft_fast_init_f32+0x58>)
 800b40c:	4718      	bx	r3
 800b40e:	4b07      	ldr	r3, [pc, #28]	; (800b42c <arm_rfft_fast_init_f32+0x5c>)
 800b410:	e7f6      	b.n	800b400 <arm_rfft_fast_init_f32+0x30>
 800b412:	4b07      	ldr	r3, [pc, #28]	; (800b430 <arm_rfft_fast_init_f32+0x60>)
 800b414:	e7f4      	b.n	800b400 <arm_rfft_fast_init_f32+0x30>
 800b416:	4b07      	ldr	r3, [pc, #28]	; (800b434 <arm_rfft_fast_init_f32+0x64>)
 800b418:	e7f2      	b.n	800b400 <arm_rfft_fast_init_f32+0x30>
 800b41a:	bf00      	nop
 800b41c:	0800b241 	.word	0x0800b241
 800b420:	0800b2a9 	.word	0x0800b2a9
 800b424:	0800b31d 	.word	0x0800b31d
 800b428:	0800b395 	.word	0x0800b395
 800b42c:	0800b275 	.word	0x0800b275
 800b430:	0800b359 	.word	0x0800b359
 800b434:	0800b2e1 	.word	0x0800b2e1

0800b438 <stage_rfft_f32>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	460e      	mov	r6, r1
 800b43e:	8803      	ldrh	r3, [r0, #0]
 800b440:	6809      	ldr	r1, [r1, #0]
 800b442:	6945      	ldr	r5, [r0, #20]
 800b444:	b087      	sub	sp, #28
 800b446:	3b01      	subs	r3, #1
 800b448:	4608      	mov	r0, r1
 800b44a:	4614      	mov	r4, r2
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	f7f4 fedd 	bl	800020c <__addsf3>
 800b452:	6871      	ldr	r1, [r6, #4]
 800b454:	4607      	mov	r7, r0
 800b456:	4608      	mov	r0, r1
 800b458:	f7f4 fed8 	bl	800020c <__addsf3>
 800b45c:	4601      	mov	r1, r0
 800b45e:	4680      	mov	r8, r0
 800b460:	4638      	mov	r0, r7
 800b462:	f7f4 fed3 	bl	800020c <__addsf3>
 800b466:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b46a:	f7f4 ffd7 	bl	800041c <__aeabi_fmul>
 800b46e:	4641      	mov	r1, r8
 800b470:	6020      	str	r0, [r4, #0]
 800b472:	4638      	mov	r0, r7
 800b474:	f7f4 fec8 	bl	8000208 <__aeabi_fsub>
 800b478:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b47c:	f7f4 ffce 	bl	800041c <__aeabi_fmul>
 800b480:	9b02      	ldr	r3, [sp, #8]
 800b482:	6060      	str	r0, [r4, #4]
 800b484:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b488:	3b08      	subs	r3, #8
 800b48a:	3510      	adds	r5, #16
 800b48c:	3410      	adds	r4, #16
 800b48e:	3610      	adds	r6, #16
 800b490:	461f      	mov	r7, r3
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800b498:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b49c:	9101      	str	r1, [sp, #4]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	9204      	str	r2, [sp, #16]
 800b4a6:	f7f4 feaf 	bl	8000208 <__aeabi_fsub>
 800b4aa:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800b4ae:	9901      	ldr	r1, [sp, #4]
 800b4b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4b4:	4683      	mov	fp, r0
 800b4b6:	4648      	mov	r0, r9
 800b4b8:	f7f4 fea8 	bl	800020c <__addsf3>
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	9b05      	ldr	r3, [sp, #20]
 800b4c0:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800b4c4:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4681      	mov	r9, r0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f4 fe9d 	bl	800020c <__addsf3>
 800b4d2:	4659      	mov	r1, fp
 800b4d4:	9004      	str	r0, [sp, #16]
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7f4 ffa0 	bl	800041c <__aeabi_fmul>
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	4601      	mov	r1, r0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f4 fe93 	bl	800020c <__addsf3>
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	9004      	str	r0, [sp, #16]
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f7f4 ff96 	bl	800041c <__aeabi_fmul>
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f4 fe89 	bl	800020c <__addsf3>
 800b4fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b4fe:	f7f4 ff8d 	bl	800041c <__aeabi_fmul>
 800b502:	9903      	ldr	r1, [sp, #12]
 800b504:	f844 0c08 	str.w	r0, [r4, #-8]
 800b508:	9801      	ldr	r0, [sp, #4]
 800b50a:	f7f4 fe7d 	bl	8000208 <__aeabi_fsub>
 800b50e:	4659      	mov	r1, fp
 800b510:	9001      	str	r0, [sp, #4]
 800b512:	4650      	mov	r0, sl
 800b514:	f7f4 ff82 	bl	800041c <__aeabi_fmul>
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	4601      	mov	r1, r0
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f4 fe75 	bl	800020c <__addsf3>
 800b522:	4649      	mov	r1, r9
 800b524:	4682      	mov	sl, r0
 800b526:	4640      	mov	r0, r8
 800b528:	f7f4 ff78 	bl	800041c <__aeabi_fmul>
 800b52c:	4601      	mov	r1, r0
 800b52e:	4650      	mov	r0, sl
 800b530:	f7f4 fe6a 	bl	8000208 <__aeabi_fsub>
 800b534:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b538:	f7f4 ff70 	bl	800041c <__aeabi_fmul>
 800b53c:	9b02      	ldr	r3, [sp, #8]
 800b53e:	f844 0c04 	str.w	r0, [r4, #-4]
 800b542:	3b01      	subs	r3, #1
 800b544:	f1a7 0708 	sub.w	r7, r7, #8
 800b548:	f106 0608 	add.w	r6, r6, #8
 800b54c:	f105 0508 	add.w	r5, r5, #8
 800b550:	f104 0408 	add.w	r4, r4, #8
 800b554:	9302      	str	r3, [sp, #8]
 800b556:	d19c      	bne.n	800b492 <stage_rfft_f32+0x5a>
 800b558:	b007      	add	sp, #28
 800b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55e:	bf00      	nop

0800b560 <merge_rfft_f32>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	680c      	ldr	r4, [r1, #0]
 800b566:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800b56a:	8803      	ldrh	r3, [r0, #0]
 800b56c:	6945      	ldr	r5, [r0, #20]
 800b56e:	b087      	sub	sp, #28
 800b570:	3b01      	subs	r3, #1
 800b572:	460e      	mov	r6, r1
 800b574:	4620      	mov	r0, r4
 800b576:	4641      	mov	r1, r8
 800b578:	4617      	mov	r7, r2
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	f7f4 fe46 	bl	800020c <__addsf3>
 800b580:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b584:	f7f4 ff4a 	bl	800041c <__aeabi_fmul>
 800b588:	4641      	mov	r1, r8
 800b58a:	6038      	str	r0, [r7, #0]
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7f4 fe3b 	bl	8000208 <__aeabi_fsub>
 800b592:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b596:	f7f4 ff41 	bl	800041c <__aeabi_fmul>
 800b59a:	9b02      	ldr	r3, [sp, #8]
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d068      	beq.n	800b674 <merge_rfft_f32+0x114>
 800b5a2:	00dc      	lsls	r4, r3, #3
 800b5a4:	3c08      	subs	r4, #8
 800b5a6:	4434      	add	r4, r6
 800b5a8:	3510      	adds	r5, #16
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	3610      	adds	r6, #16
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800b5b4:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b5b8:	9101      	str	r1, [sp, #4]
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4619      	mov	r1, r3
 800b5be:	9305      	str	r3, [sp, #20]
 800b5c0:	9204      	str	r2, [sp, #16]
 800b5c2:	f7f4 fe21 	bl	8000208 <__aeabi_fsub>
 800b5c6:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800b5ca:	9901      	ldr	r1, [sp, #4]
 800b5cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5d0:	4683      	mov	fp, r0
 800b5d2:	4648      	mov	r0, r9
 800b5d4:	f7f4 fe1a 	bl	800020c <__addsf3>
 800b5d8:	9a04      	ldr	r2, [sp, #16]
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800b5e0:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4681      	mov	r9, r0
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f4 fe0f 	bl	800020c <__addsf3>
 800b5ee:	4659      	mov	r1, fp
 800b5f0:	9004      	str	r0, [sp, #16]
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	f7f4 ff12 	bl	800041c <__aeabi_fmul>
 800b5f8:	9b04      	ldr	r3, [sp, #16]
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f4 fe03 	bl	8000208 <__aeabi_fsub>
 800b602:	4649      	mov	r1, r9
 800b604:	9004      	str	r0, [sp, #16]
 800b606:	4650      	mov	r0, sl
 800b608:	f7f4 ff08 	bl	800041c <__aeabi_fmul>
 800b60c:	9b04      	ldr	r3, [sp, #16]
 800b60e:	4601      	mov	r1, r0
 800b610:	4618      	mov	r0, r3
 800b612:	f7f4 fdf9 	bl	8000208 <__aeabi_fsub>
 800b616:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b61a:	f7f4 feff 	bl	800041c <__aeabi_fmul>
 800b61e:	9903      	ldr	r1, [sp, #12]
 800b620:	f847 0c08 	str.w	r0, [r7, #-8]
 800b624:	9801      	ldr	r0, [sp, #4]
 800b626:	f7f4 fdef 	bl	8000208 <__aeabi_fsub>
 800b62a:	4659      	mov	r1, fp
 800b62c:	9001      	str	r0, [sp, #4]
 800b62e:	4650      	mov	r0, sl
 800b630:	f7f4 fef4 	bl	800041c <__aeabi_fmul>
 800b634:	9b01      	ldr	r3, [sp, #4]
 800b636:	4601      	mov	r1, r0
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f4 fde7 	bl	800020c <__addsf3>
 800b63e:	4649      	mov	r1, r9
 800b640:	4682      	mov	sl, r0
 800b642:	4640      	mov	r0, r8
 800b644:	f7f4 feea 	bl	800041c <__aeabi_fmul>
 800b648:	4601      	mov	r1, r0
 800b64a:	4650      	mov	r0, sl
 800b64c:	f7f4 fddc 	bl	8000208 <__aeabi_fsub>
 800b650:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b654:	f7f4 fee2 	bl	800041c <__aeabi_fmul>
 800b658:	9b02      	ldr	r3, [sp, #8]
 800b65a:	f847 0c04 	str.w	r0, [r7, #-4]
 800b65e:	3b01      	subs	r3, #1
 800b660:	f1a4 0408 	sub.w	r4, r4, #8
 800b664:	f106 0608 	add.w	r6, r6, #8
 800b668:	f105 0508 	add.w	r5, r5, #8
 800b66c:	f107 0708 	add.w	r7, r7, #8
 800b670:	9302      	str	r3, [sp, #8]
 800b672:	d19c      	bne.n	800b5ae <merge_rfft_f32+0x4e>
 800b674:	b007      	add	sp, #28
 800b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67a:	bf00      	nop

0800b67c <arm_rfft_fast_f32>:
 800b67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b680:	8a05      	ldrh	r5, [r0, #16]
 800b682:	086d      	lsrs	r5, r5, #1
 800b684:	8005      	strh	r5, [r0, #0]
 800b686:	4604      	mov	r4, r0
 800b688:	4616      	mov	r6, r2
 800b68a:	461d      	mov	r5, r3
 800b68c:	b14b      	cbz	r3, 800b6a2 <arm_rfft_fast_f32+0x26>
 800b68e:	f7ff ff67 	bl	800b560 <merge_rfft_f32>
 800b692:	462a      	mov	r2, r5
 800b694:	4631      	mov	r1, r6
 800b696:	4620      	mov	r0, r4
 800b698:	2301      	movs	r3, #1
 800b69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69e:	f000 bcfd 	b.w	800c09c <arm_cfft_f32>
 800b6a2:	460f      	mov	r7, r1
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f000 fcf8 	bl	800c09c <arm_cfft_f32>
 800b6ac:	4632      	mov	r2, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b6:	f7ff bebf 	b.w	800b438 <stage_rfft_f32>
 800b6ba:	bf00      	nop

0800b6bc <arm_cfft_radix8by2_f32>:
 800b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c0:	b093      	sub	sp, #76	; 0x4c
 800b6c2:	8802      	ldrh	r2, [r0, #0]
 800b6c4:	900e      	str	r0, [sp, #56]	; 0x38
 800b6c6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b6ca:	460d      	mov	r5, r1
 800b6cc:	9111      	str	r1, [sp, #68]	; 0x44
 800b6ce:	6843      	ldr	r3, [r0, #4]
 800b6d0:	940f      	str	r4, [sp, #60]	; 0x3c
 800b6d2:	0850      	lsrs	r0, r2, #1
 800b6d4:	08d1      	lsrs	r1, r2, #3
 800b6d6:	9010      	str	r0, [sp, #64]	; 0x40
 800b6d8:	f000 8134 	beq.w	800b944 <arm_cfft_radix8by2_f32+0x288>
 800b6dc:	0080      	lsls	r0, r0, #2
 800b6de:	3010      	adds	r0, #16
 800b6e0:	3310      	adds	r3, #16
 800b6e2:	f105 0610 	add.w	r6, r5, #16
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	1822      	adds	r2, r4, r0
 800b6ea:	eb06 1301 	add.w	r3, r6, r1, lsl #4
 800b6ee:	182f      	adds	r7, r5, r0
 800b6f0:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f2:	f104 0910 	add.w	r9, r4, #16
 800b6f6:	4693      	mov	fp, r2
 800b6f8:	f859 2c10 	ldr.w	r2, [r9, #-16]
 800b6fc:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800b700:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 800b704:	f859 0c08 	ldr.w	r0, [r9, #-8]
 800b708:	f857 cc0c 	ldr.w	ip, [r7, #-12]
 800b70c:	f857 8c04 	ldr.w	r8, [r7, #-4]
 800b710:	9101      	str	r1, [sp, #4]
 800b712:	9002      	str	r0, [sp, #8]
 800b714:	f85b 1c0c 	ldr.w	r1, [fp, #-12]
 800b718:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800b71c:	f857 ec08 	ldr.w	lr, [r7, #-8]
 800b720:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800b724:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b728:	f8cd 8010 	str.w	r8, [sp, #16]
 800b72c:	f85b cc04 	ldr.w	ip, [fp, #-4]
 800b730:	f85b 8c10 	ldr.w	r8, [fp, #-16]
 800b734:	9105      	str	r1, [sp, #20]
 800b736:	9006      	str	r0, [sp, #24]
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f8cd e00c 	str.w	lr, [sp, #12]
 800b740:	f8cd c01c 	str.w	ip, [sp, #28]
 800b744:	930c      	str	r3, [sp, #48]	; 0x30
 800b746:	9208      	str	r2, [sp, #32]
 800b748:	9409      	str	r4, [sp, #36]	; 0x24
 800b74a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b74e:	f7f4 fd5d 	bl	800020c <__addsf3>
 800b752:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 800b756:	f859 5c04 	ldr.w	r5, [r9, #-4]
 800b75a:	9901      	ldr	r1, [sp, #4]
 800b75c:	f846 0c10 	str.w	r0, [r6, #-16]
 800b760:	4650      	mov	r0, sl
 800b762:	f7f4 fd53 	bl	800020c <__addsf3>
 800b766:	f856 8c08 	ldr.w	r8, [r6, #-8]
 800b76a:	f846 0c0c 	str.w	r0, [r6, #-12]
 800b76e:	9902      	ldr	r1, [sp, #8]
 800b770:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800b774:	4640      	mov	r0, r8
 800b776:	f7f4 fd49 	bl	800020c <__addsf3>
 800b77a:	4629      	mov	r1, r5
 800b77c:	f846 0c08 	str.w	r0, [r6, #-8]
 800b780:	4620      	mov	r0, r4
 800b782:	f7f4 fd43 	bl	800020c <__addsf3>
 800b786:	9a08      	ldr	r2, [sp, #32]
 800b788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b78a:	f846 0c04 	str.w	r0, [r6, #-4]
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7f4 fd39 	bl	8000208 <__aeabi_fsub>
 800b796:	9901      	ldr	r1, [sp, #4]
 800b798:	9008      	str	r0, [sp, #32]
 800b79a:	4650      	mov	r0, sl
 800b79c:	f7f4 fd34 	bl	8000208 <__aeabi_fsub>
 800b7a0:	9902      	ldr	r1, [sp, #8]
 800b7a2:	4682      	mov	sl, r0
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	f7f4 fd2f 	bl	8000208 <__aeabi_fsub>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	9001      	str	r0, [sp, #4]
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7f4 fd2a 	bl	8000208 <__aeabi_fsub>
 800b7b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b7b8:	900c      	str	r0, [sp, #48]	; 0x30
 800b7ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b7bc:	4641      	mov	r1, r8
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f7f4 fd24 	bl	800020c <__addsf3>
 800b7c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7c6:	9905      	ldr	r1, [sp, #20]
 800b7c8:	f847 0c10 	str.w	r0, [r7, #-16]
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	f7f4 fd1d 	bl	800020c <__addsf3>
 800b7d2:	9906      	ldr	r1, [sp, #24]
 800b7d4:	f847 0c0c 	str.w	r0, [r7, #-12]
 800b7d8:	9803      	ldr	r0, [sp, #12]
 800b7da:	f7f4 fd17 	bl	800020c <__addsf3>
 800b7de:	9907      	ldr	r1, [sp, #28]
 800b7e0:	f847 0c08 	str.w	r0, [r7, #-8]
 800b7e4:	9804      	ldr	r0, [sp, #16]
 800b7e6:	f7f4 fd11 	bl	800020c <__addsf3>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	f847 0c04 	str.w	r0, [r7, #-4]
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	f7f4 fd09 	bl	8000208 <__aeabi_fsub>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	9805      	ldr	r0, [sp, #20]
 800b7fc:	f7f4 fd04 	bl	8000208 <__aeabi_fsub>
 800b800:	9903      	ldr	r1, [sp, #12]
 800b802:	9002      	str	r0, [sp, #8]
 800b804:	9806      	ldr	r0, [sp, #24]
 800b806:	f7f4 fcff 	bl	8000208 <__aeabi_fsub>
 800b80a:	9904      	ldr	r1, [sp, #16]
 800b80c:	9003      	str	r0, [sp, #12]
 800b80e:	9807      	ldr	r0, [sp, #28]
 800b810:	f7f4 fcfa 	bl	8000208 <__aeabi_fsub>
 800b814:	9b00      	ldr	r3, [sp, #0]
 800b816:	9004      	str	r0, [sp, #16]
 800b818:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800b81c:	9808      	ldr	r0, [sp, #32]
 800b81e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800b822:	4621      	mov	r1, r4
 800b824:	f7f4 fdfa 	bl	800041c <__aeabi_fmul>
 800b828:	4629      	mov	r1, r5
 800b82a:	9005      	str	r0, [sp, #20]
 800b82c:	4650      	mov	r0, sl
 800b82e:	f7f4 fdf5 	bl	800041c <__aeabi_fmul>
 800b832:	9b05      	ldr	r3, [sp, #20]
 800b834:	4601      	mov	r1, r0
 800b836:	4618      	mov	r0, r3
 800b838:	f7f4 fce8 	bl	800020c <__addsf3>
 800b83c:	4621      	mov	r1, r4
 800b83e:	f849 0c10 	str.w	r0, [r9, #-16]
 800b842:	4650      	mov	r0, sl
 800b844:	f7f4 fdea 	bl	800041c <__aeabi_fmul>
 800b848:	4629      	mov	r1, r5
 800b84a:	4682      	mov	sl, r0
 800b84c:	9808      	ldr	r0, [sp, #32]
 800b84e:	f7f4 fde5 	bl	800041c <__aeabi_fmul>
 800b852:	4601      	mov	r1, r0
 800b854:	4650      	mov	r0, sl
 800b856:	f7f4 fcd7 	bl	8000208 <__aeabi_fsub>
 800b85a:	4629      	mov	r1, r5
 800b85c:	f849 0c0c 	str.w	r0, [r9, #-12]
 800b860:	4640      	mov	r0, r8
 800b862:	f7f4 fddb 	bl	800041c <__aeabi_fmul>
 800b866:	4621      	mov	r1, r4
 800b868:	4682      	mov	sl, r0
 800b86a:	9802      	ldr	r0, [sp, #8]
 800b86c:	f7f4 fdd6 	bl	800041c <__aeabi_fmul>
 800b870:	4601      	mov	r1, r0
 800b872:	4650      	mov	r0, sl
 800b874:	f7f4 fcc8 	bl	8000208 <__aeabi_fsub>
 800b878:	4629      	mov	r1, r5
 800b87a:	f84b 0c10 	str.w	r0, [fp, #-16]
 800b87e:	9802      	ldr	r0, [sp, #8]
 800b880:	f7f4 fdcc 	bl	800041c <__aeabi_fmul>
 800b884:	4621      	mov	r1, r4
 800b886:	4605      	mov	r5, r0
 800b888:	4640      	mov	r0, r8
 800b88a:	f7f4 fdc7 	bl	800041c <__aeabi_fmul>
 800b88e:	4601      	mov	r1, r0
 800b890:	4628      	mov	r0, r5
 800b892:	f7f4 fcbb 	bl	800020c <__addsf3>
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	f84b 0c0c 	str.w	r0, [fp, #-12]
 800b89c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800b8a0:	9801      	ldr	r0, [sp, #4]
 800b8a2:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f7f4 fdb8 	bl	800041c <__aeabi_fmul>
 800b8ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	f7f4 fdb1 	bl	800041c <__aeabi_fmul>
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	4640      	mov	r0, r8
 800b8be:	f7f4 fca5 	bl	800020c <__addsf3>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	f849 0c08 	str.w	r0, [r9, #-8]
 800b8c8:	4650      	mov	r0, sl
 800b8ca:	f7f4 fda7 	bl	800041c <__aeabi_fmul>
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	9801      	ldr	r0, [sp, #4]
 800b8d4:	f7f4 fda2 	bl	800041c <__aeabi_fmul>
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4640      	mov	r0, r8
 800b8dc:	f7f4 fc94 	bl	8000208 <__aeabi_fsub>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	f849 0c04 	str.w	r0, [r9, #-4]
 800b8e6:	9803      	ldr	r0, [sp, #12]
 800b8e8:	f7f4 fd98 	bl	800041c <__aeabi_fmul>
 800b8ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	f7f4 fd91 	bl	800041c <__aeabi_fmul>
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	f7f4 fc83 	bl	8000208 <__aeabi_fsub>
 800b902:	4629      	mov	r1, r5
 800b904:	f84b 0c08 	str.w	r0, [fp, #-8]
 800b908:	4650      	mov	r0, sl
 800b90a:	f7f4 fd87 	bl	800041c <__aeabi_fmul>
 800b90e:	4621      	mov	r1, r4
 800b910:	4605      	mov	r5, r0
 800b912:	9803      	ldr	r0, [sp, #12]
 800b914:	f7f4 fd82 	bl	800041c <__aeabi_fmul>
 800b918:	4601      	mov	r1, r0
 800b91a:	4628      	mov	r0, r5
 800b91c:	f7f4 fc76 	bl	800020c <__addsf3>
 800b920:	9b00      	ldr	r3, [sp, #0]
 800b922:	f84b 0c04 	str.w	r0, [fp, #-4]
 800b926:	3310      	adds	r3, #16
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b92c:	3610      	adds	r6, #16
 800b92e:	429e      	cmp	r6, r3
 800b930:	f107 0710 	add.w	r7, r7, #16
 800b934:	f109 0910 	add.w	r9, r9, #16
 800b938:	f10b 0b10 	add.w	fp, fp, #16
 800b93c:	f47f aedc 	bne.w	800b6f8 <arm_cfft_radix8by2_f32+0x3c>
 800b940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 800b948:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b94a:	461a      	mov	r2, r3
 800b94c:	4621      	mov	r1, r4
 800b94e:	2302      	movs	r3, #2
 800b950:	f000 fd02 	bl	800c358 <arm_radix8_butterfly_f32>
 800b954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b956:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	4621      	mov	r1, r4
 800b95c:	2302      	movs	r3, #2
 800b95e:	b013      	add	sp, #76	; 0x4c
 800b960:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	f000 bcf8 	b.w	800c358 <arm_radix8_butterfly_f32>

0800b968 <arm_cfft_radix8by4_f32>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	8804      	ldrh	r4, [r0, #0]
 800b96e:	680e      	ldr	r6, [r1, #0]
 800b970:	6845      	ldr	r5, [r0, #4]
 800b972:	b0a7      	sub	sp, #156	; 0x9c
 800b974:	0864      	lsrs	r4, r4, #1
 800b976:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800b97a:	9119      	str	r1, [sp, #100]	; 0x64
 800b97c:	4451      	add	r1, sl
 800b97e:	eb01 0c0a 	add.w	ip, r1, sl
 800b982:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800b986:	9024      	str	r0, [sp, #144]	; 0x90
 800b988:	911a      	str	r1, [sp, #104]	; 0x68
 800b98a:	4630      	mov	r0, r6
 800b98c:	4639      	mov	r1, r7
 800b98e:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800b992:	f7f4 fc3b 	bl	800020c <__addsf3>
 800b996:	4639      	mov	r1, r7
 800b998:	4683      	mov	fp, r0
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7f4 fc34 	bl	8000208 <__aeabi_fsub>
 800b9a0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b9a2:	9001      	str	r0, [sp, #4]
 800b9a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b9a6:	6877      	ldr	r7, [r6, #4]
 800b9a8:	6846      	ldr	r6, [r0, #4]
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7f4 fc2d 	bl	800020c <__addsf3>
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	9002      	str	r0, [sp, #8]
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7f4 fc26 	bl	8000208 <__aeabi_fsub>
 800b9bc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b9be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9c0:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800b9c4:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 800b9c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b9ca:	9003      	str	r0, [sp, #12]
 800b9cc:	4659      	mov	r1, fp
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b9d4:	f7f4 fc1a 	bl	800020c <__addsf3>
 800b9d8:	4631      	mov	r1, r6
 800b9da:	f7f4 fc17 	bl	800020c <__addsf3>
 800b9de:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b9e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b9e2:	468c      	mov	ip, r1
 800b9e4:	4453      	add	r3, sl
 800b9e6:	931f      	str	r3, [sp, #124]	; 0x7c
 800b9e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b9ec:	f84c 0b08 	str.w	r0, [ip], #8
 800b9f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b9f2:	9802      	ldr	r0, [sp, #8]
 800b9f4:	6859      	ldr	r1, [r3, #4]
 800b9f6:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800b9fa:	f7f4 fc07 	bl	800020c <__addsf3>
 800b9fe:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ba00:	6849      	ldr	r1, [r1, #4]
 800ba02:	f7f4 fc03 	bl	800020c <__addsf3>
 800ba06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba08:	9901      	ldr	r1, [sp, #4]
 800ba0a:	6058      	str	r0, [r3, #4]
 800ba0c:	4648      	mov	r0, r9
 800ba0e:	f7f4 fbfd 	bl	800020c <__addsf3>
 800ba12:	4641      	mov	r1, r8
 800ba14:	f7f4 fbf8 	bl	8000208 <__aeabi_fsub>
 800ba18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ba20:	9803      	ldr	r0, [sp, #12]
 800ba22:	f7f4 fbf1 	bl	8000208 <__aeabi_fsub>
 800ba26:	4631      	mov	r1, r6
 800ba28:	f7f4 fbf0 	bl	800020c <__addsf3>
 800ba2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba2e:	4639      	mov	r1, r7
 800ba30:	6050      	str	r0, [r2, #4]
 800ba32:	4658      	mov	r0, fp
 800ba34:	f7f4 fbe8 	bl	8000208 <__aeabi_fsub>
 800ba38:	4631      	mov	r1, r6
 800ba3a:	f7f4 fbe5 	bl	8000208 <__aeabi_fsub>
 800ba3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ba40:	4649      	mov	r1, r9
 800ba42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba46:	9802      	ldr	r0, [sp, #8]
 800ba48:	f7f4 fbde 	bl	8000208 <__aeabi_fsub>
 800ba4c:	4641      	mov	r1, r8
 800ba4e:	f7f4 fbdb 	bl	8000208 <__aeabi_fsub>
 800ba52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba54:	4649      	mov	r1, r9
 800ba56:	6050      	str	r0, [r2, #4]
 800ba58:	9801      	ldr	r0, [sp, #4]
 800ba5a:	f7f4 fbd5 	bl	8000208 <__aeabi_fsub>
 800ba5e:	4641      	mov	r1, r8
 800ba60:	f7f4 fbd4 	bl	800020c <__addsf3>
 800ba64:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba66:	9903      	ldr	r1, [sp, #12]
 800ba68:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7f4 fbcd 	bl	800020c <__addsf3>
 800ba72:	4631      	mov	r1, r6
 800ba74:	f7f4 fbc8 	bl	8000208 <__aeabi_fsub>
 800ba78:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800ba7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ba7c:	6070      	str	r0, [r6, #4]
 800ba7e:	0864      	lsrs	r4, r4, #1
 800ba80:	9423      	str	r4, [sp, #140]	; 0x8c
 800ba82:	1ea2      	subs	r2, r4, #2
 800ba84:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ba86:	4634      	mov	r4, r6
 800ba88:	3408      	adds	r4, #8
 800ba8a:	941b      	str	r4, [sp, #108]	; 0x6c
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	3408      	adds	r4, #8
 800ba90:	941d      	str	r4, [sp, #116]	; 0x74
 800ba92:	f101 0408 	add.w	r4, r1, #8
 800ba96:	941e      	str	r4, [sp, #120]	; 0x78
 800ba98:	f105 0408 	add.w	r4, r5, #8
 800ba9c:	9421      	str	r4, [sp, #132]	; 0x84
 800ba9e:	f105 0710 	add.w	r7, r5, #16
 800baa2:	f105 0418 	add.w	r4, r5, #24
 800baa6:	0852      	lsrs	r2, r2, #1
 800baa8:	9722      	str	r7, [sp, #136]	; 0x88
 800baaa:	9420      	str	r4, [sp, #128]	; 0x80
 800baac:	9225      	str	r2, [sp, #148]	; 0x94
 800baae:	f000 820b 	beq.w	800bec8 <arm_cfft_radix8by4_f32+0x560>
 800bab2:	f1aa 030c 	sub.w	r3, sl, #12
 800bab6:	4634      	mov	r4, r6
 800bab8:	441e      	add	r6, r3
 800baba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800babc:	9606      	str	r6, [sp, #24]
 800babe:	3310      	adds	r3, #16
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	f1a1 030c 	sub.w	r3, r1, #12
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	f105 0320 	add.w	r3, r5, #32
 800bacc:	9308      	str	r3, [sp, #32]
 800bace:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bad2:	9307      	str	r3, [sp, #28]
 800bad4:	f100 0310 	add.w	r3, r0, #16
 800bad8:	f101 0810 	add.w	r8, r1, #16
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	f1a4 030c 	sub.w	r3, r4, #12
 800bae2:	9709      	str	r7, [sp, #36]	; 0x24
 800bae4:	f1a0 0a0c 	sub.w	sl, r0, #12
 800bae8:	9302      	str	r3, [sp, #8]
 800baea:	f104 0910 	add.w	r9, r4, #16
 800baee:	f8cd 8004 	str.w	r8, [sp, #4]
 800baf2:	9e05      	ldr	r6, [sp, #20]
 800baf4:	9f03      	ldr	r7, [sp, #12]
 800baf6:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800bafa:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800bafe:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb00:	4629      	mov	r1, r5
 800bb02:	4620      	mov	r0, r4
 800bb04:	f7f4 fb82 	bl	800020c <__addsf3>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f7f4 fb7b 	bl	8000208 <__aeabi_fsub>
 800bb12:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800bb16:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800bb1a:	900a      	str	r0, [sp, #40]	; 0x28
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	4620      	mov	r0, r4
 800bb20:	9605      	str	r6, [sp, #20]
 800bb22:	9703      	str	r7, [sp, #12]
 800bb24:	f7f4 fb72 	bl	800020c <__addsf3>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f7f4 fb6b 	bl	8000208 <__aeabi_fsub>
 800bb32:	9c01      	ldr	r4, [sp, #4]
 800bb34:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800bb38:	f854 bc04 	ldr.w	fp, [r4, #-4]
 800bb3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb3e:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb40:	4658      	mov	r0, fp
 800bb42:	f7f4 fb63 	bl	800020c <__addsf3>
 800bb46:	4631      	mov	r1, r6
 800bb48:	f7f4 fb5e 	bl	8000208 <__aeabi_fsub>
 800bb4c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bb50:	9401      	str	r4, [sp, #4]
 800bb52:	f859 4c08 	ldr.w	r4, [r9, #-8]
 800bb56:	900c      	str	r0, [sp, #48]	; 0x30
 800bb58:	4629      	mov	r1, r5
 800bb5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb5c:	f7f4 fb54 	bl	8000208 <__aeabi_fsub>
 800bb60:	4621      	mov	r1, r4
 800bb62:	f7f4 fb53 	bl	800020c <__addsf3>
 800bb66:	4629      	mov	r1, r5
 800bb68:	900d      	str	r0, [sp, #52]	; 0x34
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	f7f4 fb4c 	bl	8000208 <__aeabi_fsub>
 800bb70:	4621      	mov	r1, r4
 800bb72:	f7f4 fb49 	bl	8000208 <__aeabi_fsub>
 800bb76:	4659      	mov	r1, fp
 800bb78:	900e      	str	r0, [sp, #56]	; 0x38
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f7f4 fb44 	bl	8000208 <__aeabi_fsub>
 800bb80:	4631      	mov	r1, r6
 800bb82:	f7f4 fb41 	bl	8000208 <__aeabi_fsub>
 800bb86:	4659      	mov	r1, fp
 800bb88:	9012      	str	r0, [sp, #72]	; 0x48
 800bb8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb8c:	f7f4 fb3c 	bl	8000208 <__aeabi_fsub>
 800bb90:	4631      	mov	r1, r6
 800bb92:	f7f4 fb3b 	bl	800020c <__addsf3>
 800bb96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb98:	900a      	str	r0, [sp, #40]	; 0x28
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f7f4 fb36 	bl	800020c <__addsf3>
 800bba0:	4621      	mov	r1, r4
 800bba2:	f7f4 fb31 	bl	8000208 <__aeabi_fsub>
 800bba6:	4641      	mov	r1, r8
 800bba8:	9013      	str	r0, [sp, #76]	; 0x4c
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f7f4 fb2e 	bl	800020c <__addsf3>
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	f7f4 fb2b 	bl	800020c <__addsf3>
 800bbb6:	9e05      	ldr	r6, [sp, #20]
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	f846 0c08 	str.w	r0, [r6, #-8]
 800bbbe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	f7f4 fb22 	bl	800020c <__addsf3>
 800bbc8:	f859 1c04 	ldr.w	r1, [r9, #-4]
 800bbcc:	f7f4 fb1e 	bl	800020c <__addsf3>
 800bbd0:	9f04      	ldr	r7, [sp, #16]
 800bbd2:	f846 0c04 	str.w	r0, [r6, #-4]
 800bbd6:	9605      	str	r6, [sp, #20]
 800bbd8:	9e02      	ldr	r6, [sp, #8]
 800bbda:	687c      	ldr	r4, [r7, #4]
 800bbdc:	6875      	ldr	r5, [r6, #4]
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f7f4 fb13 	bl	800020c <__addsf3>
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4620      	mov	r0, r4
 800bbec:	f7f4 fb0c 	bl	8000208 <__aeabi_fsub>
 800bbf0:	68bc      	ldr	r4, [r7, #8]
 800bbf2:	68b5      	ldr	r5, [r6, #8]
 800bbf4:	9704      	str	r7, [sp, #16]
 800bbf6:	4683      	mov	fp, r0
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	9602      	str	r6, [sp, #8]
 800bbfe:	f7f4 fb05 	bl	800020c <__addsf3>
 800bc02:	4629      	mov	r1, r5
 800bc04:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7f4 fafe 	bl	8000208 <__aeabi_fsub>
 800bc0c:	9e06      	ldr	r6, [sp, #24]
 800bc0e:	f8da 5008 	ldr.w	r5, [sl, #8]
 800bc12:	68b4      	ldr	r4, [r6, #8]
 800bc14:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc16:	4621      	mov	r1, r4
 800bc18:	4628      	mov	r0, r5
 800bc1a:	f7f4 faf5 	bl	8000208 <__aeabi_fsub>
 800bc1e:	4659      	mov	r1, fp
 800bc20:	9016      	str	r0, [sp, #88]	; 0x58
 800bc22:	f7f4 faf3 	bl	800020c <__addsf3>
 800bc26:	f8da 7004 	ldr.w	r7, [sl, #4]
 800bc2a:	9606      	str	r6, [sp, #24]
 800bc2c:	6876      	ldr	r6, [r6, #4]
 800bc2e:	9014      	str	r0, [sp, #80]	; 0x50
 800bc30:	4639      	mov	r1, r7
 800bc32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bc34:	f7f4 fae8 	bl	8000208 <__aeabi_fsub>
 800bc38:	4631      	mov	r1, r6
 800bc3a:	f7f4 fae7 	bl	800020c <__addsf3>
 800bc3e:	4639      	mov	r1, r7
 800bc40:	9010      	str	r0, [sp, #64]	; 0x40
 800bc42:	4640      	mov	r0, r8
 800bc44:	f7f4 fae0 	bl	8000208 <__aeabi_fsub>
 800bc48:	4631      	mov	r1, r6
 800bc4a:	f7f4 fadd 	bl	8000208 <__aeabi_fsub>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	9015      	str	r0, [sp, #84]	; 0x54
 800bc52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc54:	f7f4 fad8 	bl	8000208 <__aeabi_fsub>
 800bc58:	4621      	mov	r1, r4
 800bc5a:	f7f4 fad5 	bl	8000208 <__aeabi_fsub>
 800bc5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc60:	9011      	str	r0, [sp, #68]	; 0x44
 800bc62:	4659      	mov	r1, fp
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f4 facf 	bl	8000208 <__aeabi_fsub>
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	4683      	mov	fp, r0
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7f4 faca 	bl	8000208 <__aeabi_fsub>
 800bc74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc76:	f7f4 fac7 	bl	8000208 <__aeabi_fsub>
 800bc7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f7f4 fac4 	bl	800020c <__addsf3>
 800bc84:	4621      	mov	r1, r4
 800bc86:	f7f4 fac1 	bl	800020c <__addsf3>
 800bc8a:	9c04      	ldr	r4, [sp, #16]
 800bc8c:	60a0      	str	r0, [r4, #8]
 800bc8e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bc92:	4640      	mov	r0, r8
 800bc94:	f7f4 faba 	bl	800020c <__addsf3>
 800bc98:	9a06      	ldr	r2, [sp, #24]
 800bc9a:	6851      	ldr	r1, [r2, #4]
 800bc9c:	f7f4 fab6 	bl	800020c <__addsf3>
 800bca0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bca2:	6060      	str	r0, [r4, #4]
 800bca4:	9404      	str	r4, [sp, #16]
 800bca6:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800bcaa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bcac:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	f7f4 fbb3 	bl	800041c <__aeabi_fmul>
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4680      	mov	r8, r0
 800bcba:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bcbc:	f7f4 fbae 	bl	800041c <__aeabi_fmul>
 800bcc0:	4601      	mov	r1, r0
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	f7f4 faa2 	bl	800020c <__addsf3>
 800bcc8:	9f01      	ldr	r7, [sp, #4]
 800bcca:	4621      	mov	r1, r4
 800bccc:	f847 0c08 	str.w	r0, [r7, #-8]
 800bcd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bcd2:	f7f4 fba3 	bl	800041c <__aeabi_fmul>
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4680      	mov	r8, r0
 800bcda:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bcdc:	f7f4 fb9e 	bl	800041c <__aeabi_fmul>
 800bce0:	4601      	mov	r1, r0
 800bce2:	4640      	mov	r0, r8
 800bce4:	f7f4 fa90 	bl	8000208 <__aeabi_fsub>
 800bce8:	4629      	mov	r1, r5
 800bcea:	9701      	str	r7, [sp, #4]
 800bcec:	f847 0c04 	str.w	r0, [r7, #-4]
 800bcf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bcf2:	f7f4 fb93 	bl	800041c <__aeabi_fmul>
 800bcf6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f7f4 fb8d 	bl	800041c <__aeabi_fmul>
 800bd02:	4601      	mov	r1, r0
 800bd04:	4640      	mov	r0, r8
 800bd06:	f7f4 fa7f 	bl	8000208 <__aeabi_fsub>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	f8ca 0008 	str.w	r0, [sl, #8]
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7f4 fb83 	bl	800041c <__aeabi_fmul>
 800bd16:	4621      	mov	r1, r4
 800bd18:	4605      	mov	r5, r0
 800bd1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd1c:	f7f4 fb7e 	bl	800041c <__aeabi_fmul>
 800bd20:	4601      	mov	r1, r0
 800bd22:	4628      	mov	r0, r5
 800bd24:	f7f4 fa72 	bl	800020c <__addsf3>
 800bd28:	9908      	ldr	r1, [sp, #32]
 800bd2a:	f8ca 0004 	str.w	r0, [sl, #4]
 800bd2e:	f851 4c10 	ldr.w	r4, [r1, #-16]
 800bd32:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 800bd36:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd38:	4621      	mov	r1, r4
 800bd3a:	f7f4 fb6f 	bl	800041c <__aeabi_fmul>
 800bd3e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800bd42:	4607      	mov	r7, r0
 800bd44:	4629      	mov	r1, r5
 800bd46:	4640      	mov	r0, r8
 800bd48:	f7f4 fb68 	bl	800041c <__aeabi_fmul>
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f7f4 fa5c 	bl	800020c <__addsf3>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	4621      	mov	r1, r4
 800bd58:	f843 0c08 	str.w	r0, [r3, #-8]
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	f7f4 fb5d 	bl	800041c <__aeabi_fmul>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4607      	mov	r7, r0
 800bd66:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd68:	f7f4 fb58 	bl	800041c <__aeabi_fmul>
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	4638      	mov	r0, r7
 800bd70:	f7f4 fa4a 	bl	8000208 <__aeabi_fsub>
 800bd74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd76:	9903      	ldr	r1, [sp, #12]
 800bd78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd7c:	f841 0c04 	str.w	r0, [r1, #-4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	4621      	mov	r1, r4
 800bd84:	f7f4 fb4a 	bl	800041c <__aeabi_fmul>
 800bd88:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4640      	mov	r0, r8
 800bd92:	f7f4 fb43 	bl	800041c <__aeabi_fmul>
 800bd96:	4601      	mov	r1, r0
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7f4 fa35 	bl	8000208 <__aeabi_fsub>
 800bd9e:	9f02      	ldr	r7, [sp, #8]
 800bda0:	4629      	mov	r1, r5
 800bda2:	60b8      	str	r0, [r7, #8]
 800bda4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bda6:	f7f4 fb39 	bl	800041c <__aeabi_fmul>
 800bdaa:	4621      	mov	r1, r4
 800bdac:	4605      	mov	r5, r0
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f7f4 fb34 	bl	800041c <__aeabi_fmul>
 800bdb4:	4601      	mov	r1, r0
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f7f4 fa26 	bl	8000208 <__aeabi_fsub>
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	9807      	ldr	r0, [sp, #28]
 800bdc0:	9702      	str	r7, [sp, #8]
 800bdc2:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800bdc6:	f850 5c14 	ldr.w	r5, [r0, #-20]
 800bdca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bdcc:	4621      	mov	r1, r4
 800bdce:	f7f4 fb25 	bl	800041c <__aeabi_fmul>
 800bdd2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4640      	mov	r0, r8
 800bddc:	f7f4 fb1e 	bl	800041c <__aeabi_fmul>
 800bde0:	4601      	mov	r1, r0
 800bde2:	4638      	mov	r0, r7
 800bde4:	f7f4 fa12 	bl	800020c <__addsf3>
 800bde8:	4621      	mov	r1, r4
 800bdea:	f849 0c08 	str.w	r0, [r9, #-8]
 800bdee:	4640      	mov	r0, r8
 800bdf0:	f7f4 fb14 	bl	800041c <__aeabi_fmul>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bdfa:	f7f4 fb0f 	bl	800041c <__aeabi_fmul>
 800bdfe:	4601      	mov	r1, r0
 800be00:	4638      	mov	r0, r7
 800be02:	f7f4 fa01 	bl	8000208 <__aeabi_fsub>
 800be06:	4629      	mov	r1, r5
 800be08:	f849 0c04 	str.w	r0, [r9, #-4]
 800be0c:	4630      	mov	r0, r6
 800be0e:	f7f4 fb05 	bl	800041c <__aeabi_fmul>
 800be12:	4621      	mov	r1, r4
 800be14:	4607      	mov	r7, r0
 800be16:	4658      	mov	r0, fp
 800be18:	f7f4 fb00 	bl	800041c <__aeabi_fmul>
 800be1c:	4601      	mov	r1, r0
 800be1e:	4638      	mov	r0, r7
 800be20:	f7f4 f9f2 	bl	8000208 <__aeabi_fsub>
 800be24:	9f06      	ldr	r7, [sp, #24]
 800be26:	4629      	mov	r1, r5
 800be28:	60b8      	str	r0, [r7, #8]
 800be2a:	4658      	mov	r0, fp
 800be2c:	f7f4 faf6 	bl	800041c <__aeabi_fmul>
 800be30:	4621      	mov	r1, r4
 800be32:	4605      	mov	r5, r0
 800be34:	4630      	mov	r0, r6
 800be36:	f7f4 faf1 	bl	800041c <__aeabi_fmul>
 800be3a:	4601      	mov	r1, r0
 800be3c:	4628      	mov	r0, r5
 800be3e:	f7f4 f9e5 	bl	800020c <__addsf3>
 800be42:	9c04      	ldr	r4, [sp, #16]
 800be44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	9e05      	ldr	r6, [sp, #20]
 800be4a:	9903      	ldr	r1, [sp, #12]
 800be4c:	3c08      	subs	r4, #8
 800be4e:	9404      	str	r4, [sp, #16]
 800be50:	f102 0408 	add.w	r4, r2, #8
 800be54:	9a08      	ldr	r2, [sp, #32]
 800be56:	9409      	str	r4, [sp, #36]	; 0x24
 800be58:	3210      	adds	r2, #16
 800be5a:	461c      	mov	r4, r3
 800be5c:	9208      	str	r2, [sp, #32]
 800be5e:	3608      	adds	r6, #8
 800be60:	f101 0208 	add.w	r2, r1, #8
 800be64:	3408      	adds	r4, #8
 800be66:	9203      	str	r2, [sp, #12]
 800be68:	9605      	str	r6, [sp, #20]
 800be6a:	9401      	str	r4, [sp, #4]
 800be6c:	9d02      	ldr	r5, [sp, #8]
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	f1a5 0208 	sub.w	r2, r5, #8
 800be76:	9202      	str	r2, [sp, #8]
 800be78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be7a:	3318      	adds	r3, #24
 800be7c:	9307      	str	r3, [sp, #28]
 800be7e:	3a01      	subs	r2, #1
 800be80:	f1a7 0308 	sub.w	r3, r7, #8
 800be84:	f1aa 0a08 	sub.w	sl, sl, #8
 800be88:	f109 0908 	add.w	r9, r9, #8
 800be8c:	9306      	str	r3, [sp, #24]
 800be8e:	f47f ae30 	bne.w	800baf2 <arm_cfft_radix8by4_f32+0x18a>
 800be92:	9925      	ldr	r1, [sp, #148]	; 0x94
 800be94:	9822      	ldr	r0, [sp, #136]	; 0x88
 800be96:	00cb      	lsls	r3, r1, #3
 800be98:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800be9c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800bea0:	9122      	str	r1, [sp, #136]	; 0x88
 800bea2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bea4:	4419      	add	r1, r3
 800bea6:	911c      	str	r1, [sp, #112]	; 0x70
 800bea8:	9921      	ldr	r1, [sp, #132]	; 0x84
 800beaa:	4419      	add	r1, r3
 800beac:	9121      	str	r1, [sp, #132]	; 0x84
 800beae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800beb0:	4419      	add	r1, r3
 800beb2:	911e      	str	r1, [sp, #120]	; 0x78
 800beb4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800beb6:	4419      	add	r1, r3
 800beb8:	911d      	str	r1, [sp, #116]	; 0x74
 800beba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800bebc:	4419      	add	r1, r3
 800bebe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bec0:	911b      	str	r1, [sp, #108]	; 0x6c
 800bec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bec6:	9320      	str	r3, [sp, #128]	; 0x80
 800bec8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800beca:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800becc:	6834      	ldr	r4, [r6, #0]
 800bece:	683d      	ldr	r5, [r7, #0]
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 f99a 	bl	800020c <__addsf3>
 800bed8:	4629      	mov	r1, r5
 800beda:	9001      	str	r0, [sp, #4]
 800bedc:	4620      	mov	r0, r4
 800bede:	f7f4 f993 	bl	8000208 <__aeabi_fsub>
 800bee2:	6874      	ldr	r4, [r6, #4]
 800bee4:	687d      	ldr	r5, [r7, #4]
 800bee6:	961c      	str	r6, [sp, #112]	; 0x70
 800bee8:	4683      	mov	fp, r0
 800beea:	4629      	mov	r1, r5
 800beec:	4620      	mov	r0, r4
 800beee:	971d      	str	r7, [sp, #116]	; 0x74
 800bef0:	f7f4 f98c 	bl	800020c <__addsf3>
 800bef4:	4629      	mov	r1, r5
 800bef6:	4681      	mov	r9, r0
 800bef8:	4620      	mov	r0, r4
 800befa:	f7f4 f985 	bl	8000208 <__aeabi_fsub>
 800befe:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bf00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf02:	6867      	ldr	r7, [r4, #4]
 800bf04:	685e      	ldr	r6, [r3, #4]
 800bf06:	4682      	mov	sl, r0
 800bf08:	4659      	mov	r1, fp
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f7f4 f97e 	bl	800020c <__addsf3>
 800bf10:	4631      	mov	r1, r6
 800bf12:	f7f4 f979 	bl	8000208 <__aeabi_fsub>
 800bf16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bf18:	6825      	ldr	r5, [r4, #0]
 800bf1a:	941e      	str	r4, [sp, #120]	; 0x78
 800bf1c:	6814      	ldr	r4, [r2, #0]
 800bf1e:	9002      	str	r0, [sp, #8]
 800bf20:	4629      	mov	r1, r5
 800bf22:	4650      	mov	r0, sl
 800bf24:	f7f4 f970 	bl	8000208 <__aeabi_fsub>
 800bf28:	4621      	mov	r1, r4
 800bf2a:	f7f4 f96f 	bl	800020c <__addsf3>
 800bf2e:	4629      	mov	r1, r5
 800bf30:	4680      	mov	r8, r0
 800bf32:	9801      	ldr	r0, [sp, #4]
 800bf34:	f7f4 f968 	bl	8000208 <__aeabi_fsub>
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f7f4 f965 	bl	8000208 <__aeabi_fsub>
 800bf3e:	4639      	mov	r1, r7
 800bf40:	9003      	str	r0, [sp, #12]
 800bf42:	4648      	mov	r0, r9
 800bf44:	f7f4 f960 	bl	8000208 <__aeabi_fsub>
 800bf48:	4631      	mov	r1, r6
 800bf4a:	f7f4 f95d 	bl	8000208 <__aeabi_fsub>
 800bf4e:	4639      	mov	r1, r7
 800bf50:	9004      	str	r0, [sp, #16]
 800bf52:	4658      	mov	r0, fp
 800bf54:	f7f4 f958 	bl	8000208 <__aeabi_fsub>
 800bf58:	4631      	mov	r1, r6
 800bf5a:	f7f4 f957 	bl	800020c <__addsf3>
 800bf5e:	4651      	mov	r1, sl
 800bf60:	4606      	mov	r6, r0
 800bf62:	4628      	mov	r0, r5
 800bf64:	f7f4 f952 	bl	800020c <__addsf3>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f7f4 f94d 	bl	8000208 <__aeabi_fsub>
 800bf6e:	9901      	ldr	r1, [sp, #4]
 800bf70:	4682      	mov	sl, r0
 800bf72:	4628      	mov	r0, r5
 800bf74:	f7f4 f94a 	bl	800020c <__addsf3>
 800bf78:	4621      	mov	r1, r4
 800bf7a:	f7f4 f947 	bl	800020c <__addsf3>
 800bf7e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800bf80:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bf82:	6028      	str	r0, [r5, #0]
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	4648      	mov	r0, r9
 800bf88:	f7f4 f940 	bl	800020c <__addsf3>
 800bf8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf8e:	6859      	ldr	r1, [r3, #4]
 800bf90:	f7f4 f93c 	bl	800020c <__addsf3>
 800bf94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf96:	6068      	str	r0, [r5, #4]
 800bf98:	6815      	ldr	r5, [r2, #0]
 800bf9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bf9e:	6854      	ldr	r4, [r2, #4]
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4658      	mov	r0, fp
 800bfa4:	f7f4 fa3a 	bl	800041c <__aeabi_fmul>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4681      	mov	r9, r0
 800bfac:	4640      	mov	r0, r8
 800bfae:	f7f4 fa35 	bl	800041c <__aeabi_fmul>
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	4648      	mov	r0, r9
 800bfb6:	f7f4 f929 	bl	800020c <__addsf3>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	6038      	str	r0, [r7, #0]
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	f7f4 fa2c 	bl	800041c <__aeabi_fmul>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	4658      	mov	r0, fp
 800bfca:	f7f4 fa27 	bl	800041c <__aeabi_fmul>
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f7f4 f919 	bl	8000208 <__aeabi_fsub>
 800bfd6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6815      	ldr	r5, [r2, #0]
 800bfdc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bfe0:	6854      	ldr	r4, [r2, #4]
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	4658      	mov	r0, fp
 800bfe6:	f7f4 fa19 	bl	800041c <__aeabi_fmul>
 800bfea:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bfee:	4680      	mov	r8, r0
 800bff0:	4621      	mov	r1, r4
 800bff2:	4648      	mov	r0, r9
 800bff4:	f7f4 fa12 	bl	800041c <__aeabi_fmul>
 800bff8:	4601      	mov	r1, r0
 800bffa:	4640      	mov	r0, r8
 800bffc:	f7f4 f906 	bl	800020c <__addsf3>
 800c000:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c002:	4629      	mov	r1, r5
 800c004:	6038      	str	r0, [r7, #0]
 800c006:	4648      	mov	r0, r9
 800c008:	f7f4 fa08 	bl	800041c <__aeabi_fmul>
 800c00c:	4621      	mov	r1, r4
 800c00e:	4605      	mov	r5, r0
 800c010:	4658      	mov	r0, fp
 800c012:	f7f4 fa03 	bl	800041c <__aeabi_fmul>
 800c016:	4601      	mov	r1, r0
 800c018:	4628      	mov	r0, r5
 800c01a:	f7f4 f8f5 	bl	8000208 <__aeabi_fsub>
 800c01e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	6815      	ldr	r5, [r2, #0]
 800c024:	6854      	ldr	r4, [r2, #4]
 800c026:	4629      	mov	r1, r5
 800c028:	4630      	mov	r0, r6
 800c02a:	f7f4 f9f7 	bl	800041c <__aeabi_fmul>
 800c02e:	4621      	mov	r1, r4
 800c030:	4607      	mov	r7, r0
 800c032:	4650      	mov	r0, sl
 800c034:	f7f4 f9f2 	bl	800041c <__aeabi_fmul>
 800c038:	4601      	mov	r1, r0
 800c03a:	4638      	mov	r0, r7
 800c03c:	f7f4 f8e6 	bl	800020c <__addsf3>
 800c040:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c042:	4629      	mov	r1, r5
 800c044:	6038      	str	r0, [r7, #0]
 800c046:	4650      	mov	r0, sl
 800c048:	f7f4 f9e8 	bl	800041c <__aeabi_fmul>
 800c04c:	4621      	mov	r1, r4
 800c04e:	4605      	mov	r5, r0
 800c050:	4630      	mov	r0, r6
 800c052:	f7f4 f9e3 	bl	800041c <__aeabi_fmul>
 800c056:	4601      	mov	r1, r0
 800c058:	4628      	mov	r0, r5
 800c05a:	f7f4 f8d5 	bl	8000208 <__aeabi_fsub>
 800c05e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 800c062:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	686a      	ldr	r2, [r5, #4]
 800c068:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c06a:	4621      	mov	r1, r4
 800c06c:	2304      	movs	r3, #4
 800c06e:	f000 f973 	bl	800c358 <arm_radix8_butterfly_f32>
 800c072:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c074:	686a      	ldr	r2, [r5, #4]
 800c076:	4621      	mov	r1, r4
 800c078:	2304      	movs	r3, #4
 800c07a:	f000 f96d 	bl	800c358 <arm_radix8_butterfly_f32>
 800c07e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c080:	686a      	ldr	r2, [r5, #4]
 800c082:	4621      	mov	r1, r4
 800c084:	2304      	movs	r3, #4
 800c086:	f000 f967 	bl	800c358 <arm_radix8_butterfly_f32>
 800c08a:	686a      	ldr	r2, [r5, #4]
 800c08c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c08e:	4621      	mov	r1, r4
 800c090:	2304      	movs	r3, #4
 800c092:	b027      	add	sp, #156	; 0x9c
 800c094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c098:	f000 b95e 	b.w	800c358 <arm_radix8_butterfly_f32>

0800c09c <arm_cfft_f32>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	2a01      	cmp	r2, #1
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	4617      	mov	r7, r2
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	4698      	mov	r8, r3
 800c0aa:	8805      	ldrh	r5, [r0, #0]
 800c0ac:	d05a      	beq.n	800c164 <arm_cfft_f32+0xc8>
 800c0ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c0b2:	d064      	beq.n	800c17e <arm_cfft_f32+0xe2>
 800c0b4:	d916      	bls.n	800c0e4 <arm_cfft_f32+0x48>
 800c0b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c0ba:	d01a      	beq.n	800c0f2 <arm_cfft_f32+0x56>
 800c0bc:	d94b      	bls.n	800c156 <arm_cfft_f32+0xba>
 800c0be:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c0c2:	d05c      	beq.n	800c17e <arm_cfft_f32+0xe2>
 800c0c4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c0c8:	d105      	bne.n	800c0d6 <arm_cfft_f32+0x3a>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	6872      	ldr	r2, [r6, #4]
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 f941 	bl	800c358 <arm_radix8_butterfly_f32>
 800c0d6:	f1b8 0f00 	cmp.w	r8, #0
 800c0da:	d111      	bne.n	800c100 <arm_cfft_f32+0x64>
 800c0dc:	2f01      	cmp	r7, #1
 800c0de:	d016      	beq.n	800c10e <arm_cfft_f32+0x72>
 800c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e4:	2d20      	cmp	r5, #32
 800c0e6:	d04a      	beq.n	800c17e <arm_cfft_f32+0xe2>
 800c0e8:	d939      	bls.n	800c15e <arm_cfft_f32+0xc2>
 800c0ea:	2d40      	cmp	r5, #64	; 0x40
 800c0ec:	d0ed      	beq.n	800c0ca <arm_cfft_f32+0x2e>
 800c0ee:	2d80      	cmp	r5, #128	; 0x80
 800c0f0:	d1f1      	bne.n	800c0d6 <arm_cfft_f32+0x3a>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7ff fae1 	bl	800b6bc <arm_cfft_radix8by2_f32>
 800c0fa:	f1b8 0f00 	cmp.w	r8, #0
 800c0fe:	d0ed      	beq.n	800c0dc <arm_cfft_f32+0x40>
 800c100:	68b2      	ldr	r2, [r6, #8]
 800c102:	89b1      	ldrh	r1, [r6, #12]
 800c104:	4620      	mov	r0, r4
 800c106:	f000 f843 	bl	800c190 <arm_bitreversal_32>
 800c10a:	2f01      	cmp	r7, #1
 800c10c:	d1e8      	bne.n	800c0e0 <arm_cfft_f32+0x44>
 800c10e:	4628      	mov	r0, r5
 800c110:	f7f4 f92c 	bl	800036c <__aeabi_ui2f>
 800c114:	4601      	mov	r1, r0
 800c116:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c11a:	f7f4 fa33 	bl	8000584 <__aeabi_fdiv>
 800c11e:	4607      	mov	r7, r0
 800c120:	2d00      	cmp	r5, #0
 800c122:	d0dd      	beq.n	800c0e0 <arm_cfft_f32+0x44>
 800c124:	3408      	adds	r4, #8
 800c126:	2600      	movs	r6, #0
 800c128:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 f975 	bl	800041c <__aeabi_fmul>
 800c132:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c136:	f844 0c08 	str.w	r0, [r4, #-8]
 800c13a:	4639      	mov	r1, r7
 800c13c:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 800c140:	f7f4 f96c 	bl	800041c <__aeabi_fmul>
 800c144:	3601      	adds	r6, #1
 800c146:	42b5      	cmp	r5, r6
 800c148:	f844 0c04 	str.w	r0, [r4, #-4]
 800c14c:	f104 0408 	add.w	r4, r4, #8
 800c150:	d1ea      	bne.n	800c128 <arm_cfft_f32+0x8c>
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c156:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c15a:	d0b6      	beq.n	800c0ca <arm_cfft_f32+0x2e>
 800c15c:	e7bb      	b.n	800c0d6 <arm_cfft_f32+0x3a>
 800c15e:	2d10      	cmp	r5, #16
 800c160:	d0c7      	beq.n	800c0f2 <arm_cfft_f32+0x56>
 800c162:	e7b8      	b.n	800c0d6 <arm_cfft_f32+0x3a>
 800c164:	3104      	adds	r1, #4
 800c166:	b17d      	cbz	r5, 800c188 <arm_cfft_f32+0xec>
 800c168:	2300      	movs	r3, #0
 800c16a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800c16e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800c172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c176:	3301      	adds	r3, #1
 800c178:	429d      	cmp	r5, r3
 800c17a:	d1f6      	bne.n	800c16a <arm_cfft_f32+0xce>
 800c17c:	e797      	b.n	800c0ae <arm_cfft_f32+0x12>
 800c17e:	4621      	mov	r1, r4
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff fbf1 	bl	800b968 <arm_cfft_radix8by4_f32>
 800c186:	e7a6      	b.n	800c0d6 <arm_cfft_f32+0x3a>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0a9      	beq.n	800c0e0 <arm_cfft_f32+0x44>
 800c18c:	e7b8      	b.n	800c100 <arm_cfft_f32+0x64>
 800c18e:	bf00      	nop

0800c190 <arm_bitreversal_32>:
 800c190:	b1e9      	cbz	r1, 800c1ce <arm_bitreversal_32+0x3e>
 800c192:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c194:	2500      	movs	r5, #0
 800c196:	f102 0e02 	add.w	lr, r2, #2
 800c19a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c19e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c1a2:	08a4      	lsrs	r4, r4, #2
 800c1a4:	089b      	lsrs	r3, r3, #2
 800c1a6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c1aa:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c1ae:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c1b2:	00a6      	lsls	r6, r4, #2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	1d34      	adds	r4, r6, #4
 800c1be:	3502      	adds	r5, #2
 800c1c0:	58c6      	ldr	r6, [r0, r3]
 800c1c2:	5907      	ldr	r7, [r0, r4]
 800c1c4:	50c7      	str	r7, [r0, r3]
 800c1c6:	428d      	cmp	r5, r1
 800c1c8:	5106      	str	r6, [r0, r4]
 800c1ca:	d3e6      	bcc.n	800c19a <arm_bitreversal_32+0xa>
 800c1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ce:	4770      	bx	lr

0800c1d0 <arm_cmplx_mag_f32>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	ea5f 0b92 	movs.w	fp, r2, lsr #2
 800c1da:	9201      	str	r2, [sp, #4]
 800c1dc:	4607      	mov	r7, r0
 800c1de:	4688      	mov	r8, r1
 800c1e0:	d07b      	beq.n	800c2da <arm_cmplx_mag_f32+0x10a>
 800c1e2:	f100 0420 	add.w	r4, r0, #32
 800c1e6:	f101 0510 	add.w	r5, r1, #16
 800c1ea:	465e      	mov	r6, fp
 800c1ec:	f854 1c20 	ldr.w	r1, [r4, #-32]
 800c1f0:	f854 ac1c 	ldr.w	sl, [r4, #-28]
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	f7f4 f911 	bl	800041c <__aeabi_fmul>
 800c1fa:	4651      	mov	r1, sl
 800c1fc:	4681      	mov	r9, r0
 800c1fe:	4650      	mov	r0, sl
 800c200:	f7f4 f90c 	bl	800041c <__aeabi_fmul>
 800c204:	4601      	mov	r1, r0
 800c206:	4648      	mov	r0, r9
 800c208:	f7f4 f800 	bl	800020c <__addsf3>
 800c20c:	2100      	movs	r1, #0
 800c20e:	4681      	mov	r9, r0
 800c210:	f7f4 fab6 	bl	8000780 <__aeabi_fcmpge>
 800c214:	2800      	cmp	r0, #0
 800c216:	f000 808b 	beq.w	800c330 <arm_cmplx_mag_f32+0x160>
 800c21a:	4648      	mov	r0, r9
 800c21c:	f000 fea2 	bl	800cf64 <sqrtf>
 800c220:	f845 0c10 	str.w	r0, [r5, #-16]
 800c224:	f854 1c18 	ldr.w	r1, [r4, #-24]
 800c228:	f854 ac14 	ldr.w	sl, [r4, #-20]
 800c22c:	4608      	mov	r0, r1
 800c22e:	f7f4 f8f5 	bl	800041c <__aeabi_fmul>
 800c232:	4651      	mov	r1, sl
 800c234:	4681      	mov	r9, r0
 800c236:	4650      	mov	r0, sl
 800c238:	f7f4 f8f0 	bl	800041c <__aeabi_fmul>
 800c23c:	4601      	mov	r1, r0
 800c23e:	4648      	mov	r0, r9
 800c240:	f7f3 ffe4 	bl	800020c <__addsf3>
 800c244:	2100      	movs	r1, #0
 800c246:	4681      	mov	r9, r0
 800c248:	f7f4 fa9a 	bl	8000780 <__aeabi_fcmpge>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d07b      	beq.n	800c348 <arm_cmplx_mag_f32+0x178>
 800c250:	4648      	mov	r0, r9
 800c252:	f000 fe87 	bl	800cf64 <sqrtf>
 800c256:	f845 0c0c 	str.w	r0, [r5, #-12]
 800c25a:	f854 1c10 	ldr.w	r1, [r4, #-16]
 800c25e:	f854 ac0c 	ldr.w	sl, [r4, #-12]
 800c262:	4608      	mov	r0, r1
 800c264:	f7f4 f8da 	bl	800041c <__aeabi_fmul>
 800c268:	4651      	mov	r1, sl
 800c26a:	4681      	mov	r9, r0
 800c26c:	4650      	mov	r0, sl
 800c26e:	f7f4 f8d5 	bl	800041c <__aeabi_fmul>
 800c272:	4601      	mov	r1, r0
 800c274:	4648      	mov	r0, r9
 800c276:	f7f3 ffc9 	bl	800020c <__addsf3>
 800c27a:	2100      	movs	r1, #0
 800c27c:	4681      	mov	r9, r0
 800c27e:	f7f4 fa7f 	bl	8000780 <__aeabi_fcmpge>
 800c282:	2800      	cmp	r0, #0
 800c284:	d05c      	beq.n	800c340 <arm_cmplx_mag_f32+0x170>
 800c286:	4648      	mov	r0, r9
 800c288:	f000 fe6c 	bl	800cf64 <sqrtf>
 800c28c:	f845 0c08 	str.w	r0, [r5, #-8]
 800c290:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800c294:	f854 ac04 	ldr.w	sl, [r4, #-4]
 800c298:	4608      	mov	r0, r1
 800c29a:	f7f4 f8bf 	bl	800041c <__aeabi_fmul>
 800c29e:	4651      	mov	r1, sl
 800c2a0:	4681      	mov	r9, r0
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7f4 f8ba 	bl	800041c <__aeabi_fmul>
 800c2a8:	4601      	mov	r1, r0
 800c2aa:	4648      	mov	r0, r9
 800c2ac:	f7f3 ffae 	bl	800020c <__addsf3>
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	4681      	mov	r9, r0
 800c2b4:	f7f4 fa64 	bl	8000780 <__aeabi_fcmpge>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d03d      	beq.n	800c338 <arm_cmplx_mag_f32+0x168>
 800c2bc:	4648      	mov	r0, r9
 800c2be:	f000 fe51 	bl	800cf64 <sqrtf>
 800c2c2:	f845 0c04 	str.w	r0, [r5, #-4]
 800c2c6:	3e01      	subs	r6, #1
 800c2c8:	f104 0420 	add.w	r4, r4, #32
 800c2cc:	f105 0510 	add.w	r5, r5, #16
 800c2d0:	d18c      	bne.n	800c1ec <arm_cmplx_mag_f32+0x1c>
 800c2d2:	eb07 174b 	add.w	r7, r7, fp, lsl #5
 800c2d6:	eb08 180b 	add.w	r8, r8, fp, lsl #4
 800c2da:	9b01      	ldr	r3, [sp, #4]
 800c2dc:	f013 0a03 	ands.w	sl, r3, #3
 800c2e0:	d023      	beq.n	800c32a <arm_cmplx_mag_f32+0x15a>
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
 800c2ea:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800c2ee:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	f7f4 f892 	bl	800041c <__aeabi_fmul>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f7f4 f88d 	bl	800041c <__aeabi_fmul>
 800c302:	4601      	mov	r1, r0
 800c304:	4620      	mov	r0, r4
 800c306:	f7f3 ff81 	bl	800020c <__addsf3>
 800c30a:	2100      	movs	r1, #0
 800c30c:	4604      	mov	r4, r0
 800c30e:	f108 0804 	add.w	r8, r8, #4
 800c312:	f7f4 fa35 	bl	8000780 <__aeabi_fcmpge>
 800c316:	b1d8      	cbz	r0, 800c350 <arm_cmplx_mag_f32+0x180>
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 fe23 	bl	800cf64 <sqrtf>
 800c31e:	f848 0c04 	str.w	r0, [r8, #-4]
 800c322:	45d0      	cmp	r8, sl
 800c324:	f107 0708 	add.w	r7, r7, #8
 800c328:	d1df      	bne.n	800c2ea <arm_cmplx_mag_f32+0x11a>
 800c32a:	b003      	add	sp, #12
 800c32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c330:	2300      	movs	r3, #0
 800c332:	f845 3c10 	str.w	r3, [r5, #-16]
 800c336:	e775      	b.n	800c224 <arm_cmplx_mag_f32+0x54>
 800c338:	2300      	movs	r3, #0
 800c33a:	f845 3c04 	str.w	r3, [r5, #-4]
 800c33e:	e7c2      	b.n	800c2c6 <arm_cmplx_mag_f32+0xf6>
 800c340:	2300      	movs	r3, #0
 800c342:	f845 3c08 	str.w	r3, [r5, #-8]
 800c346:	e7a3      	b.n	800c290 <arm_cmplx_mag_f32+0xc0>
 800c348:	2300      	movs	r3, #0
 800c34a:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c34e:	e784      	b.n	800c25a <arm_cmplx_mag_f32+0x8a>
 800c350:	f848 6c04 	str.w	r6, [r8, #-4]
 800c354:	e7e5      	b.n	800c322 <arm_cmplx_mag_f32+0x152>
 800c356:	bf00      	nop

0800c358 <arm_radix8_butterfly_f32>:
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	b0b9      	sub	sp, #228	; 0xe4
 800c35e:	e9cd 3236 	strd	r3, r2, [sp, #216]	; 0xd8
 800c362:	4603      	mov	r3, r0
 800c364:	3304      	adds	r3, #4
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	4613      	mov	r3, r2
 800c36a:	3304      	adds	r3, #4
 800c36c:	9116      	str	r1, [sp, #88]	; 0x58
 800c36e:	9334      	str	r3, [sp, #208]	; 0xd0
 800c370:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c372:	9000      	str	r0, [sp, #0]
 800c374:	9118      	str	r1, [sp, #96]	; 0x60
 800c376:	08df      	lsrs	r7, r3, #3
 800c378:	9900      	ldr	r1, [sp, #0]
 800c37a:	00fa      	lsls	r2, r7, #3
 800c37c:	4411      	add	r1, r2
 800c37e:	ebc7 7347 	rsb	r3, r7, r7, lsl #29
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	9107      	str	r1, [sp, #28]
 800c386:	4411      	add	r1, r2
 800c388:	911f      	str	r1, [sp, #124]	; 0x7c
 800c38a:	4419      	add	r1, r3
 800c38c:	911d      	str	r1, [sp, #116]	; 0x74
 800c38e:	4411      	add	r1, r2
 800c390:	911b      	str	r1, [sp, #108]	; 0x6c
 800c392:	4419      	add	r1, r3
 800c394:	188d      	adds	r5, r1, r2
 800c396:	18ec      	adds	r4, r5, r3
 800c398:	eb04 0e02 	add.w	lr, r4, r2
 800c39c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c39e:	eb0e 0103 	add.w	r1, lr, r3
 800c3a2:	1888      	adds	r0, r1, r2
 800c3a4:	9020      	str	r0, [sp, #128]	; 0x80
 800c3a6:	4418      	add	r0, r3
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	9226      	str	r2, [sp, #152]	; 0x98
 800c3ac:	1882      	adds	r2, r0, r2
 800c3ae:	901e      	str	r0, [sp, #120]	; 0x78
 800c3b0:	18d0      	adds	r0, r2, r3
 800c3b2:	900e      	str	r0, [sp, #56]	; 0x38
 800c3b4:	4430      	add	r0, r6
 800c3b6:	4403      	add	r3, r0
 800c3b8:	199e      	adds	r6, r3, r6
 800c3ba:	3204      	adds	r2, #4
 800c3bc:	3404      	adds	r4, #4
 800c3be:	901c      	str	r0, [sp, #112]	; 0x70
 800c3c0:	9215      	str	r2, [sp, #84]	; 0x54
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	9412      	str	r4, [sp, #72]	; 0x48
 800c3c8:	9219      	str	r2, [sp, #100]	; 0x64
 800c3ca:	f10e 0404 	add.w	r4, lr, #4
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c3d2:	9410      	str	r4, [sp, #64]	; 0x40
 800c3d4:	3204      	adds	r2, #4
 800c3d6:	1d0c      	adds	r4, r1, #4
 800c3d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3da:	9621      	str	r6, [sp, #132]	; 0x84
 800c3dc:	9211      	str	r2, [sp, #68]	; 0x44
 800c3de:	463e      	mov	r6, r7
 800c3e0:	1d02      	adds	r2, r0, #4
 800c3e2:	9635      	str	r6, [sp, #212]	; 0xd4
 800c3e4:	9213      	str	r2, [sp, #76]	; 0x4c
 800c3e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c3ea:	1d0a      	adds	r2, r1, #4
 800c3ec:	9206      	str	r2, [sp, #24]
 800c3ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3f0:	941a      	str	r4, [sp, #104]	; 0x68
 800c3f2:	00f2      	lsls	r2, r6, #3
 800c3f4:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 800c3f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800c3fa:	0131      	lsls	r1, r6, #4
 800c3fc:	3504      	adds	r5, #4
 800c3fe:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	2600      	movs	r6, #0
 800c406:	9514      	str	r5, [sp, #80]	; 0x50
 800c408:	9125      	str	r1, [sp, #148]	; 0x94
 800c40a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c40c:	46b2      	mov	sl, r6
 800c40e:	4691      	mov	r9, r2
 800c410:	46c3      	mov	fp, r8
 800c412:	9b07      	ldr	r3, [sp, #28]
 800c414:	9f00      	ldr	r7, [sp, #0]
 800c416:	f853 6009 	ldr.w	r6, [r3, r9]
 800c41a:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800c41e:	4631      	mov	r1, r6
 800c420:	4628      	mov	r0, r5
 800c422:	f7f3 fef3 	bl	800020c <__addsf3>
 800c426:	4631      	mov	r1, r6
 800c428:	4604      	mov	r4, r0
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7f3 feec 	bl	8000208 <__aeabi_fsub>
 800c430:	9b07      	ldr	r3, [sp, #28]
 800c432:	9700      	str	r7, [sp, #0]
 800c434:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800c438:	f857 700b 	ldr.w	r7, [r7, fp]
 800c43c:	9005      	str	r0, [sp, #20]
 800c43e:	4639      	mov	r1, r7
 800c440:	4630      	mov	r0, r6
 800c442:	f7f3 fee3 	bl	800020c <__addsf3>
 800c446:	4639      	mov	r1, r7
 800c448:	4605      	mov	r5, r0
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7f3 fedc 	bl	8000208 <__aeabi_fsub>
 800c450:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c452:	9008      	str	r0, [sp, #32]
 800c454:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800c458:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c45a:	f852 800b 	ldr.w	r8, [r2, fp]
 800c45e:	4630      	mov	r0, r6
 800c460:	4641      	mov	r1, r8
 800c462:	f7f3 fed3 	bl	800020c <__addsf3>
 800c466:	4641      	mov	r1, r8
 800c468:	4607      	mov	r7, r0
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7f3 fecc 	bl	8000208 <__aeabi_fsub>
 800c470:	9a00      	ldr	r2, [sp, #0]
 800c472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c474:	f852 8009 	ldr.w	r8, [r2, r9]
 800c478:	f853 300b 	ldr.w	r3, [r3, fp]
 800c47c:	9009      	str	r0, [sp, #36]	; 0x24
 800c47e:	4619      	mov	r1, r3
 800c480:	4640      	mov	r0, r8
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	f7f3 fec2 	bl	800020c <__addsf3>
 800c488:	9b02      	ldr	r3, [sp, #8]
 800c48a:	4606      	mov	r6, r0
 800c48c:	4619      	mov	r1, r3
 800c48e:	4640      	mov	r0, r8
 800c490:	f7f3 feba 	bl	8000208 <__aeabi_fsub>
 800c494:	4639      	mov	r1, r7
 800c496:	900a      	str	r0, [sp, #40]	; 0x28
 800c498:	4620      	mov	r0, r4
 800c49a:	f7f3 feb5 	bl	8000208 <__aeabi_fsub>
 800c49e:	4639      	mov	r1, r7
 800c4a0:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7f3 feb2 	bl	800020c <__addsf3>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f7f3 feab 	bl	8000208 <__aeabi_fsub>
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	900c      	str	r0, [sp, #48]	; 0x30
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f7f3 fea8 	bl	800020c <__addsf3>
 800c4bc:	4605      	mov	r5, r0
 800c4be:	4601      	mov	r1, r0
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7f3 fea3 	bl	800020c <__addsf3>
 800c4c6:	9b00      	ldr	r3, [sp, #0]
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f7f3 fe9a 	bl	8000208 <__aeabi_fsub>
 800c4d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c4d6:	f841 0009 	str.w	r0, [r1, r9]
 800c4da:	9f01      	ldr	r7, [sp, #4]
 800c4dc:	9906      	ldr	r1, [sp, #24]
 800c4de:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800c4e2:	f851 6009 	ldr.w	r6, [r1, r9]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	f7f3 fe8f 	bl	800020c <__addsf3>
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f7f3 fe88 	bl	8000208 <__aeabi_fsub>
 800c4f8:	9906      	ldr	r1, [sp, #24]
 800c4fa:	f857 600b 	ldr.w	r6, [r7, fp]
 800c4fe:	f851 403a 	ldr.w	r4, [r1, sl, lsl #3]
 800c502:	9002      	str	r0, [sp, #8]
 800c504:	4631      	mov	r1, r6
 800c506:	4620      	mov	r0, r4
 800c508:	9701      	str	r7, [sp, #4]
 800c50a:	f7f3 fe7f 	bl	800020c <__addsf3>
 800c50e:	4631      	mov	r1, r6
 800c510:	4680      	mov	r8, r0
 800c512:	4620      	mov	r0, r4
 800c514:	f7f3 fe78 	bl	8000208 <__aeabi_fsub>
 800c518:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c51a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c51c:	f854 403a 	ldr.w	r4, [r4, sl, lsl #3]
 800c520:	f856 600b 	ldr.w	r6, [r6, fp]
 800c524:	900d      	str	r0, [sp, #52]	; 0x34
 800c526:	4631      	mov	r1, r6
 800c528:	4620      	mov	r0, r4
 800c52a:	f7f3 fe6f 	bl	800020c <__addsf3>
 800c52e:	4631      	mov	r1, r6
 800c530:	4607      	mov	r7, r0
 800c532:	4620      	mov	r0, r4
 800c534:	f7f3 fe68 	bl	8000208 <__aeabi_fsub>
 800c538:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c53a:	9c01      	ldr	r4, [sp, #4]
 800c53c:	f851 600b 	ldr.w	r6, [r1, fp]
 800c540:	f854 4009 	ldr.w	r4, [r4, r9]
 800c544:	9003      	str	r0, [sp, #12]
 800c546:	4631      	mov	r1, r6
 800c548:	4620      	mov	r0, r4
 800c54a:	f7f3 fe5f 	bl	800020c <__addsf3>
 800c54e:	4631      	mov	r1, r6
 800c550:	9004      	str	r0, [sp, #16]
 800c552:	4620      	mov	r0, r4
 800c554:	f7f3 fe58 	bl	8000208 <__aeabi_fsub>
 800c558:	4639      	mov	r1, r7
 800c55a:	4606      	mov	r6, r0
 800c55c:	4628      	mov	r0, r5
 800c55e:	f7f3 fe53 	bl	8000208 <__aeabi_fsub>
 800c562:	4639      	mov	r1, r7
 800c564:	4604      	mov	r4, r0
 800c566:	4628      	mov	r0, r5
 800c568:	f7f3 fe50 	bl	800020c <__addsf3>
 800c56c:	9904      	ldr	r1, [sp, #16]
 800c56e:	4607      	mov	r7, r0
 800c570:	4640      	mov	r0, r8
 800c572:	f7f3 fe49 	bl	8000208 <__aeabi_fsub>
 800c576:	9904      	ldr	r1, [sp, #16]
 800c578:	4605      	mov	r5, r0
 800c57a:	4640      	mov	r0, r8
 800c57c:	f7f3 fe46 	bl	800020c <__addsf3>
 800c580:	4680      	mov	r8, r0
 800c582:	4601      	mov	r1, r0
 800c584:	4638      	mov	r0, r7
 800c586:	f7f3 fe41 	bl	800020c <__addsf3>
 800c58a:	9b01      	ldr	r3, [sp, #4]
 800c58c:	4641      	mov	r1, r8
 800c58e:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c592:	4638      	mov	r0, r7
 800c594:	f7f3 fe38 	bl	8000208 <__aeabi_fsub>
 800c598:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c59c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f847 0009 	str.w	r0, [r7, r9]
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	f7f3 fe31 	bl	800020c <__addsf3>
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c5ae:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	f7f3 fe28 	bl	8000208 <__aeabi_fsub>
 800c5b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c5ba:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c5bc:	4639      	mov	r1, r7
 800c5be:	f845 000b 	str.w	r0, [r5, fp]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7f3 fe20 	bl	8000208 <__aeabi_fsub>
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c5cc:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7f3 fe1b 	bl	800020c <__addsf3>
 800c5d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800c5da:	9d08      	ldr	r5, [sp, #32]
 800c5dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c5de:	4641      	mov	r1, r8
 800c5e0:	f844 000b 	str.w	r0, [r4, fp]
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f7f3 fe0f 	bl	8000208 <__aeabi_fsub>
 800c5ea:	4986      	ldr	r1, [pc, #536]	; (800c804 <arm_radix8_butterfly_f32+0x4ac>)
 800c5ec:	f7f3 ff16 	bl	800041c <__aeabi_fmul>
 800c5f0:	4641      	mov	r1, r8
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f7f3 fe09 	bl	800020c <__addsf3>
 800c5fa:	4982      	ldr	r1, [pc, #520]	; (800c804 <arm_radix8_butterfly_f32+0x4ac>)
 800c5fc:	f7f3 ff0e 	bl	800041c <__aeabi_fmul>
 800c600:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800c604:	4605      	mov	r5, r0
 800c606:	4631      	mov	r1, r6
 800c608:	4640      	mov	r0, r8
 800c60a:	f7f3 fdfd 	bl	8000208 <__aeabi_fsub>
 800c60e:	497d      	ldr	r1, [pc, #500]	; (800c804 <arm_radix8_butterfly_f32+0x4ac>)
 800c610:	f7f3 ff04 	bl	800041c <__aeabi_fmul>
 800c614:	4631      	mov	r1, r6
 800c616:	4607      	mov	r7, r0
 800c618:	4640      	mov	r0, r8
 800c61a:	f7f3 fdf7 	bl	800020c <__addsf3>
 800c61e:	4979      	ldr	r1, [pc, #484]	; (800c804 <arm_radix8_butterfly_f32+0x4ac>)
 800c620:	f7f3 fefc 	bl	800041c <__aeabi_fmul>
 800c624:	9e05      	ldr	r6, [sp, #20]
 800c626:	9004      	str	r0, [sp, #16]
 800c628:	4621      	mov	r1, r4
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7f3 fdec 	bl	8000208 <__aeabi_fsub>
 800c630:	4621      	mov	r1, r4
 800c632:	4680      	mov	r8, r0
 800c634:	4630      	mov	r0, r6
 800c636:	f7f3 fde9 	bl	800020c <__addsf3>
 800c63a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c63c:	9005      	str	r0, [sp, #20]
 800c63e:	4629      	mov	r1, r5
 800c640:	4630      	mov	r0, r6
 800c642:	f7f3 fde1 	bl	8000208 <__aeabi_fsub>
 800c646:	4629      	mov	r1, r5
 800c648:	4604      	mov	r4, r0
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7f3 fdde 	bl	800020c <__addsf3>
 800c650:	4639      	mov	r1, r7
 800c652:	4606      	mov	r6, r0
 800c654:	9802      	ldr	r0, [sp, #8]
 800c656:	f7f3 fdd7 	bl	8000208 <__aeabi_fsub>
 800c65a:	4639      	mov	r1, r7
 800c65c:	4605      	mov	r5, r0
 800c65e:	9802      	ldr	r0, [sp, #8]
 800c660:	f7f3 fdd4 	bl	800020c <__addsf3>
 800c664:	9904      	ldr	r1, [sp, #16]
 800c666:	4607      	mov	r7, r0
 800c668:	9803      	ldr	r0, [sp, #12]
 800c66a:	f7f3 fdcd 	bl	8000208 <__aeabi_fsub>
 800c66e:	9904      	ldr	r1, [sp, #16]
 800c670:	9002      	str	r0, [sp, #8]
 800c672:	9803      	ldr	r0, [sp, #12]
 800c674:	f7f3 fdca 	bl	800020c <__addsf3>
 800c678:	4601      	mov	r1, r0
 800c67a:	9003      	str	r0, [sp, #12]
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	f7f3 fdc5 	bl	800020c <__addsf3>
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c686:	4619      	mov	r1, r3
 800c688:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c68c:	9805      	ldr	r0, [sp, #20]
 800c68e:	f7f3 fdbb 	bl	8000208 <__aeabi_fsub>
 800c692:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c694:	9902      	ldr	r1, [sp, #8]
 800c696:	f842 000b 	str.w	r0, [r2, fp]
 800c69a:	4640      	mov	r0, r8
 800c69c:	f7f3 fdb6 	bl	800020c <__addsf3>
 800c6a0:	9a00      	ldr	r2, [sp, #0]
 800c6a2:	9902      	ldr	r1, [sp, #8]
 800c6a4:	f842 000b 	str.w	r0, [r2, fp]
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	f7f3 fdad 	bl	8000208 <__aeabi_fsub>
 800c6ae:	9a00      	ldr	r2, [sp, #0]
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	f842 0009 	str.w	r0, [r2, r9]
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f7f3 fda6 	bl	8000208 <__aeabi_fsub>
 800c6bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7f3 fda1 	bl	800020c <__addsf3>
 800c6ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f842 000b 	str.w	r0, [r2, fp]
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f7f3 fd98 	bl	8000208 <__aeabi_fsub>
 800c6d8:	9f01      	ldr	r7, [sp, #4]
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f847 000b 	str.w	r0, [r7, fp]
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7f3 fd93 	bl	800020c <__addsf3>
 800c6e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c6e8:	f847 0009 	str.w	r0, [r7, r9]
 800c6ec:	449a      	add	sl, r3
 800c6ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6f0:	449b      	add	fp, r3
 800c6f2:	4499      	add	r9, r3
 800c6f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c6f6:	4553      	cmp	r3, sl
 800c6f8:	f63f ae8b 	bhi.w	800c412 <arm_radix8_butterfly_f32+0xba>
 800c6fc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800c6fe:	2b07      	cmp	r3, #7
 800c700:	f240 82dc 	bls.w	800ccbc <arm_radix8_butterfly_f32+0x964>
 800c704:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c706:	015e      	lsls	r6, r3, #5
 800c708:	ebc3 62c3 	rsb	r2, r3, r3, lsl #27
 800c70c:	4431      	add	r1, r6
 800c70e:	0152      	lsls	r2, r2, #5
 800c710:	1888      	adds	r0, r1, r2
 800c712:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
 800c716:	011b      	lsls	r3, r3, #4
 800c718:	902e      	str	r0, [sp, #184]	; 0xb8
 800c71a:	4430      	add	r0, r6
 800c71c:	18c5      	adds	r5, r0, r3
 800c71e:	902d      	str	r0, [sp, #180]	; 0xb4
 800c720:	18e8      	adds	r0, r5, r3
 800c722:	1984      	adds	r4, r0, r6
 800c724:	4422      	add	r2, r4
 800c726:	912f      	str	r1, [sp, #188]	; 0xbc
 800c728:	1991      	adds	r1, r2, r6
 800c72a:	18cf      	adds	r7, r1, r3
 800c72c:	9724      	str	r7, [sp, #144]	; 0x90
 800c72e:	441f      	add	r7, r3
 800c730:	19be      	adds	r6, r7, r6
 800c732:	9723      	str	r7, [sp, #140]	; 0x8c
 800c734:	18f7      	adds	r7, r6, r3
 800c736:	18fb      	adds	r3, r7, r3
 800c738:	9322      	str	r3, [sp, #136]	; 0x88
 800c73a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c73c:	9730      	str	r7, [sp, #192]	; 0xc0
 800c73e:	3308      	adds	r3, #8
 800c740:	9332      	str	r3, [sp, #200]	; 0xc8
 800c742:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c744:	960d      	str	r6, [sp, #52]	; 0x34
 800c746:	469c      	mov	ip, r3
 800c748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c74a:	449c      	add	ip, r3
 800c74c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c74e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800c752:	3304      	adds	r3, #4
 800c754:	9327      	str	r3, [sp, #156]	; 0x9c
 800c756:	463b      	mov	r3, r7
 800c758:	3304      	adds	r3, #4
 800c75a:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800c75c:	932b      	str	r3, [sp, #172]	; 0xac
 800c75e:	1d33      	adds	r3, r6, #4
 800c760:	930b      	str	r3, [sp, #44]	; 0x2c
 800c762:	1d3b      	adds	r3, r7, #4
 800c764:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800c766:	932a      	str	r3, [sp, #168]	; 0xa8
 800c768:	1d3b      	adds	r3, r7, #4
 800c76a:	3204      	adds	r2, #4
 800c76c:	932c      	str	r3, [sp, #176]	; 0xb0
 800c76e:	2301      	movs	r3, #1
 800c770:	3504      	adds	r5, #4
 800c772:	3404      	adds	r4, #4
 800c774:	3004      	adds	r0, #4
 800c776:	9226      	str	r2, [sp, #152]	; 0x98
 800c778:	9331      	str	r3, [sp, #196]	; 0xc4
 800c77a:	1d0a      	adds	r2, r1, #4
 800c77c:	2300      	movs	r3, #0
 800c77e:	950c      	str	r5, [sp, #48]	; 0x30
 800c780:	9428      	str	r4, [sp, #160]	; 0xa0
 800c782:	9029      	str	r0, [sp, #164]	; 0xa4
 800c784:	9225      	str	r2, [sp, #148]	; 0x94
 800c786:	9333      	str	r3, [sp, #204]	; 0xcc
 800c788:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 800c78a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c78c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 800c78e:	441e      	add	r6, r3
 800c790:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800c794:	011d      	lsls	r5, r3, #4
 800c796:	0134      	lsls	r4, r6, #4
 800c798:	597a      	ldr	r2, [r7, r5]
 800c79a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c79c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c79e:	f857 c033 	ldr.w	ip, [r7, r3, lsl #3]
 800c7a2:	5955      	ldr	r5, [r2, r5]
 800c7a4:	951f      	str	r5, [sp, #124]	; 0x7c
 800c7a6:	463d      	mov	r5, r7
 800c7a8:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800c7aa:	592a      	ldr	r2, [r5, r4]
 800c7ac:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 800c7b0:	9206      	str	r2, [sp, #24]
 800c7b2:	0170      	lsls	r0, r6, #5
 800c7b4:	593a      	ldr	r2, [r7, r4]
 800c7b6:	931d      	str	r3, [sp, #116]	; 0x74
 800c7b8:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800c7bc:	462b      	mov	r3, r5
 800c7be:	921c      	str	r2, [sp, #112]	; 0x70
 800c7c0:	582a      	ldr	r2, [r5, r0]
 800c7c2:	9207      	str	r2, [sp, #28]
 800c7c4:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
 800c7c8:	583a      	ldr	r2, [r7, r0]
 800c7ca:	920a      	str	r2, [sp, #40]	; 0x28
 800c7cc:	f853 2031 	ldr.w	r2, [r3, r1, lsl #3]
 800c7d0:	921a      	str	r2, [sp, #104]	; 0x68
 800c7d2:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
 800c7d6:	f857 103e 	ldr.w	r1, [r7, lr, lsl #3]
 800c7da:	9120      	str	r1, [sp, #128]	; 0x80
 800c7dc:	4619      	mov	r1, r3
 800c7de:	921e      	str	r2, [sp, #120]	; 0x78
 800c7e0:	f853 203e 	ldr.w	r2, [r3, lr, lsl #3]
 800c7e4:	f851 3036 	ldr.w	r3, [r1, r6, lsl #3]
 800c7e8:	9633      	str	r6, [sp, #204]	; 0xcc
 800c7ea:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c7ee:	9208      	str	r2, [sp, #32]
 800c7f0:	9305      	str	r3, [sp, #20]
 800c7f2:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 800c7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f8:	e9dd 6831 	ldrd	r6, r8, [sp, #196]	; 0xc4
 800c7fc:	46b2      	mov	sl, r6
 800c7fe:	46c3      	mov	fp, r8
 800c800:	e002      	b.n	800c808 <arm_radix8_butterfly_f32+0x4b0>
 800c802:	bf00      	nop
 800c804:	3f3504f3 	.word	0x3f3504f3
 800c808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c80a:	9f00      	ldr	r7, [sp, #0]
 800c80c:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800c810:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800c814:	4631      	mov	r1, r6
 800c816:	4628      	mov	r0, r5
 800c818:	f7f3 fcf8 	bl	800020c <__addsf3>
 800c81c:	4631      	mov	r1, r6
 800c81e:	4604      	mov	r4, r0
 800c820:	4628      	mov	r0, r5
 800c822:	f7f3 fcf1 	bl	8000208 <__aeabi_fsub>
 800c826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c828:	f857 600b 	ldr.w	r6, [r7, fp]
 800c82c:	9700      	str	r7, [sp, #0]
 800c82e:	f852 700b 	ldr.w	r7, [r2, fp]
 800c832:	900f      	str	r0, [sp, #60]	; 0x3c
 800c834:	4639      	mov	r1, r7
 800c836:	4630      	mov	r0, r6
 800c838:	f7f3 fce8 	bl	800020c <__addsf3>
 800c83c:	4639      	mov	r1, r7
 800c83e:	4605      	mov	r5, r0
 800c840:	4630      	mov	r0, r6
 800c842:	f7f3 fce1 	bl	8000208 <__aeabi_fsub>
 800c846:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c848:	9010      	str	r0, [sp, #64]	; 0x40
 800c84a:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800c84e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c850:	f852 803a 	ldr.w	r8, [r2, sl, lsl #3]
 800c854:	4630      	mov	r0, r6
 800c856:	4641      	mov	r1, r8
 800c858:	f7f3 fcd8 	bl	800020c <__addsf3>
 800c85c:	4641      	mov	r1, r8
 800c85e:	4607      	mov	r7, r0
 800c860:	4630      	mov	r0, r6
 800c862:	f7f3 fcd1 	bl	8000208 <__aeabi_fsub>
 800c866:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c868:	9011      	str	r0, [sp, #68]	; 0x44
 800c86a:	f852 800b 	ldr.w	r8, [r2, fp]
 800c86e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c870:	f852 900b 	ldr.w	r9, [r2, fp]
 800c874:	4640      	mov	r0, r8
 800c876:	4649      	mov	r1, r9
 800c878:	f7f3 fcc8 	bl	800020c <__addsf3>
 800c87c:	4649      	mov	r1, r9
 800c87e:	4606      	mov	r6, r0
 800c880:	4640      	mov	r0, r8
 800c882:	f7f3 fcc1 	bl	8000208 <__aeabi_fsub>
 800c886:	4639      	mov	r1, r7
 800c888:	9012      	str	r0, [sp, #72]	; 0x48
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7f3 fcbc 	bl	8000208 <__aeabi_fsub>
 800c890:	4639      	mov	r1, r7
 800c892:	4680      	mov	r8, r0
 800c894:	4620      	mov	r0, r4
 800c896:	f7f3 fcb9 	bl	800020c <__addsf3>
 800c89a:	4631      	mov	r1, r6
 800c89c:	4604      	mov	r4, r0
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f7f3 fcb2 	bl	8000208 <__aeabi_fsub>
 800c8a4:	4631      	mov	r1, r6
 800c8a6:	9013      	str	r0, [sp, #76]	; 0x4c
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7f3 fcaf 	bl	800020c <__addsf3>
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	4601      	mov	r1, r0
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f7f3 fcaa 	bl	800020c <__addsf3>
 800c8b8:	9a00      	ldr	r2, [sp, #0]
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7f3 fca1 	bl	8000208 <__aeabi_fsub>
 800c8c6:	9f01      	ldr	r7, [sp, #4]
 800c8c8:	9002      	str	r0, [sp, #8]
 800c8ca:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800c8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8d0:	f853 503a 	ldr.w	r5, [r3, sl, lsl #3]
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f7f3 fc98 	bl	800020c <__addsf3>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	4606      	mov	r6, r0
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7f3 fc91 	bl	8000208 <__aeabi_fsub>
 800c8e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c8e8:	f857 500b 	ldr.w	r5, [r7, fp]
 800c8ec:	9701      	str	r7, [sp, #4]
 800c8ee:	f851 700b 	ldr.w	r7, [r1, fp]
 800c8f2:	9003      	str	r0, [sp, #12]
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f7f3 fc88 	bl	800020c <__addsf3>
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	4604      	mov	r4, r0
 800c900:	4628      	mov	r0, r5
 800c902:	f7f3 fc81 	bl	8000208 <__aeabi_fsub>
 800c906:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c908:	9014      	str	r0, [sp, #80]	; 0x50
 800c90a:	f851 503a 	ldr.w	r5, [r1, sl, lsl #3]
 800c90e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800c910:	f851 703a 	ldr.w	r7, [r1, sl, lsl #3]
 800c914:	4628      	mov	r0, r5
 800c916:	4639      	mov	r1, r7
 800c918:	f7f3 fc78 	bl	800020c <__addsf3>
 800c91c:	4639      	mov	r1, r7
 800c91e:	4681      	mov	r9, r0
 800c920:	4628      	mov	r0, r5
 800c922:	f7f3 fc71 	bl	8000208 <__aeabi_fsub>
 800c926:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c928:	9004      	str	r0, [sp, #16]
 800c92a:	f851 500b 	ldr.w	r5, [r1, fp]
 800c92e:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c930:	f851 300b 	ldr.w	r3, [r1, fp]
 800c934:	9315      	str	r3, [sp, #84]	; 0x54
 800c936:	4619      	mov	r1, r3
 800c938:	4628      	mov	r0, r5
 800c93a:	f7f3 fc67 	bl	800020c <__addsf3>
 800c93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c940:	4607      	mov	r7, r0
 800c942:	4619      	mov	r1, r3
 800c944:	4628      	mov	r0, r5
 800c946:	f7f3 fc5f 	bl	8000208 <__aeabi_fsub>
 800c94a:	4649      	mov	r1, r9
 800c94c:	9015      	str	r0, [sp, #84]	; 0x54
 800c94e:	4630      	mov	r0, r6
 800c950:	f7f3 fc5a 	bl	8000208 <__aeabi_fsub>
 800c954:	4649      	mov	r1, r9
 800c956:	4605      	mov	r5, r0
 800c958:	4630      	mov	r0, r6
 800c95a:	f7f3 fc57 	bl	800020c <__addsf3>
 800c95e:	4639      	mov	r1, r7
 800c960:	4606      	mov	r6, r0
 800c962:	4620      	mov	r0, r4
 800c964:	f7f3 fc50 	bl	8000208 <__aeabi_fsub>
 800c968:	4639      	mov	r1, r7
 800c96a:	4681      	mov	r9, r0
 800c96c:	4620      	mov	r0, r4
 800c96e:	f7f3 fc4d 	bl	800020c <__addsf3>
 800c972:	4649      	mov	r1, r9
 800c974:	4607      	mov	r7, r0
 800c976:	4640      	mov	r0, r8
 800c978:	f7f3 fc48 	bl	800020c <__addsf3>
 800c97c:	4649      	mov	r1, r9
 800c97e:	4604      	mov	r4, r0
 800c980:	4640      	mov	r0, r8
 800c982:	f7f3 fc41 	bl	8000208 <__aeabi_fsub>
 800c986:	4639      	mov	r1, r7
 800c988:	4680      	mov	r8, r0
 800c98a:	4630      	mov	r0, r6
 800c98c:	f7f3 fc3e 	bl	800020c <__addsf3>
 800c990:	9b01      	ldr	r3, [sp, #4]
 800c992:	4639      	mov	r1, r7
 800c994:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800c998:	4630      	mov	r0, r6
 800c99a:	f7f3 fc35 	bl	8000208 <__aeabi_fsub>
 800c99e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800c9a2:	4607      	mov	r7, r0
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f7f3 fc2e 	bl	8000208 <__aeabi_fsub>
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	4648      	mov	r0, r9
 800c9b2:	f7f3 fc2b 	bl	800020c <__addsf3>
 800c9b6:	9902      	ldr	r1, [sp, #8]
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	9807      	ldr	r0, [sp, #28]
 800c9bc:	f7f3 fd2e 	bl	800041c <__aeabi_fmul>
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	4681      	mov	r9, r0
 800c9c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9c6:	f7f3 fd29 	bl	800041c <__aeabi_fmul>
 800c9ca:	4601      	mov	r1, r0
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	f7f3 fc1d 	bl	800020c <__addsf3>
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800c9d6:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 800c9da:	9807      	ldr	r0, [sp, #28]
 800c9dc:	f7f3 fd1e 	bl	800041c <__aeabi_fmul>
 800c9e0:	9902      	ldr	r1, [sp, #8]
 800c9e2:	4607      	mov	r7, r0
 800c9e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9e6:	f7f3 fd19 	bl	800041c <__aeabi_fmul>
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	f7f3 fc0b 	bl	8000208 <__aeabi_fsub>
 800c9f2:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 800c9fa:	9806      	ldr	r0, [sp, #24]
 800c9fc:	f7f3 fd0e 	bl	800041c <__aeabi_fmul>
 800ca00:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800ca04:	4607      	mov	r7, r0
 800ca06:	4631      	mov	r1, r6
 800ca08:	4648      	mov	r0, r9
 800ca0a:	f7f3 fd07 	bl	800041c <__aeabi_fmul>
 800ca0e:	4601      	mov	r1, r0
 800ca10:	4638      	mov	r0, r7
 800ca12:	f7f3 fbfb 	bl	800020c <__addsf3>
 800ca16:	4631      	mov	r1, r6
 800ca18:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800ca1a:	f846 003a 	str.w	r0, [r6, sl, lsl #3]
 800ca1e:	9806      	ldr	r0, [sp, #24]
 800ca20:	f7f3 fcfc 	bl	800041c <__aeabi_fmul>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4606      	mov	r6, r0
 800ca28:	4648      	mov	r0, r9
 800ca2a:	f7f3 fcf7 	bl	800041c <__aeabi_fmul>
 800ca2e:	4601      	mov	r1, r0
 800ca30:	4630      	mov	r0, r6
 800ca32:	f7f3 fbe9 	bl	8000208 <__aeabi_fsub>
 800ca36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ca38:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ca3a:	4641      	mov	r1, r8
 800ca3c:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f7f3 fceb 	bl	800041c <__aeabi_fmul>
 800ca46:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4648      	mov	r0, r9
 800ca50:	f7f3 fce4 	bl	800041c <__aeabi_fmul>
 800ca54:	4601      	mov	r1, r0
 800ca56:	4620      	mov	r0, r4
 800ca58:	f7f3 fbd8 	bl	800020c <__addsf3>
 800ca5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800ca64:	4630      	mov	r0, r6
 800ca66:	f7f3 fcd9 	bl	800041c <__aeabi_fmul>
 800ca6a:	4641      	mov	r1, r8
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	4648      	mov	r0, r9
 800ca70:	f7f3 fcd4 	bl	800041c <__aeabi_fmul>
 800ca74:	4601      	mov	r1, r0
 800ca76:	4620      	mov	r0, r4
 800ca78:	f7f3 fbc6 	bl	8000208 <__aeabi_fsub>
 800ca7c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ca7e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800ca82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca84:	4639      	mov	r1, r7
 800ca86:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 800ca8a:	4648      	mov	r0, r9
 800ca8c:	f7f3 fbbc 	bl	8000208 <__aeabi_fsub>
 800ca90:	498c      	ldr	r1, [pc, #560]	; (800ccc4 <arm_radix8_butterfly_f32+0x96c>)
 800ca92:	f7f3 fcc3 	bl	800041c <__aeabi_fmul>
 800ca96:	4639      	mov	r1, r7
 800ca98:	4604      	mov	r4, r0
 800ca9a:	4648      	mov	r0, r9
 800ca9c:	f7f3 fbb6 	bl	800020c <__addsf3>
 800caa0:	4988      	ldr	r1, [pc, #544]	; (800ccc4 <arm_radix8_butterfly_f32+0x96c>)
 800caa2:	f7f3 fcbb 	bl	800041c <__aeabi_fmul>
 800caa6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800caaa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800caac:	4607      	mov	r7, r0
 800caae:	4641      	mov	r1, r8
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7f3 fba9 	bl	8000208 <__aeabi_fsub>
 800cab6:	4983      	ldr	r1, [pc, #524]	; (800ccc4 <arm_radix8_butterfly_f32+0x96c>)
 800cab8:	f7f3 fcb0 	bl	800041c <__aeabi_fmul>
 800cabc:	4641      	mov	r1, r8
 800cabe:	4681      	mov	r9, r0
 800cac0:	4630      	mov	r0, r6
 800cac2:	f7f3 fba3 	bl	800020c <__addsf3>
 800cac6:	497f      	ldr	r1, [pc, #508]	; (800ccc4 <arm_radix8_butterfly_f32+0x96c>)
 800cac8:	f7f3 fca8 	bl	800041c <__aeabi_fmul>
 800cacc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800cace:	4605      	mov	r5, r0
 800cad0:	4621      	mov	r1, r4
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7f3 fb98 	bl	8000208 <__aeabi_fsub>
 800cad8:	4621      	mov	r1, r4
 800cada:	9002      	str	r0, [sp, #8]
 800cadc:	4630      	mov	r0, r6
 800cade:	f7f3 fb95 	bl	800020c <__addsf3>
 800cae2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800cae6:	4604      	mov	r4, r0
 800cae8:	4639      	mov	r1, r7
 800caea:	4640      	mov	r0, r8
 800caec:	f7f3 fb8c 	bl	8000208 <__aeabi_fsub>
 800caf0:	4639      	mov	r1, r7
 800caf2:	4606      	mov	r6, r0
 800caf4:	4640      	mov	r0, r8
 800caf6:	f7f3 fb89 	bl	800020c <__addsf3>
 800cafa:	4649      	mov	r1, r9
 800cafc:	4680      	mov	r8, r0
 800cafe:	9803      	ldr	r0, [sp, #12]
 800cb00:	f7f3 fb82 	bl	8000208 <__aeabi_fsub>
 800cb04:	4649      	mov	r1, r9
 800cb06:	4607      	mov	r7, r0
 800cb08:	9803      	ldr	r0, [sp, #12]
 800cb0a:	f7f3 fb7f 	bl	800020c <__addsf3>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4681      	mov	r9, r0
 800cb12:	9804      	ldr	r0, [sp, #16]
 800cb14:	f7f3 fb78 	bl	8000208 <__aeabi_fsub>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	9003      	str	r0, [sp, #12]
 800cb1c:	9804      	ldr	r0, [sp, #16]
 800cb1e:	f7f3 fb75 	bl	800020c <__addsf3>
 800cb22:	4601      	mov	r1, r0
 800cb24:	9004      	str	r0, [sp, #16]
 800cb26:	4620      	mov	r0, r4
 800cb28:	f7f3 fb70 	bl	800020c <__addsf3>
 800cb2c:	9b04      	ldr	r3, [sp, #16]
 800cb2e:	4605      	mov	r5, r0
 800cb30:	4619      	mov	r1, r3
 800cb32:	4620      	mov	r0, r4
 800cb34:	f7f3 fb68 	bl	8000208 <__aeabi_fsub>
 800cb38:	9903      	ldr	r1, [sp, #12]
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	9802      	ldr	r0, [sp, #8]
 800cb3e:	f7f3 fb65 	bl	800020c <__addsf3>
 800cb42:	9903      	ldr	r1, [sp, #12]
 800cb44:	9004      	str	r0, [sp, #16]
 800cb46:	9802      	ldr	r0, [sp, #8]
 800cb48:	f7f3 fb5e 	bl	8000208 <__aeabi_fsub>
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	9003      	str	r0, [sp, #12]
 800cb50:	4648      	mov	r0, r9
 800cb52:	f7f3 fb59 	bl	8000208 <__aeabi_fsub>
 800cb56:	4649      	mov	r1, r9
 800cb58:	9002      	str	r0, [sp, #8]
 800cb5a:	4640      	mov	r0, r8
 800cb5c:	f7f3 fb56 	bl	800020c <__addsf3>
 800cb60:	4631      	mov	r1, r6
 800cb62:	4681      	mov	r9, r0
 800cb64:	4638      	mov	r0, r7
 800cb66:	f7f3 fb4f 	bl	8000208 <__aeabi_fsub>
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f7f3 fb4c 	bl	800020c <__addsf3>
 800cb74:	4629      	mov	r1, r5
 800cb76:	4606      	mov	r6, r0
 800cb78:	9805      	ldr	r0, [sp, #20]
 800cb7a:	f7f3 fc4f 	bl	800041c <__aeabi_fmul>
 800cb7e:	9902      	ldr	r1, [sp, #8]
 800cb80:	4607      	mov	r7, r0
 800cb82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb84:	f7f3 fc4a 	bl	800041c <__aeabi_fmul>
 800cb88:	4601      	mov	r1, r0
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f7f3 fb3e 	bl	800020c <__addsf3>
 800cb90:	9a00      	ldr	r2, [sp, #0]
 800cb92:	9902      	ldr	r1, [sp, #8]
 800cb94:	f842 000b 	str.w	r0, [r2, fp]
 800cb98:	9805      	ldr	r0, [sp, #20]
 800cb9a:	f7f3 fc3f 	bl	800041c <__aeabi_fmul>
 800cb9e:	4629      	mov	r1, r5
 800cba0:	4607      	mov	r7, r0
 800cba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cba4:	f7f3 fc3a 	bl	800041c <__aeabi_fmul>
 800cba8:	4601      	mov	r1, r0
 800cbaa:	4638      	mov	r0, r7
 800cbac:	f7f3 fb2c 	bl	8000208 <__aeabi_fsub>
 800cbb0:	9b01      	ldr	r3, [sp, #4]
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	f843 000b 	str.w	r0, [r3, fp]
 800cbb8:	9808      	ldr	r0, [sp, #32]
 800cbba:	f7f3 fc2f 	bl	800041c <__aeabi_fmul>
 800cbbe:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	4649      	mov	r1, r9
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	f7f3 fc29 	bl	800041c <__aeabi_fmul>
 800cbca:	4601      	mov	r1, r0
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f7f3 fb1d 	bl	800020c <__addsf3>
 800cbd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	f843 000b 	str.w	r0, [r3, fp]
 800cbda:	9808      	ldr	r0, [sp, #32]
 800cbdc:	f7f3 fc1e 	bl	800041c <__aeabi_fmul>
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f7f3 fc19 	bl	800041c <__aeabi_fmul>
 800cbea:	4601      	mov	r1, r0
 800cbec:	4628      	mov	r0, r5
 800cbee:	f7f3 fb0b 	bl	8000208 <__aeabi_fsub>
 800cbf2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cbf4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800cbf8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f845 000b 	str.w	r0, [r5, fp]
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7f3 fc0b 	bl	800041c <__aeabi_fmul>
 800cc06:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800cc08:	4604      	mov	r4, r0
 800cc0a:	4641      	mov	r1, r8
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f7f3 fc05 	bl	800041c <__aeabi_fmul>
 800cc12:	4601      	mov	r1, r0
 800cc14:	4620      	mov	r0, r4
 800cc16:	f7f3 faf9 	bl	800020c <__addsf3>
 800cc1a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	f843 000b 	str.w	r0, [r3, fp]
 800cc22:	4638      	mov	r0, r7
 800cc24:	f7f3 fbfa 	bl	800041c <__aeabi_fmul>
 800cc28:	4649      	mov	r1, r9
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	f7f3 fbf5 	bl	800041c <__aeabi_fmul>
 800cc32:	4601      	mov	r1, r0
 800cc34:	4620      	mov	r0, r4
 800cc36:	f7f3 fae7 	bl	8000208 <__aeabi_fsub>
 800cc3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cc3c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cc40:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800cc42:	f843 000b 	str.w	r0, [r3, fp]
 800cc46:	4641      	mov	r1, r8
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7f3 fbe7 	bl	800041c <__aeabi_fmul>
 800cc4e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800cc50:	4604      	mov	r4, r0
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7f3 fbe1 	bl	800041c <__aeabi_fmul>
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f7f3 fad5 	bl	800020c <__addsf3>
 800cc62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc64:	4631      	mov	r1, r6
 800cc66:	f843 000b 	str.w	r0, [r3, fp]
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	f7f3 fbd6 	bl	800041c <__aeabi_fmul>
 800cc70:	4641      	mov	r1, r8
 800cc72:	4604      	mov	r4, r0
 800cc74:	4628      	mov	r0, r5
 800cc76:	f7f3 fbd1 	bl	800041c <__aeabi_fmul>
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f7f3 fac3 	bl	8000208 <__aeabi_fsub>
 800cc82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc84:	449a      	add	sl, r3
 800cc86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cc88:	f843 000b 	str.w	r0, [r3, fp]
 800cc8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc8e:	449b      	add	fp, r3
 800cc90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cc92:	4553      	cmp	r3, sl
 800cc94:	f63f adb8 	bhi.w	800c808 <arm_radix8_butterfly_f32+0x4b0>
 800cc98:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800cc9a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800cc9c:	3208      	adds	r2, #8
 800cc9e:	9232      	str	r2, [sp, #200]	; 0xc8
 800cca0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800cca2:	3301      	adds	r3, #1
 800cca4:	429a      	cmp	r2, r3
 800cca6:	9331      	str	r3, [sp, #196]	; 0xc4
 800cca8:	f47f ad6e 	bne.w	800c788 <arm_radix8_butterfly_f32+0x430>
 800ccac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800ccae:	9216      	str	r2, [sp, #88]	; 0x58
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	9336      	str	r3, [sp, #216]	; 0xd8
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	f7ff bb5d 	b.w	800c376 <arm_radix8_butterfly_f32+0x1e>
 800ccbc:	b039      	add	sp, #228	; 0xe4
 800ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc2:	bf00      	nop
 800ccc4:	3f3504f3 	.word	0x3f3504f3

0800ccc8 <__errno>:
 800ccc8:	4b01      	ldr	r3, [pc, #4]	; (800ccd0 <__errno+0x8>)
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	200000b8 	.word	0x200000b8

0800ccd4 <__libc_init_array>:
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	4d0d      	ldr	r5, [pc, #52]	; (800cd0c <__libc_init_array+0x38>)
 800ccd8:	4c0d      	ldr	r4, [pc, #52]	; (800cd10 <__libc_init_array+0x3c>)
 800ccda:	1b64      	subs	r4, r4, r5
 800ccdc:	10a4      	asrs	r4, r4, #2
 800ccde:	2600      	movs	r6, #0
 800cce0:	42a6      	cmp	r6, r4
 800cce2:	d109      	bne.n	800ccf8 <__libc_init_array+0x24>
 800cce4:	4d0b      	ldr	r5, [pc, #44]	; (800cd14 <__libc_init_array+0x40>)
 800cce6:	4c0c      	ldr	r4, [pc, #48]	; (800cd18 <__libc_init_array+0x44>)
 800cce8:	f000 f966 	bl	800cfb8 <_init>
 800ccec:	1b64      	subs	r4, r4, r5
 800ccee:	10a4      	asrs	r4, r4, #2
 800ccf0:	2600      	movs	r6, #0
 800ccf2:	42a6      	cmp	r6, r4
 800ccf4:	d105      	bne.n	800cd02 <__libc_init_array+0x2e>
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}
 800ccf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccfc:	4798      	blx	r3
 800ccfe:	3601      	adds	r6, #1
 800cd00:	e7ee      	b.n	800cce0 <__libc_init_array+0xc>
 800cd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd06:	4798      	blx	r3
 800cd08:	3601      	adds	r6, #1
 800cd0a:	e7f2      	b.n	800ccf2 <__libc_init_array+0x1e>
 800cd0c:	08020130 	.word	0x08020130
 800cd10:	08020130 	.word	0x08020130
 800cd14:	08020130 	.word	0x08020130
 800cd18:	08020134 	.word	0x08020134

0800cd1c <malloc>:
 800cd1c:	4b02      	ldr	r3, [pc, #8]	; (800cd28 <malloc+0xc>)
 800cd1e:	4601      	mov	r1, r0
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	f000 b88d 	b.w	800ce40 <_malloc_r>
 800cd26:	bf00      	nop
 800cd28:	200000b8 	.word	0x200000b8

0800cd2c <free>:
 800cd2c:	4b02      	ldr	r3, [pc, #8]	; (800cd38 <free+0xc>)
 800cd2e:	4601      	mov	r1, r0
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f000 b819 	b.w	800cd68 <_free_r>
 800cd36:	bf00      	nop
 800cd38:	200000b8 	.word	0x200000b8

0800cd3c <memcpy>:
 800cd3c:	440a      	add	r2, r1
 800cd3e:	4291      	cmp	r1, r2
 800cd40:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd44:	d100      	bne.n	800cd48 <memcpy+0xc>
 800cd46:	4770      	bx	lr
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd52:	4291      	cmp	r1, r2
 800cd54:	d1f9      	bne.n	800cd4a <memcpy+0xe>
 800cd56:	bd10      	pop	{r4, pc}

0800cd58 <memset>:
 800cd58:	4402      	add	r2, r0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d100      	bne.n	800cd62 <memset+0xa>
 800cd60:	4770      	bx	lr
 800cd62:	f803 1b01 	strb.w	r1, [r3], #1
 800cd66:	e7f9      	b.n	800cd5c <memset+0x4>

0800cd68 <_free_r>:
 800cd68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd6a:	2900      	cmp	r1, #0
 800cd6c:	d044      	beq.n	800cdf8 <_free_r+0x90>
 800cd6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd72:	9001      	str	r0, [sp, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f1a1 0404 	sub.w	r4, r1, #4
 800cd7a:	bfb8      	it	lt
 800cd7c:	18e4      	addlt	r4, r4, r3
 800cd7e:	f000 f8e3 	bl	800cf48 <__malloc_lock>
 800cd82:	4a1e      	ldr	r2, [pc, #120]	; (800cdfc <_free_r+0x94>)
 800cd84:	9801      	ldr	r0, [sp, #4]
 800cd86:	6813      	ldr	r3, [r2, #0]
 800cd88:	b933      	cbnz	r3, 800cd98 <_free_r+0x30>
 800cd8a:	6063      	str	r3, [r4, #4]
 800cd8c:	6014      	str	r4, [r2, #0]
 800cd8e:	b003      	add	sp, #12
 800cd90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd94:	f000 b8de 	b.w	800cf54 <__malloc_unlock>
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d908      	bls.n	800cdae <_free_r+0x46>
 800cd9c:	6825      	ldr	r5, [r4, #0]
 800cd9e:	1961      	adds	r1, r4, r5
 800cda0:	428b      	cmp	r3, r1
 800cda2:	bf01      	itttt	eq
 800cda4:	6819      	ldreq	r1, [r3, #0]
 800cda6:	685b      	ldreq	r3, [r3, #4]
 800cda8:	1949      	addeq	r1, r1, r5
 800cdaa:	6021      	streq	r1, [r4, #0]
 800cdac:	e7ed      	b.n	800cd8a <_free_r+0x22>
 800cdae:	461a      	mov	r2, r3
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	b10b      	cbz	r3, 800cdb8 <_free_r+0x50>
 800cdb4:	42a3      	cmp	r3, r4
 800cdb6:	d9fa      	bls.n	800cdae <_free_r+0x46>
 800cdb8:	6811      	ldr	r1, [r2, #0]
 800cdba:	1855      	adds	r5, r2, r1
 800cdbc:	42a5      	cmp	r5, r4
 800cdbe:	d10b      	bne.n	800cdd8 <_free_r+0x70>
 800cdc0:	6824      	ldr	r4, [r4, #0]
 800cdc2:	4421      	add	r1, r4
 800cdc4:	1854      	adds	r4, r2, r1
 800cdc6:	42a3      	cmp	r3, r4
 800cdc8:	6011      	str	r1, [r2, #0]
 800cdca:	d1e0      	bne.n	800cd8e <_free_r+0x26>
 800cdcc:	681c      	ldr	r4, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	6053      	str	r3, [r2, #4]
 800cdd2:	4421      	add	r1, r4
 800cdd4:	6011      	str	r1, [r2, #0]
 800cdd6:	e7da      	b.n	800cd8e <_free_r+0x26>
 800cdd8:	d902      	bls.n	800cde0 <_free_r+0x78>
 800cdda:	230c      	movs	r3, #12
 800cddc:	6003      	str	r3, [r0, #0]
 800cdde:	e7d6      	b.n	800cd8e <_free_r+0x26>
 800cde0:	6825      	ldr	r5, [r4, #0]
 800cde2:	1961      	adds	r1, r4, r5
 800cde4:	428b      	cmp	r3, r1
 800cde6:	bf04      	itt	eq
 800cde8:	6819      	ldreq	r1, [r3, #0]
 800cdea:	685b      	ldreq	r3, [r3, #4]
 800cdec:	6063      	str	r3, [r4, #4]
 800cdee:	bf04      	itt	eq
 800cdf0:	1949      	addeq	r1, r1, r5
 800cdf2:	6021      	streq	r1, [r4, #0]
 800cdf4:	6054      	str	r4, [r2, #4]
 800cdf6:	e7ca      	b.n	800cd8e <_free_r+0x26>
 800cdf8:	b003      	add	sp, #12
 800cdfa:	bd30      	pop	{r4, r5, pc}
 800cdfc:	20001690 	.word	0x20001690

0800ce00 <sbrk_aligned>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	4e0e      	ldr	r6, [pc, #56]	; (800ce3c <sbrk_aligned+0x3c>)
 800ce04:	460c      	mov	r4, r1
 800ce06:	6831      	ldr	r1, [r6, #0]
 800ce08:	4605      	mov	r5, r0
 800ce0a:	b911      	cbnz	r1, 800ce12 <sbrk_aligned+0x12>
 800ce0c:	f000 f88c 	bl	800cf28 <_sbrk_r>
 800ce10:	6030      	str	r0, [r6, #0]
 800ce12:	4621      	mov	r1, r4
 800ce14:	4628      	mov	r0, r5
 800ce16:	f000 f887 	bl	800cf28 <_sbrk_r>
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	d00a      	beq.n	800ce34 <sbrk_aligned+0x34>
 800ce1e:	1cc4      	adds	r4, r0, #3
 800ce20:	f024 0403 	bic.w	r4, r4, #3
 800ce24:	42a0      	cmp	r0, r4
 800ce26:	d007      	beq.n	800ce38 <sbrk_aligned+0x38>
 800ce28:	1a21      	subs	r1, r4, r0
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f000 f87c 	bl	800cf28 <_sbrk_r>
 800ce30:	3001      	adds	r0, #1
 800ce32:	d101      	bne.n	800ce38 <sbrk_aligned+0x38>
 800ce34:	f04f 34ff 	mov.w	r4, #4294967295
 800ce38:	4620      	mov	r0, r4
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	20001694 	.word	0x20001694

0800ce40 <_malloc_r>:
 800ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce44:	1ccd      	adds	r5, r1, #3
 800ce46:	f025 0503 	bic.w	r5, r5, #3
 800ce4a:	3508      	adds	r5, #8
 800ce4c:	2d0c      	cmp	r5, #12
 800ce4e:	bf38      	it	cc
 800ce50:	250c      	movcc	r5, #12
 800ce52:	2d00      	cmp	r5, #0
 800ce54:	4607      	mov	r7, r0
 800ce56:	db01      	blt.n	800ce5c <_malloc_r+0x1c>
 800ce58:	42a9      	cmp	r1, r5
 800ce5a:	d905      	bls.n	800ce68 <_malloc_r+0x28>
 800ce5c:	230c      	movs	r3, #12
 800ce5e:	603b      	str	r3, [r7, #0]
 800ce60:	2600      	movs	r6, #0
 800ce62:	4630      	mov	r0, r6
 800ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce68:	4e2e      	ldr	r6, [pc, #184]	; (800cf24 <_malloc_r+0xe4>)
 800ce6a:	f000 f86d 	bl	800cf48 <__malloc_lock>
 800ce6e:	6833      	ldr	r3, [r6, #0]
 800ce70:	461c      	mov	r4, r3
 800ce72:	bb34      	cbnz	r4, 800cec2 <_malloc_r+0x82>
 800ce74:	4629      	mov	r1, r5
 800ce76:	4638      	mov	r0, r7
 800ce78:	f7ff ffc2 	bl	800ce00 <sbrk_aligned>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	4604      	mov	r4, r0
 800ce80:	d14d      	bne.n	800cf1e <_malloc_r+0xde>
 800ce82:	6834      	ldr	r4, [r6, #0]
 800ce84:	4626      	mov	r6, r4
 800ce86:	2e00      	cmp	r6, #0
 800ce88:	d140      	bne.n	800cf0c <_malloc_r+0xcc>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4638      	mov	r0, r7
 800ce90:	eb04 0803 	add.w	r8, r4, r3
 800ce94:	f000 f848 	bl	800cf28 <_sbrk_r>
 800ce98:	4580      	cmp	r8, r0
 800ce9a:	d13a      	bne.n	800cf12 <_malloc_r+0xd2>
 800ce9c:	6821      	ldr	r1, [r4, #0]
 800ce9e:	3503      	adds	r5, #3
 800cea0:	1a6d      	subs	r5, r5, r1
 800cea2:	f025 0503 	bic.w	r5, r5, #3
 800cea6:	3508      	adds	r5, #8
 800cea8:	2d0c      	cmp	r5, #12
 800ceaa:	bf38      	it	cc
 800ceac:	250c      	movcc	r5, #12
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4638      	mov	r0, r7
 800ceb2:	f7ff ffa5 	bl	800ce00 <sbrk_aligned>
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d02b      	beq.n	800cf12 <_malloc_r+0xd2>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	442b      	add	r3, r5
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	e00e      	b.n	800cee0 <_malloc_r+0xa0>
 800cec2:	6822      	ldr	r2, [r4, #0]
 800cec4:	1b52      	subs	r2, r2, r5
 800cec6:	d41e      	bmi.n	800cf06 <_malloc_r+0xc6>
 800cec8:	2a0b      	cmp	r2, #11
 800ceca:	d916      	bls.n	800cefa <_malloc_r+0xba>
 800cecc:	1961      	adds	r1, r4, r5
 800cece:	42a3      	cmp	r3, r4
 800ced0:	6025      	str	r5, [r4, #0]
 800ced2:	bf18      	it	ne
 800ced4:	6059      	strne	r1, [r3, #4]
 800ced6:	6863      	ldr	r3, [r4, #4]
 800ced8:	bf08      	it	eq
 800ceda:	6031      	streq	r1, [r6, #0]
 800cedc:	5162      	str	r2, [r4, r5]
 800cede:	604b      	str	r3, [r1, #4]
 800cee0:	4638      	mov	r0, r7
 800cee2:	f104 060b 	add.w	r6, r4, #11
 800cee6:	f000 f835 	bl	800cf54 <__malloc_unlock>
 800ceea:	f026 0607 	bic.w	r6, r6, #7
 800ceee:	1d23      	adds	r3, r4, #4
 800cef0:	1af2      	subs	r2, r6, r3
 800cef2:	d0b6      	beq.n	800ce62 <_malloc_r+0x22>
 800cef4:	1b9b      	subs	r3, r3, r6
 800cef6:	50a3      	str	r3, [r4, r2]
 800cef8:	e7b3      	b.n	800ce62 <_malloc_r+0x22>
 800cefa:	6862      	ldr	r2, [r4, #4]
 800cefc:	42a3      	cmp	r3, r4
 800cefe:	bf0c      	ite	eq
 800cf00:	6032      	streq	r2, [r6, #0]
 800cf02:	605a      	strne	r2, [r3, #4]
 800cf04:	e7ec      	b.n	800cee0 <_malloc_r+0xa0>
 800cf06:	4623      	mov	r3, r4
 800cf08:	6864      	ldr	r4, [r4, #4]
 800cf0a:	e7b2      	b.n	800ce72 <_malloc_r+0x32>
 800cf0c:	4634      	mov	r4, r6
 800cf0e:	6876      	ldr	r6, [r6, #4]
 800cf10:	e7b9      	b.n	800ce86 <_malloc_r+0x46>
 800cf12:	230c      	movs	r3, #12
 800cf14:	603b      	str	r3, [r7, #0]
 800cf16:	4638      	mov	r0, r7
 800cf18:	f000 f81c 	bl	800cf54 <__malloc_unlock>
 800cf1c:	e7a1      	b.n	800ce62 <_malloc_r+0x22>
 800cf1e:	6025      	str	r5, [r4, #0]
 800cf20:	e7de      	b.n	800cee0 <_malloc_r+0xa0>
 800cf22:	bf00      	nop
 800cf24:	20001690 	.word	0x20001690

0800cf28 <_sbrk_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4d06      	ldr	r5, [pc, #24]	; (800cf44 <_sbrk_r+0x1c>)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4604      	mov	r4, r0
 800cf30:	4608      	mov	r0, r1
 800cf32:	602b      	str	r3, [r5, #0]
 800cf34:	f7f3 fc62 	bl	80007fc <_sbrk>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_sbrk_r+0x1a>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_sbrk_r+0x1a>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	20001698 	.word	0x20001698

0800cf48 <__malloc_lock>:
 800cf48:	4801      	ldr	r0, [pc, #4]	; (800cf50 <__malloc_lock+0x8>)
 800cf4a:	f000 b809 	b.w	800cf60 <__retarget_lock_acquire_recursive>
 800cf4e:	bf00      	nop
 800cf50:	2000169c 	.word	0x2000169c

0800cf54 <__malloc_unlock>:
 800cf54:	4801      	ldr	r0, [pc, #4]	; (800cf5c <__malloc_unlock+0x8>)
 800cf56:	f000 b804 	b.w	800cf62 <__retarget_lock_release_recursive>
 800cf5a:	bf00      	nop
 800cf5c:	2000169c 	.word	0x2000169c

0800cf60 <__retarget_lock_acquire_recursive>:
 800cf60:	4770      	bx	lr

0800cf62 <__retarget_lock_release_recursive>:
 800cf62:	4770      	bx	lr

0800cf64 <sqrtf>:
 800cf64:	b508      	push	{r3, lr}
 800cf66:	ed2d 8b02 	vpush	{d8}
 800cf6a:	ee08 0a10 	vmov	s16, r0
 800cf6e:	f000 f81b 	bl	800cfa8 <__ieee754_sqrtf>
 800cf72:	eeb4 8a48 	vcmp.f32	s16, s16
 800cf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7a:	ee07 0a90 	vmov	s15, r0
 800cf7e:	d60c      	bvs.n	800cf9a <sqrtf+0x36>
 800cf80:	eddf 8a08 	vldr	s17, [pc, #32]	; 800cfa4 <sqrtf+0x40>
 800cf84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8c:	d505      	bpl.n	800cf9a <sqrtf+0x36>
 800cf8e:	f7ff fe9b 	bl	800ccc8 <__errno>
 800cf92:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800cf96:	2321      	movs	r3, #33	; 0x21
 800cf98:	6003      	str	r3, [r0, #0]
 800cf9a:	ecbd 8b02 	vpop	{d8}
 800cf9e:	ee17 0a90 	vmov	r0, s15
 800cfa2:	bd08      	pop	{r3, pc}
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <__ieee754_sqrtf>:
 800cfa8:	ee07 0a90 	vmov	s15, r0
 800cfac:	eef1 7ae7 	vsqrt.f32	s15, s15
 800cfb0:	ee17 0a90 	vmov	r0, s15
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <_init>:
 800cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfba:	bf00      	nop
 800cfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfbe:	bc08      	pop	{r3}
 800cfc0:	469e      	mov	lr, r3
 800cfc2:	4770      	bx	lr

0800cfc4 <_fini>:
 800cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc6:	bf00      	nop
 800cfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfca:	bc08      	pop	{r3}
 800cfcc:	469e      	mov	lr, r3
 800cfce:	4770      	bx	lr
